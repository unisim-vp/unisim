/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
 */


// CBA
op cba(0x18[8]:0x17[8])

cba.getCycles = { return 2; }

cba.disasm = {
	sink << "CBA";
}

cba.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub8(result, carry_out, overflow, cpu->getRegA(), cpu->getRegB(), carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}


//  CMPab  IMM
op cmp_ab_imm(0b1[1]:b[1]:0x01[6]:opr8i[8])

cmp_ab_imm.getCycles = { return 1; }

cmp_ab_imm.disasm = {
	if (b==0) {
		sink << "CMPA #0x";
	} else {
		sink << "CMPB #0x";
	}
	sink << std::hex << opr8i;
}

cmp_ab_imm.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	uint8_t regVal;
	
	carry_in = 0;
	if (b==0) {
		regVal = cpu->getRegA();
	} else {
		regVal = cpu->getRegB();
	}
	
	Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// CMPab  DIR
op cmp_ab_dir(0b1[1]:b[1]:0x11[6]:opr8a[8])

cmp_ab_dir.getCycles = { return 3; }

cmp_ab_dir.disasm = {
	if (b==0) {
		sink << "CMPA 0x";
	} else {
		sink << "CMPB 0x";
	}
	sink << std::hex << opr8a;
}

cmp_ab_dir.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	uint8_t regVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);	
	uint8_t opr8aVal = cpu->memRead8(addr);
	
	carry_in = 0;
	if (b==0) {
		regVal = cpu->getRegA();
	} else {
		regVal = cpu->getRegB();
	}
	
	Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// CMPab  EXT
op cmp_ab_ext(0b1[1]:b[1]:0x31[6]:opr16a[8])

cmp_ab_ext.getCycles = { return 3; }

cmp_ab_ext.disasm = {
	if (b==0) {
		sink << "CMPA 0x";
	} else {
		sink << "CMPB 0x";
	}
	sink << std::hex << opr16a;
}

cmp_ab_ext.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	uint8_t regVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		
	uint8_t opr16aVal = cpu->memRead8(addr);
	
	carry_in = 0;
	if (b==0) {
		regVal = cpu->getRegA();
	} else {
		regVal = cpu->getRegB();
	}
	
	Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// CMPab  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] 
op cmp_ab_idx(0b1[1]:b[1]:0x21[6]:> <:*xb[XB])

cmp_ab_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }

cmp_ab_idx.disasm = {
	if (b==0) {
		sink << "CMPA ";
	} else {
		sink << "CMPB ";
	}
	xb->disasm(sink);
}

cmp_ab_idx.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	uint8_t regVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t xbVal = cpu->memRead8(addr);
	
	carry_in = 0;
	if (b==0) {
		regVal = cpu->getRegA();
	} else {
		regVal = cpu->getRegB();
	}
	
	Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// CPdyxs  IMM
op cp_dyxs_imm(0x23[6]:dyxs[2]:> <:opr16i[16])

cp_dyxs_imm.getCycles = { return 2; }

cp_dyxs_imm.disasm = {
	switch (dyxs) {
		case 0: sink << "CPD #0x"; break;
		case 1: sink << "CPY #0x"; break;
		case 2: sink << "CPX #0x"; break;
		case 3: sink << "CPS #0x";  
	}
	sink << std::hex << opr16i;
}

cp_dyxs_imm.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result, regVal;
	
	carry_in = 0;
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}

	Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// CPdyxs DIR
op cp_dyxs_dir(0x27[6]:dyxs[2]:opr8a[8])

cp_dyxs_dir.getCycles = { return 3; }

cp_dyxs_dir.disasm = {
	switch (dyxs) {
		case 0: sink << "CPD 0x"; break;
		case 1: sink << "CPY 0x"; break;
		case 2: sink << "CPX 0x"; break;
		case 3: sink << "CPS 0x";  
	}
	sink << std::hex << opr8a;
}

cp_dyxs_dir.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result, regVal;
	uint16_t opr8aVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);	
	opr8aVal = cpu->memRead16(addr);
	
	carry_in = 0;
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// CPdyxs EXT
op cp_dyxs_ext(0x2F[6]:dyxs[2]:> <:opr16a[16])

cp_dyxs_ext.getCycles = { return 3; }

cp_dyxs_ext.disasm = {
	switch (dyxs) {
		case 0: sink << "CPD 0x"; break;
		case 1: sink << "CPY 0x"; break;
		case 2: sink << "CPX 0x"; break;
		case 3: sink << "CPS 0x";  
	}
	sink << std::hex << opr16a;
}

cp_dyxs_ext.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result, regVal;
	uint16_t opr16aVal = cpu->memRead16(opr16a);
	
	carry_in = 0;
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// CPdyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op cp_dyxs_idx(0x2B[6]:dyxs[2]:> <:*xb[XB])

cp_dyxs_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }

cp_dyxs_idx.disasm = {
	switch (dyxs) {
		case 0: sink << "CPD "; break;
		case 1: sink << "CPY "; break;
		case 2: sink << "CPX "; break;
		case 3: sink << "CPS ";  
	}
	xb->disasm(sink);
}

cp_dyxs_idx.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result, regVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t xbVal = cpu->memRead16(addr);
	
	carry_in = 0;
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

/* ****** Compare to memory with Borrow ********** */

// CPE_dyxs  IMM
op cpe_dyxs_imm(0x18[8]:0x23[6]:dyxs[2]:> <:opr16i[16])

cpe_dyxs_imm.getCycles = { return 3; }

cpe_dyxs_imm.disasm = {
	switch (dyxs) {
		case 0: sink << "CPED #0x"; break;
		case 1: sink << "CPEY #0x"; break;
		case 2: sink << "CPEX #0x"; break;
		case 3: sink << "CPES #0x";  
	}
	sink << std::hex << opr16i;
}

cpe_dyxs_imm.execute = {
	uint8_t carry_out, overflow, carry_in, zeroBit;
	uint16_t result, regVal;
	
	zeroBit = cpu->ccr->getZ(); 
	carry_in = cpu->ccr->getC();
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}

	Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// CPE_dyxs DIR
op cpe_dyxs_dir(0x18[8]:> <:0x27[6]:dyxs[2]:opr8a[8])

cpe_dyxs_dir.getCycles = { return 4; }

cpe_dyxs_dir.disasm = {
	switch (dyxs) {
		case 0: sink << "CPED 0x"; break;
		case 1: sink << "CPEY 0x"; break;
		case 2: sink << "CPEX 0x"; break;
		case 3: sink << "CPES 0x";  
	}
	sink << std::hex << opr8a;
}

cpe_dyxs_dir.execute = {
	uint8_t carry_out, overflow, carry_in, zeroBit;
	uint16_t result, regVal;
	uint16_t opr8aVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);	
	opr8aVal = cpu->memRead16(addr);
	
	zeroBit =  cpu->ccr->getZ();
	carry_in = cpu->ccr->getC();
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// CPE_dyxs EXT
op cpe_dyxs_ext(0x18[8]:0x2F[6]:dyxs[2]:> <:opr16a[16])

cpe_dyxs_ext.getCycles = { return 4; }

cpe_dyxs_ext.disasm = {
	switch (dyxs) {
		case 0: sink << "CPED 0x"; break;
		case 1: sink << "CPEY 0x"; break;
		case 2: sink << "CPEX 0x"; break;
		case 3: sink << "CPES 0x";  
	}
	sink << std::hex << opr16a;
}

cpe_dyxs_ext.execute = {
	uint8_t carry_out, overflow, carry_in, zeroBit;
	uint16_t result, regVal;
	uint16_t opr16aVal = cpu->memRead16(opr16a);
	
	zeroBit =  cpu->ccr->getZ();
	carry_in = cpu->ccr->getC();
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// CPE_dyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op cpe_dyxs_idx(0x18[8]:0x2B[6]:dyxs[2]:> <:*xb[XB])

cpe_dyxs_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

cpe_dyxs_idx.disasm = {
	switch (dyxs) {
		case 0: sink << "CPED "; break;
		case 1: sink << "CPEY "; break;
		case 2: sink << "CPEX "; break;
		case 3: sink << "CPES ";  
	}
	xb->disasm(sink);
}

cpe_dyxs_idx.execute = {
	uint8_t carry_out, overflow, carry_in, zeroBit;
	uint16_t result, regVal;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t xbVal = cpu->memRead16(addr);
	
	zeroBit =  cpu->ccr->getZ();
	carry_in = cpu->ccr->getC();
	switch (dyxs) {
		case 0: regVal = cpu->getRegD(); break;
		case 1: regVal = cpu->getRegY(); break;
		case 2: regVal = cpu->getRegX(); break;
		case 3: regVal = cpu->getRegSP();  
	}
	
	Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);
	
	if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}


/* ************ Test Instructions **************** */

// TST EXT
op tst_ext(0xF7[8]:> <:opr16a[16])

tst_ext.getCycles = { return 3; }

tst_ext.disasm = {
	sink << "TST 0x" << std::hex << opr16a;
}

tst_ext.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint8_t result;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);	
	uint8_t opr16aVal = cpu->memRead8(addr);
	carry_in = 0;
	
	Sub8(result, carry_out, overflow, opr16aVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// TST IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op tst_idx(0xE7[8]:> <:*xb[XB])

tst_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }

tst_idx.disasm = {
	sink << "TST ";
	xb->disasm(sink);
}

tst_idx.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint8_t result;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);	
	uint8_t xbVal = cpu->memRead8(addr);
	
	carry_in = 0;
	
	Sub8(result, carry_out, overflow, xbVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// TSTA or TSTB
op tst_ab(0b1[1]:b[1]:0x17[6])

tst_ab.getCycles = { return 1; }

tst_ab.disasm = {
	if (b==0) {
		sink << "TSTA ";
	} else {
		sink << "TSTB ";
	}
}

tst_ab.execute = {
	uint8_t result, carry_out, overflow, carry_in;
	uint8_t regVal;
	
	carry_in = 0;
	if (b==0) {
		regVal = cpu->getRegA();
	} else {
		regVal = cpu->getRegB();
	}
	
	Sub8(result, carry_out, overflow, regVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// TSTW EXT
op tstw_ext(0x18[8]:0xF7[8]:opr16a[16])

tstw_ext.getCycles = { return 4; }

tstw_ext.disasm = {
	sink << "TSTW 0x" << std::hex << opr16a;
}

tstw_ext.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);	
	uint16_t opr16aVal = cpu->memRead16(addr);
	
	carry_in = 0;
	
	Sub16(result, carry_out, overflow, opr16aVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

}

// TSTW IDX or IDX1 or IDX2 or [D, IDX] or [IDX2]
op tstw_idx(0x18[8]:0xE7[8]:> <:*xb[XB])

tstw_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

tstw_idx.disasm = {
	sink << "TSTW ";
	xb->disasm(sink);
}

tstw_idx.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result;
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);	
	uint16_t xbVal = cpu->memRead16(addr);
	
	carry_in = 0;
	
	Sub16(result, carry_out, overflow, xbVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// TSTX or TSTY
op tst_xy(0x18[8]:0b1[1]:b[1]:0x17[6])

tst_xy.getCycles = { return 2; }

tst_xy.disasm = {
	switch (b) {
		case 0: sink << "TSTX "; break;
		case 1: sink << "TSTY "; break;
	}
}

tst_xy.execute = {
	uint8_t carry_out, overflow, carry_in;
	uint16_t result, regVal;
	
	carry_in = 0;
	switch (b) {
		case 0: regVal = cpu->getRegY(); break;
		case 1: regVal = cpu->getRegY();; break;
	}
	
	Sub16(result, carry_out, overflow, regVal, 0, carry_in);
	
	cpu->ccr->clrC();
	cpu->ccr->clrV();
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}


/* ************ Minimum Instructions ************* */

// EMIND: MIN ((D), (M : M + 1)) ⇒ D

// opcode(EMIND)-> 0x18 0x1B
op emind(0x18[8]:0x1B[8]:> <:*xb[XB])

emind.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

emind.disasm = {
	
	sink << "EMIND ";
	xb->disasm(sink);
}

emind.execute = {
	 
	uint16_t dVal = cpu->getRegD();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t mVal = cpu->memRead16(addr);
	
	uint16_t min;
	if (dVal > mVal) { min == mVal; } else { min = dVal; }
	 
	uint16_t result = dVal - mVal;

	cpu->setRegD(min);
	 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x0000; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: D15 • !M15 • !R15 + !D15 • M15 • R15
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !D15 • M15 + M15 • R15 + R15 • !D15
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}

// EMINM: MIN ((D), (M : M + 1)) ⇒ M : M + 1

// opcode(EMINM)-> 0x18 0x1F
op eminm(0x18[8]:0x1F[8]:> <:*xb[XB])

eminm.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }

eminm.disasm = {

	sink << "EMINM ";
	xb->disasm(sink);
}

eminm.execute = {
	 
	uint16_t dVal = cpu->getRegD();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t mVal = cpu->memRead16(addr);
	
	uint16_t min;
	if (dVal > mVal) { min == mVal; } else { min = dVal; }
	 
	uint16_t result = dVal - mVal;

	cpu->memWrite16(addr, min);
	 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x0000; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: D15 • !M15 • !R15 + !D15 • M15 • R15
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !D15 • M15 + M15 • R15 + R15 • !D15
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}


// MINA: MIN ((A), (M)) ⇒ A

// opcode(MINA)-> 0x18 0x19 
op mina(0x18[8]:0x19[8]:> <:*xb[XB])

mina.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

mina.disasm = {

	sink << "MINA ";
	
	xb->disasm(sink);
}

mina.execute = {
	 
	uint8_t aVal = cpu->getRegA();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t mVal = cpu->memRead8(addr);
	
	uint8_t min;
	if (aVal > mVal) { min == mVal; } else { min = aVal; }
	 
	uint8_t result = aVal - mVal;

	cpu->setRegA(min);
	 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x00; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: A7 • !M7 • !R7 + !A7 • M7 • R7
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !A7 • M7 + M7 • R7 + R7 • !A7
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}

// MINM: MIN ((A), (M)) ⇒ M

// opcode(MINM)->0x18 0x1D
op minm(0x18[8]:0x1D[8]:> <:*xb[XB])

minm.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }

minm.disasm = {

	sink << "MINM ";
	
	xb->disasm(sink);
}

minm.execute = {
	 
	uint8_t aVal = cpu->getRegA();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t mVal = cpu->memRead8(addr);
	
	uint8_t min;
	if (aVal > mVal) { min == mVal; } else { min = aVal; }
	 
	uint8_t result = aVal - mVal;

	cpu->memWrite8(addr, min);
	 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x00; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: A7 • !M7 • !R7 + !A7 • M7 • R7
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !A7 • M7 + M7 • R7 + R7 • !A7
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}


/* ************ Maximum Instructions ************* */

// EMAND: MAX ((D), (M : M + 1)) ⇒ D

// opcode(EMAXD)-> 0x18 0x1A
op emaxd(0x18[8]:0x1A[8]:> <:*xb[XB])

emaxd.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

emaxd.disasm = {

	sink << "EMAXD ";	
	xb->disasm(sink);
}

emaxd.execute = {
	 
	uint16_t dVal = cpu->getRegD();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	
	uint16_t mVal = cpu->memRead16(addr);
	
	uint16_t max;
	if (mVal > dVal) { max == mVal; } else { max = dVal; }
	 
	uint16_t result = dVal - mVal;

	cpu->setRegD(max);
		 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x0000; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: D15 • !M15 • !R15 + !D15 • M15 • R15
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !D15 • M15 + M15 • R15 + R15 • !D15
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}

// EMANM: MAX ((D), (M : M + 1)) ⇒ M : M + 1

// opcode(EMAXM)-> 0x18 0x1E
op emaxm(0x18[8]:0x1E[8]:> <:*xb[XB])

emaxm.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }

emaxm.disasm = {

	sink << "EMAXM ";	
	xb->disasm(sink);
}

emaxm.execute = {
	 
	uint16_t dVal = cpu->getRegD();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	
	uint16_t mVal = cpu->memRead16(addr);
	
	uint16_t max;
	if (mVal > dVal) { max == mVal; } else { max = dVal; }
	 
	uint16_t result = dVal - mVal;

	cpu->memWrite16(addr, max);
		 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x0000; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: D15 • !M15 • !R15 + !D15 • M15 • R15
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !D15 • M15 + M15 • R15 + R15 • !D15
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}


// MAXA: MAX ((A), (M)) ⇒ A

// opcode(MAXA)-> 0x18 0x18 
op maxa(0x18[8]:0x18[8]:> <:*xb[XB])

maxa.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }

maxa.disasm = {

	sink << "MAXA ";	
	xb->disasm(sink);
}

maxa.execute = {
	 
	uint8_t aVal = cpu->getRegA();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t mVal = cpu->memRead8(addr);
	
	uint8_t max;
	if (mVal > aVal) { max == mVal; } else { max = aVal; }
	 
	uint8_t result = aVal - mVal;

	cpu->setRegA(max);
		 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x00; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: A7 • !M7 • !R7 + !A7 • M7 • R7
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !A7 • M7 + M7 • R7 + R7 • !A7
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}

// MAXM: MAx ((A), (M)) ⇒ M

// opcode(MAXM)->0x18 0x1C
op maxm(0x18[8]:0x1C[8]:> <:*xb[XB])

maxm.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }

maxm.disasm = {

	sink << "MAXM ";	
	xb->disasm(sink);
}

maxm.execute = {
	 
	uint8_t aVal = cpu->getRegA();
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t mVal = cpu->memRead8(addr);
	
	uint8_t max;
	if (mVal > aVal) { max == mVal; } else { max = aVal; }
	 
	uint8_t result = aVal - mVal;

	cpu->memWrite8(addr, max);
	 
	// N: Set if MSB of result is set; cleared otherwise
	if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	// Z: Set if result is 0x00; cleared otherwise
	if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
	 
	/* 
	 * V: A7 • !M7 • !R7 + !A7 • M7 • R7
	 * Set if a two’s complement overflow resulted from the operation; cleared
	 * otherwise
	 */
	if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	/*
	 * C: !A7 • M7 + M7 • R7 + R7 • !A7
	 * Set if the value of the content of memory is larger than the value of the
	 * accumulator; cleared otherwise
	 */
	if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
}

