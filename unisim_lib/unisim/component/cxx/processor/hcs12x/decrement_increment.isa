// -*- C++ -*-

// DEC EXT
op dec_ext(0x73[8]:opr16a[8])

dec_ext.getCycles = { return 4; }

dec_ext.disasm = {
	sink << "DEC 0x" << std::hex << opr16a;
}

dec_ext.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t opr16aVal = cpu->memRead8(addr);
	uint8_t result, carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub8(result, carry_out, overflow, opr16aVal, 1, carry_in);

	cpu->memWrite8(addr, result);
		
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// DEC IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op dec_idx(0x63[8]:> <:*xb[XB])

dec_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }

dec_idx.disasm = {
	sink << "DEC ";
	xb->disasm(sink);
}

dec_idx.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t val = cpu->memRead8(addr);

	uint8_t result, carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub8(result, carry_out, overflow, val, 1, carry_in);

	cpu->memWrite8(addr, result);
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// DECA  or DECB
op dec_ab(0b010[3]:b[1]:0x3[4])

dec_ab.getCycles = { return 1; }

dec_ab.disasm = {
	if (b == 0) {
		sink << "DECA";
	} else {
		sink << "DECB";
	}
}

dec_ab.execute = {
	
	uint8_t result, carry_out, overflow, carry_in;

	uint8_t val;
	if (b==0) {
		val = cpu->getRegA();
	} else {
		val = cpu->getRegB();
	}

	carry_in = 0;
	Sub8(result, carry_out, overflow, val, 1, carry_in);
	
	if (b==0) {
		cpu->setRegA(result);
	} else {
		cpu->setRegB(result);		
	}
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// DECW  EXT
op decw_ext(0x18[8]:0x73[8]:opr16a[16])

decw_ext.getCycles = { return 5; }

decw_ext.disasm = {
	sink << "DECW 0x" << std::hex << opr16a;
}

decw_ext.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t opr16aVal = cpu->memRead16(addr);
	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub16(result, carry_out, overflow, opr16aVal, 1, carry_in);

	cpu->memWrite16(addr, result);
		
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// DECW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op decw_idx(0x18[8]:0x63[8]:> <:*xb[XB])

decw_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 7, 7); }

decw_idx.disasm = {
	sink << "DECW ";
	xb->disasm(sink);
}

decw_idx.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t val = cpu->memRead16(addr);

	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub16(result, carry_out, overflow, val, 1, carry_in);

	cpu->memWrite16(addr, result);
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// DECX or DECY
op dec_xy(0x18[8]:0b010[3]:b[1]:0x3[4])

dec_xy.getCycles = { return 2; }

dec_xy.disasm = {
	if (b==0) {
		sink << "DECX";
	} else {
		sink << "DECY";
	}
}

dec_xy.execute = {

	uint16_t val;
	if (b==0) {
		val = cpu->getRegX();
	} else {
		val = cpu->getRegY();
	}

	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Sub16(result, carry_out, overflow, val, 1, carry_in);

	if (b==0) {
		cpu->setRegX(result);
	} else {
		cpu->setRegY(result);
	}
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// DES
op des(0x1B[8]:0x9F[8])

des.getCycles = { return 2; }

des.disasm = {
	sink << "DES";
}

des.execute = {
	cpu->setRegSP(cpu->getRegSP() - 1);
}

// DEX
op dex(0x09[8])

dex.getCycles = { return 1; }

dex.disasm = {
	sink << "DEX";
}

dex.execute = {
	uint16_t val = cpu->getRegX();
	val--;
	cpu->setRegX(val);
	if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();  
}

// DEY
op dey(0x03[8])

dey.getCycles = { return 1; }

dey.disasm = {
	sink << "DEY";
}

dey.execute = {
	uint16_t val = cpu->getRegY();
	val--;
	cpu->setRegY(val);
	if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();  
}

/* ********* Increment Instructions ****** */

// INC EXT
op inc_ext(0x72[8]:opr16a[8])

inc_ext.getCycles = { return 4; }

inc_ext.disasm = {
	sink << "INC 0x" << std::hex << opr16a;
}

inc_ext.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t opr16aVal = cpu->memRead8(addr);
	uint8_t result, carry_out, overflow, carry_in;
	
	carry_in = 0;
	Add8(result, carry_out, overflow, opr16aVal, 1, carry_in);

	cpu->memWrite8(addr, result);
		
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// INC IDX or IDX or IDX2 or [D,IDX] or [IDX2]
op inc_idx(0x62[8]:> <:*xb[XB])

inc_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }

inc_idx.disasm = {
	sink << "INC ";
	xb->disasm(sink);
}

inc_idx.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint8_t val = cpu->memRead8(addr);

	uint8_t result, carry_out, overflow, carry_in;
	
	carry_in = 0;
	Add8(result, carry_out, overflow, val, 1, carry_in);

	cpu->memWrite8(addr, result);
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// INCA  or INCB
op inc_ab(0b010[3]:b[1]:0x2[4])

inc_ab.getCycles = { return 1; }

inc_ab.disasm = {
	if (b == 0) {
		sink << "INCA";
	} else {
		sink << "INCB";
	}
}

inc_ab.execute = {
	
	uint8_t result, carry_out, overflow, carry_in;

	uint8_t val;
	if (b==0) {
		val = cpu->getRegA();
	} else {
		val = cpu->getRegB();
	}

	carry_in = 0;
	Add8(result, carry_out, overflow, val, 1, carry_in);
	
	if (b==0) {
		cpu->setRegA(result);
	} else {
		cpu->setRegB(result);		
	}
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// INCW EXT
op incw_ext(0x18[8]:0x72[8]:opr16a[16])

incw_ext.getCycles = { return 5; }

incw_ext.disasm = {
	sink << "INCW 0x" << std::hex << opr16a;
}

incw_ext.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t opr16aVal = cpu->memRead16(addr);
	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Add16(result, carry_out, overflow, opr16aVal, 1, carry_in);

	cpu->memWrite16(addr, result);
		
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// INCW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
op incw_idx(0x18[8]:0x62[8]:> <:*xb[XB])

incw_idx.getCycles = { return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }

incw_idx.disasm = {
	sink << "INCW ";
	xb->disasm(sink);
}

incw_idx.execute = {
	physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
	uint16_t val = cpu->memRead16(addr);

	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Add16(result, carry_out, overflow, val, 1, carry_in);

	cpu->memWrite16(addr, result);
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
}

// INX or INCY
op inc_xy(0x18[8]:0b010[3]:b[1]:0x2[4])

inc_xy.getCycles = { return 2; }

inc_xy.disasm = {
	if (b==0) {
		sink << "INCX";
	} else {
		sink << "INCY";
	}
}

inc_xy.execute = {

	uint16_t val;
	if (b==0) {
		val = cpu->getRegX();
	} else {
		val = cpu->getRegY();
	}

	uint16_t result;
	uint8_t carry_out, overflow, carry_in;
	
	carry_in = 0;
	Add16(result, carry_out, overflow, val, 1, carry_in);

	if (b==0) {
		cpu->setRegX(result);
	} else {
		cpu->setRegY(result);
	}
	
	if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	
	if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	
}

// INS
op ins(0x1B[8]:0x81[8])

ins.getCycles = { return 2; }

ins.disasm = {
	sink << "INS";
}

ins.execute = {
	cpu->setRegSP(cpu->getRegSP() + 1);
}

// INX
op inx(0x08[8])

inx.getCycles = { return 1; }

inx.disasm = {
	sink << "INX";
}

inx.execute = {
	uint16_t val = cpu->getRegX();
	val++;
	cpu->setRegX(val);
	if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();  
}

// INY
op iny(0x02[8])

iny.getCycles = { return 1; }

iny.disasm = {
	sink << "INY";
}

iny.execute = {
	uint16_t val = cpu->getRegY();
	val++;
	cpu->setRegY(val);
	if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();  
}

