#include "hcs12x.hh"
#include <cassert>
#include <ostream>
#include <cstring>
#line 54 "hcs12x.isa"

#include <unisim/component/cxx/processor/hcs12x/xb.hh>
#include <stdlib.h>

using unisim::component::cxx::processor::hcs12x::XB::XbModes;

#line 13 "hcs12x.cc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace hcs12x {
unsigned int const CodeType::maxsize;
std::ostream& operator << ( std::ostream& _sink, CodeType const& _ct ) {
	char const* xrepr = "0123456789abcdef";
	char const* sep = "";
	for( unsigned int idx = 0; idx < _ct.size; ++idx, sep = " " ) {
		uint32_t byte = _ct.str[idx];
		_sink << sep << xrepr[byte/16] << xrepr[byte%16];
	}
	return _sink;
}
Operation::Operation(CodeType const& _code, uint16_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

Operation::~Operation()
{
}

#line 83 "hcs12x.isa"
uint8_t
#line 39 "hcs12x.cc"
Operation::getCycles()
{
#line 83 "hcs12x.isa"
	{
		/*
		* if (indexed_addressing) then
		*   return XbModes::GetIDXCycles(xb->getXbMode(), <idx_cyles>, <idx1_cyles>, <idx2_cyles>, <idxd_ind_cyles>, <idx2_ind_cyles>);
		*
		*/
		return 0;
	}
#line 51 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 55 "hcs12x.cc"
Operation::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 59 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 62 "hcs12x.cc"
)
{
#line 78 "hcs12x.isa"
	{

		//	sink << "asm(\"NOP\");\n";
	}
#line 70 "hcs12x.cc"
}
#line 74 "hcs12x.isa"
void
#line 74 "hcs12x.cc"
Operation::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 78 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 81 "hcs12x.cc"
)
{
#line 74 "hcs12x.isa"
	{
		//	sink << "asm(\"NOP\");\n";
	}
#line 88 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 92 "hcs12x.cc"
Operation::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 96 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 99 "hcs12x.cc"
)
{
#line 68 "hcs12x.isa"
	{
		sink << "?";

		return "?";
	}
#line 108 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 112 "hcs12x.cc"
Operation::execute(
#line 62 "hcs12x.isa"
CPU *
#line 116 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 119 "hcs12x.cc"
)
{
#line 62 "hcs12x.isa"
	{
		printf("Unknown instruction\n");

		exit(-1);
	}
#line 128 "hcs12x.cc"
}
class OpCall_idx : public Operation
{
public:
	OpCall_idx(CodeType const& code, uint16_t addr);
	~OpCall_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 137 "hcs12x.cc"
	* xb;
	uint32_t page;
	virtual
#line 74 "hcs12x.isa"
	void
#line 143 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 147 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 150 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 155 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 159 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 162 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 167 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 172 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 176 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 179 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 218 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 222 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 225 "hcs12x.cc"
	);
private:
};

class OpTrap : public Operation
{
public:
	OpTrap(CodeType const& code, uint16_t addr);
	uint32_t trapnum;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 238 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 243 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 247 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 250 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 289 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 293 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 296 "hcs12x.cc"
	);
private:
};

class OpLdaab_imm : public Operation
{
public:
	OpLdaab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 310 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 315 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 319 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 322 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 361 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 365 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 368 "hcs12x.cc"
	);
private:
};

class OpLdaab_dir : public Operation
{
public:
	OpLdaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 382 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 387 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 391 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 394 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 433 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 437 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 440 "hcs12x.cc"
	);
private:
};

class OpLdaab_ext : public Operation
{
public:
	OpLdaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 454 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 459 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 463 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 466 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 505 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 509 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 512 "hcs12x.cc"
	);
private:
};

class OpLdaab_idx : public Operation
{
public:
	OpLdaab_idx(CodeType const& code, uint16_t addr);
	~OpLdaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 525 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 530 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 534 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 537 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 542 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 546 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 549 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 554 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 559 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 563 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 566 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 605 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 609 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 612 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_imm : public Operation
{
public:
	OpLd_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 626 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 631 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 635 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 638 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 677 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 681 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 684 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_dir : public Operation
{
public:
	OpLd_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 698 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 703 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 707 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 710 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 749 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 753 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 756 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_ext : public Operation
{
public:
	OpLd_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 770 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 775 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 779 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 782 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 821 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 825 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 828 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_idx : public Operation
{
public:
	OpLd_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpLd_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 841 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 846 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 850 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 853 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 858 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 862 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 865 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 870 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 875 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 879 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 882 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 921 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 925 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 928 "hcs12x.cc"
	);
private:
};

class OpLeay : public Operation
{
public:
	OpLeay(CodeType const& code, uint16_t addr);
	~OpLeay();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 940 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 945 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 950 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 954 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 957 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 996 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1000 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1003 "hcs12x.cc"
	);
private:
};

class OpLeax : public Operation
{
public:
	OpLeax(CodeType const& code, uint16_t addr);
	~OpLeax();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1015 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1020 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1025 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1029 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1032 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1071 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1075 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1078 "hcs12x.cc"
	);
private:
};

class OpLeas : public Operation
{
public:
	OpLeas(CodeType const& code, uint16_t addr);
	~OpLeas();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1090 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1095 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1100 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1104 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1107 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1146 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1150 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1153 "hcs12x.cc"
	);
private:
};

class OpStaab_dir : public Operation
{
public:
	OpStaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1167 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1172 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1176 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1179 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1218 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1222 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1225 "hcs12x.cc"
	);
private:
};

class OpStaab_ext : public Operation
{
public:
	OpStaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1239 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1244 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1248 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1251 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1290 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1294 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1297 "hcs12x.cc"
	);
private:
};

class OpStaab_idx : public Operation
{
public:
	OpStaab_idx(CodeType const& code, uint16_t addr);
	~OpStaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1310 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 1315 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 1319 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 1322 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 1327 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 1331 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 1334 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1339 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1344 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1348 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1351 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1390 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1394 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1397 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_dir : public Operation
{
public:
	OpSt_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1411 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1416 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1420 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1423 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1462 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1466 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1469 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_ext : public Operation
{
public:
	OpSt_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1483 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1488 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1492 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1495 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1534 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1538 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1541 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_idx : public Operation
{
public:
	OpSt_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpSt_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1554 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 1559 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 1563 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 1566 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 1571 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 1575 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 1578 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1583 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1588 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1592 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1595 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1634 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1638 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1641 "hcs12x.cc"
	);
private:
};

class OpGldaab_dir : public Operation
{
public:
	OpGldaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1655 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1660 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1664 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1667 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1706 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1710 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1713 "hcs12x.cc"
	);
private:
};

class OpGldaab_ext : public Operation
{
public:
	OpGldaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1727 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1732 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1736 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1739 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1778 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1782 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1785 "hcs12x.cc"
	);
private:
};

class OpGldaab_idx : public Operation
{
public:
	OpGldaab_idx(CodeType const& code, uint16_t addr);
	~OpGldaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1798 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 1803 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 1807 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 1810 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 1815 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 1819 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 1822 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1827 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1832 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1836 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1839 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1878 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1882 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1885 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_dir : public Operation
{
public:
	OpGld_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1899 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1904 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1908 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1911 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 1950 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 1954 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 1957 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_ext : public Operation
{
public:
	OpGld_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 1971 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 1976 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 1980 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 1983 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2022 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2026 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2029 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_idx : public Operation
{
public:
	OpGld_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpGld_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2042 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 2047 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 2051 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 2054 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 2059 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 2063 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 2066 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2071 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2076 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2080 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2083 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2122 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2126 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2129 "hcs12x.cc"
	);
private:
};

class OpGstaab_dir : public Operation
{
public:
	OpGstaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2143 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2148 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2152 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2155 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2194 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2198 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2201 "hcs12x.cc"
	);
private:
};

class OpGstaab_ext : public Operation
{
public:
	OpGstaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2215 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2220 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2224 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2227 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2266 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2270 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2273 "hcs12x.cc"
	);
private:
};

class OpGstaab_idx : public Operation
{
public:
	OpGstaab_idx(CodeType const& code, uint16_t addr);
	~OpGstaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2286 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 2291 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 2295 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 2298 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 2303 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 2307 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 2310 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2315 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2320 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2324 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2327 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2366 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2370 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2373 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_dir : public Operation
{
public:
	OpGst_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2387 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2392 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2396 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2399 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2438 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2442 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2445 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_ext : public Operation
{
public:
	OpGst_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2459 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2464 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2468 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2471 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2510 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2514 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2517 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_idx : public Operation
{
public:
	OpGst_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpGst_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2530 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 2535 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 2539 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 2542 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 2547 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 2551 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 2554 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2559 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2564 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2568 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2571 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2610 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2614 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2617 "hcs12x.cc"
	);
private:
};

class OpT_ab_ba : public Operation
{
public:
	OpT_ab_ba(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2630 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2635 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2639 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2642 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2681 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2685 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2688 "hcs12x.cc"
	);
private:
};

class OpExg_hcs12 : public Operation
{
public:
	OpExg_hcs12(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2702 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2707 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2711 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2714 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2753 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2757 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2760 "hcs12x.cc"
	);
private:
};

class OpTfr_hcs12 : public Operation
{
public:
	OpTfr_hcs12(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t hls;
	uint32_t lls;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2775 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2780 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2784 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2787 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2826 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2830 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2833 "hcs12x.cc"
	);
private:
};

class OpExg_hcs12x : public Operation
{
public:
	OpExg_hcs12x(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2847 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2852 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2856 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2859 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2898 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2902 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2905 "hcs12x.cc"
	);
private:
};

class OpTfr_hcs12x : public Operation
{
public:
	OpTfr_hcs12x(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2919 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2924 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 2928 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 2931 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 2970 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 2974 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 2977 "hcs12x.cc"
	);
private:
};

class OpMovb_0B : public Operation
{
public:
	OpMovb_0B(CodeType const& code, uint16_t addr);
	uint32_t ii;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 2991 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 2996 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3000 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3003 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3042 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3046 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3049 "hcs12x.cc"
	);
private:
};

class OpMovb_08 : public Operation
{
public:
	OpMovb_08(CodeType const& code, uint16_t addr);
	~OpMovb_08();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3061 "hcs12x.cc"
	* xb;
	uint32_t ii;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3067 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3072 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3076 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3079 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3118 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3122 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3125 "hcs12x.cc"
	);
private:
};

class OpMovb_0C : public Operation
{
public:
	OpMovb_0C(CodeType const& code, uint16_t addr);
	uint32_t opr16asrc;
	uint32_t opr16adst;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3139 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3144 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3148 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3151 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3190 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3194 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3197 "hcs12x.cc"
	);
private:
};

class OpMovb_09 : public Operation
{
public:
	OpMovb_09(CodeType const& code, uint16_t addr);
	~OpMovb_09();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3209 "hcs12x.cc"
	* xb;
	uint32_t opr16asrc;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3215 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3220 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3224 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3227 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3266 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3270 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3273 "hcs12x.cc"
	);
private:
};

class OpMovb_0D : public Operation
{
public:
	OpMovb_0D(CodeType const& code, uint16_t addr);
	~OpMovb_0D();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3285 "hcs12x.cc"
	* xb;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3291 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3296 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3300 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3303 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3342 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3346 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3349 "hcs12x.cc"
	);
private:
};

class OpMovb_0A : public Operation
{
public:
	OpMovb_0A(CodeType const& code, uint16_t addr);
	~OpMovb_0A();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3361 "hcs12x.cc"
	* xbsrc;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3365 "hcs12x.cc"
	* xbdst;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3370 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3375 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3379 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3382 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3421 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3425 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3428 "hcs12x.cc"
	);
private:
};

class OpMovw_03 : public Operation
{
public:
	OpMovw_03(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3442 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3447 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3451 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3454 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3493 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3497 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3500 "hcs12x.cc"
	);
private:
};

class OpMovw_04 : public Operation
{
public:
	OpMovw_04(CodeType const& code, uint16_t addr);
	uint32_t opr16asrc;
	uint32_t opr16adst;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3514 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3519 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3523 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3526 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3565 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3569 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3572 "hcs12x.cc"
	);
private:
};

class OpMovw_00 : public Operation
{
public:
	OpMovw_00(CodeType const& code, uint16_t addr);
	~OpMovw_00();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3584 "hcs12x.cc"
	* xb;
	uint32_t opr16i;
	virtual
#line 68 "hcs12x.isa"
	string
#line 3590 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3594 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3597 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3636 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3640 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3643 "hcs12x.cc"
	);
private:
};

class OpMovw_01 : public Operation
{
public:
	OpMovw_01(CodeType const& code, uint16_t addr);
	~OpMovw_01();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3655 "hcs12x.cc"
	* xb;
	uint32_t opr16asrc;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3661 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3666 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3670 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3673 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3712 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3716 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3719 "hcs12x.cc"
	);
private:
};

class OpMovw_05 : public Operation
{
public:
	OpMovw_05(CodeType const& code, uint16_t addr);
	~OpMovw_05();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3731 "hcs12x.cc"
	* xb;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3737 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3742 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3746 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3749 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3788 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3792 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3795 "hcs12x.cc"
	);
private:
};

class OpMovw_02 : public Operation
{
public:
	OpMovw_02(CodeType const& code, uint16_t addr);
	~OpMovw_02();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3807 "hcs12x.cc"
	* xbsrc;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3811 "hcs12x.cc"
	* xbdst;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3816 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3821 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3825 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3828 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3867 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3871 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3874 "hcs12x.cc"
	);
private:
};

class OpAba : public Operation
{
public:
	OpAba(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3886 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3891 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3895 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3898 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 3937 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 3941 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 3944 "hcs12x.cc"
	);
private:
};

class OpAbx : public Operation
{
public:
	OpAbx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 3956 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 3961 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 3965 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 3968 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4007 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4011 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4014 "hcs12x.cc"
	);
private:
};

class OpAby : public Operation
{
public:
	OpAby(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4026 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4031 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4035 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4038 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4077 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4081 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4084 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_imm : public Operation
{
public:
	OpAdc_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4098 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4103 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4107 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4110 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4149 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4153 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4156 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_dir : public Operation
{
public:
	OpAdc_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4170 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4175 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4179 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4182 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4221 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4225 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4228 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_ext : public Operation
{
public:
	OpAdc_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4242 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4247 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4251 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4293 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4297 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4300 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_idx : public Operation
{
public:
	OpAdc_ab_idx(CodeType const& code, uint16_t addr);
	~OpAdc_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4313 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4318 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4323 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4327 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4330 "hcs12x.cc"
	);
	virtual
#line 74 "hcs12x.isa"
	void
#line 4335 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 4339 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 4342 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 4347 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 4351 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 4354 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4393 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4397 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4400 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_imm : public Operation
{
public:
	OpAdd_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4414 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4419 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4423 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4426 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4465 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4469 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4472 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_dir : public Operation
{
public:
	OpAdd_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4486 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4491 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4495 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4498 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4537 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4541 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4544 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_ext : public Operation
{
public:
	OpAdd_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4558 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4563 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4567 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4570 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4609 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4613 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4616 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_idx : public Operation
{
public:
	OpAdd_ab_idx(CodeType const& code, uint16_t addr);
	~OpAdd_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4629 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 4634 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 4638 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 4641 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 4646 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 4650 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 4653 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4658 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4663 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4667 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4670 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4709 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4713 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4716 "hcs12x.cc"
	);
private:
};

class OpAded_imm : public Operation
{
public:
	OpAded_imm(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4729 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4734 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4738 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4741 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4780 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4784 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4787 "hcs12x.cc"
	);
private:
};

class OpAded_dir : public Operation
{
public:
	OpAded_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4800 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4805 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4809 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4812 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4851 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4855 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4858 "hcs12x.cc"
	);
private:
};

class OpAded_ext : public Operation
{
public:
	OpAded_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4871 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4876 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4880 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4883 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 4922 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 4926 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 4929 "hcs12x.cc"
	);
private:
};

class OpAded_idx : public Operation
{
public:
	OpAded_idx(CodeType const& code, uint16_t addr);
	~OpAded_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4941 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 4946 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 4950 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 4953 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 4958 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 4962 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 4965 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 4970 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 4975 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 4979 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 4982 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5021 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5025 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5028 "hcs12x.cc"
	);
private:
};

class OpAde_xy_imm : public Operation
{
public:
	OpAde_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5042 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5047 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5051 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5054 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5093 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5097 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5100 "hcs12x.cc"
	);
private:
};

class OpAde_xy_dir : public Operation
{
public:
	OpAde_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5114 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5119 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5123 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5126 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5165 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5169 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5172 "hcs12x.cc"
	);
private:
};

class OpAde_xy_ext : public Operation
{
public:
	OpAde_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5186 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5191 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5195 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5198 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5237 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5241 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5244 "hcs12x.cc"
	);
private:
};

class OpAde_xy_idx : public Operation
{
public:
	OpAde_xy_idx(CodeType const& code, uint16_t addr);
	~OpAde_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5257 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 5262 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 5266 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 5269 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 5274 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 5278 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 5281 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5286 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5291 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5295 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5298 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5337 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5341 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5344 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_imm : public Operation
{
public:
	OpAdd_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5358 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5363 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5367 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5370 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5409 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5413 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5416 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_dir : public Operation
{
public:
	OpAdd_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5430 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5435 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5439 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5442 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5481 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5485 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5488 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_ext : public Operation
{
public:
	OpAdd_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5502 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5507 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5511 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5514 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5553 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5557 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5560 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_idx : public Operation
{
public:
	OpAdd_xy_idx(CodeType const& code, uint16_t addr);
	~OpAdd_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5573 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 5578 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 5582 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 5585 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 5590 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 5594 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 5597 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5602 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5607 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5611 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5614 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5653 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5657 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5660 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_imm : public Operation
{
public:
	OpAdd_sub_d_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5674 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5679 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5683 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5686 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5725 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5729 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5732 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_dir : public Operation
{
public:
	OpAdd_sub_d_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5746 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5751 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5755 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5758 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5797 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5801 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5804 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_ext : public Operation
{
public:
	OpAdd_sub_d_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5818 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5823 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5827 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5830 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5869 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5873 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5876 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_idx : public Operation
{
public:
	OpAdd_sub_d_idx(CodeType const& code, uint16_t addr);
	~OpAdd_sub_d_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5889 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 5894 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 5898 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 5901 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 5906 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 5910 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 5913 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5918 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5923 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5927 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 5930 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 5969 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 5973 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 5976 "hcs12x.cc"
	);
private:
};

class OpSba : public Operation
{
public:
	OpSba(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 5988 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 5993 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 5997 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6000 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6039 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6043 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6046 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_imm : public Operation
{
public:
	OpSbc_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6060 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6065 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6069 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6072 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6111 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6115 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6118 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_dir : public Operation
{
public:
	OpSbc_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6132 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6137 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6141 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6144 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6183 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6187 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6190 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_ext : public Operation
{
public:
	OpSbc_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6204 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6209 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6213 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6216 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6255 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6259 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6262 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_idx : public Operation
{
public:
	OpSbc_ab_idx(CodeType const& code, uint16_t addr);
	~OpSbc_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6275 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 6280 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 6284 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 6287 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 6292 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 6296 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 6299 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6304 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6309 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6313 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6316 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6355 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6359 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6362 "hcs12x.cc"
	);
private:
};

class OpSbed_imm : public Operation
{
public:
	OpSbed_imm(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6375 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6380 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6384 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6387 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6426 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6430 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6433 "hcs12x.cc"
	);
private:
};

class OpSbed_dir : public Operation
{
public:
	OpSbed_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6446 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6451 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6455 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6458 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6497 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6501 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6504 "hcs12x.cc"
	);
private:
};

class OpSbed_ext : public Operation
{
public:
	OpSbed_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6517 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6522 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6526 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6529 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6568 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6572 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6575 "hcs12x.cc"
	);
private:
};

class OpSbed_idx : public Operation
{
public:
	OpSbed_idx(CodeType const& code, uint16_t addr);
	~OpSbed_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6587 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 6592 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 6596 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 6599 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 6604 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 6608 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 6611 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6616 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6621 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6625 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6628 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6667 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6671 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6674 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_imm : public Operation
{
public:
	OpSbe_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6688 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6693 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6697 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6700 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6739 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6743 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6746 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_dir : public Operation
{
public:
	OpSbe_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6760 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6765 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6769 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6772 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6811 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6815 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6818 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_ext : public Operation
{
public:
	OpSbe_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6832 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6837 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6841 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6844 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6883 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6887 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6890 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_idx : public Operation
{
public:
	OpSbe_xy_idx(CodeType const& code, uint16_t addr);
	~OpSbe_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6903 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 6908 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 6912 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 6915 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 6920 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 6924 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 6927 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 6932 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 6937 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 6941 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 6944 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 6983 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 6987 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 6990 "hcs12x.cc"
	);
private:
};

class OpSub_ab_imm : public Operation
{
public:
	OpSub_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7004 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7009 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7013 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7016 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7055 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7059 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7062 "hcs12x.cc"
	);
private:
};

class OpSub_ab_dir : public Operation
{
public:
	OpSub_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7076 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7081 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7085 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7088 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7127 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7131 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7134 "hcs12x.cc"
	);
private:
};

class OpSub_ab_ext : public Operation
{
public:
	OpSub_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7148 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7153 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7157 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7160 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7199 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7203 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7206 "hcs12x.cc"
	);
private:
};

class OpSub_ab_idx : public Operation
{
public:
	OpSub_ab_idx(CodeType const& code, uint16_t addr);
	~OpSub_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7219 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 7224 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 7228 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 7231 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 7236 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 7240 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 7243 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7248 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7253 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7257 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7260 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7299 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7303 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7306 "hcs12x.cc"
	);
private:
};

class OpSub_xy_imm : public Operation
{
public:
	OpSub_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7320 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7325 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7329 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7332 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7371 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7375 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7378 "hcs12x.cc"
	);
private:
};

class OpSub_xy_dir : public Operation
{
public:
	OpSub_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7392 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7397 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7401 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7404 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7443 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7447 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7450 "hcs12x.cc"
	);
private:
};

class OpSub_xy_ext : public Operation
{
public:
	OpSub_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7464 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7469 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7473 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7476 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7515 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7519 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7522 "hcs12x.cc"
	);
private:
};

class OpSub_xy_idx : public Operation
{
public:
	OpSub_xy_idx(CodeType const& code, uint16_t addr);
	~OpSub_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7535 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 7540 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 7544 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 7547 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 7552 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 7556 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 7559 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7564 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7569 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7573 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7576 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7615 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7619 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7622 "hcs12x.cc"
	);
private:
};

class OpDaa : public Operation
{
public:
	OpDaa(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7634 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7639 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7643 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7646 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7685 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7689 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7692 "hcs12x.cc"
	);
private:
};

class OpDec_ext : public Operation
{
public:
	OpDec_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7705 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7710 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7714 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7717 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7756 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7760 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7763 "hcs12x.cc"
	);
private:
};

class OpDec_idx : public Operation
{
public:
	OpDec_idx(CodeType const& code, uint16_t addr);
	~OpDec_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7775 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 7780 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 7784 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 7787 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 7792 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 7796 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 7799 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7804 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7809 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7813 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7816 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7855 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7859 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7862 "hcs12x.cc"
	);
private:
};

class OpDec_ab : public Operation
{
public:
	OpDec_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7875 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7880 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7884 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7887 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7926 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 7930 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 7933 "hcs12x.cc"
	);
private:
};

class OpDecw_ext : public Operation
{
public:
	OpDecw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 7946 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 7951 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 7955 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 7958 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 7997 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8001 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8004 "hcs12x.cc"
	);
private:
};

class OpDecw_idx : public Operation
{
public:
	OpDecw_idx(CodeType const& code, uint16_t addr);
	~OpDecw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8016 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 8021 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 8025 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 8028 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 8033 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 8037 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 8040 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8045 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8050 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8054 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8057 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8096 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8100 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8103 "hcs12x.cc"
	);
private:
};

class OpDec_xy : public Operation
{
public:
	OpDec_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8116 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8121 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8125 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8128 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8167 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8171 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8174 "hcs12x.cc"
	);
private:
};

class OpDes : public Operation
{
public:
	OpDes(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8186 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8191 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8195 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8198 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8237 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8241 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8244 "hcs12x.cc"
	);
private:
};

class OpDex : public Operation
{
public:
	OpDex(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8256 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8261 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8265 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8268 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8307 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8311 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8314 "hcs12x.cc"
	);
private:
};

class OpDey : public Operation
{
public:
	OpDey(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8326 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8331 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8335 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8338 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8377 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8381 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8384 "hcs12x.cc"
	);
private:
};

class OpInc_ext : public Operation
{
public:
	OpInc_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8397 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8402 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8406 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8409 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8448 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8452 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8455 "hcs12x.cc"
	);
private:
};

class OpInc_idx : public Operation
{
public:
	OpInc_idx(CodeType const& code, uint16_t addr);
	~OpInc_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8467 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 8472 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 8476 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 8479 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 8484 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 8488 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 8491 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8496 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8501 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8505 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8508 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8547 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8551 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8554 "hcs12x.cc"
	);
private:
};

class OpInc_ab : public Operation
{
public:
	OpInc_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8567 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8572 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8576 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8579 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8618 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8622 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8625 "hcs12x.cc"
	);
private:
};

class OpIncw_ext : public Operation
{
public:
	OpIncw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8638 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8643 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8647 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8650 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8689 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8693 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8696 "hcs12x.cc"
	);
private:
};

class OpIncw_idx : public Operation
{
public:
	OpIncw_idx(CodeType const& code, uint16_t addr);
	~OpIncw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8708 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 8713 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 8717 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 8720 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 8725 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 8729 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 8732 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8737 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8742 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8746 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8749 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8788 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8792 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8795 "hcs12x.cc"
	);
private:
};

class OpInc_xy : public Operation
{
public:
	OpInc_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8808 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8813 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8817 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8820 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8859 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8863 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8866 "hcs12x.cc"
	);
private:
};

class OpIns : public Operation
{
public:
	OpIns(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8878 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8883 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8887 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8890 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8929 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 8933 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 8936 "hcs12x.cc"
	);
private:
};

class OpInx : public Operation
{
public:
	OpInx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 8948 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 8953 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 8957 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 8960 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 8999 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9003 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9006 "hcs12x.cc"
	);
private:
};

class OpIny : public Operation
{
public:
	OpIny(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9018 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9023 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9027 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9030 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9069 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9073 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9076 "hcs12x.cc"
	);
private:
};

class OpCba : public Operation
{
public:
	OpCba(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9088 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9093 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9097 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9100 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9139 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9143 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9146 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_imm : public Operation
{
public:
	OpCmp_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9160 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9165 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9169 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9172 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9211 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9215 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9218 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_dir : public Operation
{
public:
	OpCmp_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9232 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9237 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9241 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9244 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9283 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9287 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9290 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_ext : public Operation
{
public:
	OpCmp_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9304 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9309 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9313 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9316 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9355 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9359 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9362 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_idx : public Operation
{
public:
	OpCmp_ab_idx(CodeType const& code, uint16_t addr);
	~OpCmp_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9375 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 9380 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 9384 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 9387 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 9392 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 9396 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 9399 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9404 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9409 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9413 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9416 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9455 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9459 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9462 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_imm : public Operation
{
public:
	OpCp_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9476 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9481 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9485 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9488 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9527 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9531 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9534 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_dir : public Operation
{
public:
	OpCp_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9548 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9553 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9557 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9560 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9599 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9603 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9606 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_ext : public Operation
{
public:
	OpCp_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9620 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9625 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9629 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9632 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9671 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9675 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9678 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_idx : public Operation
{
public:
	OpCp_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpCp_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9691 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 9696 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 9700 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 9703 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 9708 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 9712 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 9715 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9720 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9725 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9729 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9732 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9771 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9775 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9778 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_imm : public Operation
{
public:
	OpCpe_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9792 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9797 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9801 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9804 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9843 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9847 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9850 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_dir : public Operation
{
public:
	OpCpe_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9864 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9869 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9873 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9876 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9915 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9919 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9922 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_ext : public Operation
{
public:
	OpCpe_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 9936 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 9941 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 9945 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 9948 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 9987 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 9991 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 9994 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_idx : public Operation
{
public:
	OpCpe_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpCpe_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10007 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 10012 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 10016 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 10019 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 10024 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 10028 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 10031 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10036 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10041 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10045 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10048 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10087 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10091 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10094 "hcs12x.cc"
	);
private:
};

class OpTst_ext : public Operation
{
public:
	OpTst_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10107 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10112 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10116 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10119 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10158 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10162 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10165 "hcs12x.cc"
	);
private:
};

class OpTst_idx : public Operation
{
public:
	OpTst_idx(CodeType const& code, uint16_t addr);
	~OpTst_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10177 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 10182 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 10186 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 10189 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 10194 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 10198 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 10201 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10206 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10211 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10215 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10218 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10257 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10261 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10264 "hcs12x.cc"
	);
private:
};

class OpTst_ab : public Operation
{
public:
	OpTst_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10277 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10282 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10286 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10289 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10328 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10332 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10335 "hcs12x.cc"
	);
private:
};

class OpTstw_ext : public Operation
{
public:
	OpTstw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10348 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10353 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10357 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10360 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10399 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10403 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10406 "hcs12x.cc"
	);
private:
};

class OpTstw_idx : public Operation
{
public:
	OpTstw_idx(CodeType const& code, uint16_t addr);
	~OpTstw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10418 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 10423 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 10427 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 10430 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 10435 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 10439 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 10442 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10447 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10452 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10456 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10459 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10498 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10502 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10505 "hcs12x.cc"
	);
private:
};

class OpTst_xy : public Operation
{
public:
	OpTst_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10518 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10523 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10527 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10530 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10569 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10573 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10576 "hcs12x.cc"
	);
private:
};

class OpEmind : public Operation
{
public:
	OpEmind(CodeType const& code, uint16_t addr);
	~OpEmind();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10588 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10593 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10598 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10602 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10605 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10644 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10648 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10651 "hcs12x.cc"
	);
private:
};

class OpEminm : public Operation
{
public:
	OpEminm(CodeType const& code, uint16_t addr);
	~OpEminm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10663 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10668 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10673 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10677 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10680 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10719 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10723 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10726 "hcs12x.cc"
	);
private:
};

class OpMina : public Operation
{
public:
	OpMina(CodeType const& code, uint16_t addr);
	~OpMina();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10738 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10743 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10748 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10752 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10755 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10794 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10798 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10801 "hcs12x.cc"
	);
private:
};

class OpMinm : public Operation
{
public:
	OpMinm(CodeType const& code, uint16_t addr);
	~OpMinm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10813 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10818 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10823 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10827 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10830 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10869 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10873 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10876 "hcs12x.cc"
	);
private:
};

class OpEmaxd : public Operation
{
public:
	OpEmaxd(CodeType const& code, uint16_t addr);
	~OpEmaxd();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10888 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10893 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10898 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10902 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10905 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 10944 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 10948 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 10951 "hcs12x.cc"
	);
private:
};

class OpEmaxm : public Operation
{
public:
	OpEmaxm(CodeType const& code, uint16_t addr);
	~OpEmaxm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10963 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 10968 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 10973 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 10977 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 10980 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11019 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11023 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11026 "hcs12x.cc"
	);
private:
};

class OpMaxa : public Operation
{
public:
	OpMaxa(CodeType const& code, uint16_t addr);
	~OpMaxa();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11038 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11043 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11048 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11052 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11055 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11094 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11098 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11101 "hcs12x.cc"
	);
private:
};

class OpMaxm : public Operation
{
public:
	OpMaxm(CodeType const& code, uint16_t addr);
	~OpMaxm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11113 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11118 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11123 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11127 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11130 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11169 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11173 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11176 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_imm : public Operation
{
public:
	OpAnd_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11190 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11195 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11199 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11202 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11241 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11245 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11248 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_dir : public Operation
{
public:
	OpAnd_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11262 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11267 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11271 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11274 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11313 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11317 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11320 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_ext : public Operation
{
public:
	OpAnd_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11334 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11339 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11343 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11346 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11385 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11389 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11392 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_idx : public Operation
{
public:
	OpAnd_ab_idx(CodeType const& code, uint16_t addr);
	~OpAnd_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11405 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 11410 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 11414 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 11417 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 11422 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 11426 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 11429 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11434 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11439 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11443 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11446 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11485 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11489 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11492 "hcs12x.cc"
	);
private:
};

class OpAndcc_imm : public Operation
{
public:
	OpAndcc_imm(CodeType const& code, uint16_t addr);
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11505 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11510 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11514 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11517 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11556 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11560 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11563 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_imm : public Operation
{
public:
	OpAnd_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11577 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11582 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11586 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11589 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11628 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11632 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11635 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_dir : public Operation
{
public:
	OpAnd_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11649 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11654 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11658 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11661 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11700 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11704 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11707 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_ext : public Operation
{
public:
	OpAnd_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11721 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11726 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11730 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11733 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11772 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11776 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11779 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_idx : public Operation
{
public:
	OpAnd_xy_idx(CodeType const& code, uint16_t addr);
	~OpAnd_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11792 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 11797 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 11801 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 11804 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 11809 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 11813 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 11816 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11821 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11826 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11830 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11833 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11872 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11876 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11879 "hcs12x.cc"
	);
private:
};

class OpOra_ab_imm : public Operation
{
public:
	OpOra_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11893 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11898 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11902 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11905 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 11944 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 11948 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 11951 "hcs12x.cc"
	);
private:
};

class OpOra_ab_dir : public Operation
{
public:
	OpOra_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 11965 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 11970 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 11974 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 11977 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12016 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12020 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12023 "hcs12x.cc"
	);
private:
};

class OpOra_ab_ext : public Operation
{
public:
	OpOra_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12037 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12042 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12046 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12049 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12088 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12092 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12095 "hcs12x.cc"
	);
private:
};

class OpOra_ab_idx : public Operation
{
public:
	OpOra_ab_idx(CodeType const& code, uint16_t addr);
	~OpOra_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12108 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 12113 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 12117 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 12120 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 12125 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 12129 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 12132 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12137 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12142 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12146 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12149 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12188 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12192 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12195 "hcs12x.cc"
	);
private:
};

class OpOrcc_imm : public Operation
{
public:
	OpOrcc_imm(CodeType const& code, uint16_t addr);
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12208 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12213 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12217 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12220 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12259 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12263 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12266 "hcs12x.cc"
	);
private:
};

class OpOr_xy_imm : public Operation
{
public:
	OpOr_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12280 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12285 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12289 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12292 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12331 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12335 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12338 "hcs12x.cc"
	);
private:
};

class OpOr_xy_dir : public Operation
{
public:
	OpOr_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12352 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12357 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12361 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12364 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12403 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12407 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12410 "hcs12x.cc"
	);
private:
};

class OpOr_xy_ext : public Operation
{
public:
	OpOr_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12424 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12429 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12433 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12436 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12475 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12479 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12482 "hcs12x.cc"
	);
private:
};

class OpOr_xy_idx : public Operation
{
public:
	OpOr_xy_idx(CodeType const& code, uint16_t addr);
	~OpOr_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12495 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 12500 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 12504 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 12507 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 12512 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 12516 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 12519 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12524 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12529 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12533 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12536 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12575 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12579 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12582 "hcs12x.cc"
	);
private:
};

class OpEor_ab_imm : public Operation
{
public:
	OpEor_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12596 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12601 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12605 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12608 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12647 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12651 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12654 "hcs12x.cc"
	);
private:
};

class OpEor_ab_dir : public Operation
{
public:
	OpEor_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12668 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12673 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12677 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12680 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12719 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12723 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12726 "hcs12x.cc"
	);
private:
};

class OpEor_ab_ext : public Operation
{
public:
	OpEor_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12740 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12745 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12749 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12752 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12791 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12795 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12798 "hcs12x.cc"
	);
private:
};

class OpEor_ab_idx : public Operation
{
public:
	OpEor_ab_idx(CodeType const& code, uint16_t addr);
	~OpEor_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12811 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 12816 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 12820 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 12823 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 12828 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 12832 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 12835 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12840 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12845 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12849 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12852 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12891 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12895 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12898 "hcs12x.cc"
	);
private:
};

class OpEor_xy_imm : public Operation
{
public:
	OpEor_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12912 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12917 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12921 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12924 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 12963 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 12967 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 12970 "hcs12x.cc"
	);
private:
};

class OpEor_xy_dir : public Operation
{
public:
	OpEor_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 12984 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 12989 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 12993 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 12996 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13035 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13039 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13042 "hcs12x.cc"
	);
private:
};

class OpEor_xy_ext : public Operation
{
public:
	OpEor_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13056 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13061 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13065 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13068 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13107 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13111 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13114 "hcs12x.cc"
	);
private:
};

class OpEor_xy_idx : public Operation
{
public:
	OpEor_xy_idx(CodeType const& code, uint16_t addr);
	~OpEor_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13127 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 13132 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 13136 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 13139 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 13144 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 13148 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 13151 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13156 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13161 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13165 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13168 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13207 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13211 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13214 "hcs12x.cc"
	);
private:
};

class OpClc : public Operation
{
public:
	OpClc(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13226 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13231 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13235 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13238 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13277 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13281 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13284 "hcs12x.cc"
	);
private:
};

class OpCli : public Operation
{
public:
	OpCli(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13296 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13301 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13305 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13308 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13347 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13351 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13354 "hcs12x.cc"
	);
private:
};

class OpClv : public Operation
{
public:
	OpClv(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13366 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13371 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13375 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13378 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13417 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13421 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13424 "hcs12x.cc"
	);
private:
};

class OpClr_ext : public Operation
{
public:
	OpClr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13437 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13442 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13446 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13449 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13488 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13492 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13495 "hcs12x.cc"
	);
private:
};

class OpClr_idx : public Operation
{
public:
	OpClr_idx(CodeType const& code, uint16_t addr);
	~OpClr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13507 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 13512 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 13516 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 13519 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 13524 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 13528 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 13531 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13536 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13541 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13545 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13548 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13587 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13591 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13594 "hcs12x.cc"
	);
private:
};

class OpClrw_ext : public Operation
{
public:
	OpClrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13607 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13612 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13616 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13619 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13658 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13662 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13665 "hcs12x.cc"
	);
private:
};

class OpClrw_idx : public Operation
{
public:
	OpClrw_idx(CodeType const& code, uint16_t addr);
	~OpClrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13677 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 13682 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 13686 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 13689 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 13694 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 13698 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 13701 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13706 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13711 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13715 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13718 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13757 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13761 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13764 "hcs12x.cc"
	);
private:
};

class OpClr_ab : public Operation
{
public:
	OpClr_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13777 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13782 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13786 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13789 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13828 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13832 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13835 "hcs12x.cc"
	);
private:
};

class OpClr_xy : public Operation
{
public:
	OpClr_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13848 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13853 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13857 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13860 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13899 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13903 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13906 "hcs12x.cc"
	);
private:
};

class OpCom_ext : public Operation
{
public:
	OpCom_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 13919 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 13924 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 13928 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 13931 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 13970 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 13974 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 13977 "hcs12x.cc"
	);
private:
};

class OpCom_idx : public Operation
{
public:
	OpCom_idx(CodeType const& code, uint16_t addr);
	~OpCom_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13989 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 13994 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 13998 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 14001 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 14006 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 14010 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 14013 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14018 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14023 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14027 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14030 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14069 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14073 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14076 "hcs12x.cc"
	);
private:
};

class OpCom_ab : public Operation
{
public:
	OpCom_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14089 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14094 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14098 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14101 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14140 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14144 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14147 "hcs12x.cc"
	);
private:
};

class OpComw_ext : public Operation
{
public:
	OpComw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14160 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14165 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14169 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14172 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14211 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14215 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14218 "hcs12x.cc"
	);
private:
};

class OpComw_idx : public Operation
{
public:
	OpComw_idx(CodeType const& code, uint16_t addr);
	~OpComw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14230 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 14235 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 14239 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 14242 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 14247 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 14251 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 14254 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14259 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14264 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14268 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14271 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14310 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14314 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14317 "hcs12x.cc"
	);
private:
};

class OpCom_xy : public Operation
{
public:
	OpCom_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14330 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14335 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14339 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14342 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14381 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14385 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14388 "hcs12x.cc"
	);
private:
};

class OpNeg_ext : public Operation
{
public:
	OpNeg_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14401 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14406 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14410 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14413 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14452 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14456 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14459 "hcs12x.cc"
	);
private:
};

class OpNeg_idx : public Operation
{
public:
	OpNeg_idx(CodeType const& code, uint16_t addr);
	~OpNeg_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14471 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 14476 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 14480 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 14483 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 14488 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 14492 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 14495 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14500 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14505 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14509 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14512 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14551 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14555 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14558 "hcs12x.cc"
	);
private:
};

class OpNeg_ab : public Operation
{
public:
	OpNeg_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14571 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14576 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14580 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14583 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14622 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14626 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14629 "hcs12x.cc"
	);
private:
};

class OpNegw_ext : public Operation
{
public:
	OpNegw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14642 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14647 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14651 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14654 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14693 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14697 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14700 "hcs12x.cc"
	);
private:
};

class OpNegw_idx : public Operation
{
public:
	OpNegw_idx(CodeType const& code, uint16_t addr);
	~OpNegw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14712 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 14717 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 14721 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 14724 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 14729 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 14733 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 14736 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14741 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14746 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14750 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14753 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14792 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14796 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14799 "hcs12x.cc"
	);
private:
};

class OpNeg_xy : public Operation
{
public:
	OpNeg_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14812 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14817 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14821 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14824 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14863 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14867 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14870 "hcs12x.cc"
	);
private:
};

class OpBclr_dir : public Operation
{
public:
	OpBclr_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	uint32_t mm;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14884 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14889 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14893 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14896 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 14935 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 14939 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 14942 "hcs12x.cc"
	);
private:
};

class OpBclr_ext : public Operation
{
public:
	OpBclr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t mm;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 14956 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 14961 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 14965 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 14968 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15007 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15011 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15014 "hcs12x.cc"
	);
private:
};

class OpBclr_idx : public Operation
{
public:
	OpBclr_idx(CodeType const& code, uint16_t addr);
	~OpBclr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15026 "hcs12x.cc"
	* xb;
	uint32_t mm;
	virtual
#line 74 "hcs12x.isa"
	void
#line 15032 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 15036 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 15039 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 15044 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 15048 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 15051 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15056 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15061 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15065 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15068 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15107 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15111 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15114 "hcs12x.cc"
	);
private:
};

class OpBit_ab_imm : public Operation
{
public:
	OpBit_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t ii;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15128 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15133 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15137 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15140 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15179 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15183 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15186 "hcs12x.cc"
	);
private:
};

class OpBit_ab_dir : public Operation
{
public:
	OpBit_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15200 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15205 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15209 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15212 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15251 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15255 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15258 "hcs12x.cc"
	);
private:
};

class OpBit_ab_ext : public Operation
{
public:
	OpBit_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15272 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15277 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15281 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15284 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15323 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15327 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15330 "hcs12x.cc"
	);
private:
};

class OpBit_ab_idx : public Operation
{
public:
	OpBit_ab_idx(CodeType const& code, uint16_t addr);
	~OpBit_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15343 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 15348 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 15352 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 15355 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 15360 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 15364 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 15367 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15372 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15377 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15381 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15384 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15423 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15427 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15430 "hcs12x.cc"
	);
private:
};

class OpBit_xy_imm : public Operation
{
public:
	OpBit_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15444 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15449 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15453 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15456 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15495 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15499 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15502 "hcs12x.cc"
	);
private:
};

class OpBit_xy_dir : public Operation
{
public:
	OpBit_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15516 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15521 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15525 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15528 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15567 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15571 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15574 "hcs12x.cc"
	);
private:
};

class OpBit_xy_ext : public Operation
{
public:
	OpBit_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15588 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15593 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15597 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15600 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15639 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15643 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15646 "hcs12x.cc"
	);
private:
};

class OpBit_xy_idx : public Operation
{
public:
	OpBit_xy_idx(CodeType const& code, uint16_t addr);
	~OpBit_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15659 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 15664 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 15668 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 15671 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 15676 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 15680 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 15683 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15688 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15693 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15697 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15700 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15739 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15743 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15746 "hcs12x.cc"
	);
private:
};

class OpBset_dir : public Operation
{
public:
	OpBset_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	uint32_t mm;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15760 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15765 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15769 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15772 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15811 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15815 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15818 "hcs12x.cc"
	);
private:
};

class OpBset_ext : public Operation
{
public:
	OpBset_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t mm;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15832 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15837 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15841 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15844 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15883 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15887 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15890 "hcs12x.cc"
	);
private:
};

class OpBset_idx : public Operation
{
public:
	OpBset_idx(CodeType const& code, uint16_t addr);
	~OpBset_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15902 "hcs12x.cc"
	* xb;
	uint32_t mm;
	virtual
#line 74 "hcs12x.isa"
	void
#line 15908 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 15912 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 15915 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 15920 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 15924 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 15927 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 15932 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 15937 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 15941 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 15944 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 15983 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 15987 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 15990 "hcs12x.cc"
	);
private:
};

class OpLsl_ext : public Operation
{
public:
	OpLsl_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16003 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16008 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16012 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16015 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16054 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16058 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16061 "hcs12x.cc"
	);
private:
};

class OpLsl_idx : public Operation
{
public:
	OpLsl_idx(CodeType const& code, uint16_t addr);
	~OpLsl_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16073 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 16078 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 16082 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 16085 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 16090 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 16094 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 16097 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16102 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16107 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16111 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16114 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16153 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16157 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16160 "hcs12x.cc"
	);
private:
};

class OpLsla : public Operation
{
public:
	OpLsla(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16172 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16177 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16181 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16184 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16223 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16227 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16230 "hcs12x.cc"
	);
private:
};

class OpLslb : public Operation
{
public:
	OpLslb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16242 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16247 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16251 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16293 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16297 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16300 "hcs12x.cc"
	);
private:
};

class OpLsld : public Operation
{
public:
	OpLsld(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16312 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16317 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16321 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16324 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16363 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16367 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16370 "hcs12x.cc"
	);
private:
};

class OpLslw_ext : public Operation
{
public:
	OpLslw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16383 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16388 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16392 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16395 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16434 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16438 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16441 "hcs12x.cc"
	);
private:
};

class OpLslw_idx : public Operation
{
public:
	OpLslw_idx(CodeType const& code, uint16_t addr);
	~OpLslw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16453 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 16458 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 16462 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 16465 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 16470 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 16474 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 16477 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16482 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16487 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16491 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16494 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16533 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16537 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16540 "hcs12x.cc"
	);
private:
};

class OpLslx : public Operation
{
public:
	OpLslx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16552 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16557 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16561 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16564 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16603 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16607 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16610 "hcs12x.cc"
	);
private:
};

class OpLsly : public Operation
{
public:
	OpLsly(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16622 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16627 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16631 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16634 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16673 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16677 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16680 "hcs12x.cc"
	);
private:
};

class OpRol_ext : public Operation
{
public:
	OpRol_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16693 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16698 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16702 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16705 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16744 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16748 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16751 "hcs12x.cc"
	);
private:
};

class OpRol_idx : public Operation
{
public:
	OpRol_idx(CodeType const& code, uint16_t addr);
	~OpRol_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16763 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 16768 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 16772 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 16775 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 16780 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 16784 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 16787 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16792 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16797 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16801 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16804 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16843 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16847 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16850 "hcs12x.cc"
	);
private:
};

class OpRola : public Operation
{
public:
	OpRola(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16862 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16867 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16871 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16874 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16913 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16917 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16920 "hcs12x.cc"
	);
private:
};

class OpRolb : public Operation
{
public:
	OpRolb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 16932 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 16937 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 16941 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 16944 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 16983 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 16987 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 16990 "hcs12x.cc"
	);
private:
};

class OpRolw_ext : public Operation
{
public:
	OpRolw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17003 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17008 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17012 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17015 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17054 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17058 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17061 "hcs12x.cc"
	);
private:
};

class OpRolw_idx : public Operation
{
public:
	OpRolw_idx(CodeType const& code, uint16_t addr);
	~OpRolw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17073 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 17078 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 17082 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 17085 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 17090 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 17094 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 17097 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17102 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17107 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17111 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17114 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17153 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17157 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17160 "hcs12x.cc"
	);
private:
};

class OpRolx : public Operation
{
public:
	OpRolx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17172 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17177 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17181 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17184 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17223 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17227 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17230 "hcs12x.cc"
	);
private:
};

class OpRoly : public Operation
{
public:
	OpRoly(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17242 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17247 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17251 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17293 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17297 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17300 "hcs12x.cc"
	);
private:
};

class OpLsr_ext : public Operation
{
public:
	OpLsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17313 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17318 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17322 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17325 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17364 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17368 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17371 "hcs12x.cc"
	);
private:
};

class OpLsr_idx : public Operation
{
public:
	OpLsr_idx(CodeType const& code, uint16_t addr);
	~OpLsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17383 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 17388 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 17392 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 17395 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 17400 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 17404 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 17407 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17412 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17417 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17421 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17424 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17463 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17467 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17470 "hcs12x.cc"
	);
private:
};

class OpLsra : public Operation
{
public:
	OpLsra(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17482 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17487 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17491 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17494 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17533 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17537 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17540 "hcs12x.cc"
	);
private:
};

class OpLsrb : public Operation
{
public:
	OpLsrb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17552 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17557 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17561 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17564 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17603 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17607 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17610 "hcs12x.cc"
	);
private:
};

class OpLsrd : public Operation
{
public:
	OpLsrd(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17622 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17627 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17631 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17634 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17673 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17677 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17680 "hcs12x.cc"
	);
private:
};

class OpLsrw_ext : public Operation
{
public:
	OpLsrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17693 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17698 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17702 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17705 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17744 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17748 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17751 "hcs12x.cc"
	);
private:
};

class OpLsrw_idx : public Operation
{
public:
	OpLsrw_idx(CodeType const& code, uint16_t addr);
	~OpLsrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17763 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 17768 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 17772 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 17775 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 17780 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 17784 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 17787 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17792 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17797 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17801 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17804 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17843 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17847 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17850 "hcs12x.cc"
	);
private:
};

class OpLsrx : public Operation
{
public:
	OpLsrx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17862 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17867 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17871 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17874 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17913 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17917 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17920 "hcs12x.cc"
	);
private:
};

class OpLsry : public Operation
{
public:
	OpLsry(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 17932 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 17937 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 17941 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 17944 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 17983 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 17987 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 17990 "hcs12x.cc"
	);
private:
};

class OpRor_ext : public Operation
{
public:
	OpRor_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18003 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18008 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18012 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18015 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18054 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18058 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18061 "hcs12x.cc"
	);
private:
};

class OpRor_idx : public Operation
{
public:
	OpRor_idx(CodeType const& code, uint16_t addr);
	~OpRor_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 18073 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 18078 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 18082 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 18085 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 18090 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 18094 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 18097 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18102 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18107 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18111 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18114 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18153 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18157 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18160 "hcs12x.cc"
	);
private:
};

class OpRora : public Operation
{
public:
	OpRora(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18172 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18177 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18181 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18184 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18223 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18227 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18230 "hcs12x.cc"
	);
private:
};

class OpRorb : public Operation
{
public:
	OpRorb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18242 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18247 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18251 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18293 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18297 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18300 "hcs12x.cc"
	);
private:
};

class OpRorw_ext : public Operation
{
public:
	OpRorw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18313 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18318 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18322 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18325 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18364 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18368 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18371 "hcs12x.cc"
	);
private:
};

class OpRorw_idx : public Operation
{
public:
	OpRorw_idx(CodeType const& code, uint16_t addr);
	~OpRorw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 18383 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 18388 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 18392 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 18395 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 18400 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 18404 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 18407 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18412 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18417 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18421 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18424 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18463 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18467 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18470 "hcs12x.cc"
	);
private:
};

class OpRorx : public Operation
{
public:
	OpRorx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18482 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18487 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18491 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18494 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18533 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18537 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18540 "hcs12x.cc"
	);
private:
};

class OpRory : public Operation
{
public:
	OpRory(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18552 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18557 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18561 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18564 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18603 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18607 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18610 "hcs12x.cc"
	);
private:
};

class OpAsr_ext : public Operation
{
public:
	OpAsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18623 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18628 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18632 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18635 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18674 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18678 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18681 "hcs12x.cc"
	);
private:
};

class OpAsr_idx : public Operation
{
public:
	OpAsr_idx(CodeType const& code, uint16_t addr);
	~OpAsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 18693 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 18698 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 18702 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 18705 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 18710 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 18714 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 18717 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18722 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18727 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18731 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18734 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18773 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18777 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18780 "hcs12x.cc"
	);
private:
};

class OpAsra : public Operation
{
public:
	OpAsra(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18792 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18797 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18801 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18804 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18843 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18847 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18850 "hcs12x.cc"
	);
private:
};

class OpAsrb : public Operation
{
public:
	OpAsrb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18862 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18867 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18871 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18874 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18913 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18917 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18920 "hcs12x.cc"
	);
private:
};

class OpAsrw_ext : public Operation
{
public:
	OpAsrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 18933 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 18938 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 18942 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 18945 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 18984 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 18988 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 18991 "hcs12x.cc"
	);
private:
};

class OpAsrw_idx : public Operation
{
public:
	OpAsrw_idx(CodeType const& code, uint16_t addr);
	~OpAsrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 19003 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 19008 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 19012 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 19015 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 19020 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 19024 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 19027 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19032 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19037 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19041 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19044 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19083 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19087 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19090 "hcs12x.cc"
	);
private:
};

class OpAsrx : public Operation
{
public:
	OpAsrx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19102 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19107 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19111 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19114 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19153 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19157 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19160 "hcs12x.cc"
	);
private:
};

class OpAsry : public Operation
{
public:
	OpAsry(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19172 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19177 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19181 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19184 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19223 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19227 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19230 "hcs12x.cc"
	);
private:
};

class OpBtas_dir : public Operation
{
public:
	OpBtas_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	uint32_t msk8;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19244 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19249 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19253 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19256 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19295 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19299 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19302 "hcs12x.cc"
	);
private:
};

class OpBtas_ext : public Operation
{
public:
	OpBtas_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t msk8;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19316 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19321 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19325 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19328 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19367 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19371 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19374 "hcs12x.cc"
	);
private:
};

class OpBtas_idx : public Operation
{
public:
	OpBtas_idx(CodeType const& code, uint16_t addr);
	~OpBtas_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 19386 "hcs12x.cc"
	* xb;
	uint32_t msk8;
	virtual
#line 74 "hcs12x.isa"
	void
#line 19392 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 19396 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 19399 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 19404 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 19408 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 19411 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19416 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19421 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19425 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19428 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19467 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19471 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19474 "hcs12x.cc"
	);
private:
};

class OpEmul : public Operation
{
public:
	OpEmul(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19486 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19491 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19495 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19498 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19537 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19541 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19544 "hcs12x.cc"
	);
private:
};

class OpEmuls : public Operation
{
public:
	OpEmuls(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19556 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19561 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19565 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19568 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19607 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19611 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19614 "hcs12x.cc"
	);
private:
};

class OpMul : public Operation
{
public:
	OpMul(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19626 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19631 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19635 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19638 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19677 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19681 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19684 "hcs12x.cc"
	);
private:
};

class OpEdiv : public Operation
{
public:
	OpEdiv(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19696 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19701 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19705 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19708 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19747 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19751 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19754 "hcs12x.cc"
	);
private:
};

class OpEdivs : public Operation
{
public:
	OpEdivs(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19766 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19771 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19775 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19778 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19817 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19821 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19824 "hcs12x.cc"
	);
private:
};

class OpFdiv : public Operation
{
public:
	OpFdiv(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19836 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19841 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19845 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19848 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19887 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19891 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19894 "hcs12x.cc"
	);
private:
};

class OpIdiv : public Operation
{
public:
	OpIdiv(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19906 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19911 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19915 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19918 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 19957 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 19961 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 19964 "hcs12x.cc"
	);
private:
};

class OpIdivs : public Operation
{
public:
	OpIdivs(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 19976 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 19981 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 19985 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 19988 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20027 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20031 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20034 "hcs12x.cc"
	);
private:
};

class OpEmacs : public Operation
{
public:
	OpEmacs(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20047 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20052 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20056 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20059 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20098 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20102 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20105 "hcs12x.cc"
	);
private:
};

class OpSbr : public Operation
{
public:
	OpSbr(CodeType const& code, uint16_t addr);
	uint32_t sel;
	int32_t rel8;
#line 44 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	bool  branch;
#line 20118 "hcs12x.cc"
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20122 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20127 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20131 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20134 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20173 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20177 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20180 "hcs12x.cc"
	);
private:
};

class OpLbr : public Operation
{
public:
	OpLbr(CodeType const& code, uint16_t addr);
	uint32_t sel;
	int32_t rel16;
#line 146 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	bool  branch;
#line 20193 "hcs12x.cc"
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20197 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20202 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20206 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20209 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20248 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20252 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20255 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_dir : public Operation
{
public:
	OpBr_clr_set_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20271 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20276 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20280 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20283 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20322 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20326 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20329 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_ext : public Operation
{
public:
	OpBr_clr_set_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20345 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20350 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20354 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20357 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20396 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20400 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20403 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_idx : public Operation
{
public:
	OpBr_clr_set_idx(CodeType const& code, uint16_t addr);
	~OpBr_clr_set_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 20416 "hcs12x.cc"
	* xb;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 74 "hcs12x.isa"
	void
#line 20423 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 20427 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 20430 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 20435 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 20439 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 20442 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20447 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20452 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20456 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20459 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20498 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20502 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20505 "hcs12x.cc"
	);
private:
};

class OpBsr : public Operation
{
public:
	OpBsr(CodeType const& code, uint16_t addr);
	int32_t rel8;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20518 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20523 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20527 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20530 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20569 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20573 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20576 "hcs12x.cc"
	);
private:
};

class OpCall_ext : public Operation
{
public:
	OpCall_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t page;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20590 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20595 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20599 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20602 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20641 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20645 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20648 "hcs12x.cc"
	);
private:
};

class OpCall_16offset_idx_ind : public Operation
{
public:
	OpCall_16offset_idx_ind(CodeType const& code, uint16_t addr);
	uint32_t rr;
	int32_t n16;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20662 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20667 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20671 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20674 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20713 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20717 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20720 "hcs12x.cc"
	);
private:
};

class OpCall_accD_offset_idx_ind : public Operation
{
public:
	OpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr);
	uint32_t rr;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20733 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20738 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20742 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20745 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20784 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20788 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20791 "hcs12x.cc"
	);
private:
};

class OpJmp_ext : public Operation
{
public:
	OpJmp_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20804 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20809 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20813 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20816 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20855 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20859 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20862 "hcs12x.cc"
	);
private:
};

class OpJmp_idx : public Operation
{
public:
	OpJmp_idx(CodeType const& code, uint16_t addr);
	~OpJmp_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 20874 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 20879 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 20883 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 20886 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 20891 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 20895 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 20898 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20903 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20908 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20912 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20915 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 20954 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 20958 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 20961 "hcs12x.cc"
	);
private:
};

class OpJsr_dir : public Operation
{
public:
	OpJsr_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 20974 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 20979 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 20983 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 20986 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21025 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21029 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21032 "hcs12x.cc"
	);
private:
};

class OpJsr_ext : public Operation
{
public:
	OpJsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21045 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21050 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21054 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21057 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21096 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21100 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21103 "hcs12x.cc"
	);
private:
};

class OpJsr_idx : public Operation
{
public:
	OpJsr_idx(CodeType const& code, uint16_t addr);
	~OpJsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 21115 "hcs12x.cc"
	* xb;
	virtual
#line 74 "hcs12x.isa"
	void
#line 21120 "hcs12x.cc"
	pre_execute(
#line 74 "hcs12x.isa"
	ostream&
#line 21124 "hcs12x.cc"
#line 74 "hcs12x.isa"
	sink
#line 21127 "hcs12x.cc"
	);
	virtual
#line 78 "hcs12x.isa"
	void
#line 21132 "hcs12x.cc"
	post_execute(
#line 78 "hcs12x.isa"
	ostream&
#line 21136 "hcs12x.cc"
#line 78 "hcs12x.isa"
	sink
#line 21139 "hcs12x.cc"
	);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21144 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21149 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21153 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21156 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21195 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21199 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21202 "hcs12x.cc"
	);
private:
};

class OpRtc : public Operation
{
public:
	OpRtc(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21214 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21219 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21223 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21226 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21265 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21269 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21272 "hcs12x.cc"
	);
private:
};

class OpRts : public Operation
{
public:
	OpRts(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21284 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21289 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21293 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21296 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21335 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21339 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21342 "hcs12x.cc"
	);
private:
};

class OpLoop : public Operation
{
public:
	OpLoop(CodeType const& code, uint16_t addr);
	uint32_t b765;
	uint32_t b4;
	uint32_t b3;
	uint32_t b210;
	int32_t rel9;
#line 811 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	bool  isBranch;
#line 21358 "hcs12x.cc"
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21362 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21367 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21371 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21374 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21413 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21417 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21420 "hcs12x.cc"
	);
private:
};

class OpPsha : public Operation
{
public:
	OpPsha(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21432 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21437 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21441 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21444 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21483 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21487 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21490 "hcs12x.cc"
	);
private:
};

class OpPshb : public Operation
{
public:
	OpPshb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21502 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21507 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21511 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21514 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21553 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21557 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21560 "hcs12x.cc"
	);
private:
};

class OpPshc : public Operation
{
public:
	OpPshc(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21572 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21577 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21581 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21584 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21623 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21627 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21630 "hcs12x.cc"
	);
private:
};

class OpPshcw : public Operation
{
public:
	OpPshcw(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21642 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21647 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21651 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21654 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21693 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21697 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21700 "hcs12x.cc"
	);
private:
};

class OpPshd : public Operation
{
public:
	OpPshd(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21712 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21717 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21721 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21724 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21763 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21767 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21770 "hcs12x.cc"
	);
private:
};

class OpPshx : public Operation
{
public:
	OpPshx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21782 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21787 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21791 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21794 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21833 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21837 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21840 "hcs12x.cc"
	);
private:
};

class OpPshy : public Operation
{
public:
	OpPshy(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21852 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21857 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21861 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21864 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21903 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21907 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21910 "hcs12x.cc"
	);
private:
};

class OpPula : public Operation
{
public:
	OpPula(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21922 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21927 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 21931 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 21934 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 21973 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 21977 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 21980 "hcs12x.cc"
	);
private:
};

class OpPulb : public Operation
{
public:
	OpPulb(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 21992 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 21997 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22001 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22004 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22043 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22047 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22050 "hcs12x.cc"
	);
private:
};

class OpPulc : public Operation
{
public:
	OpPulc(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22062 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22067 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22071 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22074 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22113 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22117 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22120 "hcs12x.cc"
	);
private:
};

class OpPulcw : public Operation
{
public:
	OpPulcw(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22132 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22137 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22141 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22144 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22183 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22187 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22190 "hcs12x.cc"
	);
private:
};

class OpPuld : public Operation
{
public:
	OpPuld(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22202 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22207 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22211 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22214 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22253 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22257 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22260 "hcs12x.cc"
	);
private:
};

class OpPulx : public Operation
{
public:
	OpPulx(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22272 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22277 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22281 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22284 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22323 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22327 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22330 "hcs12x.cc"
	);
private:
};

class OpPuly : public Operation
{
public:
	OpPuly(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22342 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22347 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22351 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22354 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22393 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22397 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22400 "hcs12x.cc"
	);
private:
};

class OpMem : public Operation
{
public:
	OpMem(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22412 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22417 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22421 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22424 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22463 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22467 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22470 "hcs12x.cc"
	);
private:
};

class OpRev : public Operation
{
public:
	OpRev(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22482 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22487 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22491 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22494 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22533 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22537 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22540 "hcs12x.cc"
	);
private:
};

class OpRevw : public Operation
{
public:
	OpRevw(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22552 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22557 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22561 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22564 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22603 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22607 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22610 "hcs12x.cc"
	);
private:
};

class OpWav : public Operation
{
public:
	OpWav(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22622 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22627 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22631 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22634 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22673 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22677 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22680 "hcs12x.cc"
	);
private:
};

class OpWavr : public Operation
{
public:
	OpWavr(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22692 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22697 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22701 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22704 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22743 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22747 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22750 "hcs12x.cc"
	);
private:
};

class OpTbl : public Operation
{
public:
	OpTbl(CodeType const& code, uint16_t addr);
	~OpTbl();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 22762 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22767 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22772 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22776 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22779 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22818 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22822 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22825 "hcs12x.cc"
	);
private:
};

class OpEtlb : public Operation
{
public:
	OpEtlb(CodeType const& code, uint16_t addr);
	~OpEtlb();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 22837 "hcs12x.cc"
	* xb;
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22842 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22847 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22851 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22854 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22893 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22897 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22900 "hcs12x.cc"
	);
private:
};

class OpNop : public Operation
{
public:
	OpNop(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22912 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22917 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22921 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22924 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 22963 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 22967 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 22970 "hcs12x.cc"
	);
private:
};

class OpStop : public Operation
{
public:
	OpStop(CodeType const& code, uint16_t addr);
#line 55 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	bool  stopDisabled;
#line 22981 "hcs12x.cc"
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 22985 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 22990 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 22994 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 22997 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23036 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23040 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23043 "hcs12x.cc"
	);
private:
};

class OpWai : public Operation
{
public:
	OpWai(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 23055 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 23060 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 23064 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 23067 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23106 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23110 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23113 "hcs12x.cc"
	);
private:
};

class OpBgnd : public Operation
{
public:
	OpBgnd(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 23125 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 23130 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 23134 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 23137 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23176 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23180 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23183 "hcs12x.cc"
	);
private:
};

class OpRti : public Operation
{
public:
	OpRti(CodeType const& code, uint16_t addr);
#line 199 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	bool  isPending;
#line 23194 "hcs12x.cc"
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 23198 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 23203 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 23207 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 23210 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23249 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23253 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23256 "hcs12x.cc"
	);
private:
};

class OpSwi : public Operation
{
public:
	OpSwi(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 23268 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 23273 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 23277 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 23280 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23319 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23323 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23326 "hcs12x.cc"
	);
private:
};

class OpSys : public Operation
{
public:
	OpSys(CodeType const& code, uint16_t addr);
	virtual
#line 83 "hcs12x.isa"
	uint8_t
#line 23338 "hcs12x.cc"
	getCycles();
	virtual
#line 68 "hcs12x.isa"
	string
#line 23343 "hcs12x.cc"
	disasm(
#line 68 "hcs12x.isa"
	ostream&
#line 23347 "hcs12x.cc"
#line 68 "hcs12x.isa"
	sink
#line 23350 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	virtual
#line 62 "hcs12x.isa"
	void
#line 23389 "hcs12x.cc"
	execute(
#line 62 "hcs12x.isa"
	CPU *
#line 23393 "hcs12x.cc"
#line 62 "hcs12x.isa"
	cpu
#line 23396 "hcs12x.cc"
	);
private:
};

#line 74 "hcs12x.isa"
void
#line 23403 "hcs12x.cc"
OpCall_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 23407 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 23410 "hcs12x.cc"
)
{
#line 536 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 23419 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 23423 "hcs12x.cc"
OpCall_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 23427 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 23430 "hcs12x.cc"
)
{
#line 542 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 23439 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 23443 "hcs12x.cc"
OpCall_idx::getCycles()
{
#line 548 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 7, 7, 8, 0, 0); }
#line 23448 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23452 "hcs12x.cc"
OpCall_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23456 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23459 "hcs12x.cc"
)
{
#line 550 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		string mnem = "CALL";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << page;

		return mnem;
	}
#line 23473 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23477 "hcs12x.cc"
OpCall_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23481 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23484 "hcs12x.cc"
)
{
#line 561 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/
		physical_address_t addr;

		physical_address_t callAddr = xb->getEAddr(cpu);

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(page);
		cpu->setRegPC(callAddr);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 23517 "hcs12x.cc"
}

static Operation *DecodeOpCall_idx(CodeType const& code, uint16_t addr)
{
	return new OpCall_idx(code, addr);
}

// TRAP: unimplemented opcode trap
// trapnum: Trap number 0x30-0x39 or 0x40-0xFF
#line 83 "hcs12x.isa"
uint8_t
#line 23529 "hcs12x.cc"
OpTrap::getCycles()
{
#line 280 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 10; }
#line 23534 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23538 "hcs12x.cc"
OpTrap::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23542 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23545 "hcs12x.cc"
)
{
#line 282 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "TRAP";

		sink << mnem << " 0x" << std::hex << trapnum;
		return mnem;
	}
#line 23555 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23559 "hcs12x.cc"
OpTrap::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23563 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23566 "hcs12x.cc"
)
{
#line 289 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		if (((trapnum >= 0x30) && (trapnum <= 0x39)) || ((trapnum >= 0x40) && (trapnum <= 0xFF))) {
			/*
			* (SP) – 0x0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; YH : YL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; XH : XL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; B : A => (M(SP) : M(SP+1))
			* In case of CPU12
			* (SP) – 0x0001 => SP; CCR => (M(SP) )
			* In case of CPU12X
			* (SP) – 0x0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
			* 1 => I; 0 => U
			* (Trap Vector) => PC
			*/

			throw new TrapException(trapnum);

			//  All this code is implemented in the CPU exception handling mecanism
			//
			//		address_t addr = cpu->getRegSP();
			//
			//		addr = addr - 2;
			//		cpu->memWrite16(addr, cpu->getRegPC());
			//
			//		addr = addr - 2;
			//		cpu->memWrite16(addr, cpu->getRegY());
			//
			//		addr = addr - 2;
			//		cpu->memWrite16(addr, cpu->getRegX());
			//
			//		addr = addr - 2;
			//		cpu->memWrite8(addr, cpu->getRegB());
			//		cpu->memWrite16(addr+1, cpu->getRegA());
			//
			//		addr = addr - 2;
			//		cpu->memWrite16(addr, cpu->ccr->getCCR());
			//
			//		// 1 => I; 0 => U
			//		cpu->ccr->setI();
			//		cpu->ccr->setCCRHigh(cpu->ccr->getCCRHigh() & 0x7F);
			//
			//		// (Trap Vector) => PC
			//		cpu->setRegPC(cpu->memRead16(cpu->get_Trap_Vector()));
			//


		}
	}
#line 23619 "hcs12x.cc"
}

static Operation *DecodeOpTrap(CodeType const& code, uint16_t addr)
{
	return new OpTrap(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// LDAA or LDAB #opr8i
#line 83 "hcs12x.isa"
uint8_t
#line 23663 "hcs12x.cc"
OpLdaab_imm::getCycles()
{
#line 38 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 1; }
#line 23668 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23672 "hcs12x.cc"
OpLdaab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23676 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23679 "hcs12x.cc"
)
{
#line 40 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "LDAA";
			} else {
			mnem = "LDAB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;
		return mnem;
	}
#line 23694 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23698 "hcs12x.cc"
OpLdaab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23702 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23705 "hcs12x.cc"
)
{
#line 52 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			cpu->setRegA(opr8i); // ldaa #<opr8i>
			} else {
			cpu->setRegB(opr8i); // ldab #<opr8i>
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (opr8i == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((opr8i & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 23720 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_imm(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_imm(code, addr);
}

// LDAA or LDAB opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 23731 "hcs12x.cc"
OpLdaab_dir::getCycles()
{
#line 67 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 23736 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23740 "hcs12x.cc"
OpLdaab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23744 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23747 "hcs12x.cc"
)
{
#line 69 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "LDAA";
			} else {
			mnem = "LDAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 23762 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23766 "hcs12x.cc"
OpLdaab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23770 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23773 "hcs12x.cc"
)
{
#line 81 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 23790 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_dir(code, addr);
}

// LDAA or LDAB opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 23801 "hcs12x.cc"
OpLdaab_ext::getCycles()
{
#line 98 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 23806 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23810 "hcs12x.cc"
OpLdaab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23814 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23817 "hcs12x.cc"
)
{
#line 100 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "LDAA";
			} else {
			mnem = "LDAB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 23832 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23836 "hcs12x.cc"
OpLdaab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23840 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23843 "hcs12x.cc"
)
{
#line 112 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = opr16a;

		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23862 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_ext(code, addr);
}

// LDAA or LDAB oprx0_xysp
// LDAA or LDAB oprx9,xysp
// LDAA or LDAB oprx16,xysp
// LDAA or LDAB [D,xysp]
// LDAA or LDAB [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 23877 "hcs12x.cc"
OpLdaab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 23881 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 23884 "hcs12x.cc"
)
{
#line 135 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 23893 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 23897 "hcs12x.cc"
OpLdaab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 23901 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 23904 "hcs12x.cc"
)
{
#line 141 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 23913 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 23917 "hcs12x.cc"
OpLdaab_idx::getCycles()
{
#line 147 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 23922 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 23926 "hcs12x.cc"
OpLdaab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 23930 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 23933 "hcs12x.cc"
)
{
#line 149 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "LDAA";
			} else {
			mnem = "LDAB";
		}
		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 23949 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 23953 "hcs12x.cc"
OpLdaab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 23957 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 23960 "hcs12x.cc"
)
{
#line 162 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);

		uint8_t		val = cpu->memRead8(addr);

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23981 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_idx(code, addr);
}

// LDD or LDY or LDX or LDS #opr16i
#line 83 "hcs12x.isa"
uint8_t
#line 23992 "hcs12x.cc"
OpLd_dyxs_imm::getCycles()
{
#line 183 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 23997 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24001 "hcs12x.cc"
OpLd_dyxs_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24005 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24008 "hcs12x.cc"
)
{
#line 185 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "LDD"; break;
			case 1: mnem = "LDY"; break;
			case 2: mnem = "LDX"; break;
			case 3: mnem = "LDS"; break;
		}
		sink << mnem << " #0x" << std::hex << opr16i;
		return mnem;
	}
#line 24024 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24028 "hcs12x.cc"
OpLd_dyxs_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24032 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24035 "hcs12x.cc"
)
{
#line 198 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: cpu->setRegD(opr16i); break;
			case 1: cpu->setRegY(opr16i); break;
			case 2: cpu->setRegX(opr16i); break;
			case 3: cpu->setRegSP(opr16i); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (opr16i == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((opr16i & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24053 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_imm(code, addr);
}

// LDD or LDY or LDX or LDS opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 24064 "hcs12x.cc"
OpLd_dyxs_dir::getCycles()
{
#line 216 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 24069 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24073 "hcs12x.cc"
OpLd_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24077 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24080 "hcs12x.cc"
)
{
#line 218 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "LDD"; break;
			case 1: mnem = "LDY"; break;
			case 2: mnem = "LDX"; break;
			case 3: mnem = "LDS"; break;
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 24096 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24100 "hcs12x.cc"
OpLd_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24104 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24107 "hcs12x.cc"
)
{
#line 231 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t val = cpu->memRead16(addr);
		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24126 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_dir(code, addr);
}

// LDD or LDY or LDX or LDS opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 24137 "hcs12x.cc"
OpLd_dyxs_ext::getCycles()
{
#line 250 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 24142 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24146 "hcs12x.cc"
OpLd_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24150 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24153 "hcs12x.cc"
)
{
#line 252 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "LDD"; break;
			case 1: mnem = "LDY"; break;
			case 2: mnem = "LDX"; break;
			case 3: mnem = "LDS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 24170 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24174 "hcs12x.cc"
OpLd_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24178 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24181 "hcs12x.cc"
)
{
#line 266 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = opr16a;

		uint16_t val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24202 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_ext(code, addr);
}

// LDD or LDY or LDX or LDS oprx0_xysp
// LDD or LDY or LDX or LDS oprx9,xysp
// LDD or LDY or LDX or LDS oprx16,xysp
// LDD or LDY or LDX or LDS [D,xysp]
// LDD or LDY or LDX or LDS [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 24217 "hcs12x.cc"
OpLd_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 24221 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 24224 "hcs12x.cc"
)
{
#line 291 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 24233 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 24237 "hcs12x.cc"
OpLd_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 24241 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 24244 "hcs12x.cc"
)
{
#line 297 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 24253 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 24257 "hcs12x.cc"
OpLd_dyxs_idx::getCycles()
{
#line 303 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 24262 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24266 "hcs12x.cc"
OpLd_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24270 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24273 "hcs12x.cc"
)
{
#line 305 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "LDD"; break;
			case 1: mnem = "LDY"; break;
			case 2: mnem = "LDX"; break;
			case 3: mnem = "LDS"; break;
		}

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 24291 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24295 "hcs12x.cc"
OpLd_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24299 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24302 "hcs12x.cc"
)
{
#line 320 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);

		uint16_t	val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24324 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_idx(code, addr);
}

// LEAY oprx0_xysp
// LEAY oprx9,xysp
// LEAY oprx16,xysp
#line 83 "hcs12x.isa"
uint8_t
#line 24337 "hcs12x.cc"
OpLeay::getCycles()
{
#line 345 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 24342 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24346 "hcs12x.cc"
OpLeay::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24350 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24353 "hcs12x.cc"
)
{
#line 347 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem = "LEAY";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 24364 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24368 "hcs12x.cc"
OpLeay::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24372 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24375 "hcs12x.cc"
)
{
#line 355 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegY(addr);

	}
#line 24386 "hcs12x.cc"
}

static Operation *DecodeOpLeay(CodeType const& code, uint16_t addr)
{
	return new OpLeay(code, addr);
}

// LEAX oprx0_xysp
// LEAX oprx9,xysp
// LEAX oprx16,xysp
#line 83 "hcs12x.isa"
uint8_t
#line 24399 "hcs12x.cc"
OpLeax::getCycles()
{
#line 368 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 24404 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24408 "hcs12x.cc"
OpLeax::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24412 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24415 "hcs12x.cc"
)
{
#line 370 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem = "LEAX";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 24426 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24430 "hcs12x.cc"
OpLeax::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24434 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24437 "hcs12x.cc"
)
{
#line 378 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegX(addr);

	}
#line 24448 "hcs12x.cc"
}

static Operation *DecodeOpLeax(CodeType const& code, uint16_t addr)
{
	return new OpLeax(code, addr);
}

// LEAS  oprx0_xysp
// LEAS  oprx9,xysp
// LEAS  oprx16,xysp
#line 83 "hcs12x.isa"
uint8_t
#line 24461 "hcs12x.cc"
OpLeas::getCycles()
{
#line 391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 24466 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24470 "hcs12x.cc"
OpLeas::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24474 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24477 "hcs12x.cc"
)
{
#line 393 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem = "LEAS";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 24488 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24492 "hcs12x.cc"
OpLeas::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24496 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24499 "hcs12x.cc"
)
{
#line 401 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegSP(addr);

	}
#line 24510 "hcs12x.cc"
}

static Operation *DecodeOpLeas(CodeType const& code, uint16_t addr)
{
	return new OpLeas(code, addr);
}

// STAA or STAB opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 24521 "hcs12x.cc"
OpStaab_dir::getCycles()
{
#line 412 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 24526 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24530 "hcs12x.cc"
OpStaab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24534 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24537 "hcs12x.cc"
)
{
#line 414 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "STAA";
			} else {
			mnem = "STAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;

	}
#line 24553 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24557 "hcs12x.cc"
OpStaab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24561 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24564 "hcs12x.cc"
)
{
#line 427 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t val;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }

		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24583 "hcs12x.cc"
}

static Operation *DecodeOpStaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpStaab_dir(code, addr);
}

// STAA or STAB opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 24594 "hcs12x.cc"
OpStaab_ext::getCycles()
{
#line 446 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 24599 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24603 "hcs12x.cc"
OpStaab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24607 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24610 "hcs12x.cc"
)
{
#line 448 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "STAA";
			} else {
			mnem = "STAB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;

	}
#line 24626 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24630 "hcs12x.cc"
OpStaab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24634 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24637 "hcs12x.cc"
)
{
#line 461 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t	val;
		physical_address_t addr = opr16a;

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24655 "hcs12x.cc"
}

static Operation *DecodeOpStaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpStaab_ext(code, addr);
}

// STAA or STAB oprx0_xysp
// STAA or STAB oprx9,xysp
// STAA or STAB oprx16,xysp
// STAA or STAB [D,xysp]
// STAA or STAB [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 24670 "hcs12x.cc"
OpStaab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 24674 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 24677 "hcs12x.cc"
)
{
#line 484 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 24686 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 24690 "hcs12x.cc"
OpStaab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 24694 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 24697 "hcs12x.cc"
)
{
#line 490 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 24706 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 24710 "hcs12x.cc"
OpStaab_idx::getCycles()
{
#line 496 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ XbModes::GetIDXCycles(xb->getXbMode(), 2, 3, 3, 4, 4); }
#line 24715 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24719 "hcs12x.cc"
OpStaab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24723 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24726 "hcs12x.cc"
)
{
#line 498 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "STAA";
			} else {
			mnem = "STAB";
		}
		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;

	}
#line 24743 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24747 "hcs12x.cc"
OpStaab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24751 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24754 "hcs12x.cc"
)
{
#line 512 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);

		uint8_t val;
		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24772 "hcs12x.cc"
}

static Operation *DecodeOpStaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpStaab_idx(code, addr);
}

// STD or STY or STX or STS opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 24783 "hcs12x.cc"
OpSt_dyxs_dir::getCycles()
{
#line 530 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 24788 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24792 "hcs12x.cc"
OpSt_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24796 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24799 "hcs12x.cc"
)
{
#line 532 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "STD"; break;
			case 1: mnem = "STY"; break;
			case 2: mnem = "STX"; break;
			case 3: mnem = "STS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 24816 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24820 "hcs12x.cc"
OpSt_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24824 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24827 "hcs12x.cc"
)
{
#line 546 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24851 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_dir(code, addr);
}

// STD or STY or STX or STS opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 24862 "hcs12x.cc"
OpSt_dyxs_ext::getCycles()
{
#line 570 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 24867 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24871 "hcs12x.cc"
OpSt_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24875 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 24878 "hcs12x.cc"
)
{
#line 572 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "STD"; break;
			case 1: mnem = "STY"; break;
			case 2: mnem = "STX"; break;
			case 3: mnem = "STS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;

	}
#line 24896 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 24900 "hcs12x.cc"
OpSt_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 24904 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 24907 "hcs12x.cc"
)
{
#line 587 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val = 0;
		physical_address_t addr = opr16a;

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 24931 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_ext(code, addr);
}

// STD or STY or STX or STS oprx0_xysp
// STD or STY or STX or STS oprx9,xysp
// STD or STY or STX or STS oprx16,xysp
// STD or STY or STX or STS [D,xysp]
// STD or STY or STX or STS [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 24946 "hcs12x.cc"
OpSt_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 24950 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 24953 "hcs12x.cc"
)
{
#line 616 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 24962 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 24966 "hcs12x.cc"
OpSt_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 24970 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 24973 "hcs12x.cc"
)
{
#line 622 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 24982 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 24986 "hcs12x.cc"
OpSt_dyxs_idx::getCycles()
{
#line 628 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 3, 3, 4, 4); }
#line 24991 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 24995 "hcs12x.cc"
OpSt_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 24999 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25002 "hcs12x.cc"
)
{
#line 630 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "STD"; break;
			case 1: mnem = "STY"; break;
			case 2: mnem = "STX"; break;
			case 3: mnem = "STS"; break;
		}

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;

	}
#line 25021 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25025 "hcs12x.cc"
OpSt_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25029 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25032 "hcs12x.cc"
)
{
#line 646 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);

		uint16_t val = 0;

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}
		cpu->memWrite16(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25056 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_idx(code, addr);
}

// **********  GLOBAL MEMORY MODE ***************
// GLDAA or GLDAB opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 25068 "hcs12x.cc"
OpGldaab_dir::getCycles()
{
#line 672 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25073 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25077 "hcs12x.cc"
OpGldaab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25081 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25084 "hcs12x.cc"
)
{
#line 674 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GLDAA";
			} else {
			mnem = "GLDAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 25099 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25103 "hcs12x.cc"
OpGldaab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25107 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25110 "hcs12x.cc"
)
{
#line 686 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, true);
		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 25127 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_dir(code, addr);
}

// GLDAA or GLDAB opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 25138 "hcs12x.cc"
OpGldaab_ext::getCycles()
{
#line 703 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25143 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25147 "hcs12x.cc"
OpGldaab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25151 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25154 "hcs12x.cc"
)
{
#line 705 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GLDAA";
			} else {
			mnem = "GLDAB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 25169 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25173 "hcs12x.cc"
OpGldaab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25177 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25180 "hcs12x.cc"
)
{
#line 717 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, true);

		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25199 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_ext(code, addr);
}

// GLDAA or GLDAB oprx0_xysp
// GLDAA or GLDAB oprx9,xysp
// GLDAA or GLDAB oprx16,xysp
// GLDAA or GLDAB [D,xysp]
// GLDAA or GLDAB [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 25214 "hcs12x.cc"
OpGldaab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 25218 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 25221 "hcs12x.cc"
)
{
#line 740 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 25230 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 25234 "hcs12x.cc"
OpGldaab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 25238 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 25241 "hcs12x.cc"
)
{
#line 746 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 25250 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 25254 "hcs12x.cc"
OpGldaab_idx::getCycles()
{
#line 752 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 25259 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25263 "hcs12x.cc"
OpGldaab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25267 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25270 "hcs12x.cc"
)
{
#line 754 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GLDAA";
			} else {
			mnem = "GLDAB";
		}
		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 25286 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25290 "hcs12x.cc"
OpGldaab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25294 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25297 "hcs12x.cc"
)
{
#line 767 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, true);

		uint8_t		val = cpu->memRead8(addr);

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25318 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_idx(code, addr);
}

// GLDD or GLDY or GLDX or GLDS opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 25329 "hcs12x.cc"
OpGld_dyxs_dir::getCycles()
{
#line 788 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25334 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25338 "hcs12x.cc"
OpGld_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25342 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25345 "hcs12x.cc"
)
{
#line 790 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GLDD"; break;
			case 1: mnem = "GLDY"; break;
			case 2: mnem = "GLDX"; break;
			case 3: mnem = "GLDS"; break;
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 25361 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25365 "hcs12x.cc"
OpGld_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25369 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25372 "hcs12x.cc"
)
{
#line 803 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, true);
		uint16_t val = cpu->memRead16(addr);
		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25391 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_dir(code, addr);
}

// GLDD or GLDY or GLDX or GLDS opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 25402 "hcs12x.cc"
OpGld_dyxs_ext::getCycles()
{
#line 822 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25407 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25411 "hcs12x.cc"
OpGld_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25415 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25418 "hcs12x.cc"
)
{
#line 824 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GLDD"; break;
			case 1: mnem = "GLDY"; break;
			case 2: mnem = "GLDX"; break;
			case 3: mnem = "GLDS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 25435 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25439 "hcs12x.cc"
OpGld_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25443 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25446 "hcs12x.cc"
)
{
#line 838 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, true);

		uint16_t val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25467 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_ext(code, addr);
}

// GLDD or GLDY or GLDX or GLDS oprx0_xysp
// GLDD or GLDY or GLDX or GLDS oprx9,xysp
// GLDD or GLDY or GLDX or GLDS oprx16,xysp
// GLDD or GLDY or GLDX or GLDS [D,xysp]
// GLDD or GLDY or GLDX or GLDS [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 25482 "hcs12x.cc"
OpGld_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 25486 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 25489 "hcs12x.cc"
)
{
#line 863 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 25498 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 25502 "hcs12x.cc"
OpGld_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 25506 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 25509 "hcs12x.cc"
)
{
#line 869 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 25518 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 25522 "hcs12x.cc"
OpGld_dyxs_idx::getCycles()
{
#line 875 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 25527 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25531 "hcs12x.cc"
OpGld_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25535 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25538 "hcs12x.cc"
)
{
#line 877 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GLDD"; break;
			case 1: mnem = "GLDY"; break;
			case 2: mnem = "GLDX"; break;
			case 3: mnem = "GLDS"; break;
		}

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 25556 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25560 "hcs12x.cc"
OpGld_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25564 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25567 "hcs12x.cc"
)
{
#line 892 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, true);

		uint16_t	val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25589 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_idx(code, addr);
}

// GSTAA or GSTAB opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 25600 "hcs12x.cc"
OpGstaab_dir::getCycles()
{
#line 914 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 25605 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25609 "hcs12x.cc"
OpGstaab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25613 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25616 "hcs12x.cc"
)
{
#line 916 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GSTAA";
			} else {
			mnem = "GSTAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;

	}
#line 25632 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25636 "hcs12x.cc"
OpGstaab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25640 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25643 "hcs12x.cc"
)
{
#line 929 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, true);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }

		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25662 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_dir(code, addr);
}

// GSTAA or GSTAB opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 25673 "hcs12x.cc"
OpGstaab_ext::getCycles()
{
#line 948 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25678 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25682 "hcs12x.cc"
OpGstaab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25686 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25689 "hcs12x.cc"
)
{
#line 950 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GSTAA";
			} else {
			mnem = "GSTAB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;

	}
#line 25705 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25709 "hcs12x.cc"
OpGstaab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25713 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25716 "hcs12x.cc"
)
{
#line 963 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t	val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, true);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25734 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_ext(code, addr);
}

// GSTAA or GSTAB oprx0_xysp
// GSTAA or GSTAB oprx9,xysp
// GSTAA or GSTAB oprx16,xysp
// GSTAA or GSTAB [D,xysp]
// GSTAA or GSTAB [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 25749 "hcs12x.cc"
OpGstaab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 25753 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 25756 "hcs12x.cc"
)
{
#line 986 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 25765 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 25769 "hcs12x.cc"
OpGstaab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 25773 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 25776 "hcs12x.cc"
)
{
#line 992 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 25785 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 25789 "hcs12x.cc"
OpGstaab_idx::getCycles()
{
#line 998 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 4, 5, 5); }
#line 25794 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25798 "hcs12x.cc"
OpGstaab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25802 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25805 "hcs12x.cc"
)
{
#line 1000 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "GSTAA";
			} else {
			mnem = "GSTAB";
		}
		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;

	}
#line 25822 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25826 "hcs12x.cc"
OpGstaab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25830 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25833 "hcs12x.cc"
)
{
#line 1014 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, true);

		uint8_t val;
		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25851 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_idx(code, addr);
}

// GSTD or GSTY or GSTX or GSTS opr8a
#line 83 "hcs12x.isa"
uint8_t
#line 25862 "hcs12x.cc"
OpGst_dyxs_dir::getCycles()
{
#line 1032 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 25867 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25871 "hcs12x.cc"
OpGst_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25875 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25878 "hcs12x.cc"
)
{
#line 1034 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GSTD"; break;
			case 1: mnem = "GSTY"; break;
			case 2: mnem = "GSTX"; break;
			case 3: mnem = "GSTS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 25895 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25899 "hcs12x.cc"
OpGst_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25903 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25906 "hcs12x.cc"
)
{
#line 1048 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, true);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 25930 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_dir(code, addr);
}

// GSTD or GSTY or GSTX or GSTS opr16a
#line 83 "hcs12x.isa"
uint8_t
#line 25941 "hcs12x.cc"
OpGst_dyxs_ext::getCycles()
{
#line 1072 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 25946 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 25950 "hcs12x.cc"
OpGst_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 25954 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 25957 "hcs12x.cc"
)
{
#line 1074 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GSTD"; break;
			case 1: mnem = "GSTY"; break;
			case 2: mnem = "GSTX"; break;
			case 3: mnem = "GSTS"; break;
		}

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;

	}
#line 25975 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 25979 "hcs12x.cc"
OpGst_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 25983 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 25986 "hcs12x.cc"
)
{
#line 1089 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val = 0;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, true);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 26010 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_ext(code, addr);
}

// GSTD or GSTY or GSTX or GSTS oprx0_xysp
// GSTD or GSTY or GSTX or GSTS oprx9,xysp
// GSTD or GSTY or GSTX or GSTS oprx16,xysp
// GSTD or GSTY or GSTX or GSTS [D,xysp]
// GSTD or GSTY or GSTX or GSTS [oprx16,xysp]
#line 74 "hcs12x.isa"
void
#line 26025 "hcs12x.cc"
OpGst_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 26029 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 26032 "hcs12x.cc"
)
{
#line 1118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 26041 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 26045 "hcs12x.cc"
OpGst_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 26049 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 26052 "hcs12x.cc"
)
{
#line 1124 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 26061 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 26065 "hcs12x.cc"
OpGst_dyxs_idx::getCycles()
{
#line 1130 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 4, 5, 5); }
#line 26070 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 26074 "hcs12x.cc"
OpGst_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26078 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26081 "hcs12x.cc"
)
{
#line 1132 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "GSTD"; break;
			case 1: mnem = "GSTY"; break;
			case 2: mnem = "GSTX"; break;
			case 3: mnem = "GSTS"; break;
		}

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;

	}
#line 26100 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26104 "hcs12x.cc"
OpGst_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26108 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26111 "hcs12x.cc"
)
{
#line 1148 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, true);

		uint16_t val = 0;

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}
		cpu->memWrite16(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 26135 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// A->B  or B->A
#line 83 "hcs12x.isa"
uint8_t
#line 26179 "hcs12x.cc"
OpT_ab_ba::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 2; }
#line 26184 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 26188 "hcs12x.cc"
OpT_ab_ba::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26192 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26195 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		string mnem;

		if (b == 0) { mnem = "TAB"; } else { mnem = "TBA";}
		sink << mnem;

		return mnem;
	}
#line 26207 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26211 "hcs12x.cc"
OpT_ab_ba::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26215 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26218 "hcs12x.cc"
)
{
#line 50 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		uint8_t val;

		if (b == 0) {
			val = cpu->getRegA();
			cpu->setRegB(val);
			} else {
			val = cpu->getRegB();
			cpu->setRegA(val);
		}

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 26238 "hcs12x.cc"
}

static Operation *DecodeOpT_ab_ba(CodeType const& code, uint16_t addr)
{
	return new OpT_ab_ba(code, addr);
}

// ****************  Common Section to HCS12X ( HLS = 0 ) *************
// *************** HCS12 - EXCHANGE Instructions ************
// XGDX or XGDY or EXG
#line 83 "hcs12x.isa"
uint8_t
#line 26251 "hcs12x.cc"
OpExg_hcs12::getCycles()
{
#line 73 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 26256 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 68 "hcs12x.isa"
string
#line 26264 "hcs12x.cc"
OpExg_hcs12::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26268 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26271 "hcs12x.cc"
)
{
#line 79 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		string mnem;


		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		// Exchange register Contents. There is no sign extension
		uint8_t eb = (1 << 8) | (lms << 4) | (0 << 3) | lls;

		switch (eb)
		{
			case 0xC5: mnem = "XGDX";  break;
			case 0xC6: mnem = "XGDY"; break;
			default: mnem = "EXG";
		}
		sink << mnem << " ";

		if ((eb != 0xC5) && (eb != 0xC6))
		{
			sink << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
		}

		return mnem;
	}
#line 26312 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26316 "hcs12x.cc"
OpExg_hcs12::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26320 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26323 "hcs12x.cc"
)
{
#line 117 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Exchange register Contents. EXG r1, r2
		// There is no sign extension
		// Only CCR[7:0] is used for HCS12

		if (srcSize == dstSize) {
			// (r1) <=> (r2)
			if (srcSize == 8) {
				cpu->eblb->exchange<uint8_t>(rrSrc, rrDst);
				} else {
				cpu->eblb->exchange<uint16_t>(rrSrc, rrDst);
			}
		}
		else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
			// 0x00:(r1) => r2
			// if r2 isn't D then && (r2[7:0]) => r1
			uint16_t r1Val = 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc);
			uint8_t r2Val = (uint8_t) cpu->eblb->getter<uint16_t>(rrDst); // only low 8 bits
			cpu->eblb->setter<uint16_t>(rrDst, r1Val);
			if (rrDst != 4 /* reg D*/) {
				cpu->eblb->setter<uint16_t>(rrDst, r2Val);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8)) {
			// (r1[7:0]) => (r2)
			// if r2 is A then 0x00:(r2) => r1 else 0xFF:(r2) => r1
			uint8_t r1Val = cpu->eblb->getter<uint16_t>(rrSrc); // only low 8 bits
			uint8_t r2Val = cpu->eblb->getter<uint8_t>(rrDst);

			cpu->eblb->setter<uint8_t>(rrDst,r1Val);
			if (rrDst == 0 /*reg A*/) {
				cpu->eblb->setter<uint16_t>(rrSrc, 0x00FF & r2Val);
				} else {
				cpu->eblb->setter<uint16_t>(rrSrc, 0xFF00 | r2Val);
			}
		}

	}
#line 26391 "hcs12x.cc"
}

static Operation *DecodeOpExg_hcs12(CodeType const& code, uint16_t addr)
{
	return new OpExg_hcs12(code, addr);
}

// ***************************  TRANSFER Instructions
// TFR or TPA or TSX or TSY or TXS or TYS or SEX
#line 83 "hcs12x.isa"
uint8_t
#line 26403 "hcs12x.cc"
OpTfr_hcs12::getCycles()
{
#line 187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 26408 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 68 "hcs12x.isa"
string
#line 26416 "hcs12x.cc"
OpTfr_hcs12::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26420 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26423 "hcs12x.cc"
)
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		string mnem;

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		// Transfer Register Content to Another register
		uint8_t eb = (0 << 8) | (lms << 4) | (0 << 3) | lls;

		switch (eb)
		{
			case 0x02: mnem = "TAP"; sink << mnem; break;
			case 0x20: mnem = "TPA"; sink << mnem; break;
			case 0x75: mnem = "TSX"; sink << mnem; break;
			case 0x76: mnem = "TSY"; sink << mnem; break;
			case 0x57: mnem = "TXS"; sink << mnem; break;
			case 0x67: mnem = "TYS"; sink << mnem; break;
			default: mnem = "TFR"; sink << mnem << " " << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
		}

		return mnem;
	}
#line 26461 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26465 "hcs12x.cc"
OpTfr_hcs12::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26469 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26472 "hcs12x.cc"
)
{
#line 229 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;
		uint8_t oldCCRLow = cpu->ccr->getCCRLow();

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Transfer Register Content to Another register
		// Only CCR[7:0] is used for HCS12

		/*
		if (sizeof(r1) && sizeof(r2) { (r1) => (r2)}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:r1 => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => (r2) }
		*/

		if (srcSize == dstSize) {
			// (r1) => (r2)
			if (srcSize == 8) {
				cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
				} else {
				cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
			}
		}
		else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
			// sex:r1 => r2
			if ((cpu->eblb->getter<uint8_t>(rrSrc) & 0x80) == 0x80)
			{ // if r1 bit 7 = 1 then 0xFF:(r1) => r2
				cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) | 0xFF00);
			} else
			{ // if r1 bit 7 = 1 then 0x00:(r1) => r2
				cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) & 0x00FF);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8)) {
			// (r1[7:0]) => (r2)
			uint8_t tmp = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
			cpu->eblb->setter<uint8_t>(rrDst, tmp);
		}

		if ((oldCCRLow & 0x40) == 0x00) {
			cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
		}
	}
#line 26541 "hcs12x.cc"
}

static Operation *DecodeOpTfr_hcs12(CodeType const& code, uint16_t addr)
{
	return new OpTfr_hcs12(code, addr);
}

// ****************  Specific Section to HCS12X ( HLS = 1 ) *************
// ***************  HCS12X - EXCHANGE Instructions ************
// XGDX or XGDY or EXG
#line 83 "hcs12x.isa"
uint8_t
#line 26554 "hcs12x.cc"
OpExg_hcs12x::getCycles()
{
#line 302 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 26559 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 68 "hcs12x.isa"
string
#line 26567 "hcs12x.cc"
OpExg_hcs12x::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26571 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26574 "hcs12x.cc"
)
{
#line 308 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		string mnem;

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lls = EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break;
			case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls = EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break;
			case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break;
			default: rrDst = lls;
		}

		// Exchange register Contents. There is no sign extension

		string srcName = EBLB::getRegName(rrSrc);
		string dstName = EBLB::getRegName(rrDst);

		if (lls == EBLB::EBLBMSLSRegs::A ) {
			if (lms == EBLB::EBLBMSLSRegs::CCR ) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "H";
			}
			} if (lls == EBLB::EBLBMSLSRegs::B) {
			if (lms == EBLB::EBLBMSLSRegs::CCR) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "L";
			}
		}

		if (lms == EBLB::EBLBMSLSRegs::A) {
			if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "H";
			}
			} if (lms == EBLB::EBLBMSLSRegs::B) {
			if (lls == EBLB::EBLBMSLSRegs::CCR) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "L";
			}
		}

		// Exchange Registers Contents
		uint8_t eb = (1 << 8) | (lms << 4) | (1 << 3) | lls;

		switch (eb)
		{
			case 0xC5: mnem = "XGDX"; break;
			case 0xC6: mnem = "XGDY"; break;
			default: mnem = "EXG";
		}

		sink << mnem << " ";

		if ((eb != 0xC5) && (eb != 0xC6))
		{
			sink << srcName << "," << dstName;
		}

		return mnem;

	}
#line 26682 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26686 "hcs12x.cc"
OpExg_hcs12x::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26690 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26693 "hcs12x.cc"
)
{
#line 413 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRWord
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;
		uint8_t oldCCRLow = cpu->ccr->getCCRLow();

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Exchange register Contents. There is no sign extension
		/*
		if (sizeof(r1) && sizeof(r2) { (r1) <=> (r2)}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {0x00:(r1) => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) <=> (r2) }
		*/

		if ( srcSize == dstSize)
		{
			// (r1) <=> (r2)
			if (srcSize == 8)
			{
				cpu->eblb->exchange<uint8_t>(rrSrc,rrDst);
			}
			else if (srcSize == 16)
			{
				cpu->eblb->exchange<uint16_t>(rrSrc,rrDst);
			}
		}
		else if ((srcSize == 8) && (dstSize == 16))
		{
			// 0x00:(r1) => r2
			/* if (r2 is D) 0x00:(r1) => D
			* else
			*  if (r1 is A) (r1) => r2H
			*  else if (r1 is B) (r1) => r2L
			*/
			if (rrDst == EBLB::EBLBRegs::D /* reg D */)
			{
				cpu->eblb->setter<uint16_t>(rrDst, 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
			}
			else if (rrSrc == EBLB::EBLBRegs::A)
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;  // get the lower bits
				tmp = tmp | (((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) << 8);
				cpu->eblb->setter<uint16_t>(rrDst, tmp);
			}
			else if (rrSrc == EBLB::EBLBRegs::B)
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00; // get higher bits
				tmp = tmp | ( 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
				cpu->eblb->setter<uint16_t>(rrDst, tmp);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8))
		{
			// (r1[7:0]) <=> (r2)
			/*
			* if (r1 is D)
			* 	 if (r2 is A) (B) <=> (A)
			* 	 else 0xFF => A // r2 is B
			* else
			* 	 if (r2 is A) (r1H) <=> A
			* 	 else (r1L) <=> B
			*/
			if (rrSrc == EBLB::EBLBRegs::D) {
				if (rrDst == EBLB::EBLBRegs::A) {
					cpu->eblb->exchange<uint8_t>(EBLB::EBLBRegs::B, EBLB::EBLBRegs::A);
					} else if (rrDst == EBLB::EBLBRegs::B) {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, 0xFF);
				}
				} else {
				if (rrDst == EBLB::EBLBRegs::A) {
					uint16_t a16 = ((uint16_t) cpu->eblb->getter<uint16_t>(EBLB::EBLBRegs::A)) << 8;
					uint8_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) >> 8;
					uint16_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;

					cpu->eblb->setter<uint16_t>(rrSrc, a16 | r1l);
					cpu->eblb->setter<uint8_t>(rrDst, r1h);

					} else if (rrDst == EBLB::EBLBRegs::B) {
					uint16_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) & 0xFF00;
					uint8_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
					uint16_t b16 = 0x00FF & cpu->eblb->getter<uint8_t>(rrDst);

					cpu->eblb->setter<uint16_t>(rrSrc, r1h | b16);
					cpu->eblb->setter<uint16_t>(rrDst, r1l);
				}
			}
		}

		if ((oldCCRLow & 0x40) == 0x00) {
			cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
		}
	}
#line 26826 "hcs12x.cc"
}

static Operation *DecodeOpExg_hcs12x(CodeType const& code, uint16_t addr)
{
	return new OpExg_hcs12x(code, addr);
}

// *************************** HCS12X - TRANSFER Instructions
// TAP or TFR or TPA or TSX or TSY or TXS or TYS or SEX
#line 83 "hcs12x.isa"
uint8_t
#line 26838 "hcs12x.cc"
OpTfr_hcs12x::getCycles()
{
#line 548 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 26843 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 68 "hcs12x.isa"
string
#line 26851 "hcs12x.cc"
OpTfr_hcs12x::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 26855 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 26858 "hcs12x.cc"
)
{
#line 554 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		string mnem;

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lls = EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break;
			case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls = EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break;
			case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break;
			default: rrDst = lls;
		}

		// Transfer register Contents. TFR r1,r2

		string srcName = EBLB::getRegName(rrSrc);
		string dstName = EBLB::getRegName(rrDst);

		if (lls == EBLB::EBLBMSLSRegs::A ) {
			if (lms == EBLB::EBLBMSLSRegs::CCR ) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "H";
			}
			} if (lls == EBLB::EBLBMSLSRegs::B) {
			if (lms == EBLB::EBLBMSLSRegs::CCR) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "L";
			}
		}

		if (lms == EBLB::EBLBMSLSRegs::A) {
			if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "H";
			}
			} if (lms == EBLB::EBLBMSLSRegs::B) {
			if (lls == EBLB::EBLBMSLSRegs::CCR) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "L";
			}
		}

		// Transfer Register Content to Another register
		uint8_t eb = (0 << 8) | (lms << 4) | (1 << 3) | lls;

		switch (eb)
		{
			case 0x02: mnem = "TAP"; sink << mnem; break;
			case 0x20: mnem = "TPA"; sink << mnem; break;
			case 0x75: mnem = "TSX"; sink << mnem; break;
			case 0x76: mnem = "TSY"; sink << mnem; break;
			case 0x57: mnem = "TXS"; sink << mnem; break;
			case 0x67: mnem ="TYS"; sink << mnem; break;
			default: mnem = "TFR"; sink << mnem << " " << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
		}

		return mnem;
	}
#line 26962 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 26966 "hcs12x.cc"
OpTfr_hcs12x::execute(
#line 62 "hcs12x.isa"
CPU *
#line 26970 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 26973 "hcs12x.cc"
)
{
#line 655 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Transfer Register Content to Another register
		/*
		if (sizeof(r1) && sizeof(r2) { (r1) => r2}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:(r1) => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => r2 }
		*/

		if (srcSize == dstSize)
		{
			/*
			* if ((r1 is D) && ((r2 is X) || (r2 is Y))) then sex:D => r2
			* else (r1) => r2
			*/
			if ((rrSrc == EBLB::EBLBRegs::D) && ((rrDst == EBLB::EBLBRegs::X) || (rrDst == EBLB::EBLBRegs::Y)))
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrSrc);
				if ((tmp & 0x8000) == 0x8000) {
					cpu->eblb->setter<uint16_t>(rrDst, 0xFFFF);
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, 0x0000);
				}
				} else {
				if (srcSize == 8) {
					cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
				}
			}

		} else if ((srcSize == 8) && (dstSize == 16))
		{
			/*
			* if (r2 is D) then sex:(r1) => r2
			* else
			*    if (r1 is A) then (r1) => r2H
			*    else (r1) => r2L
			* */
			if (rrDst == EBLB::EBLBRegs::D) {
				uint8_t tmp = cpu->eblb->getter<uint8_t>(rrSrc);
				if ((tmp & 0x80) == 0x80) {
					cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) | 0xFF00);
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) & 0x00FF);
				}
				} else {
				uint8_t r1 = cpu->eblb->getter<uint8_t>(rrSrc);
				if (rrSrc == EBLB::EBLBRegs::A) {
					uint16_t r2l = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;
					cpu->eblb->setter<uint16_t>(rrDst, (((uint16_t) r1) << 8) | r2l);
					} else {
					uint16_t r2h = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00;
					cpu->eblb->setter<uint16_t>(rrDst, r2h | r1);
				}
			}
		} else if ((srcSize == 16) && (dstSize == 8))
		{
			/*
			* if (r2 is A) then
			*   if (r1 is D) then B => A
			*   else r1H => A
			* else
			*   r1L => B
			*/
			if (rrDst == EBLB::EBLBRegs::A) {
				if (rrSrc == EBLB::EBLBRegs::D) {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, cpu->eblb->getter<uint8_t>(EBLB::EBLBRegs::B));
					} else {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) >> 8));
				}
				} else {
				cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::B, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) & 0x00FF));
			}
		}
	}
#line 27094 "hcs12x.cc"
}

static Operation *DecodeOpTfr_hcs12x(CodeType const& code, uint16_t addr)
{
	return new OpTfr_hcs12x(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
#line 83 "hcs12x.isa"
uint8_t
#line 27137 "hcs12x.cc"
OpMovb_0B::getCycles()
{
#line 38 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 3;}
#line 27142 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27146 "hcs12x.cc"
OpMovb_0B::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27150 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27153 "hcs12x.cc"
)
{
#line 40 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " #0x" << std::hex << ii << ",0x" << std::hex << opr16a;
		return mnem;
	}
#line 27163 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27167 "hcs12x.cc"
OpMovb_0B::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27171 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27174 "hcs12x.cc"
)
{
#line 47 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = opr16a;

		cpu->memWrite8(addr,ii);
	}
#line 27183 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0B(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0B(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27193 "hcs12x.cc"
OpMovb_08::getCycles()
{
#line 55 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 4, 5); }
#line 27198 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27202 "hcs12x.cc"
OpMovb_08::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27206 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27209 "hcs12x.cc"
)
{
#line 57 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " #0x" << std::hex << ii << ",";
		xb->disasm(sink);
		return mnem;
	}
#line 27220 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27224 "hcs12x.cc"
OpMovb_08::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27228 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27231 "hcs12x.cc"
)
{
#line 65 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);

		cpu->memWrite8(addr,ii);
	}
#line 27240 "hcs12x.cc"
}

static Operation *DecodeOpMovb_08(CodeType const& code, uint16_t addr)
{
	return new OpMovb_08(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27250 "hcs12x.cc"
OpMovb_0C::getCycles()
{
#line 74 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 5; }
#line 27255 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27259 "hcs12x.cc"
OpMovb_0C::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27263 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27266 "hcs12x.cc"
)
{
#line 76 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " 0x" << std::hex << opr16asrc << ",0x" << std::hex << opr16adst;
		return mnem;
	}
#line 27276 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27280 "hcs12x.cc"
OpMovb_0C::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27284 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27287 "hcs12x.cc"
)
{
#line 83 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = opr16asrc;
		physical_address_t addrdst = opr16adst;

		uint8_t tmp = cpu->memRead8(addrsrc);
		cpu->memWrite8(addrdst, tmp);
	}
#line 27298 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0C(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0C(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27308 "hcs12x.cc"
OpMovb_09::getCycles()
{
#line 93 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 5, 6); }
#line 27313 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27317 "hcs12x.cc"
OpMovb_09::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27321 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27324 "hcs12x.cc"
)
{
#line 95 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " 0x" <<  std::hex << opr16asrc << ", ";
		xb->disasm(sink);

		return mnem;
	}
#line 27336 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27340 "hcs12x.cc"
OpMovb_09::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27344 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27347 "hcs12x.cc"
)
{
#line 104 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		uint16_t addr = xb->getEAddr(cpu);
		uint8_t tmp = cpu->memRead8(opr16asrc);
		cpu->memWrite8(addr, tmp);
	}
#line 27356 "hcs12x.cc"
}

static Operation *DecodeOpMovb_09(CodeType const& code, uint16_t addr)
{
	return new OpMovb_09(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27366 "hcs12x.cc"
OpMovb_0D::getCycles()
{
#line 112 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 6, 7); }
#line 27371 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27375 "hcs12x.cc"
OpMovb_0D::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27379 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27382 "hcs12x.cc"
)
{
#line 114 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << opr16a;
		return mnem;
	}
#line 27394 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27398 "hcs12x.cc"
OpMovb_0D::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27402 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27405 "hcs12x.cc"
)
{
#line 123 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrxb = xb->getEAddr(cpu);
		physical_address_t addropr16a = opr16a;

		uint8_t tmp = cpu->memRead8(addrxb);
		cpu->memWrite8(addropr16a, tmp);
	}
#line 27416 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0D(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0D(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27426 "hcs12x.cc"
OpMovb_0A::getCycles()
{
#line 133 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		switch (xbsrc->getXbMode())
		{
			case XbModes::IDX: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 4, 5, 5, 6);
			case XbModes::IDX1: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 5, 6, 6, 7);
			case XbModes::IDX2: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 5, 6, 6, 6);
			case XbModes::IDXD_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 6, 6, 7, 7, 8);
			case XbModes::IDX2_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 7, 7, 8, 8, 9);
			default: return 0x00;
		}
	}
#line 27442 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27446 "hcs12x.cc"
OpMovb_0A::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27450 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27453 "hcs12x.cc"
)
{
#line 146 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVB";

		sink << mnem << " ";
		xbsrc->disasm(sink);
		sink << ",";
		xbdst->disasm(sink);
		return mnem;
	}
#line 27466 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27470 "hcs12x.cc"
OpMovb_0A::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27474 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27477 "hcs12x.cc"
)
{
#line 156 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		uint16_t addrsrc = xbsrc->getEAddr(cpu);
		uint16_t addrdst = xbdst->getEAddr(cpu);
		uint8_t  tmp = cpu->memRead8(addrsrc);
		cpu->memWrite8(addrdst, tmp);
	}
#line 27487 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0A(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0A(code, addr);
}

// ---------
#line 83 "hcs12x.isa"
uint8_t
#line 27498 "hcs12x.cc"
OpMovw_03::getCycles()
{
#line 167 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 4; }
#line 27503 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27507 "hcs12x.cc"
OpMovw_03::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27511 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27514 "hcs12x.cc"
)
{
#line 169 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " #0x" << std::hex << opr16i << ",0x" << std::hex << opr16a;
		return mnem;
	}
#line 27524 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27528 "hcs12x.cc"
OpMovw_03::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27532 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27535 "hcs12x.cc"
)
{
#line 176 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = opr16a;

		cpu->memWrite16(addr,opr16i);
	}
#line 27544 "hcs12x.cc"
}

static Operation *DecodeOpMovw_03(CodeType const& code, uint16_t addr)
{
	return new OpMovw_03(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27554 "hcs12x.cc"
OpMovw_04::getCycles()
{
#line 184 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 5; }
#line 27559 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27563 "hcs12x.cc"
OpMovw_04::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27567 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27570 "hcs12x.cc"
)
{
#line 186 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " 0x" << std::hex << opr16asrc << ",0x" << std::hex << opr16adst;
		return mnem;
	}
#line 27580 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27584 "hcs12x.cc"
OpMovw_04::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27588 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27591 "hcs12x.cc"
)
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = opr16asrc;
		physical_address_t addrdst = opr16adst;

		uint16_t tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addrdst, tmp);
	}
#line 27602 "hcs12x.cc"
}

static Operation *DecodeOpMovw_04(CodeType const& code, uint16_t addr)
{
	return new OpMovw_04(code, addr);
}

// Movw_18_00 IDX IDX1 IDX2 [D,IDX] [IDX2]
#line 68 "hcs12x.isa"
string
#line 27613 "hcs12x.cc"
OpMovw_00::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27617 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27620 "hcs12x.cc"
)
{
#line 205 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " #0x" << std::hex << opr16i << ",";
		xb->disasm(sink);
		return mnem;
	}
#line 27631 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27635 "hcs12x.cc"
OpMovw_00::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27639 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27642 "hcs12x.cc"
)
{
#line 213 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);

		cpu->memWrite16(addr,opr16i);
	}
#line 27651 "hcs12x.cc"
}

static Operation *DecodeOpMovw_00(CodeType const& code, uint16_t addr)
{
	return new OpMovw_00(code, addr);
}

/*
* Movbw_18_01 IDX IDX1 IDX2 [D,IDX] [IDX2]
* */
#line 83 "hcs12x.isa"
uint8_t
#line 27664 "hcs12x.cc"
OpMovw_01::getCycles()
{
#line 226 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 5, 6); }
#line 27669 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27673 "hcs12x.cc"
OpMovw_01::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27677 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27680 "hcs12x.cc"
)
{
#line 228 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " 0x" <<  std::hex << opr16asrc << ",";
		xb->disasm(sink);
		return mnem;
	}
#line 27691 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27695 "hcs12x.cc"
OpMovw_01::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27699 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27702 "hcs12x.cc"
)
{
#line 236 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		physical_address_t addrsrc = opr16asrc;

		uint16_t tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addr, tmp);
	}
#line 27713 "hcs12x.cc"
}

static Operation *DecodeOpMovw_01(CodeType const& code, uint16_t addr)
{
	return new OpMovw_01(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27723 "hcs12x.cc"
OpMovw_05::getCycles()
{
#line 247 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 6, 7); }
#line 27728 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27732 "hcs12x.cc"
OpMovw_05::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27736 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27739 "hcs12x.cc"
)
{
#line 249 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ",0x" << std::hex << opr16a;
		return mnem;
	}
#line 27751 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27755 "hcs12x.cc"
OpMovw_05::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27759 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27762 "hcs12x.cc"
)
{
#line 258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrxb = xb->getEAddr(cpu);
		physical_address_t addrdst = opr16a;

		uint16_t tmp = cpu->memRead16(addrxb);
		cpu->memWrite16(addrdst, tmp);
	}
#line 27773 "hcs12x.cc"
}

static Operation *DecodeOpMovw_05(CodeType const& code, uint16_t addr)
{
	return new OpMovw_05(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 27783 "hcs12x.cc"
OpMovw_02::getCycles()
{
#line 268 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		switch (xbsrc->getXbMode())
		{
			case XbModes::IDX: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 5, 5, 6, 7);
			case XbModes::IDX1: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 5, 5, 6, 7);
			case XbModes::IDX2: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 6, 6, 7, 8);
			case XbModes::IDXD_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 6, 6, 7, 8);
			case XbModes::IDX2_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 6, 7, 6, 8, 9);
			default: return 0x00;
		}
	}
#line 27799 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27803 "hcs12x.cc"
OpMovw_02::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27807 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27810 "hcs12x.cc"
)
{
#line 281 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		string mnem = "MOVW";

		sink << mnem << " ";
		xbsrc->disasm(sink);
		sink << ",";
		xbdst->disasm(sink);
		return mnem;
	}
#line 27823 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27827 "hcs12x.cc"
OpMovw_02::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27831 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27834 "hcs12x.cc"
)
{
#line 291 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = xbsrc->getEAddr(cpu);
		physical_address_t addrdst = xbdst->getEAddr(cpu);

		uint16_t  tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addrdst, tmp);
	}
#line 27845 "hcs12x.cc"
}

static Operation *DecodeOpMovw_02(CodeType const& code, uint16_t addr)
{
	return new OpMovw_02(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ***** Addition Instructions ****** */
// ABA ( A+B => A)
#line 83 "hcs12x.isa"
uint8_t
#line 27890 "hcs12x.cc"
OpAba::getCycles()
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 27895 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27899 "hcs12x.cc"
OpAba::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27903 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27906 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ABA";

		sink << mnem;

		return mnem;
	}
#line 27917 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27921 "hcs12x.cc"
OpAba::execute(
#line 62 "hcs12x.isa"
CPU *
#line 27925 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 27928 "hcs12x.cc"
)
{
#line 51 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t aVal = cpu->getRegA();
		uint8_t bVal = cpu->getRegB();

		Add8(result, carry_out, overflow, aVal, bVal, carry_in);

		cpu->setRegA(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((aVal & 0x0F)+(bVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (cpu->getRegA() & 0x08);
		uint8_t b3 = (cpu->getRegB() & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & b3) | (b3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();
	}
#line 27957 "hcs12x.cc"
}

static Operation *DecodeOpAba(CodeType const& code, uint16_t addr)
{
	return new OpAba(code, addr);
}

// ABX  (X+B => X)
#line 83 "hcs12x.isa"
uint8_t
#line 27968 "hcs12x.cc"
OpAbx::getCycles()
{
#line 80 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 27973 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 27977 "hcs12x.cc"
OpAbx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 27981 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 27984 "hcs12x.cc"
)
{
#line 82 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ABX";

		sink << mnem;

		return mnem;
	}
#line 27995 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 27999 "hcs12x.cc"
OpAbx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28003 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28006 "hcs12x.cc"
)
{
#line 90 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		uint16_t result;
		uint8_t carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t bVal = cpu->getRegB();
		uint16_t xVal = cpu->getRegX();

		Add16(result, carry_out, overflow,(uint16_t) bVal, xVal, carry_in);

		cpu->setRegX(result);

	}
#line 28024 "hcs12x.cc"
}

static Operation *DecodeOpAbx(CodeType const& code, uint16_t addr)
{
	return new OpAbx(code, addr);
}

// ABY (Y+B=>Y)
#line 83 "hcs12x.isa"
uint8_t
#line 28035 "hcs12x.cc"
OpAby::getCycles()
{
#line 108 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 28040 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28044 "hcs12x.cc"
OpAby::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28048 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28051 "hcs12x.cc"
)
{
#line 110 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ABY";

		sink << mnem;

		return mnem;
	}
#line 28062 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28066 "hcs12x.cc"
OpAby::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28070 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28073 "hcs12x.cc"
)
{
#line 118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint16_t result;
		uint8_t carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t bVal = cpu->getRegB();
		uint16_t yVal = cpu->getRegY();

		Add16(result, carry_out, overflow, (uint16_t) bVal, yVal, carry_in);

		cpu->setRegY(result);

	}
#line 28090 "hcs12x.cc"
}

static Operation *DecodeOpAby(CodeType const& code, uint16_t addr)
{
	return new OpAby(code, addr);
}

// ADCab IMM  (regAB + ii + carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28101 "hcs12x.cc"
OpAdc_ab_imm::getCycles()
{
#line 135 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1;}
#line 28106 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28110 "hcs12x.cc"
OpAdc_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28114 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28117 "hcs12x.cc"
)
{
#line 137 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADCA";
			} else {
			mnem = "ADCB";
		}
		sink << mnem << " #0x"<< std::hex << opr8i;

		return mnem;
	}
#line 28133 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28137 "hcs12x.cc"
OpAdc_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28141 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28144 "hcs12x.cc"
)
{
#line 150 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Add8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8i & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8i & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();
	}
#line 28181 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_imm(code, addr);
}

// ADCab DIR  (regAB + mem[regDirect:opr8a] + carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28192 "hcs12x.cc"
OpAdc_ab_dir::getCycles()
{
#line 187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3;}
#line 28197 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28201 "hcs12x.cc"
OpAdc_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28205 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28208 "hcs12x.cc"
)
{
#line 189 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADCA";
			} else {
			mnem = "ADCB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 28224 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28228 "hcs12x.cc"
OpAdc_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28232 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28235 "hcs12x.cc"
)
{
#line 202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28276 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_dir(code, addr);
}

// ADCab EXT (regAB + mem[opr16a] + carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28287 "hcs12x.cc"
OpAdc_ab_ext::getCycles()
{
#line 243 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3;}
#line 28292 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28296 "hcs12x.cc"
OpAdc_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28300 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28303 "hcs12x.cc"
)
{
#line 245 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADCA";
			} else {
			mnem = "ADCB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 28319 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28323 "hcs12x.cc"
OpAdc_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28327 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28330 "hcs12x.cc"
)
{
#line 258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr16aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr16aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28371 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_ext(code, addr);
}

// ADCab IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB + mem[xb->addrE] + carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28382 "hcs12x.cc"
OpAdc_ab_idx::getCycles()
{
#line 299 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 28387 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28391 "hcs12x.cc"
OpAdc_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28395 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28398 "hcs12x.cc"
)
{
#line 301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ADCA";
			} else {
			mnem = "ADCB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 28416 "hcs12x.cc"
}
#line 74 "hcs12x.isa"
void
#line 28420 "hcs12x.cc"
OpAdc_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 28424 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 28427 "hcs12x.cc"
)
{
#line 316 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 28436 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 28440 "hcs12x.cc"
OpAdc_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 28444 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 28447 "hcs12x.cc"
)
{
#line 322 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 28456 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28460 "hcs12x.cc"
OpAdc_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28464 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28467 "hcs12x.cc"
)
{
#line 328 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(xbVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (xbVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28509 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_idx(code, addr);
}

// ADDab IMM (regAB + ii => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28520 "hcs12x.cc"
OpAdd_ab_imm::getCycles()
{
#line 370 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 28525 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28529 "hcs12x.cc"
OpAdd_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28533 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28536 "hcs12x.cc"
)
{
#line 372 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDA";
			} else {
			mnem = "ADDB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 28552 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28556 "hcs12x.cc"
OpAdd_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28560 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28563 "hcs12x.cc"
)
{
#line 385 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Add8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8i & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8i & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28601 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_imm(code, addr);
}

// ADDab DIR  (regAB + mem[regDirect:opr8a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28612 "hcs12x.cc"
OpAdd_ab_dir::getCycles()
{
#line 423 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28617 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28621 "hcs12x.cc"
OpAdd_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28625 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28628 "hcs12x.cc"
)
{
#line 425 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDA";
			} else {
			mnem = "ADDB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 28644 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28648 "hcs12x.cc"
OpAdd_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28652 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28655 "hcs12x.cc"
)
{
#line 438 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28696 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_dir(code, addr);
}

// ADDab EXT  (regAB + mem[opr16a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 28707 "hcs12x.cc"
OpAdd_ab_ext::getCycles()
{
#line 479 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28712 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28716 "hcs12x.cc"
OpAdd_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28720 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28723 "hcs12x.cc"
)
{
#line 481 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDA";
			} else {
			mnem = "ADDB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 28739 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28743 "hcs12x.cc"
OpAdd_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28747 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28750 "hcs12x.cc"
)
{
#line 494 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr16aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr16aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28791 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_ext(code, addr);
}

// ADDab  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB + mem[xb->addrE] => regAB)
#line 74 "hcs12x.isa"
void
#line 28802 "hcs12x.cc"
OpAdd_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 28806 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 28809 "hcs12x.cc"
)
{
#line 535 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 28818 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 28822 "hcs12x.cc"
OpAdd_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 28826 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 28829 "hcs12x.cc"
)
{
#line 541 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 28838 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 28842 "hcs12x.cc"
OpAdd_ab_idx::getCycles()
{
#line 547 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 28847 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28851 "hcs12x.cc"
OpAdd_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28855 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28858 "hcs12x.cc"
)
{
#line 549 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ADDA";
			} else {
			mnem = "ADDB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 28876 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28880 "hcs12x.cc"
OpAdd_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28884 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28887 "hcs12x.cc"
)
{
#line 564 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(xbVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (xbVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 28929 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_idx(code, addr);
}

// ADED IMM  (regD + #opr16i + carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 28940 "hcs12x.cc"
OpAded_imm::getCycles()
{
#line 606 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28945 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 28949 "hcs12x.cc"
OpAded_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 28953 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 28956 "hcs12x.cc"
)
{
#line 608 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ADED";

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 28967 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 28971 "hcs12x.cc"
OpAded_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 28975 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 28978 "hcs12x.cc"
)
{
#line 616 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29000 "hcs12x.cc"
}

static Operation *DecodeOpAded_imm(CodeType const& code, uint16_t addr)
{
	return new OpAded_imm(code, addr);
}

// ADED DIR  (regD + mem16[regDirect:opr8a] + carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 29011 "hcs12x.cc"
OpAded_dir::getCycles()
{
#line 638 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29016 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29020 "hcs12x.cc"
OpAded_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29024 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29027 "hcs12x.cc"
)
{
#line 640 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ADED";

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 29038 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29042 "hcs12x.cc"
OpAded_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29046 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29049 "hcs12x.cc"
)
{
#line 648 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29073 "hcs12x.cc"
}

static Operation *DecodeOpAded_dir(CodeType const& code, uint16_t addr)
{
	return new OpAded_dir(code, addr);
}

// ADED EXT (regD + mem16[opr16a] + carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 29084 "hcs12x.cc"
OpAded_ext::getCycles()
{
#line 672 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29089 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29093 "hcs12x.cc"
OpAded_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29097 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29100 "hcs12x.cc"
)
{
#line 674 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ADED";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 29111 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29115 "hcs12x.cc"
OpAded_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29119 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29122 "hcs12x.cc"
)
{
#line 682 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29148 "hcs12x.cc"
}

static Operation *DecodeOpAded_ext(CodeType const& code, uint16_t addr)
{
	return new OpAded_ext(code, addr);
}

// ADED IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD + mem16[xb->addrE] + carry => regD)
#line 74 "hcs12x.isa"
void
#line 29159 "hcs12x.cc"
OpAded_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 29163 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 29166 "hcs12x.cc"
)
{
#line 708 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 29175 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 29179 "hcs12x.cc"
OpAded_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 29183 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 29186 "hcs12x.cc"
)
{
#line 714 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 29195 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 29199 "hcs12x.cc"
OpAded_idx::getCycles()
{
#line 720 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 29204 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29208 "hcs12x.cc"
OpAded_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29212 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29215 "hcs12x.cc"
)
{
#line 722 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "ADED";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 29227 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29231 "hcs12x.cc"
OpAded_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29235 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29238 "hcs12x.cc"
)
{
#line 731 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29263 "hcs12x.cc"
}

static Operation *DecodeOpAded_idx(CodeType const& code, uint16_t addr)
{
	return new OpAded_idx(code, addr);
}

// ADExy IMM  (regXY + #opr16i + carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29274 "hcs12x.cc"
OpAde_xy_imm::getCycles()
{
#line 756 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 29279 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29283 "hcs12x.cc"
OpAde_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29287 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29290 "hcs12x.cc"
)
{
#line 758 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADEX";
			} else {
			mnem = "ADEY";
		}
		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 29306 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29310 "hcs12x.cc"
OpAde_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29314 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29317 "hcs12x.cc"
)
{
#line 771 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29348 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_imm(code, addr);
}

// ADExy DIR  (regXY + mem16[regDirect:opr8a] + carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29359 "hcs12x.cc"
OpAde_xy_dir::getCycles()
{
#line 802 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29364 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29368 "hcs12x.cc"
OpAde_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29372 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29375 "hcs12x.cc"
)
{
#line 804 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADEX";
			} else {
			mnem = "ADEY";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 29391 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29395 "hcs12x.cc"
OpAde_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29399 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29402 "hcs12x.cc"
)
{
#line 817 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29435 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_dir(code, addr);
}

// ADExy EXT (regXY + mem16[opr16a] + carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29446 "hcs12x.cc"
OpAde_xy_ext::getCycles()
{
#line 850 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29451 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29455 "hcs12x.cc"
OpAde_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29459 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29462 "hcs12x.cc"
)
{
#line 852 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADEX";
			} else {
			mnem = "ADEY";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 29478 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29482 "hcs12x.cc"
OpAde_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29486 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29489 "hcs12x.cc"
)
{
#line 865 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29523 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_ext(code, addr);
}

// ADExy IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY + mem16[xb->addrE] + carry => regXY)
#line 74 "hcs12x.isa"
void
#line 29534 "hcs12x.cc"
OpAde_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 29538 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 29541 "hcs12x.cc"
)
{
#line 899 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 29550 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 29554 "hcs12x.cc"
OpAde_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 29558 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 29561 "hcs12x.cc"
)
{
#line 905 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 29570 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 29574 "hcs12x.cc"
OpAde_xy_idx::getCycles()
{
#line 911 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 29579 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29583 "hcs12x.cc"
OpAde_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29587 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29590 "hcs12x.cc"
)
{
#line 913 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ADEX";
			} else {
			mnem = "ADEY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 29608 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29612 "hcs12x.cc"
OpAde_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29616 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29619 "hcs12x.cc"
)
{
#line 928 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29653 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_idx(code, addr);
}

// ADDxy IMM (regXY + #opr16i => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29664 "hcs12x.cc"
OpAdd_xy_imm::getCycles()
{
#line 963 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 29669 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29673 "hcs12x.cc"
OpAdd_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29677 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29680 "hcs12x.cc"
)
{
#line 965 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDX";
			} else {
			mnem = "ADDY";
		}
		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 29696 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29700 "hcs12x.cc"
OpAdd_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29704 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29707 "hcs12x.cc"
)
{
#line 978 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29738 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_imm(code, addr);
}

// ADDxy DIR  (regXY + mem16[regDirect:opr8a] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29749 "hcs12x.cc"
OpAdd_xy_dir::getCycles()
{
#line 1009 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29754 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29758 "hcs12x.cc"
OpAdd_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29762 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29765 "hcs12x.cc"
)
{
#line 1011 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDX";
			} else {
			mnem = "ADDY";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 29781 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29785 "hcs12x.cc"
OpAdd_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29789 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29792 "hcs12x.cc"
)
{
#line 1024 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;
		uint8_t carry_in = 0;
		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29825 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_dir(code, addr);
}

// ADDxy EXT  (regXY + mem16[opr16a] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 29836 "hcs12x.cc"
OpAdd_xy_ext::getCycles()
{
#line 1057 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29841 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29845 "hcs12x.cc"
OpAdd_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29849 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29852 "hcs12x.cc"
)
{
#line 1059 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ADDX";
			} else {
			mnem = "ADDY";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 29868 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 29872 "hcs12x.cc"
OpAdd_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 29876 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 29879 "hcs12x.cc"
)
{
#line 1072 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29913 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_ext(code, addr);
}

// ADDxy  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY + mem16[xb->addrE] => regXY)
#line 74 "hcs12x.isa"
void
#line 29924 "hcs12x.cc"
OpAdd_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 29928 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 29931 "hcs12x.cc"
)
{
#line 1106 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 29940 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 29944 "hcs12x.cc"
OpAdd_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 29948 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 29951 "hcs12x.cc"
)
{
#line 1112 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 29960 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 29964 "hcs12x.cc"
OpAdd_xy_idx::getCycles()
{
#line 1118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 29969 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 29973 "hcs12x.cc"
OpAdd_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 29977 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 29980 "hcs12x.cc"
)
{
#line 1120 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ADDX";
			} else {
			mnem = "ADDY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 29998 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30002 "hcs12x.cc"
OpAdd_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30006 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30009 "hcs12x.cc"
)
{
#line 1135 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30043 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_idx(code, addr);
}

// SUBD IMM or ADDD IMM (regD -+ ii => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 30054 "hcs12x.cc"
OpAdd_sub_d_imm::getCycles()
{
#line 1172 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2; }
#line 30059 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30063 "hcs12x.cc"
OpAdd_sub_d_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30067 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30070 "hcs12x.cc"
)
{
#line 1174 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBD";
			} else {
			mnem = "ADDD";
		}

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 30087 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30091 "hcs12x.cc"
OpAdd_sub_d_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30095 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30098 "hcs12x.cc"
)
{
#line 1188 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal = cpu->getRegD();

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr16i, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30123 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_imm(code, addr);
}

// SUBD DIR or ADDD DIR  (regD -+ mem[regDirect+opr8a])
#line 83 "hcs12x.isa"
uint8_t
#line 30134 "hcs12x.cc"
OpAdd_sub_d_dir::getCycles()
{
#line 1213 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 30139 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30143 "hcs12x.cc"
OpAdd_sub_d_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30147 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30150 "hcs12x.cc"
)
{
#line 1215 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBD";
			} else {
			mnem = "ADDD";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 30166 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30170 "hcs12x.cc"
OpAdd_sub_d_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30174 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30177 "hcs12x.cc"
)
{
#line 1228 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30205 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_dir(code, addr);
}

// SUBD EXT or ADDD EXT (regD -+ mem[opr16a]) => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 30216 "hcs12x.cc"
OpAdd_sub_d_ext::getCycles()
{
#line 1256 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 30221 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30225 "hcs12x.cc"
OpAdd_sub_d_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30229 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30232 "hcs12x.cc"
)
{
#line 1258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBD";
			} else {
			mnem = "ADDD";
		}

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;

	}
#line 30250 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30254 "hcs12x.cc"
OpAdd_sub_d_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30258 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30261 "hcs12x.cc"
)
{
#line 1273 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal = cpu->getRegD();
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30289 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_ext(code, addr);
}

// SUBD/ADDD  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD -+ mem[xb->addrE] => regD)
#line 74 "hcs12x.isa"
void
#line 30300 "hcs12x.cc"
OpAdd_sub_d_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 30304 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 30307 "hcs12x.cc"
)
{
#line 1301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 30316 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 30320 "hcs12x.cc"
OpAdd_sub_d_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 30324 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 30327 "hcs12x.cc"
)
{
#line 1307 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 30336 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 30340 "hcs12x.cc"
OpAdd_sub_d_idx::getCycles()
{
#line 1313 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 30345 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30349 "hcs12x.cc"
OpAdd_sub_d_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30353 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30356 "hcs12x.cc"
)
{
#line 1315 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBD";
			} else {
			mnem = "ADDD";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 30374 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30378 "hcs12x.cc"
OpAdd_sub_d_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30382 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30385 "hcs12x.cc"
)
{
#line 1330 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal = cpu->getRegD();
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, xbVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30413 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_idx(code, addr);
}

/* ****** Subtraction Instructions **** */
// SBA  (regA - regB => regA)
#line 83 "hcs12x.isa"
uint8_t
#line 30425 "hcs12x.cc"
OpSba::getCycles()
{
#line 1360 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2; }
#line 30430 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30434 "hcs12x.cc"
OpSba::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30438 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30441 "hcs12x.cc"
)
{
#line 1362 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "SBA";

		sink << mnem;

		return mnem;
	}
#line 30452 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30456 "hcs12x.cc"
OpSba::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30460 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30463 "hcs12x.cc"
)
{
#line 1370 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t aVal = cpu->getRegA();
		uint8_t bVal = cpu->getRegB();

		Sub8(result, carry_out, overflow, aVal, bVal, carry_in);

		cpu->setRegA(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30484 "hcs12x.cc"
}

static Operation *DecodeOpSba(CodeType const& code, uint16_t addr)
{
	return new OpSba(code, addr);
}

// SBCA/SBCB  IMM (regAB - ii - carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 30495 "hcs12x.cc"
OpSbc_ab_imm::getCycles()
{
#line 1391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 30500 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30504 "hcs12x.cc"
OpSbc_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30508 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30511 "hcs12x.cc"
)
{
#line 1393 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBCA";
			} else {
			mnem = "SBCB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 30527 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30531 "hcs12x.cc"
OpSbc_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30535 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30538 "hcs12x.cc"
)
{
#line 1406 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30567 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_imm(code, addr);
}

// SBCA/SBCB  DIR  (regAB - mem[regDirect:opr8a] - carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 30578 "hcs12x.cc"
OpSbc_ab_dir::getCycles()
{
#line 1435 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 30583 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30587 "hcs12x.cc"
OpSbc_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30591 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30594 "hcs12x.cc"
)
{
#line 1437 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBCA";
			} else {
			mnem = "SBCB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 30610 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30614 "hcs12x.cc"
OpSbc_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30618 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30621 "hcs12x.cc"
)
{
#line 1450 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30652 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_dir(code, addr);
}

// SBCA/SBCB  EXT (regAB - mem[opr16a] - carry => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 30663 "hcs12x.cc"
OpSbc_ab_ext::getCycles()
{
#line 1481 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 30668 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30672 "hcs12x.cc"
OpSbc_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30676 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30679 "hcs12x.cc"
)
{
#line 1483 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBCA";
			} else {
			mnem = "SBCB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 30695 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30699 "hcs12x.cc"
OpSbc_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30703 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30706 "hcs12x.cc"
)
{
#line 1496 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30738 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_ext(code, addr);
}

// SBCA/SBCB IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB - mem[xb->addrE] - carry => regAB)
#line 74 "hcs12x.isa"
void
#line 30749 "hcs12x.cc"
OpSbc_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 30753 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 30756 "hcs12x.cc"
)
{
#line 1528 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 30765 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 30769 "hcs12x.cc"
OpSbc_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 30773 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 30776 "hcs12x.cc"
)
{
#line 1534 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 30785 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 30789 "hcs12x.cc"
OpSbc_ab_idx::getCycles()
{
#line 1540 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 30794 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30798 "hcs12x.cc"
OpSbc_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30802 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30805 "hcs12x.cc"
)
{
#line 1542 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "SBCA";
			} else {
			mnem = "SBCB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 30823 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30827 "hcs12x.cc"
OpSbc_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30831 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30834 "hcs12x.cc"
)
{
#line 1557 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30867 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_idx(code, addr);
}

// SBED  IMM (regD - #opr16i - carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 30878 "hcs12x.cc"
OpSbed_imm::getCycles()
{
#line 1590 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 30883 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30887 "hcs12x.cc"
OpSbed_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30891 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30894 "hcs12x.cc"
)
{
#line 1592 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "SBED";

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 30905 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30909 "hcs12x.cc"
OpSbed_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30913 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30916 "hcs12x.cc"
)
{
#line 1600 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30937 "hcs12x.cc"
}

static Operation *DecodeOpSbed_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbed_imm(code, addr);
}

// SBED  DIR  (regD - mem16[regDirect:opr8a] - carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 30948 "hcs12x.cc"
OpSbed_dir::getCycles()
{
#line 1621 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 30953 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 30957 "hcs12x.cc"
OpSbed_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 30961 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 30964 "hcs12x.cc"
)
{
#line 1623 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "SBED";

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 30975 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 30979 "hcs12x.cc"
OpSbed_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 30983 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 30986 "hcs12x.cc"
)
{
#line 1631 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31010 "hcs12x.cc"
}

static Operation *DecodeOpSbed_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbed_dir(code, addr);
}

// SBED  EXT (regD - mem16[opr16a] - carry => regD)
#line 83 "hcs12x.isa"
uint8_t
#line 31021 "hcs12x.cc"
OpSbed_ext::getCycles()
{
#line 1655 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 31026 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31030 "hcs12x.cc"
OpSbed_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31034 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31037 "hcs12x.cc"
)
{
#line 1657 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "SBED";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 31048 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31052 "hcs12x.cc"
OpSbed_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31056 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31059 "hcs12x.cc"
)
{
#line 1665 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31084 "hcs12x.cc"
}

static Operation *DecodeOpSbed_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbed_ext(code, addr);
}

// SBED IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD - mem16[xb->addrE] - carry => regD)
#line 74 "hcs12x.isa"
void
#line 31095 "hcs12x.cc"
OpSbed_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 31099 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 31102 "hcs12x.cc"
)
{
#line 1690 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 31111 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 31115 "hcs12x.cc"
OpSbed_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 31119 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 31122 "hcs12x.cc"
)
{
#line 1696 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 31131 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 31135 "hcs12x.cc"
OpSbed_idx::getCycles()
{
#line 1702 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 31140 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31144 "hcs12x.cc"
OpSbed_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31148 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31151 "hcs12x.cc"
)
{
#line 1704 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "SBED";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 31163 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31167 "hcs12x.cc"
OpSbed_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31171 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31174 "hcs12x.cc"
)
{
#line 1713 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31199 "hcs12x.cc"
}

static Operation *DecodeOpSbed_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbed_idx(code, addr);
}

// SBEX/SBEY  IMM (regXY - #opr16i - carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 31210 "hcs12x.cc"
OpSbe_xy_imm::getCycles()
{
#line 1738 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 31215 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31219 "hcs12x.cc"
OpSbe_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31223 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31226 "hcs12x.cc"
)
{
#line 1740 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBEX";
			} else {
			mnem = "SBEY";
		}
		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 31242 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31246 "hcs12x.cc"
OpSbe_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31250 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31253 "hcs12x.cc"
)
{
#line 1753 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31283 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_imm(code, addr);
}

// SBEX/SBEY  DIR  (regXY - mem16[regDirect:opr8a] - carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 31294 "hcs12x.cc"
OpSbe_xy_dir::getCycles()
{
#line 1783 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 31299 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31303 "hcs12x.cc"
OpSbe_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31307 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31310 "hcs12x.cc"
)
{
#line 1785 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBEX";
			} else {
			mnem = "SBEY";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 31326 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31330 "hcs12x.cc"
OpSbe_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31334 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31337 "hcs12x.cc"
)
{
#line 1798 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31369 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_dir(code, addr);
}

// SBEX/SBEY  EXT (regXY - mem16[opr16a] - carry => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 31380 "hcs12x.cc"
OpSbe_xy_ext::getCycles()
{
#line 1830 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 31385 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31389 "hcs12x.cc"
OpSbe_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31393 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31396 "hcs12x.cc"
)
{
#line 1832 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SBEX";
			} else {
			mnem = "SBEY";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 31412 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31416 "hcs12x.cc"
OpSbe_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31420 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31423 "hcs12x.cc"
)
{
#line 1845 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31456 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_ext(code, addr);
}

// SBEX/SBEY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY - mem16[xb->addrE] - carry => regXY)
#line 74 "hcs12x.isa"
void
#line 31467 "hcs12x.cc"
OpSbe_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 31471 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 31474 "hcs12x.cc"
)
{
#line 1878 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 31483 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 31487 "hcs12x.cc"
OpSbe_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 31491 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 31494 "hcs12x.cc"
)
{
#line 1884 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 31503 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 31507 "hcs12x.cc"
OpSbe_xy_idx::getCycles()
{
#line 1890 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 31512 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31516 "hcs12x.cc"
OpSbe_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31520 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31523 "hcs12x.cc"
)
{
#line 1892 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "SBEX";
			} else {
			mnem = "SBEY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 31541 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31545 "hcs12x.cc"
OpSbe_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31549 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31552 "hcs12x.cc"
)
{
#line 1907 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31586 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_idx(code, addr);
}

// SUBA/SUBB  IMM (regAB - ii => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 31597 "hcs12x.cc"
OpSub_ab_imm::getCycles()
{
#line 1941 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 31602 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31606 "hcs12x.cc"
OpSub_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31610 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31613 "hcs12x.cc"
)
{
#line 1943 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBA";
			} else {
			mnem = "SUBB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 31629 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31633 "hcs12x.cc"
OpSub_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31637 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31640 "hcs12x.cc"
)
{
#line 1956 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31670 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_imm(code, addr);
}

// SUBA/SUBB  DIR  (regAB - mem[regDirect:opr8a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 31681 "hcs12x.cc"
OpSub_ab_dir::getCycles()
{
#line 1986 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 31686 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31690 "hcs12x.cc"
OpSub_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31694 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31697 "hcs12x.cc"
)
{
#line 1988 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBA";
			} else {
			mnem = "SUBB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem ;
	}
#line 31713 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31717 "hcs12x.cc"
OpSub_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31721 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31724 "hcs12x.cc"
)
{
#line 2001 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31756 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_dir(code, addr);
}

// SUBA/SUBB  EXT (regAB - mem[opr16a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 31767 "hcs12x.cc"
OpSub_ab_ext::getCycles()
{
#line 2033 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 31772 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31776 "hcs12x.cc"
OpSub_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31780 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31783 "hcs12x.cc"
)
{
#line 2035 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBA";
			} else {
			mnem = "SUBB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 31799 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31803 "hcs12x.cc"
OpSub_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31807 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31810 "hcs12x.cc"
)
{
#line 2048 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31843 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_ext(code, addr);
}

// SUBA/SUBB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB - mem[xb->addrE] => regAB)
#line 74 "hcs12x.isa"
void
#line 31854 "hcs12x.cc"
OpSub_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 31858 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 31861 "hcs12x.cc"
)
{
#line 2081 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 31870 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 31874 "hcs12x.cc"
OpSub_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 31878 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 31881 "hcs12x.cc"
)
{
#line 2087 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 31890 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 31894 "hcs12x.cc"
OpSub_ab_idx::getCycles()
{
#line 2093 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 31899 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31903 "hcs12x.cc"
OpSub_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31907 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 31910 "hcs12x.cc"
)
{
#line 2095 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "SUBA";
			} else {
			mnem = "SUBB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 31928 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 31932 "hcs12x.cc"
OpSub_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 31936 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 31939 "hcs12x.cc"
)
{
#line 2110 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 31972 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_idx(code, addr);
}

// ******************************
// SUBX/SUBY  IMM (regXy - opr16i => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 31984 "hcs12x.cc"
OpSub_xy_imm::getCycles()
{
#line 2145 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 31989 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 31993 "hcs12x.cc"
OpSub_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 31997 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32000 "hcs12x.cc"
)
{
#line 2147 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBX";
			} else {
			mnem = "SUBY";
		}
		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 32016 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32020 "hcs12x.cc"
OpSub_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32024 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32027 "hcs12x.cc"
)
{
#line 2160 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 32058 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_imm(code, addr);
}

// SUBX/SUBY  DIR  (regXY - mem16[regDirect:opr8a] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 32069 "hcs12x.cc"
OpSub_xy_dir::getCycles()
{
#line 2191 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 32074 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32078 "hcs12x.cc"
OpSub_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32082 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32085 "hcs12x.cc"
)
{
#line 2193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBX";
			} else {
			mnem = "SUBY";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 32101 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32105 "hcs12x.cc"
OpSub_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32109 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32112 "hcs12x.cc"
)
{
#line 2206 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32145 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_dir(code, addr);
}

// SUBX/SUBY  EXT (regXY - mem16[opr16a] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 32156 "hcs12x.cc"
OpSub_xy_ext::getCycles()
{
#line 2239 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 32161 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32165 "hcs12x.cc"
OpSub_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32169 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32172 "hcs12x.cc"
)
{
#line 2241 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "SUBX";
			} else {
			mnem = "SUBY";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 32188 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32192 "hcs12x.cc"
OpSub_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32196 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32199 "hcs12x.cc"
)
{
#line 2254 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 32233 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_ext(code, addr);
}

// SUBX/SUBY  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY - mem16[xb->addrE] => regXY)
#line 74 "hcs12x.isa"
void
#line 32244 "hcs12x.cc"
OpSub_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 32248 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 32251 "hcs12x.cc"
)
{
#line 2288 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 32260 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 32264 "hcs12x.cc"
OpSub_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 32268 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 32271 "hcs12x.cc"
)
{
#line 2294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 32280 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 32284 "hcs12x.cc"
OpSub_xy_idx::getCycles()
{
#line 2300 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32289 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32293 "hcs12x.cc"
OpSub_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32297 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32300 "hcs12x.cc"
)
{
#line 2302 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem;

		if (b==0){
			mnem = "SUBX";
			} else {
			mnem = "SUBY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 32318 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32322 "hcs12x.cc"
OpSub_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32326 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32329 "hcs12x.cc"
)
{
#line 2317 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 32363 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_idx(code, addr);
}

/* ***** Binary-Coded Decimal Instructions ****** */
// DAA (if (ccr.H) then regA + 0x6 => regA)
#line 83 "hcs12x.isa"
uint8_t
#line 32375 "hcs12x.cc"
OpDaa::getCycles()
{
#line 2354 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 32380 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32384 "hcs12x.cc"
OpDaa::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32388 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32391 "hcs12x.cc"
)
{
#line 2356 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		string mnem = "DAA";

		sink << mnem;

		return mnem;
	}
#line 32402 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32406 "hcs12x.cc"
OpDaa::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32410 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32413 "hcs12x.cc"
)
{
#line 2364 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t hBit = cpu->ccr->getH();
		uint8_t cBit = cpu->ccr->getC();

		uint8_t overflow, carry_out, result;

		uint8_t aVal = cpu->getRegA();
		uint8_t a74 =  aVal >> 4;
		uint8_t a30 = aVal & 0x0F;


		if ((cBit == 0) &&
		(a74 < 0x9) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x06, 0x00);
			cpu->setRegA(result);
			cpu->ccr->clrC();
		}

		if ((cBit == 0) &&
		(a74 < 0xA) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x06, 0x00);
			cpu->setRegA(result);
			cpu->ccr->clrC();
		}

		if ((cBit == 0) &&
		(a74 > 0x9) &&
		(hBit == 0) &&
		(a30 < 0xA))
		{
			Add8(result, carry_out, overflow, aVal, 0x60, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 0) &&
		(a74 > 0x8) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 0) &&
		(a74 > 0x9) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x3) &&
		(hBit == 0) &&
		(a30 < 0xA))
		{
			Add8(result, carry_out, overflow, aVal, 0x60, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x3) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x4) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
		if (result == 0x00) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if (overflow == 1) cpu->ccr->setV(); else cpu->ccr->clrV();
	}
#line 32512 "hcs12x.cc"
}

static Operation *DecodeOpDaa(CodeType const& code, uint16_t addr)
{
	return new OpDaa(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// DEC EXT
#line 83 "hcs12x.isa"
uint8_t
#line 32556 "hcs12x.cc"
OpDec_ext::getCycles()
{
#line 38 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 4; }
#line 32561 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32565 "hcs12x.cc"
OpDec_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32569 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32572 "hcs12x.cc"
)
{
#line 40 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DEC";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 32582 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32586 "hcs12x.cc"
OpDec_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32590 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32593 "hcs12x.cc"
)
{
#line 47 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32611 "hcs12x.cc"
}

static Operation *DecodeOpDec_ext(CodeType const& code, uint16_t addr)
{
	return new OpDec_ext(code, addr);
}

// DEC IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 32622 "hcs12x.cc"
OpDec_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 32626 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 32629 "hcs12x.cc"
)
{
#line 65 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 32638 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 32642 "hcs12x.cc"
OpDec_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 32646 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 32649 "hcs12x.cc"
)
{
#line 71 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 32658 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 32662 "hcs12x.cc"
OpDec_idx::getCycles()
{
#line 77 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 32667 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32671 "hcs12x.cc"
OpDec_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32675 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32678 "hcs12x.cc"
)
{
#line 79 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DEC";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 32689 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32693 "hcs12x.cc"
OpDec_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32697 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32700 "hcs12x.cc"
)
{
#line 87 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32720 "hcs12x.cc"
}

static Operation *DecodeOpDec_idx(CodeType const& code, uint16_t addr)
{
	return new OpDec_idx(code, addr);
}

// DECA  or DECB
#line 83 "hcs12x.isa"
uint8_t
#line 32731 "hcs12x.cc"
OpDec_ab::getCycles()
{
#line 107 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 32736 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32740 "hcs12x.cc"
OpDec_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32744 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32747 "hcs12x.cc"
)
{
#line 109 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem;

		if (b == 0) {
			mnem = "DECA";
			} else {
			mnem = "DECB";
		}

		sink << mnem;
		return mnem;
	}
#line 32763 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32767 "hcs12x.cc"
OpDec_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32771 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32774 "hcs12x.cc"
)
{
#line 122 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint8_t result, carry_out, overflow, carry_in;

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		carry_in = 0;
		Sub8(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 32804 "hcs12x.cc"
}

static Operation *DecodeOpDec_ab(CodeType const& code, uint16_t addr)
{
	return new OpDec_ab(code, addr);
}

// DECW  EXT
#line 83 "hcs12x.isa"
uint8_t
#line 32815 "hcs12x.cc"
OpDecw_ext::getCycles()
{
#line 152 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 5; }
#line 32820 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32824 "hcs12x.cc"
OpDecw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32828 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32831 "hcs12x.cc"
)
{
#line 154 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DECW";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 32841 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32845 "hcs12x.cc"
OpDecw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32849 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32852 "hcs12x.cc"
)
{
#line 161 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);
		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32872 "hcs12x.cc"
}

static Operation *DecodeOpDecw_ext(CodeType const& code, uint16_t addr)
{
	return new OpDecw_ext(code, addr);
}

// DECW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 32883 "hcs12x.cc"
OpDecw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 32887 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 32890 "hcs12x.cc"
)
{
#line 181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 32899 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 32903 "hcs12x.cc"
OpDecw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 32907 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 32910 "hcs12x.cc"
)
{
#line 187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 32919 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 32923 "hcs12x.cc"
OpDecw_idx::getCycles()
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 7, 7); }
#line 32928 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 32932 "hcs12x.cc"
OpDecw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 32936 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 32939 "hcs12x.cc"
)
{
#line 195 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DECW";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 32950 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 32954 "hcs12x.cc"
OpDecw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 32958 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 32961 "hcs12x.cc"
)
{
#line 203 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32982 "hcs12x.cc"
}

static Operation *DecodeOpDecw_idx(CodeType const& code, uint16_t addr)
{
	return new OpDecw_idx(code, addr);
}

// DECX or DECY
#line 83 "hcs12x.isa"
uint8_t
#line 32993 "hcs12x.cc"
OpDec_xy::getCycles()
{
#line 224 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 32998 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33002 "hcs12x.cc"
OpDec_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33006 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33009 "hcs12x.cc"
)
{
#line 226 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "DECX";
			} else {
			mnem = "DECY";
		}
		sink << mnem;
		return mnem;
	}
#line 33024 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33028 "hcs12x.cc"
OpDec_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33032 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33035 "hcs12x.cc"
)
{
#line 238 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 33066 "hcs12x.cc"
}

static Operation *DecodeOpDec_xy(CodeType const& code, uint16_t addr)
{
	return new OpDec_xy(code, addr);
}

// DES
#line 83 "hcs12x.isa"
uint8_t
#line 33077 "hcs12x.cc"
OpDes::getCycles()
{
#line 269 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 33082 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33086 "hcs12x.cc"
OpDes::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33090 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33093 "hcs12x.cc"
)
{
#line 271 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DES";

		sink << mnem;
		return mnem;
	}
#line 33103 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33107 "hcs12x.cc"
OpDes::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33111 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33114 "hcs12x.cc"
)
{
#line 278 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		cpu->setRegSP(cpu->getRegSP() - 1);
	}
#line 33121 "hcs12x.cc"
}

static Operation *DecodeOpDes(CodeType const& code, uint16_t addr)
{
	return new OpDes(code, addr);
}

// DEX
#line 83 "hcs12x.isa"
uint8_t
#line 33132 "hcs12x.cc"
OpDex::getCycles()
{
#line 285 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 33137 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33141 "hcs12x.cc"
OpDex::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33145 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33148 "hcs12x.cc"
)
{
#line 287 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DEX";

		sink << mnem;
		return mnem;
	}
#line 33158 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33162 "hcs12x.cc"
OpDex::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33166 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33169 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegX();
		val--;
		cpu->setRegX(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 33179 "hcs12x.cc"
}

static Operation *DecodeOpDex(CodeType const& code, uint16_t addr)
{
	return new OpDex(code, addr);
}

// DEY
#line 83 "hcs12x.isa"
uint8_t
#line 33190 "hcs12x.cc"
OpDey::getCycles()
{
#line 304 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 33195 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33199 "hcs12x.cc"
OpDey::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33203 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33206 "hcs12x.cc"
)
{
#line 306 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "DEY";

		sink << mnem;
		return mnem;
	}
#line 33216 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33220 "hcs12x.cc"
OpDey::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33224 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33227 "hcs12x.cc"
)
{
#line 313 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegY();
		val--;
		cpu->setRegY(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 33237 "hcs12x.cc"
}

static Operation *DecodeOpDey(CodeType const& code, uint16_t addr)
{
	return new OpDey(code, addr);
}

/* ********* Increment Instructions ****** */
// INC EXT
#line 83 "hcs12x.isa"
uint8_t
#line 33249 "hcs12x.cc"
OpInc_ext::getCycles()
{
#line 325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 4; }
#line 33254 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33258 "hcs12x.cc"
OpInc_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33262 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33265 "hcs12x.cc"
)
{
#line 327 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INC";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 33275 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33279 "hcs12x.cc"
OpInc_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33283 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33286 "hcs12x.cc"
)
{
#line 334 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Add8(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33305 "hcs12x.cc"
}

static Operation *DecodeOpInc_ext(CodeType const& code, uint16_t addr)
{
	return new OpInc_ext(code, addr);
}

// INC IDX or IDX or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 33316 "hcs12x.cc"
OpInc_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 33320 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 33323 "hcs12x.cc"
)
{
#line 353 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 33332 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 33336 "hcs12x.cc"
OpInc_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 33340 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 33343 "hcs12x.cc"
)
{
#line 359 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 33352 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 33356 "hcs12x.cc"
OpInc_idx::getCycles()
{
#line 365 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 33361 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33365 "hcs12x.cc"
OpInc_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33369 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33372 "hcs12x.cc"
)
{
#line 367 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INC";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 33383 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33387 "hcs12x.cc"
OpInc_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33391 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33394 "hcs12x.cc"
)
{
#line 375 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Add8(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33414 "hcs12x.cc"
}

static Operation *DecodeOpInc_idx(CodeType const& code, uint16_t addr)
{
	return new OpInc_idx(code, addr);
}

// INCA  or INCB
#line 83 "hcs12x.isa"
uint8_t
#line 33425 "hcs12x.cc"
OpInc_ab::getCycles()
{
#line 395 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 33430 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33434 "hcs12x.cc"
OpInc_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33438 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33441 "hcs12x.cc"
)
{
#line 397 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem;

		if (b == 0) {
			mnem = "INCA";
			} else {
			mnem = "INCB";
		}
		sink << mnem;
		return mnem;
	}
#line 33456 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33460 "hcs12x.cc"
OpInc_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33464 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33467 "hcs12x.cc"
)
{
#line 409 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint8_t result, carry_out, overflow, carry_in;

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		carry_in = 0;
		Add8(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 33497 "hcs12x.cc"
}

static Operation *DecodeOpInc_ab(CodeType const& code, uint16_t addr)
{
	return new OpInc_ab(code, addr);
}

// INCW EXT
#line 83 "hcs12x.isa"
uint8_t
#line 33508 "hcs12x.cc"
OpIncw_ext::getCycles()
{
#line 439 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 5; }
#line 33513 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33517 "hcs12x.cc"
OpIncw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33521 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33524 "hcs12x.cc"
)
{
#line 441 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INCW";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 33534 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33538 "hcs12x.cc"
OpIncw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33542 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33545 "hcs12x.cc"
)
{
#line 448 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);
		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33565 "hcs12x.cc"
}

static Operation *DecodeOpIncw_ext(CodeType const& code, uint16_t addr)
{
	return new OpIncw_ext(code, addr);
}

// INCW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 33576 "hcs12x.cc"
OpIncw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 33580 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 33583 "hcs12x.cc"
)
{
#line 468 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 33592 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 33596 "hcs12x.cc"
OpIncw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 33600 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 33603 "hcs12x.cc"
)
{
#line 474 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 33612 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 33616 "hcs12x.cc"
OpIncw_idx::getCycles()
{
#line 480 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 33621 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33625 "hcs12x.cc"
OpIncw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33629 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33632 "hcs12x.cc"
)
{
#line 482 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INCW";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 33643 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33647 "hcs12x.cc"
OpIncw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33651 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33654 "hcs12x.cc"
)
{
#line 490 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33675 "hcs12x.cc"
}

static Operation *DecodeOpIncw_idx(CodeType const& code, uint16_t addr)
{
	return new OpIncw_idx(code, addr);
}

// INX or INCY
#line 83 "hcs12x.isa"
uint8_t
#line 33686 "hcs12x.cc"
OpInc_xy::getCycles()
{
#line 511 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 33691 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33695 "hcs12x.cc"
OpInc_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33699 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33702 "hcs12x.cc"
)
{
#line 513 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "INCX";
			} else {
			mnem = "INCY";
		}
		sink << mnem;
		return mnem;
	}
#line 33717 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33721 "hcs12x.cc"
OpInc_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33725 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33728 "hcs12x.cc"
)
{
#line 525 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 33759 "hcs12x.cc"
}

static Operation *DecodeOpInc_xy(CodeType const& code, uint16_t addr)
{
	return new OpInc_xy(code, addr);
}

// INS
#line 83 "hcs12x.isa"
uint8_t
#line 33770 "hcs12x.cc"
OpIns::getCycles()
{
#line 556 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 33775 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33779 "hcs12x.cc"
OpIns::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33783 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33786 "hcs12x.cc"
)
{
#line 558 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INS";

		sink << mnem;
		return mnem;
	}
#line 33796 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33800 "hcs12x.cc"
OpIns::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33804 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33807 "hcs12x.cc"
)
{
#line 565 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		cpu->setRegSP(cpu->getRegSP() + 1);
	}
#line 33814 "hcs12x.cc"
}

static Operation *DecodeOpIns(CodeType const& code, uint16_t addr)
{
	return new OpIns(code, addr);
}

// INX
#line 83 "hcs12x.isa"
uint8_t
#line 33825 "hcs12x.cc"
OpInx::getCycles()
{
#line 572 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 33830 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33834 "hcs12x.cc"
OpInx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33838 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33841 "hcs12x.cc"
)
{
#line 574 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INX";

		sink << mnem;
		return mnem;
	}
#line 33851 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33855 "hcs12x.cc"
OpInx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33859 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33862 "hcs12x.cc"
)
{
#line 581 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegX();
		val++;
		cpu->setRegX(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 33872 "hcs12x.cc"
}

static Operation *DecodeOpInx(CodeType const& code, uint16_t addr)
{
	return new OpInx(code, addr);
}

// INY
#line 83 "hcs12x.isa"
uint8_t
#line 33883 "hcs12x.cc"
OpIny::getCycles()
{
#line 591 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 33888 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33892 "hcs12x.cc"
OpIny::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33896 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33899 "hcs12x.cc"
)
{
#line 593 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		string mnem = "INY";

		sink << mnem;
		return mnem;
	}
#line 33909 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 33913 "hcs12x.cc"
OpIny::execute(
#line 62 "hcs12x.isa"
CPU *
#line 33917 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 33920 "hcs12x.cc"
)
{
#line 600 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegY();
		val++;
		cpu->setRegY(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 33930 "hcs12x.cc"
}

static Operation *DecodeOpIny(CodeType const& code, uint16_t addr)
{
	return new OpIny(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// CBA
#line 83 "hcs12x.isa"
uint8_t
#line 33974 "hcs12x.cc"
OpCba::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 33979 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 33983 "hcs12x.cc"
OpCba::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 33987 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 33990 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		mnem = "CBA";
		sink << mnem;

		return mnem;
	}
#line 34002 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34006 "hcs12x.cc"
OpCba::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34010 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34013 "hcs12x.cc"
)
{
#line 50 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, cpu->getRegA(), cpu->getRegB(), carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34028 "hcs12x.cc"
}

static Operation *DecodeOpCba(CodeType const& code, uint16_t addr)
{
	return new OpCba(code, addr);
}

//  CMPab  IMM
#line 83 "hcs12x.isa"
uint8_t
#line 34039 "hcs12x.cc"
OpCmp_ab_imm::getCycles()
{
#line 66 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 1; }
#line 34044 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34048 "hcs12x.cc"
OpCmp_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34052 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34055 "hcs12x.cc"
)
{
#line 68 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CMPA";
			} else {
			mnem = "CMPB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 34071 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34075 "hcs12x.cc"
OpCmp_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34079 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34082 "hcs12x.cc"
)
{
#line 81 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34104 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_imm(code, addr);
}

// CMPab  DIR
#line 83 "hcs12x.isa"
uint8_t
#line 34115 "hcs12x.cc"
OpCmp_ab_dir::getCycles()
{
#line 103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 34120 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34124 "hcs12x.cc"
OpCmp_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34128 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34131 "hcs12x.cc"
)
{
#line 105 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CMPA";
			} else {
			mnem = "CMPB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 34147 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34151 "hcs12x.cc"
OpCmp_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34155 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34158 "hcs12x.cc"
)
{
#line 118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34182 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_dir(code, addr);
}

// CMPab  EXT
#line 83 "hcs12x.isa"
uint8_t
#line 34193 "hcs12x.cc"
OpCmp_ab_ext::getCycles()
{
#line 142 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 34198 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34202 "hcs12x.cc"
OpCmp_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34206 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34209 "hcs12x.cc"
)
{
#line 144 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CMPA";
			} else {
			mnem = "CMPB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 34225 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34229 "hcs12x.cc"
OpCmp_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34233 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34236 "hcs12x.cc"
)
{
#line 157 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = opr16a;

		uint8_t opr16aVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34261 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_ext(code, addr);
}

// CMPab  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 34272 "hcs12x.cc"
OpCmp_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 34276 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 34279 "hcs12x.cc"
)
{
#line 182 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 34288 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 34292 "hcs12x.cc"
OpCmp_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 34296 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 34299 "hcs12x.cc"
)
{
#line 188 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 34308 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 34312 "hcs12x.cc"
OpCmp_ab_idx::getCycles()
{
#line 194 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 34317 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34321 "hcs12x.cc"
OpCmp_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34325 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34328 "hcs12x.cc"
)
{
#line 196 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CMPA";
			} else {
			mnem = "CMPB";
		}
		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 34345 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34349 "hcs12x.cc"
OpCmp_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34353 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34356 "hcs12x.cc"
)
{
#line 210 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34380 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_idx(code, addr);
}

// CPdyxs  IMM
#line 83 "hcs12x.isa"
uint8_t
#line 34391 "hcs12x.cc"
OpCp_dyxs_imm::getCycles()
{
#line 234 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 34396 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34400 "hcs12x.cc"
OpCp_dyxs_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34404 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34407 "hcs12x.cc"
)
{
#line 236 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPD"; break;
			case 1: mnem = "CPY"; break;
			case 2: mnem = "CPX"; break;
			case 3: mnem = "CPS";
		}
		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 34424 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34428 "hcs12x.cc"
OpCp_dyxs_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34432 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34435 "hcs12x.cc"
)
{
#line 250 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34459 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_imm(code, addr);
}

// CPdyxs DIR
#line 83 "hcs12x.isa"
uint8_t
#line 34470 "hcs12x.cc"
OpCp_dyxs_dir::getCycles()
{
#line 274 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 34475 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34479 "hcs12x.cc"
OpCp_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34483 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34486 "hcs12x.cc"
)
{
#line 276 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPD"; break;
			case 1: mnem = "CPY"; break;
			case 2: mnem = "CPX"; break;
			case 3: mnem = "CPS";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 34503 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34507 "hcs12x.cc"
OpCp_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34511 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34514 "hcs12x.cc"
)
{
#line 290 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		uint16_t opr8aVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		opr8aVal = cpu->memRead16(addr);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34541 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_dir(code, addr);
}

// CPdyxs EXT
#line 83 "hcs12x.isa"
uint8_t
#line 34552 "hcs12x.cc"
OpCp_dyxs_ext::getCycles()
{
#line 317 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 34557 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34561 "hcs12x.cc"
OpCp_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34565 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34568 "hcs12x.cc"
)
{
#line 319 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPD"; break;
			case 1: mnem = "CPY"; break;
			case 2: mnem = "CPX"; break;
			case 3: mnem = "CPS";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 34585 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34589 "hcs12x.cc"
OpCp_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34593 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34596 "hcs12x.cc"
)
{
#line 333 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		uint16_t opr16aVal = cpu->memRead16(opr16a);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34621 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_ext(code, addr);
}

// CPdyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 34632 "hcs12x.cc"
OpCp_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 34636 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 34639 "hcs12x.cc"
)
{
#line 358 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 34648 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 34652 "hcs12x.cc"
OpCp_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 34656 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 34659 "hcs12x.cc"
)
{
#line 364 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 34668 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 34672 "hcs12x.cc"
OpCp_dyxs_idx::getCycles()
{
#line 370 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 34677 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34681 "hcs12x.cc"
OpCp_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34685 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34688 "hcs12x.cc"
)
{
#line 372 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPD"; break;
			case 1: mnem = "CPY"; break;
			case 2: mnem = "CPX"; break;
			case 3: mnem = "CPS";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 34707 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34711 "hcs12x.cc"
OpCp_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34715 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34718 "hcs12x.cc"
)
{
#line 388 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34743 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_idx(code, addr);
}

/* ****** Compare to memory with Borrow ********** */
// CPE_dyxs  IMM
#line 83 "hcs12x.isa"
uint8_t
#line 34755 "hcs12x.cc"
OpCpe_dyxs_imm::getCycles()
{
#line 415 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 34760 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34764 "hcs12x.cc"
OpCpe_dyxs_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34768 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34771 "hcs12x.cc"
)
{
#line 417 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPED"; break;
			case 1: mnem = "CPEY"; break;
			case 2: mnem = "CPEX"; break;
			case 3: mnem = "CPES";
		}
		sink << mnem << " #0x" << std::hex << opr16i;
		return mnem;
	}
#line 34787 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34791 "hcs12x.cc"
OpCpe_dyxs_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34795 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34798 "hcs12x.cc"
)
{
#line 430 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;

		zeroBit = cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34823 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_imm(code, addr);
}

// CPE_dyxs DIR
#line 83 "hcs12x.isa"
uint8_t
#line 34834 "hcs12x.cc"
OpCpe_dyxs_dir::getCycles()
{
#line 455 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 34839 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34843 "hcs12x.cc"
OpCpe_dyxs_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34847 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34850 "hcs12x.cc"
)
{
#line 457 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPED"; break;
			case 1: mnem = "CPEY"; break;
			case 2: mnem = "CPEX"; break;
			case 3: mnem = "CPES";
		}
		sink << mnem << " 0x" << std::hex << opr8a;
		return mnem;
	}
#line 34866 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34870 "hcs12x.cc"
OpCpe_dyxs_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34874 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34877 "hcs12x.cc"
)
{
#line 470 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		uint16_t opr8aVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		opr8aVal = cpu->memRead16(addr);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34905 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_dir(code, addr);
}

// CPE_dyxs EXT
#line 83 "hcs12x.isa"
uint8_t
#line 34916 "hcs12x.cc"
OpCpe_dyxs_ext::getCycles()
{
#line 498 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 34921 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 34925 "hcs12x.cc"
OpCpe_dyxs_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 34929 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 34932 "hcs12x.cc"
)
{
#line 500 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPED"; break;
			case 1: mnem = "CPEY"; break;
			case 2: mnem = "CPEX"; break;
			case 3: mnem = "CPES";
		}
		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 34948 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 34952 "hcs12x.cc"
OpCpe_dyxs_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 34956 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 34959 "hcs12x.cc"
)
{
#line 513 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		uint16_t opr16aVal = cpu->memRead16(opr16a);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 34985 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_ext(code, addr);
}

// CPE_dyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 34996 "hcs12x.cc"
OpCpe_dyxs_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 35000 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 35003 "hcs12x.cc"
)
{
#line 539 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 35012 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 35016 "hcs12x.cc"
OpCpe_dyxs_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 35020 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 35023 "hcs12x.cc"
)
{
#line 545 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 35032 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 35036 "hcs12x.cc"
OpCpe_dyxs_idx::getCycles()
{
#line 551 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 35041 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35045 "hcs12x.cc"
OpCpe_dyxs_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35049 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35052 "hcs12x.cc"
)
{
#line 553 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (dyxs) {
			case 0: mnem = "CPED"; break;
			case 1: mnem = "CPEY"; break;
			case 2: mnem = "CPEX"; break;
			case 3: mnem = "CPES";
		}
		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35069 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35073 "hcs12x.cc"
OpCpe_dyxs_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35077 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35080 "hcs12x.cc"
)
{
#line 567 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 35106 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_idx(code, addr);
}

/* ************ Test Instructions **************** */
// TST EXT
#line 83 "hcs12x.isa"
uint8_t
#line 35118 "hcs12x.cc"
OpTst_ext::getCycles()
{
#line 596 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 35123 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35127 "hcs12x.cc"
OpTst_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35131 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35134 "hcs12x.cc"
)
{
#line 598 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "TST";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 35144 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35148 "hcs12x.cc"
OpTst_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35152 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35155 "hcs12x.cc"
)
{
#line 605 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint8_t result;
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);
		carry_in = 0;

		Sub8(result, carry_out, overflow, opr16aVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 35174 "hcs12x.cc"
}

static Operation *DecodeOpTst_ext(CodeType const& code, uint16_t addr)
{
	return new OpTst_ext(code, addr);
}

// TST IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 35185 "hcs12x.cc"
OpTst_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 35189 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 35192 "hcs12x.cc"
)
{
#line 624 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 35201 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 35205 "hcs12x.cc"
OpTst_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 35209 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 35212 "hcs12x.cc"
)
{
#line 630 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 35221 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 35225 "hcs12x.cc"
OpTst_idx::getCycles()
{
#line 636 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 35230 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35234 "hcs12x.cc"
OpTst_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35238 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35241 "hcs12x.cc"
)
{
#line 638 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "TST";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35252 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35256 "hcs12x.cc"
OpTst_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35260 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35263 "hcs12x.cc"
)
{
#line 646 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint8_t result;
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		carry_in = 0;

		Sub8(result, carry_out, overflow, xbVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 35282 "hcs12x.cc"
}

static Operation *DecodeOpTst_idx(CodeType const& code, uint16_t addr)
{
	return new OpTst_idx(code, addr);
}

// TSTA or TSTB
#line 83 "hcs12x.isa"
uint8_t
#line 35293 "hcs12x.cc"
OpTst_ab::getCycles()
{
#line 665 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 1; }
#line 35298 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35302 "hcs12x.cc"
OpTst_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35306 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35309 "hcs12x.cc"
)
{
#line 667 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "TSTA";
			} else {
			mnem = "TSTB";
		}

		sink << mnem << " ";
		return mnem;
	}
#line 35325 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35329 "hcs12x.cc"
OpTst_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35333 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35336 "hcs12x.cc"
)
{
#line 680 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 35358 "hcs12x.cc"
}

static Operation *DecodeOpTst_ab(CodeType const& code, uint16_t addr)
{
	return new OpTst_ab(code, addr);
}

// TSTW EXT
#line 83 "hcs12x.isa"
uint8_t
#line 35369 "hcs12x.cc"
OpTstw_ext::getCycles()
{
#line 702 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 35374 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35378 "hcs12x.cc"
OpTstw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35382 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35385 "hcs12x.cc"
)
{
#line 704 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "TSTW";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 35395 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35399 "hcs12x.cc"
OpTstw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35403 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35406 "hcs12x.cc"
)
{
#line 711 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result;
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		carry_in = 0;

		Sub16(result, carry_out, overflow, opr16aVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 35426 "hcs12x.cc"
}

static Operation *DecodeOpTstw_ext(CodeType const& code, uint16_t addr)
{
	return new OpTstw_ext(code, addr);
}

// TSTW IDX or IDX1 or IDX2 or [D, IDX] or [IDX2]
#line 74 "hcs12x.isa"
void
#line 35437 "hcs12x.cc"
OpTstw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 35441 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 35444 "hcs12x.cc"
)
{
#line 731 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 35453 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 35457 "hcs12x.cc"
OpTstw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 35461 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 35464 "hcs12x.cc"
)
{
#line 737 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 35473 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 35477 "hcs12x.cc"
OpTstw_idx::getCycles()
{
#line 743 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 35482 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35486 "hcs12x.cc"
OpTstw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35490 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35493 "hcs12x.cc"
)
{
#line 745 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "TSTW";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35504 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35508 "hcs12x.cc"
OpTstw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35512 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35515 "hcs12x.cc"
)
{
#line 753 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		carry_in = 0;

		Sub16(result, carry_out, overflow, xbVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 35534 "hcs12x.cc"
}

static Operation *DecodeOpTstw_idx(CodeType const& code, uint16_t addr)
{
	return new OpTstw_idx(code, addr);
}

// TSTX or TSTY
#line 83 "hcs12x.isa"
uint8_t
#line 35545 "hcs12x.cc"
OpTst_xy::getCycles()
{
#line 772 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 35550 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35554 "hcs12x.cc"
OpTst_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35558 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35561 "hcs12x.cc"
)
{
#line 774 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem;

		switch (b) {
			case 0: mnem = "TSTX"; break;
			case 1: mnem = "TSTY"; break;
		}

		sink << mnem << " ";
		return mnem;
	}
#line 35576 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35580 "hcs12x.cc"
OpTst_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35584 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35587 "hcs12x.cc"
)
{
#line 786 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;

		carry_in = 0;
		switch (b) {
			case 0: regVal = cpu->getRegY(); break;
			case 1: regVal = cpu->getRegY(); break;
		}

		Sub16(result, carry_out, overflow, regVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 35608 "hcs12x.cc"
}

static Operation *DecodeOpTst_xy(CodeType const& code, uint16_t addr)
{
	return new OpTst_xy(code, addr);
}

/* ************ Minimum Instructions ************* */
// EMIND: MIN ((D), (M : M + 1)) ⇒ D
// opcode(EMIND)-> 0x18 0x1B
#line 83 "hcs12x.isa"
uint8_t
#line 35621 "hcs12x.cc"
OpEmind::getCycles()
{
#line 812 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 35626 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35630 "hcs12x.cc"
OpEmind::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35634 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35637 "hcs12x.cc"
)
{
#line 814 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "EMIND";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35648 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35652 "hcs12x.cc"
OpEmind::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35656 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35659 "hcs12x.cc"
)
{
#line 822 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t mVal = cpu->memRead16(addr);

		uint16_t min;
		if (dVal > mVal) { min == mVal; } else { min = dVal; }

		uint16_t result = dVal - mVal;

		cpu->setRegD(min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 35694 "hcs12x.cc"
}

static Operation *DecodeOpEmind(CodeType const& code, uint16_t addr)
{
	return new OpEmind(code, addr);
}

// EMINM: MIN ((D), (M : M + 1)) ⇒ M : M + 1
// opcode(EMINM)-> 0x18 0x1F
#line 83 "hcs12x.isa"
uint8_t
#line 35706 "hcs12x.cc"
OpEminm::getCycles()
{
#line 859 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 35711 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35715 "hcs12x.cc"
OpEminm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35719 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35722 "hcs12x.cc"
)
{
#line 861 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "EMINM";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35733 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35737 "hcs12x.cc"
OpEminm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35741 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35744 "hcs12x.cc"
)
{
#line 869 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t mVal = cpu->memRead16(addr);

		uint16_t min;
		if (dVal > mVal) { min == mVal; } else { min = dVal; }

		uint16_t result = dVal - mVal;

		cpu->memWrite16(addr, min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 35779 "hcs12x.cc"
}

static Operation *DecodeOpEminm(CodeType const& code, uint16_t addr)
{
	return new OpEminm(code, addr);
}

// MINA: MIN ((A), (M)) ⇒ A
// opcode(MINA)-> 0x18 0x19
#line 83 "hcs12x.isa"
uint8_t
#line 35791 "hcs12x.cc"
OpMina::getCycles()
{
#line 907 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 35796 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35800 "hcs12x.cc"
OpMina::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35804 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35807 "hcs12x.cc"
)
{
#line 909 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "MINA";

		sink << mnem << " ";

		xb->disasm(sink);
		return mnem;
	}
#line 35819 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35823 "hcs12x.cc"
OpMina::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35827 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35830 "hcs12x.cc"
)
{
#line 918 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t min;
		if (aVal > mVal) { min == mVal; } else { min = aVal; }

		uint8_t result = aVal - mVal;

		cpu->setRegA(min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 35865 "hcs12x.cc"
}

static Operation *DecodeOpMina(CodeType const& code, uint16_t addr)
{
	return new OpMina(code, addr);
}

// MINM: MIN ((A), (M)) ⇒ M
// opcode(MINM)->0x18 0x1D
#line 83 "hcs12x.isa"
uint8_t
#line 35877 "hcs12x.cc"
OpMinm::getCycles()
{
#line 955 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 35882 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35886 "hcs12x.cc"
OpMinm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35890 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35893 "hcs12x.cc"
)
{
#line 957 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "MINM";

		sink << mnem << " ";

		xb->disasm(sink);
		return mnem;
	}
#line 35905 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35909 "hcs12x.cc"
OpMinm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35913 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 35916 "hcs12x.cc"
)
{
#line 966 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t min;
		if (aVal > mVal) { min == mVal; } else { min = aVal; }

		uint8_t result = aVal - mVal;

		cpu->memWrite8(addr, min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 35951 "hcs12x.cc"
}

static Operation *DecodeOpMinm(CodeType const& code, uint16_t addr)
{
	return new OpMinm(code, addr);
}

/* ************ Maximum Instructions ************* */
// EMAND: MAX ((D), (M : M + 1)) ⇒ D
// opcode(EMAXD)-> 0x18 0x1A
#line 83 "hcs12x.isa"
uint8_t
#line 35964 "hcs12x.cc"
OpEmaxd::getCycles()
{
#line 1006 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 35969 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 35973 "hcs12x.cc"
OpEmaxd::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 35977 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 35980 "hcs12x.cc"
)
{
#line 1008 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "EMAXD";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 35991 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 35995 "hcs12x.cc"
OpEmaxd::execute(
#line 62 "hcs12x.isa"
CPU *
#line 35999 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36002 "hcs12x.cc"
)
{
#line 1016 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = xb->getEAddr(cpu);

		uint16_t mVal = cpu->memRead16(addr);

		uint16_t max;
		if (mVal > dVal) { max == mVal; } else { max = dVal; }

		uint16_t result = dVal - mVal;

		cpu->setRegD(max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 36038 "hcs12x.cc"
}

static Operation *DecodeOpEmaxd(CodeType const& code, uint16_t addr)
{
	return new OpEmaxd(code, addr);
}

// EMANM: MAX ((D), (M : M + 1)) ⇒ M : M + 1
// opcode(EMAXM)-> 0x18 0x1E
#line 83 "hcs12x.isa"
uint8_t
#line 36050 "hcs12x.cc"
OpEmaxm::getCycles()
{
#line 1054 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 36055 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36059 "hcs12x.cc"
OpEmaxm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36063 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36066 "hcs12x.cc"
)
{
#line 1056 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "EMAXM";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 36077 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36081 "hcs12x.cc"
OpEmaxm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36085 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36088 "hcs12x.cc"
)
{
#line 1064 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = xb->getEAddr(cpu);

		uint16_t mVal = cpu->memRead16(addr);

		uint16_t max;
		if (mVal > dVal) { max == mVal; } else { max = dVal; }

		uint16_t result = dVal - mVal;

		cpu->memWrite16(addr, max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 36124 "hcs12x.cc"
}

static Operation *DecodeOpEmaxm(CodeType const& code, uint16_t addr)
{
	return new OpEmaxm(code, addr);
}

// MAXA: MAX ((A), (M)) ⇒ A
// opcode(MAXA)-> 0x18 0x18
#line 83 "hcs12x.isa"
uint8_t
#line 36136 "hcs12x.cc"
OpMaxa::getCycles()
{
#line 1103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 36141 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36145 "hcs12x.cc"
OpMaxa::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36149 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36152 "hcs12x.cc"
)
{
#line 1105 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "MAXA";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 36163 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36167 "hcs12x.cc"
OpMaxa::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36171 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36174 "hcs12x.cc"
)
{
#line 1113 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t max;
		if (mVal > aVal) { max == mVal; } else { max = aVal; }

		uint8_t result = aVal - mVal;

		cpu->setRegA(max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 36209 "hcs12x.cc"
}

static Operation *DecodeOpMaxa(CodeType const& code, uint16_t addr)
{
	return new OpMaxa(code, addr);
}

// MAXM: MAx ((A), (M)) ⇒ M
// opcode(MAXM)->0x18 0x1C
#line 83 "hcs12x.isa"
uint8_t
#line 36221 "hcs12x.cc"
OpMaxm::getCycles()
{
#line 1150 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 36226 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36230 "hcs12x.cc"
OpMaxm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36234 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36237 "hcs12x.cc"
)
{
#line 1152 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		string mnem = "MAXM";

		sink << mnem << " ";
		xb->disasm(sink);
		return mnem;
	}
#line 36248 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36252 "hcs12x.cc"
OpMaxm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36256 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36259 "hcs12x.cc"
)
{
#line 1160 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t max;
		if (mVal > aVal) { max == mVal; } else { max = aVal; }

		uint8_t result = aVal - mVal;

		cpu->memWrite8(addr, max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is 0x00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 36294 "hcs12x.cc"
}

static Operation *DecodeOpMaxm(CodeType const& code, uint16_t addr)
{
	return new OpMaxm(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// ANDA/ANDB  IMM  (regAB & ii => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 36338 "hcs12x.cc"
OpAnd_ab_imm::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 1; }
#line 36343 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36347 "hcs12x.cc"
OpAnd_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36351 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36354 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDA";
			} else {
			mnem = "ANDB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 36370 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36374 "hcs12x.cc"
OpAnd_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36378 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36381 "hcs12x.cc"
)
{
#line 54 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal & opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 36409 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_imm(code, addr);
}

// ANDA/ANDB  DIR  (regAB & mem[regDirect:opr8a] => regAB)s
#line 83 "hcs12x.isa"
uint8_t
#line 36420 "hcs12x.cc"
OpAnd_ab_dir::getCycles()
{
#line 82 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 36425 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36429 "hcs12x.cc"
OpAnd_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36433 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36436 "hcs12x.cc"
)
{
#line 84 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDA";
			} else {
			mnem = "ANDB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 36452 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36456 "hcs12x.cc"
OpAnd_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36460 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36463 "hcs12x.cc"
)
{
#line 97 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal & opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 36492 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_dir(code, addr);
}

// ANDA/ANDB EXT (regAB & mem[opr16a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 36503 "hcs12x.cc"
OpAnd_ab_ext::getCycles()
{
#line 126 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 36508 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36512 "hcs12x.cc"
OpAnd_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36516 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36519 "hcs12x.cc"
)
{
#line 128 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDA";
			} else {
			mnem = "ANDB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 36535 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36539 "hcs12x.cc"
OpAnd_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36543 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36546 "hcs12x.cc"
)
{
#line 141 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal & opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 36575 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_ext(code, addr);
}

// ANDA/ANDB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB & mem[xb->addrE] => regAB)
#line 74 "hcs12x.isa"
void
#line 36586 "hcs12x.cc"
OpAnd_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 36590 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 36593 "hcs12x.cc"
)
{
#line 170 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 36602 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 36606 "hcs12x.cc"
OpAnd_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 36610 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 36613 "hcs12x.cc"
)
{
#line 176 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 36622 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 36626 "hcs12x.cc"
OpAnd_ab_idx::getCycles()
{
#line 182 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 36631 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36635 "hcs12x.cc"
OpAnd_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36639 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36642 "hcs12x.cc"
)
{
#line 184 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ANDA";
			} else {
			mnem = "ANDB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 36660 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36664 "hcs12x.cc"
OpAnd_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36668 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36671 "hcs12x.cc"
)
{
#line 199 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal & xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 36701 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_idx(code, addr);
}

// ANDCC  IMM  (ccr & ii => ccr)
#line 83 "hcs12x.isa"
uint8_t
#line 36712 "hcs12x.cc"
OpAndcc_imm::getCycles()
{
#line 229 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 1; }
#line 36717 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36721 "hcs12x.cc"
OpAndcc_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36725 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36728 "hcs12x.cc"
)
{
#line 231 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem = "ANDCC";

		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 36739 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36743 "hcs12x.cc"
OpAndcc_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36747 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36750 "hcs12x.cc"
)
{
#line 239 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal = cpu->ccr->getCCRLow();

		result = regVal & opr8i;

		cpu->ccr->setCCRLow(result);

	}
#line 36764 "hcs12x.cc"
}

static Operation *DecodeOpAndcc_imm(CodeType const& code, uint16_t addr)
{
	return new OpAndcc_imm(code, addr);
}

// ANDX/ANDY IMM (regXY & opr16i => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 36775 "hcs12x.cc"
OpAnd_xy_imm::getCycles()
{
#line 253 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 36780 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36784 "hcs12x.cc"
OpAnd_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36788 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36791 "hcs12x.cc"
)
{
#line 255 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDX";
			} else {
			mnem = "ANDY";
		}

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 36808 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36812 "hcs12x.cc"
OpAnd_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36816 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36819 "hcs12x.cc"
)
{
#line 269 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 36846 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_imm(code, addr);
}

// ANDX/ANDY DIR (regXY & mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 36857 "hcs12x.cc"
OpAnd_xy_dir::getCycles()
{
#line 296 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 36862 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36866 "hcs12x.cc"
OpAnd_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36870 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36873 "hcs12x.cc"
)
{
#line 298 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDX";
			} else {
			mnem = "ANDY";
		}

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 36890 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36894 "hcs12x.cc"
OpAnd_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36898 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36901 "hcs12x.cc"
)
{
#line 312 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 36930 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_dir(code, addr);
}

// ANDX/ANDY EXT (regXY & mem[opr16a]:mem[opr16a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 36941 "hcs12x.cc"
OpAnd_xy_ext::getCycles()
{
#line 341 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 36946 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 36950 "hcs12x.cc"
OpAnd_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 36954 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 36957 "hcs12x.cc"
)
{
#line 343 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDX";
			} else {
			mnem = "ANDY";
		}

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 36974 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 36978 "hcs12x.cc"
OpAnd_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 36982 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 36985 "hcs12x.cc"
)
{
#line 357 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37014 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_ext(code, addr);
}

// ANDX/ANDY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY & mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 74 "hcs12x.isa"
void
#line 37025 "hcs12x.cc"
OpAnd_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 37029 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 37032 "hcs12x.cc"
)
{
#line 386 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 37041 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 37045 "hcs12x.cc"
OpAnd_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 37049 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 37052 "hcs12x.cc"
)
{
#line 392 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 37061 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 37065 "hcs12x.cc"
OpAnd_xy_idx::getCycles()
{
#line 398 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 37070 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37074 "hcs12x.cc"
OpAnd_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37078 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37081 "hcs12x.cc"
)
{
#line 400 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ANDX";
			} else {
			mnem = "ANDY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 37099 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37103 "hcs12x.cc"
OpAnd_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37107 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37110 "hcs12x.cc"
)
{
#line 415 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37139 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_idx(code, addr);
}

// ORAA/ORAB IMM (regAB or opr8i => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 37150 "hcs12x.cc"
OpOra_ab_imm::getCycles()
{
#line 445 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 1; }
#line 37155 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37159 "hcs12x.cc"
OpOra_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37163 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37166 "hcs12x.cc"
)
{
#line 447 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORAA";
			} else {
			mnem = "ORAB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 37182 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37186 "hcs12x.cc"
OpOra_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37190 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37193 "hcs12x.cc"
)
{
#line 460 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal | opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 37221 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_imm(code, addr);
}

// ORAA/ORAB  DIR  (regAB | mem[regDirect:opr8a] => regAB)s
#line 83 "hcs12x.isa"
uint8_t
#line 37232 "hcs12x.cc"
OpOra_ab_dir::getCycles()
{
#line 488 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 37237 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37241 "hcs12x.cc"
OpOra_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37245 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37248 "hcs12x.cc"
)
{
#line 490 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORAA";
			} else {
			mnem = "ORAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 37264 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37268 "hcs12x.cc"
OpOra_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37272 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37275 "hcs12x.cc"
)
{
#line 503 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal | opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37304 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_dir(code, addr);
}

// ORAA/ORAB EXT (regAB | mem[opr16a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 37315 "hcs12x.cc"
OpOra_ab_ext::getCycles()
{
#line 532 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 37320 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37324 "hcs12x.cc"
OpOra_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37328 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37331 "hcs12x.cc"
)
{
#line 534 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORAA";
			} else {
			mnem = "ORAB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 37347 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37351 "hcs12x.cc"
OpOra_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37355 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37358 "hcs12x.cc"
)
{
#line 547 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal | opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37387 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_ext(code, addr);
}

// ORAA/ORAB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB | mem[xb->addrE] => regAB)
#line 74 "hcs12x.isa"
void
#line 37398 "hcs12x.cc"
OpOra_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 37402 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 37405 "hcs12x.cc"
)
{
#line 576 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 37414 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 37418 "hcs12x.cc"
OpOra_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 37422 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 37425 "hcs12x.cc"
)
{
#line 582 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 37434 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 37438 "hcs12x.cc"
OpOra_ab_idx::getCycles()
{
#line 588 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 37443 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37447 "hcs12x.cc"
OpOra_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37451 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37454 "hcs12x.cc"
)
{
#line 590 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0){
			mnem = "ORAA";
			} else {
			mnem = "ORAB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 37472 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37476 "hcs12x.cc"
OpOra_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37480 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37483 "hcs12x.cc"
)
{
#line 605 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal | xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37513 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_idx(code, addr);
}

// ORCC  IMM  (ccr & ii => ccr)
#line 83 "hcs12x.isa"
uint8_t
#line 37524 "hcs12x.cc"
OpOrcc_imm::getCycles()
{
#line 635 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 1; }
#line 37529 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37533 "hcs12x.cc"
OpOrcc_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37537 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37540 "hcs12x.cc"
)
{
#line 637 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem = "ORCC";

		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 37551 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37555 "hcs12x.cc"
OpOrcc_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37559 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37562 "hcs12x.cc"
)
{
#line 645 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result, xFlag;

		uint8_t regVal = cpu->ccr->getCCRLow();

		// get ccr.X which may not be affected by ORCC instruction
		// if (ccr.X==1) then xFlag=0xFF else xFlag=0xBF;  0xBF = 0b10111111
		xFlag = regVal | 0xBF;

		result = (regVal | opr8i) & xFlag;

		cpu->ccr->setCCRLow(result);

	}
#line 37580 "hcs12x.cc"
}

static Operation *DecodeOpOrcc_imm(CodeType const& code, uint16_t addr)
{
	return new OpOrcc_imm(code, addr);
}

// TODO: implement specialization ++++++++++++++
// SEC: set carry
// use specialize orcc_imm with opr8i=0x01
// SEI: set I (inhibit I interrupts)
// use specialize orcc_imm with opr8i=0x10
// SEV: set overflow
// use specialize orcc_imm with opr8i=0x02
// end todo specialization ++++++++++++++++++++++
// ORX/ORY IMM (regXY | opr16i => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 37599 "hcs12x.cc"
OpOr_xy_imm::getCycles()
{
#line 677 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 37604 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37608 "hcs12x.cc"
OpOr_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37612 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37615 "hcs12x.cc"
)
{
#line 679 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORX";
			} else {
			mnem = "ORY";
		}

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 37632 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37636 "hcs12x.cc"
OpOr_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37640 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37643 "hcs12x.cc"
)
{
#line 693 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37670 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_imm(code, addr);
}

// ORX/ORY DIR (regXY | mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 37681 "hcs12x.cc"
OpOr_xy_dir::getCycles()
{
#line 720 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 37686 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37690 "hcs12x.cc"
OpOr_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37694 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37697 "hcs12x.cc"
)
{
#line 722 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORX";
			} else {
			mnem = "ORY";
		}

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 37714 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37718 "hcs12x.cc"
OpOr_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37722 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37725 "hcs12x.cc"
)
{
#line 736 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37754 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_dir(code, addr);
}

// ORX/ORY EXT (regXY | mem[opr16a]:mem[opr16a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 37765 "hcs12x.cc"
OpOr_xy_ext::getCycles()
{
#line 765 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 37770 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37774 "hcs12x.cc"
OpOr_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37778 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37781 "hcs12x.cc"
)
{
#line 767 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORX";
			} else {
			mnem = "ORY";
		}

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 37798 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37802 "hcs12x.cc"
OpOr_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37806 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37809 "hcs12x.cc"
)
{
#line 781 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37838 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_ext(code, addr);
}

// ORX/ORY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY | mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 74 "hcs12x.isa"
void
#line 37849 "hcs12x.cc"
OpOr_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 37853 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 37856 "hcs12x.cc"
)
{
#line 810 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 37865 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 37869 "hcs12x.cc"
OpOr_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 37873 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 37876 "hcs12x.cc"
)
{
#line 816 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 37885 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 37889 "hcs12x.cc"
OpOr_xy_idx::getCycles()
{
#line 822 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 37894 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37898 "hcs12x.cc"
OpOr_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37902 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37905 "hcs12x.cc"
)
{
#line 824 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORX";
			} else {
			mnem = "ORY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 37923 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 37927 "hcs12x.cc"
OpOr_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 37931 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 37934 "hcs12x.cc"
)
{
#line 839 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 37963 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_idx(code, addr);
}

// EORA/EORB IMM (regAB ^ opr8i => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 37974 "hcs12x.cc"
OpEor_ab_imm::getCycles()
{
#line 869 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 1; }
#line 37979 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 37983 "hcs12x.cc"
OpEor_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 37987 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 37990 "hcs12x.cc"
)
{
#line 871 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORA";
			} else {
			mnem = "EORB";
		}
		sink << mnem << " #0x" << std::hex << opr8i;

		return mnem;
	}
#line 38006 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38010 "hcs12x.cc"
OpEor_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38014 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38017 "hcs12x.cc"
)
{
#line 884 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal ^ opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38044 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_imm(code, addr);
}

// EORA/EORB  DIR  (regAB ^ mem[regDirect:opr8a] => regAB)s
#line 83 "hcs12x.isa"
uint8_t
#line 38055 "hcs12x.cc"
OpEor_ab_dir::getCycles()
{
#line 911 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 38060 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38064 "hcs12x.cc"
OpEor_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38068 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38071 "hcs12x.cc"
)
{
#line 913 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "ORAA";
			} else {
			mnem = "ORAB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 38087 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38091 "hcs12x.cc"
OpEor_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38095 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38098 "hcs12x.cc"
)
{
#line 926 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal ^ opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38127 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_dir(code, addr);
}

// EORA/EORB EXT (regAB ^ mem[opr16a] => regAB)
#line 83 "hcs12x.isa"
uint8_t
#line 38138 "hcs12x.cc"
OpEor_ab_ext::getCycles()
{
#line 955 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 38143 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38147 "hcs12x.cc"
OpEor_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38151 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38154 "hcs12x.cc"
)
{
#line 957 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORA";
			} else {
			mnem = "EORB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 38170 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38174 "hcs12x.cc"
OpEor_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38178 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38181 "hcs12x.cc"
)
{
#line 970 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal ^ opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38210 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_ext(code, addr);
}

// EORA/EORB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB ^ mem[xb->addrE] => regAB)
#line 74 "hcs12x.isa"
void
#line 38221 "hcs12x.cc"
OpEor_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 38225 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 38228 "hcs12x.cc"
)
{
#line 999 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 38237 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 38241 "hcs12x.cc"
OpEor_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 38245 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 38248 "hcs12x.cc"
)
{
#line 1005 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 38257 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 38261 "hcs12x.cc"
OpEor_ab_idx::getCycles()
{
#line 1011 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 38266 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38270 "hcs12x.cc"
OpEor_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38274 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38277 "hcs12x.cc"
)
{
#line 1013 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0){
			mnem = "EORA";
			} else {
			mnem = "EORB";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 38295 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38299 "hcs12x.cc"
OpEor_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38303 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38306 "hcs12x.cc"
)
{
#line 1028 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal ^ xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38336 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_idx(code, addr);
}

// EORX/EORY IMM (regXY ^ opr16i => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 38347 "hcs12x.cc"
OpEor_xy_imm::getCycles()
{
#line 1058 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 3; }
#line 38352 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38356 "hcs12x.cc"
OpEor_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38360 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38363 "hcs12x.cc"
)
{
#line 1060 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORX";
			} else {
			mnem = "EORY";
		}

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 38380 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38384 "hcs12x.cc"
OpEor_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38388 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38391 "hcs12x.cc"
)
{
#line 1074 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38418 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_imm(code, addr);
}

// EORX/EORY DIR (regXY ^ mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 38429 "hcs12x.cc"
OpEor_xy_dir::getCycles()
{
#line 1101 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 38434 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38438 "hcs12x.cc"
OpEor_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38442 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38445 "hcs12x.cc"
)
{
#line 1103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORX";
			} else {
			mnem = "EORY";
		}

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 38462 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38466 "hcs12x.cc"
OpEor_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38470 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38473 "hcs12x.cc"
)
{
#line 1117 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38502 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_dir(code, addr);
}

// EORX/EORY EXT (regXY ^ mem[opr16a]:mem[opr16a+1] => regXY)
#line 83 "hcs12x.isa"
uint8_t
#line 38513 "hcs12x.cc"
OpEor_xy_ext::getCycles()
{
#line 1146 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return 4; }
#line 38518 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38522 "hcs12x.cc"
OpEor_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38526 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38529 "hcs12x.cc"
)
{
#line 1148 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORX";
			} else {
			mnem = "EORY";
		}

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 38546 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38550 "hcs12x.cc"
OpEor_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38554 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38557 "hcs12x.cc"
)
{
#line 1162 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = opr16a;
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38586 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_ext(code, addr);
}

// EORX/EORY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY ^ mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 74 "hcs12x.isa"
void
#line 38597 "hcs12x.cc"
OpEor_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 38601 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 38604 "hcs12x.cc"
)
{
#line 1191 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 38613 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 38617 "hcs12x.cc"
OpEor_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 38621 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 38624 "hcs12x.cc"
)
{
#line 1197 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 38633 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 38637 "hcs12x.cc"
OpEor_xy_idx::getCycles()
{
#line 1203 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 38642 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38646 "hcs12x.cc"
OpEor_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38650 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38653 "hcs12x.cc"
)
{
#line 1205 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "EORX";
			} else {
			mnem = "EORY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 38671 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38675 "hcs12x.cc"
OpEor_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38679 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38682 "hcs12x.cc"
)
{
#line 1220 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 38711 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ********** Clear, Complement, and Negate instructions ********* */
// CLC: clear bit C
#line 83 "hcs12x.isa"
uint8_t
#line 38756 "hcs12x.cc"
OpClc::getCycles()
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 38761 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38765 "hcs12x.cc"
OpClc::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38769 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38772 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLC";

		sink << mnem;

		return mnem;
	}
#line 38783 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38787 "hcs12x.cc"
OpClc::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38791 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38794 "hcs12x.cc"
)
{
#line 51 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrC();
	}
#line 38801 "hcs12x.cc"
}

static Operation *DecodeOpClc(CodeType const& code, uint16_t addr)
{
	return new OpClc(code, addr);
}

// CLI: clear bit I
#line 83 "hcs12x.isa"
uint8_t
#line 38812 "hcs12x.cc"
OpCli::getCycles()
{
#line 58 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 38817 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38821 "hcs12x.cc"
OpCli::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38825 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38828 "hcs12x.cc"
)
{
#line 60 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLI";

		sink << mnem;

		return  mnem;
	}
#line 38839 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38843 "hcs12x.cc"
OpCli::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38847 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38850 "hcs12x.cc"
)
{
#line 68 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrI();
	}
#line 38857 "hcs12x.cc"
}

static Operation *DecodeOpCli(CodeType const& code, uint16_t addr)
{
	return new OpCli(code, addr);
}

// CLV: clear bit V
#line 83 "hcs12x.isa"
uint8_t
#line 38868 "hcs12x.cc"
OpClv::getCycles()
{
#line 75 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 38873 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38877 "hcs12x.cc"
OpClv::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38881 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38884 "hcs12x.cc"
)
{
#line 77 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLV";

		sink << mnem;

		return mnem;
	}
#line 38895 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38899 "hcs12x.cc"
OpClv::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38903 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38906 "hcs12x.cc"
)
{
#line 85 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrV();
	}
#line 38913 "hcs12x.cc"
}

static Operation *DecodeOpClv(CodeType const& code, uint16_t addr)
{
	return new OpClv(code, addr);
}

// clear Memory
#line 83 "hcs12x.isa"
uint8_t
#line 38924 "hcs12x.cc"
OpClr_ext::getCycles()
{
#line 92 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 3; }
#line 38929 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 38933 "hcs12x.cc"
OpClr_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 38937 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 38940 "hcs12x.cc"
)
{
#line 94 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLR";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 38951 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 38955 "hcs12x.cc"
OpClr_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 38959 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 38962 "hcs12x.cc"
)
{
#line 102 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		cpu->memWrite8(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 38975 "hcs12x.cc"
}

static Operation *DecodeOpClr_ext(CodeType const& code, uint16_t addr)
{
	return new OpClr_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 38985 "hcs12x.cc"
OpClr_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 38989 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 38992 "hcs12x.cc"
)
{
#line 114 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 39001 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 39005 "hcs12x.cc"
OpClr_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 39009 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 39012 "hcs12x.cc"
)
{
#line 120 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 39021 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 39025 "hcs12x.cc"
OpClr_idx::getCycles()
{
#line 127 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 3, 3, 4, 4); }
#line 39030 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39034 "hcs12x.cc"
OpClr_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39038 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39041 "hcs12x.cc"
)
{
#line 129 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLR";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 39053 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39057 "hcs12x.cc"
OpClr_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39061 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39064 "hcs12x.cc"
)
{
#line 138 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		cpu->memWrite8(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 39077 "hcs12x.cc"
}

static Operation *DecodeOpClr_idx(CodeType const& code, uint16_t addr)
{
	return new OpClr_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39087 "hcs12x.cc"
OpClrw_ext::getCycles()
{
#line 150 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 39092 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39096 "hcs12x.cc"
OpClrw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39100 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39103 "hcs12x.cc"
)
{
#line 152 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLRW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 39114 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39118 "hcs12x.cc"
OpClrw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39122 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39125 "hcs12x.cc"
)
{
#line 160 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		cpu->memWrite16(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 39138 "hcs12x.cc"
}

static Operation *DecodeOpClrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpClrw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 39148 "hcs12x.cc"
OpClrw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 39152 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 39155 "hcs12x.cc"
)
{
#line 172 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 39164 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 39168 "hcs12x.cc"
OpClrw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 39172 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 39175 "hcs12x.cc"
)
{
#line 178 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 39184 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 39188 "hcs12x.cc"
OpClrw_idx::getCycles()
{
#line 185 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 4, 5, 5); }
#line 39193 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39197 "hcs12x.cc"
OpClrw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39201 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39204 "hcs12x.cc"
)
{
#line 187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "CLRW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 39216 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39220 "hcs12x.cc"
OpClrw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39224 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39227 "hcs12x.cc"
)
{
#line 196 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		cpu->memWrite16(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 39240 "hcs12x.cc"
}

static Operation *DecodeOpClrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpClrw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39250 "hcs12x.cc"
OpClr_ab::getCycles()
{
#line 208 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 39255 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39259 "hcs12x.cc"
OpClr_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39263 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39266 "hcs12x.cc"
)
{
#line 210 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CLRA";
			} else {
			mnem = "CLRB";
		}

		sink << mnem;

		return mnem;
	}
#line 39283 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39287 "hcs12x.cc"
OpClr_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39291 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39294 "hcs12x.cc"
)
{
#line 224 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		if (b==0) {
			cpu->setRegA(0);
			} else {
			cpu->setRegB(0);
		}

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 39311 "hcs12x.cc"
}

static Operation *DecodeOpClr_ab(CodeType const& code, uint16_t addr)
{
	return new OpClr_ab(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39321 "hcs12x.cc"
OpClr_xy::getCycles()
{
#line 240 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 39326 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39330 "hcs12x.cc"
OpClr_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39334 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39337 "hcs12x.cc"
)
{
#line 242 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "CLRX";
			} else {
			mnem = "CLRY";
		}

		sink << mnem;

		return mnem;
	}
#line 39354 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39358 "hcs12x.cc"
OpClr_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39362 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39365 "hcs12x.cc"
)
{
#line 256 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		if (b==0) {
			cpu->setRegX(0);
			} else {
			cpu->setRegY(0);
		}

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 39382 "hcs12x.cc"
}

static Operation *DecodeOpClr_xy(CodeType const& code, uint16_t addr)
{
	return new OpClr_xy(code, addr);
}

// COM: One's complement memory Location
#line 83 "hcs12x.isa"
uint8_t
#line 39393 "hcs12x.cc"
OpCom_ext::getCycles()
{
#line 273 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 39398 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39402 "hcs12x.cc"
OpCom_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39406 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39409 "hcs12x.cc"
)
{
#line 275 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "COM";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 39420 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39424 "hcs12x.cc"
OpCom_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39428 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39431 "hcs12x.cc"
)
{
#line 283 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = ~cpu->memRead8(addr);
		cpu->memWrite8(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39445 "hcs12x.cc"
}

static Operation *DecodeOpCom_ext(CodeType const& code, uint16_t addr)
{
	return new OpCom_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 39455 "hcs12x.cc"
OpCom_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 39459 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 39462 "hcs12x.cc"
)
{
#line 296 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 39471 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 39475 "hcs12x.cc"
OpCom_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 39479 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 39482 "hcs12x.cc"
)
{
#line 302 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 39491 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 39495 "hcs12x.cc"
OpCom_idx::getCycles()
{
#line 309 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 39500 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39504 "hcs12x.cc"
OpCom_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39508 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39511 "hcs12x.cc"
)
{
#line 311 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "COM";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 39523 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39527 "hcs12x.cc"
OpCom_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39531 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39534 "hcs12x.cc"
)
{
#line 320 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = ~cpu->memRead8(addr);
		cpu->memWrite8(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39549 "hcs12x.cc"
}

static Operation *DecodeOpCom_idx(CodeType const& code, uint16_t addr)
{
	return new OpCom_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39559 "hcs12x.cc"
OpCom_ab::getCycles()
{
#line 334 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 39564 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39568 "hcs12x.cc"
OpCom_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39572 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39575 "hcs12x.cc"
)
{
#line 336 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "COMA";
			} else {
			mnem = "COMB";
		}

		sink << mnem;

		return mnem;
	}
#line 39592 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39596 "hcs12x.cc"
OpCom_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39600 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39603 "hcs12x.cc"
)
{
#line 350 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		val = ~val;

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39629 "hcs12x.cc"
}

static Operation *DecodeOpCom_ab(CodeType const& code, uint16_t addr)
{
	return new OpCom_ab(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39639 "hcs12x.cc"
OpComw_ext::getCycles()
{
#line 375 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 39644 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39648 "hcs12x.cc"
OpComw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39652 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39655 "hcs12x.cc"
)
{
#line 377 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "COMW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 39666 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39670 "hcs12x.cc"
OpComw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39674 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39677 "hcs12x.cc"
)
{
#line 385 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = ~cpu->memRead16(addr);
		cpu->memWrite16(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39691 "hcs12x.cc"
}

static Operation *DecodeOpComw_ext(CodeType const& code, uint16_t addr)
{
	return new OpComw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 39701 "hcs12x.cc"
OpComw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 39705 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 39708 "hcs12x.cc"
)
{
#line 398 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 39717 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 39721 "hcs12x.cc"
OpComw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 39725 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 39728 "hcs12x.cc"
)
{
#line 404 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 39737 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 39741 "hcs12x.cc"
OpComw_idx::getCycles()
{
#line 410 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 39746 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39750 "hcs12x.cc"
OpComw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39754 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39757 "hcs12x.cc"
)
{
#line 412 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "COMW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 39769 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39773 "hcs12x.cc"
OpComw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39777 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39780 "hcs12x.cc"
)
{
#line 421 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = ~cpu->memRead16(addr);
		cpu->memWrite16(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39795 "hcs12x.cc"
}

static Operation *DecodeOpComw_idx(CodeType const& code, uint16_t addr)
{
	return new OpComw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 39805 "hcs12x.cc"
OpCom_xy::getCycles()
{
#line 435 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 39810 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39814 "hcs12x.cc"
OpCom_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39818 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39821 "hcs12x.cc"
)
{
#line 437 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "COMX";
			} else {
			mnem = "COMY";
		}

		sink << mnem;

		return mnem;
	}
#line 39838 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39842 "hcs12x.cc"
OpCom_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39846 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39849 "hcs12x.cc"
)
{
#line 451 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		val = ~val;

		if (b==0) {
			cpu->setRegX(val);
			} else {
			cpu->setRegY(val);
		}

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 39875 "hcs12x.cc"
}

static Operation *DecodeOpCom_xy(CodeType const& code, uint16_t addr)
{
	return new OpCom_xy(code, addr);
}

// NEG: Two's Complement Negate
#line 83 "hcs12x.isa"
uint8_t
#line 39886 "hcs12x.cc"
OpNeg_ext::getCycles()
{
#line 477 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 39891 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39895 "hcs12x.cc"
OpNeg_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 39899 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 39902 "hcs12x.cc"
)
{
#line 479 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "NEG";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 39913 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 39917 "hcs12x.cc"
OpNeg_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 39921 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 39924 "hcs12x.cc"
)
{
#line 487 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t result, carry_out, overflow;
		physical_address_t addr = opr16a;
		Sub8(result, carry_out, overflow, 0, cpu->memRead8(addr), 0);
		cpu->memWrite8(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 39939 "hcs12x.cc"
}

static Operation *DecodeOpNeg_ext(CodeType const& code, uint16_t addr)
{
	return new OpNeg_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 39949 "hcs12x.cc"
OpNeg_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 39953 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 39956 "hcs12x.cc"
)
{
#line 501 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 39965 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 39969 "hcs12x.cc"
OpNeg_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 39973 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 39976 "hcs12x.cc"
)
{
#line 507 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 39985 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 39989 "hcs12x.cc"
OpNeg_idx::getCycles()
{
#line 513 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 39994 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 39998 "hcs12x.cc"
OpNeg_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40002 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40005 "hcs12x.cc"
)
{
#line 515 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "NEG";

		sink << mnem << " 0x";
		xb->disasm(sink);

		return mnem;
	}
#line 40017 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40021 "hcs12x.cc"
OpNeg_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40025 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40028 "hcs12x.cc"
)
{
#line 524 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t result, carry_out, overflow;
		physical_address_t addr = xb->getEAddr(cpu);

		Sub8(result, carry_out, overflow, 0, cpu->memRead8(addr), 0);
		cpu->memWrite8(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}

	}
#line 40046 "hcs12x.cc"
}

static Operation *DecodeOpNeg_idx(CodeType const& code, uint16_t addr)
{
	return new OpNeg_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40056 "hcs12x.cc"
OpNeg_ab::getCycles()
{
#line 541 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 40061 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40065 "hcs12x.cc"
OpNeg_ab::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40069 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40072 "hcs12x.cc"
)
{
#line 543 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "NEGA";
			} else {
			mnem = "NEGB";
		}

		sink << mnem;

		return mnem;
	}
#line 40089 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40093 "hcs12x.cc"
OpNeg_ab::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40097 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40100 "hcs12x.cc"
)
{
#line 557 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val, result, carry_out, overflow;

		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, 0, val, 0);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 40126 "hcs12x.cc"
}

static Operation *DecodeOpNeg_ab(CodeType const& code, uint16_t addr)
{
	return new OpNeg_ab(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40136 "hcs12x.cc"
OpNegw_ext::getCycles()
{
#line 582 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 40141 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40145 "hcs12x.cc"
OpNegw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40149 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40152 "hcs12x.cc"
)
{
#line 584 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "NEGW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 40163 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40167 "hcs12x.cc"
OpNegw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40171 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40174 "hcs12x.cc"
)
{
#line 592 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		physical_address_t addr = opr16a;

		Sub16(result, carry_out, overflow, 0, cpu->memRead16(addr), 0);
		cpu->memWrite16(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 40192 "hcs12x.cc"
}

static Operation *DecodeOpNegw_ext(CodeType const& code, uint16_t addr)
{
	return new OpNegw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 40202 "hcs12x.cc"
OpNegw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 40206 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 40209 "hcs12x.cc"
)
{
#line 609 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 40218 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 40222 "hcs12x.cc"
OpNegw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 40226 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 40229 "hcs12x.cc"
)
{
#line 615 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 40238 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 40242 "hcs12x.cc"
OpNegw_idx::getCycles()
{
#line 621 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 40247 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40251 "hcs12x.cc"
OpNegw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40255 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40258 "hcs12x.cc"
)
{
#line 623 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "NEGW";

		sink << mnem << " 0x";
		xb->disasm(sink);

		return mnem;
	}
#line 40270 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40274 "hcs12x.cc"
OpNegw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40278 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40281 "hcs12x.cc"
)
{
#line 632 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t carry_out, overflow;
		uint16_t result;

		physical_address_t addr = xb->getEAddr(cpu);

		Sub16(result, carry_out, overflow, 0, cpu->memRead16(addr), 0);
		cpu->memWrite16(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}

	}
#line 40301 "hcs12x.cc"
}

static Operation *DecodeOpNegw_idx(CodeType const& code, uint16_t addr)
{
	return new OpNegw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40311 "hcs12x.cc"
OpNeg_xy::getCycles()
{
#line 651 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 40316 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40320 "hcs12x.cc"
OpNeg_xy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40324 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40327 "hcs12x.cc"
)
{
#line 653 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "NEGX";
			} else {
			mnem = "NEGY";
		}

		sink << mnem;

		return mnem;
	}
#line 40344 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40348 "hcs12x.cc"
OpNeg_xy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40352 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40355 "hcs12x.cc"
)
{
#line 667 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t val, result;

		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, 0, val, 0);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 40382 "hcs12x.cc"
}

static Operation *DecodeOpNeg_xy(CodeType const& code, uint16_t addr)
{
	return new OpNeg_xy(code, addr);
}

/* ********** Bit Test and Manipulation Instructions ************* */
// BCLR: Clear bit(s) in memory
#line 83 "hcs12x.isa"
uint8_t
#line 40394 "hcs12x.cc"
OpBclr_dir::getCycles()
{
#line 697 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 40399 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40403 "hcs12x.cc"
OpBclr_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40407 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40410 "hcs12x.cc"
)
{
#line 699 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BCLR";

		sink << mnem << " 0x" << std::hex << opr8a << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 40421 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40425 "hcs12x.cc"
OpBclr_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40429 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40432 "hcs12x.cc"
)
{
#line 707 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t ddVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = ddVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 40449 "hcs12x.cc"
}

static Operation *DecodeOpBclr_dir(CodeType const& code, uint16_t addr)
{
	return new OpBclr_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40459 "hcs12x.cc"
OpBclr_ext::getCycles()
{
#line 723 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 40464 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40468 "hcs12x.cc"
OpBclr_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40472 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40475 "hcs12x.cc"
)
{
#line 725 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BCLR";

		sink << mnem << " 0x" << std::hex << opr16a << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 40486 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40490 "hcs12x.cc"
OpBclr_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40494 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40497 "hcs12x.cc"
)
{
#line 733 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = opr16aVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 40514 "hcs12x.cc"
}

static Operation *DecodeOpBclr_ext(CodeType const& code, uint16_t addr)
{
	return new OpBclr_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 40524 "hcs12x.cc"
OpBclr_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 40528 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 40531 "hcs12x.cc"
)
{
#line 749 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 40540 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 40544 "hcs12x.cc"
OpBclr_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 40548 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 40551 "hcs12x.cc"
)
{
#line 755 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 40560 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 40564 "hcs12x.cc"
OpBclr_idx::getCycles()
{
#line 761 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 6, 0, 0); }
#line 40569 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40573 "hcs12x.cc"
OpBclr_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40577 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40580 "hcs12x.cc"
)
{
#line 763 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BCLR";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 40593 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40597 "hcs12x.cc"
OpBclr_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40601 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40604 "hcs12x.cc"
)
{
#line 773 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = xbVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 40622 "hcs12x.cc"
}

static Operation *DecodeOpBclr_idx(CodeType const& code, uint16_t addr)
{
	return new OpBclr_idx(code, addr);
}

// BITA or BITB: bit test A/B (Logical 'AND' A/B with Memory
#line 83 "hcs12x.isa"
uint8_t
#line 40633 "hcs12x.cc"
OpBit_ab_imm::getCycles()
{
#line 791 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 40638 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40642 "hcs12x.cc"
OpBit_ab_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40646 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40649 "hcs12x.cc"
)
{
#line 793 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITA";
			} else {
			mnem = "BITB";
		}
		sink << mnem << " #0x" << std::hex << ii;

		return mnem;
	}
#line 40665 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40669 "hcs12x.cc"
OpBit_ab_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40673 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40676 "hcs12x.cc"
)
{
#line 806 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & ii;
			} else {
			val = cpu->getRegB() & ii;
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 40694 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_imm(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40704 "hcs12x.cc"
OpBit_ab_dir::getCycles()
{
#line 823 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 3; }
#line 40709 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40713 "hcs12x.cc"
OpBit_ab_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40717 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40720 "hcs12x.cc"
)
{
#line 825 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITA";
			} else {
			mnem = "BITB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 40736 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40740 "hcs12x.cc"
OpBit_ab_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40744 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40747 "hcs12x.cc"
)
{
#line 838 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 40766 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 40776 "hcs12x.cc"
OpBit_ab_ext::getCycles()
{
#line 856 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 3; }
#line 40781 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40785 "hcs12x.cc"
OpBit_ab_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40789 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40792 "hcs12x.cc"
)
{
#line 858 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITA";
			} else {
			mnem = "BITB";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 40808 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40812 "hcs12x.cc"
OpBit_ab_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40816 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40819 "hcs12x.cc"
)
{
#line 871 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 40838 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 40848 "hcs12x.cc"
OpBit_ab_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 40852 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 40855 "hcs12x.cc"
)
{
#line 889 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 40864 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 40868 "hcs12x.cc"
OpBit_ab_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 40872 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 40875 "hcs12x.cc"
)
{
#line 895 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 40884 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 40888 "hcs12x.cc"
OpBit_ab_idx::getCycles()
{
#line 901 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 40893 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40897 "hcs12x.cc"
OpBit_ab_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40901 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40904 "hcs12x.cc"
)
{
#line 903 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITA";
			} else {
			mnem = "BITB";
		}
		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 40921 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40925 "hcs12x.cc"
OpBit_ab_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 40929 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 40932 "hcs12x.cc"
)
{
#line 917 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 40951 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_idx(code, addr);
}

// BITX or BITY: bit test X/Y (Logical 'AND' X/Y with Memory
#line 83 "hcs12x.isa"
uint8_t
#line 40962 "hcs12x.cc"
OpBit_xy_imm::getCycles()
{
#line 936 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 3; }
#line 40967 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 40971 "hcs12x.cc"
OpBit_xy_imm::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 40975 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 40978 "hcs12x.cc"
)
{
#line 938 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITX";
			} else {
			mnem = "BITY";
		}

		sink << mnem << " #0x" << std::hex << opr16i;

		return mnem;
	}
#line 40995 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 40999 "hcs12x.cc"
OpBit_xy_imm::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41003 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41006 "hcs12x.cc"
)
{
#line 952 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & opr16i;
			} else {
			val = cpu->getRegY() & opr16i;
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 41024 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_imm(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41034 "hcs12x.cc"
OpBit_xy_dir::getCycles()
{
#line 969 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 41039 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41043 "hcs12x.cc"
OpBit_xy_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41047 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41050 "hcs12x.cc"
)
{
#line 971 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITA";
			} else {
			mnem = "BITB";
		}
		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 41066 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41070 "hcs12x.cc"
OpBit_xy_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41074 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41077 "hcs12x.cc"
)
{
#line 984 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 41096 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41106 "hcs12x.cc"
OpBit_xy_ext::getCycles()
{
#line 1002 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 41111 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41115 "hcs12x.cc"
OpBit_xy_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41119 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41122 "hcs12x.cc"
)
{
#line 1004 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITX";
			} else {
			mnem = "BITY";
		}
		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 41138 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41142 "hcs12x.cc"
OpBit_xy_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41146 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41149 "hcs12x.cc"
)
{
#line 1017 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 41168 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 41178 "hcs12x.cc"
OpBit_xy_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 41182 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 41185 "hcs12x.cc"
)
{
#line 1035 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 41194 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 41198 "hcs12x.cc"
OpBit_xy_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 41202 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 41205 "hcs12x.cc"
)
{
#line 1041 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 41214 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 41218 "hcs12x.cc"
OpBit_xy_idx::getCycles()
{
#line 1047 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 41223 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41227 "hcs12x.cc"
OpBit_xy_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41231 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41234 "hcs12x.cc"
)
{
#line 1049 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem;

		if (b==0) {
			mnem = "BITX";
			} else {
			mnem = "BITY";
		}

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 41252 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41256 "hcs12x.cc"
OpBit_xy_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41260 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41263 "hcs12x.cc"
)
{
#line 1064 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 41282 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_idx(code, addr);
}

// BSET: Set bits in memory
#line 83 "hcs12x.isa"
uint8_t
#line 41293 "hcs12x.cc"
OpBset_dir::getCycles()
{
#line 1083 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 41298 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41302 "hcs12x.cc"
OpBset_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41306 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41309 "hcs12x.cc"
)
{
#line 1085 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BSET";

		sink << mnem << " 0x" << std::hex << opr8a << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 41320 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41324 "hcs12x.cc"
OpBset_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41328 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41331 "hcs12x.cc"
)
{
#line 1093 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t ddVal = cpu->memRead8(addr);

		uint8_t val = ddVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 41347 "hcs12x.cc"
}

static Operation *DecodeOpBset_dir(CodeType const& code, uint16_t addr)
{
	return new OpBset_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41357 "hcs12x.cc"
OpBset_ext::getCycles()
{
#line 1108 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 41362 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41366 "hcs12x.cc"
OpBset_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41370 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41373 "hcs12x.cc"
)
{
#line 1110 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BSET";

		sink << mnem << " 0x" << std::hex << opr16a << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 41384 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41388 "hcs12x.cc"
OpBset_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41392 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41395 "hcs12x.cc"
)
{
#line 1118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		uint8_t val = opr16aVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 41411 "hcs12x.cc"
}

static Operation *DecodeOpBset_ext(CodeType const& code, uint16_t addr)
{
	return new OpBset_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 41421 "hcs12x.cc"
OpBset_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 41425 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 41428 "hcs12x.cc"
)
{
#line 1133 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 41437 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 41441 "hcs12x.cc"
OpBset_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 41445 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 41448 "hcs12x.cc"
)
{
#line 1139 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 41457 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 41461 "hcs12x.cc"
OpBset_idx::getCycles()
{
#line 1145 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 6, 0, 0); }
#line 41466 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41470 "hcs12x.cc"
OpBset_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41474 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41477 "hcs12x.cc"
)
{
#line 1147 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BSET";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << mm;

		return mnem;
	}
#line 41490 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41494 "hcs12x.cc"
OpBset_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41498 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41501 "hcs12x.cc"
)
{
#line 1157 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		uint8_t val = xbVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 41518 "hcs12x.cc"
}

static Operation *DecodeOpBset_idx(CodeType const& code, uint16_t addr)
{
	return new OpBset_idx(code, addr);
}

/* ********** Shift and Rotate instructions ********************** */
// LSL: Logical Shift Left
// ASL: Arithmetic Shift Left
#line 83 "hcs12x.isa"
uint8_t
#line 41531 "hcs12x.cc"
OpLsl_ext::getCycles()
{
#line 1177 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 41536 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41540 "hcs12x.cc"
OpLsl_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41544 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41547 "hcs12x.cc"
)
{
#line 1179 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSL";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 41558 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41562 "hcs12x.cc"
OpLsl_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41566 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41569 "hcs12x.cc"
)
{
#line 1187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x80) == 0x80) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		val = val << 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41587 "hcs12x.cc"
}

static Operation *DecodeOpLsl_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsl_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 41597 "hcs12x.cc"
OpLsl_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 41601 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 41604 "hcs12x.cc"
)
{
#line 1204 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 41613 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 41617 "hcs12x.cc"
OpLsl_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 41621 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 41624 "hcs12x.cc"
)
{
#line 1210 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 41633 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 41637 "hcs12x.cc"
OpLsl_idx::getCycles()
{
#line 1216 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 41642 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41646 "hcs12x.cc"
OpLsl_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41650 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41653 "hcs12x.cc"
)
{
#line 1218 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSL";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 41665 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41669 "hcs12x.cc"
OpLsl_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41673 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41676 "hcs12x.cc"
)
{
#line 1227 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41695 "hcs12x.cc"
}

static Operation *DecodeOpLsl_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsl_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41705 "hcs12x.cc"
OpLsla::getCycles()
{
#line 1245 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 41710 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41714 "hcs12x.cc"
OpLsla::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41718 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41721 "hcs12x.cc"
)
{
#line 1247 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLA";

		sink << mnem;

		return mnem;
	}
#line 41732 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41736 "hcs12x.cc"
OpLsla::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41740 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41743 "hcs12x.cc"
)
{
#line 1255 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegA(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41760 "hcs12x.cc"
}

static Operation *DecodeOpLsla(CodeType const& code, uint16_t addr)
{
	return new OpLsla(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41770 "hcs12x.cc"
OpLslb::getCycles()
{
#line 1271 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 41775 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41779 "hcs12x.cc"
OpLslb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41783 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41786 "hcs12x.cc"
)
{
#line 1273 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLB";

		sink << mnem;

		return mnem;
	}
#line 41797 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41801 "hcs12x.cc"
OpLslb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41805 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41808 "hcs12x.cc"
)
{
#line 1281 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegB(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41825 "hcs12x.cc"
}

static Operation *DecodeOpLslb(CodeType const& code, uint16_t addr)
{
	return new OpLslb(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 41835 "hcs12x.cc"
OpLsld::getCycles()
{
#line 1297 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 41840 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41844 "hcs12x.cc"
OpLsld::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41848 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41851 "hcs12x.cc"
)
{
#line 1299 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLD";

		sink << mnem;

		return mnem;
	}
#line 41862 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41866 "hcs12x.cc"
OpLsld::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41870 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41873 "hcs12x.cc"
)
{
#line 1307 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegD();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegD(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41890 "hcs12x.cc"
}

static Operation *DecodeOpLsld(CodeType const& code, uint16_t addr)
{
	return new OpLsld(code, addr);
}

// LSLW: Logical Shift Left
// ASLW: Arithmetic Shift Left
#line 83 "hcs12x.isa"
uint8_t
#line 41902 "hcs12x.cc"
OpLslw_ext::getCycles()
{
#line 1326 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 41907 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 41911 "hcs12x.cc"
OpLslw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 41915 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 41918 "hcs12x.cc"
)
{
#line 1328 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 41929 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 41933 "hcs12x.cc"
OpLslw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 41937 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 41940 "hcs12x.cc"
)
{
#line 1336 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		val = val << 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 41958 "hcs12x.cc"
}

static Operation *DecodeOpLslw_ext(CodeType const& code, uint16_t addr)
{
	return new OpLslw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 41968 "hcs12x.cc"
OpLslw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 41972 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 41975 "hcs12x.cc"
)
{
#line 1353 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 41984 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 41988 "hcs12x.cc"
OpLslw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 41992 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 41995 "hcs12x.cc"
)
{
#line 1359 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 42004 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 42008 "hcs12x.cc"
OpLslw_idx::getCycles()
{
#line 1365 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 42013 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42017 "hcs12x.cc"
OpLslw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42021 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42024 "hcs12x.cc"
)
{
#line 1367 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 42036 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42040 "hcs12x.cc"
OpLslw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42044 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42047 "hcs12x.cc"
)
{
#line 1376 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42066 "hcs12x.cc"
}

static Operation *DecodeOpLslw_idx(CodeType const& code, uint16_t addr)
{
	return new OpLslw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42076 "hcs12x.cc"
OpLslx::getCycles()
{
#line 1394 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 42081 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42085 "hcs12x.cc"
OpLslx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42089 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42092 "hcs12x.cc"
)
{
#line 1396 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLX";

		sink << mnem;

		return mnem;
	}
#line 42103 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42107 "hcs12x.cc"
OpLslx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42111 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42114 "hcs12x.cc"
)
{
#line 1404 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegX(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42131 "hcs12x.cc"
}

static Operation *DecodeOpLslx(CodeType const& code, uint16_t addr)
{
	return new OpLslx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42141 "hcs12x.cc"
OpLsly::getCycles()
{
#line 1420 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 42146 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42150 "hcs12x.cc"
OpLsly::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42154 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42157 "hcs12x.cc"
)
{
#line 1422 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSLY";

		sink << mnem;

		return mnem;
	}
#line 42168 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42172 "hcs12x.cc"
OpLsly::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42176 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42179 "hcs12x.cc"
)
{
#line 1430 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegY(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42196 "hcs12x.cc"
}

static Operation *DecodeOpLsly(CodeType const& code, uint16_t addr)
{
	return new OpLsly(code, addr);
}

// ROL: Rotate Memory/Accumulator Left through carry
#line 83 "hcs12x.isa"
uint8_t
#line 42207 "hcs12x.cc"
OpRol_ext::getCycles()
{
#line 1447 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 42212 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42216 "hcs12x.cc"
OpRol_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42220 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42223 "hcs12x.cc"
)
{
#line 1449 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROL";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 42234 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42238 "hcs12x.cc"
OpRol_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42242 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42245 "hcs12x.cc"
)
{
#line 1457 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42264 "hcs12x.cc"
}

static Operation *DecodeOpRol_ext(CodeType const& code, uint16_t addr)
{
	return new OpRol_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 42274 "hcs12x.cc"
OpRol_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 42278 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 42281 "hcs12x.cc"
)
{
#line 1475 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 42290 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 42294 "hcs12x.cc"
OpRol_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 42298 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 42301 "hcs12x.cc"
)
{
#line 1481 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 42310 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 42314 "hcs12x.cc"
OpRol_idx::getCycles()
{
#line 1487 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 42319 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42323 "hcs12x.cc"
OpRol_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42327 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42330 "hcs12x.cc"
)
{
#line 1489 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROL";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 42342 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42346 "hcs12x.cc"
OpRol_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42350 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42353 "hcs12x.cc"
)
{
#line 1498 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42373 "hcs12x.cc"
}

static Operation *DecodeOpRol_idx(CodeType const& code, uint16_t addr)
{
	return new OpRol_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42383 "hcs12x.cc"
OpRola::getCycles()
{
#line 1517 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 42388 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42392 "hcs12x.cc"
OpRola::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42396 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42399 "hcs12x.cc"
)
{
#line 1519 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLA";

		sink << mnem;

		return mnem;
	}
#line 42410 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42414 "hcs12x.cc"
OpRola::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42418 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42421 "hcs12x.cc"
)
{
#line 1527 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42439 "hcs12x.cc"
}

static Operation *DecodeOpRola(CodeType const& code, uint16_t addr)
{
	return new OpRola(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42449 "hcs12x.cc"
OpRolb::getCycles()
{
#line 1544 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 42454 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42458 "hcs12x.cc"
OpRolb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42462 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42465 "hcs12x.cc"
)
{
#line 1546 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLB";

		sink << mnem;

		return mnem;
	}
#line 42476 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42480 "hcs12x.cc"
OpRolb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42484 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42487 "hcs12x.cc"
)
{
#line 1554 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42505 "hcs12x.cc"
}

static Operation *DecodeOpRolb(CodeType const& code, uint16_t addr)
{
	return new OpRolb(code, addr);
}

// ROLW: Rotate word Memory/Accumulator Left through carry
#line 83 "hcs12x.isa"
uint8_t
#line 42516 "hcs12x.cc"
OpRolw_ext::getCycles()
{
#line 1573 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 42521 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42525 "hcs12x.cc"
OpRolw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42529 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42532 "hcs12x.cc"
)
{
#line 1575 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLW";

		sink <<  mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 42543 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42547 "hcs12x.cc"
OpRolw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42551 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42554 "hcs12x.cc"
)
{
#line 1583 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42573 "hcs12x.cc"
}

static Operation *DecodeOpRolw_ext(CodeType const& code, uint16_t addr)
{
	return new OpRolw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 42583 "hcs12x.cc"
OpRolw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 42587 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 42590 "hcs12x.cc"
)
{
#line 1601 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 42599 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 42603 "hcs12x.cc"
OpRolw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 42607 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 42610 "hcs12x.cc"
)
{
#line 1607 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 42619 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 42623 "hcs12x.cc"
OpRolw_idx::getCycles()
{
#line 1613 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 42628 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42632 "hcs12x.cc"
OpRolw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42636 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42639 "hcs12x.cc"
)
{
#line 1615 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 42651 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42655 "hcs12x.cc"
OpRolw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42659 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42662 "hcs12x.cc"
)
{
#line 1624 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42682 "hcs12x.cc"
}

static Operation *DecodeOpRolw_idx(CodeType const& code, uint16_t addr)
{
	return new OpRolw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42692 "hcs12x.cc"
OpRolx::getCycles()
{
#line 1643 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 42697 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42701 "hcs12x.cc"
OpRolx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42705 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42708 "hcs12x.cc"
)
{
#line 1645 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLX";

		sink << mnem;

		return mnem;
	}
#line 42719 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42723 "hcs12x.cc"
OpRolx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42727 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42730 "hcs12x.cc"
)
{
#line 1653 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42748 "hcs12x.cc"
}

static Operation *DecodeOpRolx(CodeType const& code, uint16_t addr)
{
	return new OpRolx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42758 "hcs12x.cc"
OpRoly::getCycles()
{
#line 1670 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 42763 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42767 "hcs12x.cc"
OpRoly::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42771 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42774 "hcs12x.cc"
)
{
#line 1672 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROLY";

		sink << mnem;

		return mnem;
	}
#line 42785 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42789 "hcs12x.cc"
OpRoly::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42793 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42796 "hcs12x.cc"
)
{
#line 1680 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42814 "hcs12x.cc"
}

static Operation *DecodeOpRoly(CodeType const& code, uint16_t addr)
{
	return new OpRoly(code, addr);
}

// LSR: Logical Shift Right
#line 83 "hcs12x.isa"
uint8_t
#line 42825 "hcs12x.cc"
OpLsr_ext::getCycles()
{
#line 1698 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 42830 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42834 "hcs12x.cc"
OpLsr_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42838 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42841 "hcs12x.cc"
)
{
#line 1700 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSR";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 42852 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42856 "hcs12x.cc"
OpLsr_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42860 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42863 "hcs12x.cc"
)
{
#line 1708 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();}	else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42881 "hcs12x.cc"
}

static Operation *DecodeOpLsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsr_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 42891 "hcs12x.cc"
OpLsr_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 42895 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 42898 "hcs12x.cc"
)
{
#line 1725 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 42907 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 42911 "hcs12x.cc"
OpLsr_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 42915 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 42918 "hcs12x.cc"
)
{
#line 1731 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 42927 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 42931 "hcs12x.cc"
OpLsr_idx::getCycles()
{
#line 1737 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 42936 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 42940 "hcs12x.cc"
OpLsr_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 42944 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 42947 "hcs12x.cc"
)
{
#line 1739 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSR";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 42959 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 42963 "hcs12x.cc"
OpLsr_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 42967 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 42970 "hcs12x.cc"
)
{
#line 1748 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 42989 "hcs12x.cc"
}

static Operation *DecodeOpLsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsr_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 42999 "hcs12x.cc"
OpLsra::getCycles()
{
#line 1766 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 43004 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43008 "hcs12x.cc"
OpLsra::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43012 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43015 "hcs12x.cc"
)
{
#line 1768 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRA";

		sink << mnem;

		return mnem;
	}
#line 43026 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43030 "hcs12x.cc"
OpLsra::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43034 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43037 "hcs12x.cc"
)
{
#line 1776 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegA(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43054 "hcs12x.cc"
}

static Operation *DecodeOpLsra(CodeType const& code, uint16_t addr)
{
	return new OpLsra(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43064 "hcs12x.cc"
OpLsrb::getCycles()
{
#line 1792 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 43069 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43073 "hcs12x.cc"
OpLsrb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43077 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43080 "hcs12x.cc"
)
{
#line 1794 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRB";

		sink << mnem;

		return mnem;
	}
#line 43091 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43095 "hcs12x.cc"
OpLsrb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43099 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43102 "hcs12x.cc"
)
{
#line 1802 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegB(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43119 "hcs12x.cc"
}

static Operation *DecodeOpLsrb(CodeType const& code, uint16_t addr)
{
	return new OpLsrb(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43129 "hcs12x.cc"
OpLsrd::getCycles()
{
#line 1818 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 43134 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43138 "hcs12x.cc"
OpLsrd::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43142 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43145 "hcs12x.cc"
)
{
#line 1820 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRD";

		sink << mnem;

		return mnem;
	}
#line 43156 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43160 "hcs12x.cc"
OpLsrd::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43164 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43167 "hcs12x.cc"
)
{
#line 1828 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegD();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();}	else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegD(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43184 "hcs12x.cc"
}

static Operation *DecodeOpLsrd(CodeType const& code, uint16_t addr)
{
	return new OpLsrd(code, addr);
}

// LSRW: Logical Shift Right word
#line 83 "hcs12x.isa"
uint8_t
#line 43195 "hcs12x.cc"
OpLsrw_ext::getCycles()
{
#line 1845 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 43200 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43204 "hcs12x.cc"
OpLsrw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43208 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43211 "hcs12x.cc"
)
{
#line 1847 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 43222 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43226 "hcs12x.cc"
OpLsrw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43230 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43233 "hcs12x.cc"
)
{
#line 1855 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();}	else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43251 "hcs12x.cc"
}

static Operation *DecodeOpLsrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsrw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 43261 "hcs12x.cc"
OpLsrw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 43265 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 43268 "hcs12x.cc"
)
{
#line 1872 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 43277 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 43281 "hcs12x.cc"
OpLsrw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 43285 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 43288 "hcs12x.cc"
)
{
#line 1878 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 43297 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 43301 "hcs12x.cc"
OpLsrw_idx::getCycles()
{
#line 1884 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 43306 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43310 "hcs12x.cc"
OpLsrw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43314 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43317 "hcs12x.cc"
)
{
#line 1886 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 43329 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43333 "hcs12x.cc"
OpLsrw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43337 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43340 "hcs12x.cc"
)
{
#line 1895 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43359 "hcs12x.cc"
}

static Operation *DecodeOpLsrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsrw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43369 "hcs12x.cc"
OpLsrx::getCycles()
{
#line 1913 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 43374 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43378 "hcs12x.cc"
OpLsrx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43382 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43385 "hcs12x.cc"
)
{
#line 1915 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRX";

		sink << mnem;

		return mnem;
	}
#line 43396 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43400 "hcs12x.cc"
OpLsrx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43404 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43407 "hcs12x.cc"
)
{
#line 1923 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegX(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43424 "hcs12x.cc"
}

static Operation *DecodeOpLsrx(CodeType const& code, uint16_t addr)
{
	return new OpLsrx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43434 "hcs12x.cc"
OpLsry::getCycles()
{
#line 1939 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 43439 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43443 "hcs12x.cc"
OpLsry::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43447 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43450 "hcs12x.cc"
)
{
#line 1941 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "LSRY";

		sink << mnem;

		return mnem;
	}
#line 43461 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43465 "hcs12x.cc"
OpLsry::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43469 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43472 "hcs12x.cc"
)
{
#line 1949 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegY(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43489 "hcs12x.cc"
}

static Operation *DecodeOpLsry(CodeType const& code, uint16_t addr)
{
	return new OpLsry(code, addr);
}

// ROR: Rotate Memory/Accumulator Right through Carry
#line 83 "hcs12x.isa"
uint8_t
#line 43500 "hcs12x.cc"
OpRor_ext::getCycles()
{
#line 1966 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 43505 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43509 "hcs12x.cc"
OpRor_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43513 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43516 "hcs12x.cc"
)
{
#line 1968 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROR";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 43527 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43531 "hcs12x.cc"
OpRor_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43535 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43538 "hcs12x.cc"
)
{
#line 1976 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43557 "hcs12x.cc"
}

static Operation *DecodeOpRor_ext(CodeType const& code, uint16_t addr)
{
	return new OpRor_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 43567 "hcs12x.cc"
OpRor_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 43571 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 43574 "hcs12x.cc"
)
{
#line 1994 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 43583 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 43587 "hcs12x.cc"
OpRor_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 43591 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 43594 "hcs12x.cc"
)
{
#line 2000 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 43603 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 43607 "hcs12x.cc"
OpRor_idx::getCycles()
{
#line 2006 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 43612 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43616 "hcs12x.cc"
OpRor_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43620 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43623 "hcs12x.cc"
)
{
#line 2008 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ROR";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 43635 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43639 "hcs12x.cc"
OpRor_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43643 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43646 "hcs12x.cc"
)
{
#line 2017 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43666 "hcs12x.cc"
}

static Operation *DecodeOpRor_idx(CodeType const& code, uint16_t addr)
{
	return new OpRor_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43676 "hcs12x.cc"
OpRora::getCycles()
{
#line 2036 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 43681 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43685 "hcs12x.cc"
OpRora::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43689 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43692 "hcs12x.cc"
)
{
#line 2038 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORA";

		sink << mnem;

		return mnem;
	}
#line 43703 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43707 "hcs12x.cc"
OpRora::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43711 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43714 "hcs12x.cc"
)
{
#line 2046 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43732 "hcs12x.cc"
}

static Operation *DecodeOpRora(CodeType const& code, uint16_t addr)
{
	return new OpRora(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43742 "hcs12x.cc"
OpRorb::getCycles()
{
#line 2063 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 43747 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43751 "hcs12x.cc"
OpRorb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43755 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43758 "hcs12x.cc"
)
{
#line 2065 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORB";

		sink << mnem;

		return mnem;
	}
#line 43769 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43773 "hcs12x.cc"
OpRorb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43777 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43780 "hcs12x.cc"
)
{
#line 2073 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43798 "hcs12x.cc"
}

static Operation *DecodeOpRorb(CodeType const& code, uint16_t addr)
{
	return new OpRorb(code, addr);
}

// RORW: Rotate word Memory/Accumulator Right through Carry
#line 83 "hcs12x.isa"
uint8_t
#line 43809 "hcs12x.cc"
OpRorw_ext::getCycles()
{
#line 2092 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 43814 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43818 "hcs12x.cc"
OpRorw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43822 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43825 "hcs12x.cc"
)
{
#line 2094 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 43836 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43840 "hcs12x.cc"
OpRorw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43844 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43847 "hcs12x.cc"
)
{
#line 2102 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43866 "hcs12x.cc"
}

static Operation *DecodeOpRorw_ext(CodeType const& code, uint16_t addr)
{
	return new OpRorw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 43876 "hcs12x.cc"
OpRorw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 43880 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 43883 "hcs12x.cc"
)
{
#line 2120 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 43892 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 43896 "hcs12x.cc"
OpRorw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 43900 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 43903 "hcs12x.cc"
)
{
#line 2126 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 43912 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 43916 "hcs12x.cc"
OpRorw_idx::getCycles()
{
#line 2132 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 43921 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43925 "hcs12x.cc"
OpRorw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43929 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 43932 "hcs12x.cc"
)
{
#line 2134 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 43944 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 43948 "hcs12x.cc"
OpRorw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 43952 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 43955 "hcs12x.cc"
)
{
#line 2143 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 43975 "hcs12x.cc"
}

static Operation *DecodeOpRorw_idx(CodeType const& code, uint16_t addr)
{
	return new OpRorw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 43985 "hcs12x.cc"
OpRorx::getCycles()
{
#line 2162 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 43990 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 43994 "hcs12x.cc"
OpRorx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 43998 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44001 "hcs12x.cc"
)
{
#line 2164 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORX";

		sink << mnem;

		return mnem;
	}
#line 44012 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44016 "hcs12x.cc"
OpRorx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44020 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44023 "hcs12x.cc"
)
{
#line 2172 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44041 "hcs12x.cc"
}

static Operation *DecodeOpRorx(CodeType const& code, uint16_t addr)
{
	return new OpRorx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44051 "hcs12x.cc"
OpRory::getCycles()
{
#line 2189 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 44056 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44060 "hcs12x.cc"
OpRory::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44064 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44067 "hcs12x.cc"
)
{
#line 2191 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "RORY";

		sink << mnem;

		return mnem;
	}
#line 44078 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44082 "hcs12x.cc"
OpRory::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44086 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44089 "hcs12x.cc"
)
{
#line 2199 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44107 "hcs12x.cc"
}

static Operation *DecodeOpRory(CodeType const& code, uint16_t addr)
{
	return new OpRory(code, addr);
}

// ASR: Arithmetic Shift Right
#line 83 "hcs12x.isa"
uint8_t
#line 44118 "hcs12x.cc"
OpAsr_ext::getCycles()
{
#line 2217 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 4; }
#line 44123 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44127 "hcs12x.cc"
OpAsr_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44131 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44134 "hcs12x.cc"
)
{
#line 2219 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASR";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 44145 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44149 "hcs12x.cc"
OpAsr_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44153 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44156 "hcs12x.cc"
)
{
#line 2227 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t val = cpu->memRead8(addr);

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44178 "hcs12x.cc"
}

static Operation *DecodeOpAsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpAsr_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 44188 "hcs12x.cc"
OpAsr_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 44192 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 44195 "hcs12x.cc"
)
{
#line 2248 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 44204 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 44208 "hcs12x.cc"
OpAsr_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 44212 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 44215 "hcs12x.cc"
)
{
#line 2254 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 44224 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 44228 "hcs12x.cc"
OpAsr_idx::getCycles()
{
#line 2260 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 44233 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44237 "hcs12x.cc"
OpAsr_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44241 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44244 "hcs12x.cc"
)
{
#line 2262 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASR";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 44256 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44260 "hcs12x.cc"
OpAsr_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44264 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44267 "hcs12x.cc"
)
{
#line 2271 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t val = cpu->memRead8(addr);

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44290 "hcs12x.cc"
}

static Operation *DecodeOpAsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpAsr_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44300 "hcs12x.cc"
OpAsra::getCycles()
{
#line 2293 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 44305 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44309 "hcs12x.cc"
OpAsra::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44313 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44316 "hcs12x.cc"
)
{
#line 2295 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASRA";

		sink << mnem;

		return mnem;
	}
#line 44327 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44331 "hcs12x.cc"
OpAsra::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44335 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44338 "hcs12x.cc"
)
{
#line 2303 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44359 "hcs12x.cc"
}

static Operation *DecodeOpAsra(CodeType const& code, uint16_t addr)
{
	return new OpAsra(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44369 "hcs12x.cc"
OpAsrb::getCycles()
{
#line 2323 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 1; }
#line 44374 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44378 "hcs12x.cc"
OpAsrb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44382 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44385 "hcs12x.cc"
)
{
#line 2325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASRB";

		sink << mnem;

		return mnem;
	}
#line 44396 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44400 "hcs12x.cc"
OpAsrb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44404 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44407 "hcs12x.cc"
)
{
#line 2333 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44428 "hcs12x.cc"
}

static Operation *DecodeOpAsrb(CodeType const& code, uint16_t addr)
{
	return new OpAsrb(code, addr);
}

// ASRW: Arithmetic Shift Right word
#line 83 "hcs12x.isa"
uint8_t
#line 44439 "hcs12x.cc"
OpAsrw_ext::getCycles()
{
#line 2354 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 44444 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44448 "hcs12x.cc"
OpAsrw_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44452 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44455 "hcs12x.cc"
)
{
#line 2356 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASRW";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 44466 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44470 "hcs12x.cc"
OpAsrw_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44474 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44477 "hcs12x.cc"
)
{
#line 2364 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = opr16a;
		uint16_t val = cpu->memRead16(addr);

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44499 "hcs12x.cc"
}

static Operation *DecodeOpAsrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpAsrw_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 44509 "hcs12x.cc"
OpAsrw_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 44513 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 44516 "hcs12x.cc"
)
{
#line 2385 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 44525 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 44529 "hcs12x.cc"
OpAsrw_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 44533 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 44536 "hcs12x.cc"
)
{
#line 2391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 44545 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 44549 "hcs12x.cc"
OpAsrw_idx::getCycles()
{
#line 2397 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 44554 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44558 "hcs12x.cc"
OpAsrw_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44562 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44565 "hcs12x.cc"
)
{
#line 2399 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem= "ASRW";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 44577 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44581 "hcs12x.cc"
OpAsrw_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44585 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44588 "hcs12x.cc"
)
{
#line 2408 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint16_t val = cpu->memRead16(addr);

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44611 "hcs12x.cc"
}

static Operation *DecodeOpAsrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpAsrw_idx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44621 "hcs12x.cc"
OpAsrx::getCycles()
{
#line 2430 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 44626 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44630 "hcs12x.cc"
OpAsrx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44634 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44637 "hcs12x.cc"
)
{
#line 2432 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASRX";

		sink << mnem;

		return mnem;
	}
#line 44648 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44652 "hcs12x.cc"
OpAsrx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44656 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44659 "hcs12x.cc"
)
{
#line 2440 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44680 "hcs12x.cc"
}

static Operation *DecodeOpAsrx(CodeType const& code, uint16_t addr)
{
	return new OpAsrx(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44690 "hcs12x.cc"
OpAsry::getCycles()
{
#line 2460 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 2; }
#line 44695 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44699 "hcs12x.cc"
OpAsry::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44703 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44706 "hcs12x.cc"
)
{
#line 2462 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "ASRY";

		sink << mnem;

		return mnem;
	}
#line 44717 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44721 "hcs12x.cc"
OpAsry::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44725 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44728 "hcs12x.cc"
)
{
#line 2470 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 44749 "hcs12x.cc"
}

static Operation *DecodeOpAsry(CodeType const& code, uint16_t addr)
{
	return new OpAsry(code, addr);
}

// BTAS: Bit(s) Test and Set in Memory
#line 83 "hcs12x.isa"
uint8_t
#line 44760 "hcs12x.cc"
OpBtas_dir::getCycles()
{
#line 2492 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 44765 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44769 "hcs12x.cc"
OpBtas_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44773 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44776 "hcs12x.cc"
)
{
#line 2494 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BTAS";

		sink << mnem << " 0x" << std::hex << opr8a << ", 0x" << std::hex << msk8;

		return mnem;
	}
#line 44787 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44791 "hcs12x.cc"
OpBtas_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44795 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44798 "hcs12x.cc"
)
{
#line 2502 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		/*
		If (M) & (Mask) = 0, then set Z, else clear Z
		(M) | (Mask) => M

		N: Set if MSB of test is set; cleared otherwise
		Z: Set if test is 0x00; cleared otherwise
		V: 0; cleared
		*/
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		uint8_t test = opr8aVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, opr8aVal | msk8);
	}
#line 44821 "hcs12x.cc"
}

static Operation *DecodeOpBtas_dir(CodeType const& code, uint16_t addr)
{
	return new OpBtas_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 44831 "hcs12x.cc"
OpBtas_ext::getCycles()
{
#line 2524 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return 5; }
#line 44836 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44840 "hcs12x.cc"
OpBtas_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44844 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44847 "hcs12x.cc"
)
{
#line 2526 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BTAS";

		sink << mnem << " 0x" << std::hex << opr16a << ", 0x" << std::hex << msk8;

		return mnem;
	}
#line 44858 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44862 "hcs12x.cc"
OpBtas_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44866 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44869 "hcs12x.cc"
)
{
#line 2534 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		uint8_t test = opr16aVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, opr16aVal | msk8);
	}
#line 44885 "hcs12x.cc"
}

static Operation *DecodeOpBtas_ext(CodeType const& code, uint16_t addr)
{
	return new OpBtas_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 44895 "hcs12x.cc"
OpBtas_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 44899 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 44902 "hcs12x.cc"
)
{
#line 2549 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 44911 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 44915 "hcs12x.cc"
OpBtas_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 44919 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 44922 "hcs12x.cc"
)
{
#line 2555 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 44931 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 44935 "hcs12x.cc"
OpBtas_idx::getCycles()
{
#line 2561 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 5, 5, 7, 0, 0); }
#line 44940 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 44944 "hcs12x.cc"
OpBtas_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 44948 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 44951 "hcs12x.cc"
)
{
#line 2563 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		string mnem = "BTAS";

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << msk8;

		return mnem;
	}
#line 44964 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 44968 "hcs12x.cc"
OpBtas_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 44972 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 44975 "hcs12x.cc"
)
{
#line 2573 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		uint8_t test = xbVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, xbVal | msk8);
	}
#line 44991 "hcs12x.cc"
}

static Operation *DecodeOpBtas_idx(CodeType const& code, uint16_t addr)
{
	return new OpBtas_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// EMUL: 16 by 16 Bit Multiply (unsigned) (D) x (Y) => Y:D
#line 83 "hcs12x.isa"
uint8_t
#line 45035 "hcs12x.cc"
OpEmul::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 1; }
#line 45040 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45044 "hcs12x.cc"
OpEmul::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45048 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45051 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "EMUL";

		sink << mnem;
		return mnem;
	}
#line 45061 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45065 "hcs12x.cc"
OpEmul::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45069 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45072 "hcs12x.cc"
)
{
#line 48 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint32_t result = (uint32_t) cpu->getRegD() * cpu->getRegY();

		cpu->setRegY(result >> 16);
		cpu->setRegD((uint16_t) result);

		if ((result & 0x00008000) == 0x00008000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((result & 0x80000000) == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 45086 "hcs12x.cc"
}

static Operation *DecodeOpEmul(CodeType const& code, uint16_t addr)
{
	return new OpEmul(code, addr);
}

// EMULS: 16 by 16 Bit Multiply (signed) (D) x (Y) => Y:D
#line 83 "hcs12x.isa"
uint8_t
#line 45097 "hcs12x.cc"
OpEmuls::getCycles()
{
#line 62 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 3; }
#line 45102 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45106 "hcs12x.cc"
OpEmuls::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45110 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45113 "hcs12x.cc"
)
{
#line 64 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "EMULS";

		sink << mnem;
		return mnem;
	}
#line 45123 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45127 "hcs12x.cc"
OpEmuls::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45131 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45134 "hcs12x.cc"
)
{
#line 71 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint32_t result = (uint32_t) cpu->getRegD() * cpu->getRegY();

		cpu->setRegY((uint16_t) (result >> 16));
		cpu->setRegD((uint16_t) result);

		/*
		* C: Set if bit 15 of the result is set; cleared otherwise
		*/
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		/*
		* Z: Set if result is 0x00000000; cleared otherwise
		*/
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* N: Set if the MSB of the result is set; cleared otherwise
		*/
		if ((result & 0x80000000) == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }


	}
#line 45161 "hcs12x.cc"
}

static Operation *DecodeOpEmuls(CodeType const& code, uint16_t addr)
{
	return new OpEmuls(code, addr);
}

// MUL: 8 by 8 Bit Multiply (unsigned) (A) x (B) => A:B
#line 83 "hcs12x.isa"
uint8_t
#line 45172 "hcs12x.cc"
OpMul::getCycles()
{
#line 98 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 1; }
#line 45177 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45181 "hcs12x.cc"
OpMul::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45185 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45188 "hcs12x.cc"
)
{
#line 100 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "MUL";

		sink << mnem;
		return mnem;
	}
#line 45198 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45202 "hcs12x.cc"
OpMul::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45206 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45209 "hcs12x.cc"
)
{
#line 107 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint16_t result = cpu->getRegA() * cpu->getRegB();

		cpu->setRegD(result);

		if ((result & 0x0080) == 0x0080) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 45220 "hcs12x.cc"
}

static Operation *DecodeOpMul(CodeType const& code, uint16_t addr)
{
	return new OpMul(code, addr);
}

// EDIV: 32 by 16 bit to 16 bit divide (unsigned) (Y:D) div (X) => Y remainder => D
#line 83 "hcs12x.isa"
uint8_t
#line 45231 "hcs12x.cc"
OpEdiv::getCycles()
{
#line 118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 11; }
#line 45236 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45240 "hcs12x.cc"
OpEdiv::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45244 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45247 "hcs12x.cc"
)
{
#line 120 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "EDIV";

		sink << mnem;
		return mnem;
	}
#line 45257 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45261 "hcs12x.cc"
OpEdiv::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45265 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45268 "hcs12x.cc"
)
{
#line 127 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		// TODO
		/*
		* source_url: http://www.embeddedrelated.com/groups/68hc12/show/3775.php
		*
		* U16 X, Y, Z;
		* X = (U16)(((U32)Y * 1000) / (U16)Z);
		*
		* with an EMUL and an EDIV is that if the 32/16 bit EDIV division overflows, then the
		* HC12 does not generate a result at all (it just sets the V flag).
		* Therefore using a simple EDIV does not generate the same result
		* for all possible Y and Z's as calculating it with longs.
		*/

		uint32_t dividend = ((uint32_t) cpu->getRegY() << 16) | cpu->getRegD();
		uint16_t divisor = cpu->getRegX();
		uint32_t quotion = cpu->getRegY();
		uint16_t remind = cpu->getRegD();

		if (divisor == 0) {
			// TODO: throw an exception "division by 0"
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;

			if (quotion > 0xFFFF) {
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();

				cpu->setRegY((uint16_t) quotion);
				cpu->setRegD(remind);
			}

			if (quotion == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
			if ((((uint16_t) quotion) & 0x8000) == 0x8000 ) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		}

	}
#line 45314 "hcs12x.cc"
}

static Operation *DecodeOpEdiv(CodeType const& code, uint16_t addr)
{
	return new OpEdiv(code, addr);
}

// EDIVS: 32 by 16 bit to 16 bit divide (signed)  (Y:D) div (X) => Y remainder => D
#line 83 "hcs12x.isa"
uint8_t
#line 45325 "hcs12x.cc"
OpEdivs::getCycles()
{
#line 173 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 12; }
#line 45330 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45334 "hcs12x.cc"
OpEdivs::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45338 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45341 "hcs12x.cc"
)
{
#line 175 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "EDIVS";

		sink << mnem;
		return mnem;
	}
#line 45351 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45355 "hcs12x.cc"
OpEdivs::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45359 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45362 "hcs12x.cc"
)
{
#line 182 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{

		uint32_t dividend = ((uint32_t) cpu->getRegY() << 16) | (0x00FF & cpu->getRegD());
		uint16_t divisor = cpu->getRegX();
		uint32_t quotion = cpu->getRegY();
		uint16_t remind = cpu->getRegD();

		if (divisor == 0) {
			// TODO: throw an exception "division by 0"
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();

			quotion = dividend / divisor;
			remind = dividend % divisor;

			if (quotion > 0x7FFF) {
			/* NOTA:
				* For EDIVS, there is a mistake in specification about setting V.
				*/
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();

				cpu->setRegY((uint16_t) quotion); // cpu->setRegY((uint16_t) quotion | ((quotion >> 16) & 0x8000));
				cpu->setRegD(remind);
			}

			if (quotion == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
			if (((uint16_t) quotion) & 0x8000 == 0x8000 ) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		}
	}
#line 45399 "hcs12x.cc"
}

static Operation *DecodeOpEdivs(CodeType const& code, uint16_t addr)
{
	return new OpEdivs(code, addr);
}

// FDIV: 16 by 16 fractional divide
#line 83 "hcs12x.isa"
uint8_t
#line 45410 "hcs12x.cc"
OpFdiv::getCycles()
{
#line 219 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 12; }
#line 45415 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45419 "hcs12x.cc"
OpFdiv::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45423 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45426 "hcs12x.cc"
)
{
#line 221 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "FDIV";

		sink << mnem;
		return mnem;
	}
#line 45436 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45440 "hcs12x.cc"
OpFdiv::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45444 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45447 "hcs12x.cc"
)
{
#line 228 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* FDIV is equivalent to multiplying the numerator by 2^16 and then performing 32 by 16-bit integer division. */

		uint32_t dividend = (uint32_t) cpu->getRegD() << 16;
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = cpu->getRegD();

		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			if (dividend >= divisor) {
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();
				quotion = dividend / divisor;
				remind = dividend % divisor;
			}
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
	}
#line 45476 "hcs12x.cc"
}

static Operation *DecodeOpFdiv(CodeType const& code, uint16_t addr)
{
	return new OpFdiv(code, addr);
}

// IDIV: 16 by 16 integer divide (unsigned)
#line 83 "hcs12x.isa"
uint8_t
#line 45487 "hcs12x.cc"
OpIdiv::getCycles()
{
#line 257 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 12; }
#line 45492 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45496 "hcs12x.cc"
OpIdiv::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45500 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45503 "hcs12x.cc"
)
{
#line 259 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "IDIV";

		sink << mnem;
		return mnem;
	}
#line 45513 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45517 "hcs12x.cc"
OpIdiv::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45521 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45524 "hcs12x.cc"
)
{
#line 266 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* In the case of division by zero, C is set, the quotient is set to 0xFFFF,
		and the remainder is indeterminate. */

		uint16_t dividend = cpu->getRegD();
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = dividend;

		cpu->ccr->clrV();
		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
	}
#line 45550 "hcs12x.cc"
}

static Operation *DecodeOpIdiv(CodeType const& code, uint16_t addr)
{
	return new OpIdiv(code, addr);
}

// IDIVS: 16 by 16 integer divide (signed)
#line 83 "hcs12x.isa"
uint8_t
#line 45561 "hcs12x.cc"
OpIdivs::getCycles()
{
#line 292 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 12; }
#line 45566 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45570 "hcs12x.cc"
OpIdivs::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45574 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45577 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "IDIVS";

		sink << mnem;
		return mnem;
	}
#line 45587 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45591 "hcs12x.cc"
OpIdivs::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45595 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45598 "hcs12x.cc"
)
{
#line 301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* In the case of division by zero, C is set, the quotient is set to 0xFFFF,
		and the remainder is indeterminate. */

		uint16_t dividend = cpu->getRegD();
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = dividend;

		cpu->ccr->clrV();
		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		/*
		* V: Set if the result was > 0x7FFF or < 0x8000; cleared otherwise
		* V: Set for numerator 0x8000 (-32768) and denominator 0xFFFF (-1) result is (+32768)
		* Undefined after division by zero
		*/
		if ((dividend == 0x8000) && (divisor == 0xFFFF)) { cpu->ccr->setV(); } else { cpu->ccr->clrV();}
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
		if ((quotion & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 45631 "hcs12x.cc"
}

static Operation *DecodeOpIdivs(CodeType const& code, uint16_t addr)
{
	return new OpIdivs(code, addr);
}

/* ********* Multiply and Accumulate instruction ********* */
// EMACS: Multiply an Accumulate Instruction
#line 83 "hcs12x.isa"
uint8_t
#line 45643 "hcs12x.cc"
OpEmacs::getCycles()
{
#line 337 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{ return 9; }
#line 45648 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45652 "hcs12x.cc"
OpEmacs::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45656 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45659 "hcs12x.cc"
)
{
#line 339 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		string mnem = "EMACS";

		sink << mnem << " 0x" << std::hex << opr16a;
		return mnem;
	}
#line 45669 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45673 "hcs12x.cc"
OpEmacs::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45677 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45680 "hcs12x.cc"
)
{
#line 346 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* operation: (M(X) : M(X+1)) × (M(Y) : M(Y+1)) + (M ~ M+3) ⇒ M ~ M+3 */

		uint16_t xOpr, yOpr;
		uint32_t accOpr, result, inter;


		xOpr = cpu->memRead16(cpu->getRegX());
		yOpr = cpu->memRead16(cpu->getRegY());
		accOpr = cpu->memRead16(opr16a);
		accOpr = (accOpr << 16) | cpu->memRead16(opr16a+2);

		inter = (uint32_t) xOpr * yOpr;
		result =  inter + accOpr;

		cpu->memWrite16(opr16a, (uint16_t) (result >> 16));
		cpu->memWrite16(opr16a+2, (uint16_t) result);

		// N: Set if MSB of result is set; cleared otherwise
		if (result & 0x80000000 == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		// Z: Set if result is 0x00000000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		/*
		* I: Intermediate result
		* R: Result
		* M: 32 bit accumulator in memory (second operand in the addition)
		* */

		/* V: M31 • I31 • !R31 + !M31 • !I31 • R31
		* Set if result > 0x7FFFFFFF (+ overflow) or < 0x80000000 (– underflow)
		* Indicates two’s complement overflow
		*/
		// if (result > 0x7FFFFFFF) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
		if (((accOpr & 0x80000000) & (inter & 0x80000000) & ~(result & 0x80000000) | ~(accOpr & 0x80000000) & ~(inter & 0x80000000) & (result & 0x80000000)) >> 31) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		/* C: M15 • I15 + I15 • !R15 + !R15 • M15
		* Set if there was a carry from bit 15 of the result; cleared otherwise
		* Indicates a carry from low word to high word of the result occurred
		*/
		if (((accOpr & 0x00008000) & (inter & 0x00008000) | (inter & 0x00008000) & ~(result & 0x00008000) | ~(result & 0x00008000) & (accOpr & 0x00008000)) >> 15) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

	}
#line 45727 "hcs12x.cc"
}

static Operation *DecodeOpEmacs(CodeType const& code, uint16_t addr)
{
	return new OpEmacs(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// TODO: Very Important
// relied to instruction Queue
// Do not forgot to perform three program word fetches to refill the queue after a branch or subroutine call
/* ********* Short Branch Instructions ******** */
#line 83 "hcs12x.isa"
uint8_t
#line 45774 "hcs12x.cc"
OpSbr::getCycles()
{
#line 46 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		if (branch) return 3; else return 1;

	}
#line 45783 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45787 "hcs12x.cc"
OpSbr::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45791 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45794 "hcs12x.cc"
)
{
#line 52 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		switch (sel) {
			case 0x0: mnem = "BRA";break;
			case 0x1: mnem = "BRN";break;
			case 0x2: mnem = "BHI";break;
			case 0x3: mnem = "BLS";break;
			case 0x4: mnem = "BCC"; /* same opcode for BHS */ break;
			case 0x5: mnem = "BCS"; /* same opcode for BLO */ break;
			case 0x6: mnem = "BNE";break;
			case 0x7: mnem = "BEQ";break;
			case 0x8: mnem = "BVC";break;
			case 0x9: mnem = "BVS";break;
			case 0xA: mnem = "BPL";break;
			case 0xB: mnem = "BMI";break;
			case 0xC: mnem = "BGE";break;
			case 0xD: mnem = "BLT";break;
			case 0xE: mnem = "BGT";break;
			case 0xF: mnem = "BLE";break;
		}
		sink << mnem << " " << std::dec << rel8;

		return mnem;
	}
#line 45823 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45827 "hcs12x.cc"
OpSbr::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45831 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45834 "hcs12x.cc"
)
{
#line 78 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		branch = false;

		switch (sel) {
			case 0x0: // BRA: branch always
			branch = true;
			break;
			case 0x1: // BRN: branch never
			// Nothing to do
			branch = false;
			break;
			case 0x2: // BHI: branch if higher (C+Z=0)
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 0) branch = true;
			break;
			case 0x3: // BLS: branch if lower or same
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 1) branch = true;
			break;
			case 0x4: // BCC: branch if carel8y clear or BHS: branch if higher or same
			if (cpu->ccr->getC() == 0) branch = true;
			break;
			case 0x5: // BCS: branch if carel8y set or BLO: branch if lower
			if (cpu->ccr->getC() == 1) branch = true;
			break;
			case 0x6: // BNE: branch if not equal
			if (cpu->ccr->getZ() == 0) branch = true;
			break;
			case 0x7: // BEQ: branch if equal
			if (cpu->ccr->getZ() == 1) branch = true;
			break;
			case 0x8: // BVC: branch if overflow clear
			if (cpu->ccr->getV() == 0) branch = true;
			break;
			case 0x9: // BVS: branch if overflow set
			if (cpu->ccr->getV() == 1) branch = true;
			break;
			case 0xA: // BPL: branch if plus
			if (cpu->ccr->getN() == 0) branch = true;
			break;
			case 0xB: // BMI: branch if minus
			if (cpu->ccr->getN() == 1) branch = true;
			break;
			case 0xC: // BGE: branch if greater than or equal
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 0) branch = true;
			break;
			case 0xD: // BLT: branch if less than
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 1) branch = true;
			break;
			case 0xE: { // BGT: branch if greater than
				if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 0) branch = true;
			}
			break;
			case 0xF: // BLE: branch if less than or equal
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 1) branch = true;
			break;
		}

		if (branch) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 45901 "hcs12x.cc"
}

static Operation *DecodeOpSbr(CodeType const& code, uint16_t addr)
{
	return new OpSbr(code, addr);
}

/* ******** Long Branch Instructions ******* */
#line 83 "hcs12x.isa"
uint8_t
#line 45912 "hcs12x.cc"
OpLbr::getCycles()
{
#line 148 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ if (branch) return 4; else return 3; }
#line 45917 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 45921 "hcs12x.cc"
OpLbr::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 45925 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 45928 "hcs12x.cc"
)
{
#line 150 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		switch (sel) {
			case 0x0: mnem = "LBRA";break;
			case 0x1: mnem = "LBRN";break;
			case 0x2: mnem = "LBHI";break;
			case 0x3: mnem = "LBLS";break;
			case 0x4: mnem = "LBCC"; /* same opcode for LBHS */ break;
			case 0x5: mnem = "LBCS"; /* same opcode for LBLO */ break;
			case 0x6: mnem = "LBNE";break;
			case 0x7: mnem = "LBEQ";break;
			case 0x8: mnem = "LBVC";break;
			case 0x9: mnem = "LBVS";break;
			case 0xA: mnem = "LBPL";break;
			case 0xB: mnem = "LBMI";break;
			case 0xC: mnem = "LBGE";break;
			case 0xD: mnem = "LBLT";break;
			case 0xE: mnem = "LBGT";break;
			case 0xF: mnem = "LBLE";break;
		}
		sink << mnem << " " << std::dec << rel16;

		return mnem;
	}
#line 45957 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 45961 "hcs12x.cc"
OpLbr::execute(
#line 62 "hcs12x.isa"
CPU *
#line 45965 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 45968 "hcs12x.cc"
)
{
#line 176 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		branch = false;

		switch (sel) {
			case 0x0: // LBRA: branch always
			branch = true;
			break;
			case 0x1: // LBRN: branch never
			// Nothing to do
			branch = false;
			break;
			case 0x2: // LBHI: branch if higher (C+Z=0)
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 0) branch = true;
			break;
			case 0x3: // LBLS: branch if lower or same
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 1) branch = true;
			break;
			case 0x4: // LBCC: branch if carel8y clear or LBHS: branch if higher or same
			if (cpu->ccr->getC() == 0) branch = true;
			break;
			case 0x5: // LBCS: branch if carel8y set or LBLO: branch if lower
			if (cpu->ccr->getC() == 1) branch = true;
			break;
			case 0x6: // LBNE: branch if not equal
			if (cpu->ccr->getZ() == 0) branch = true;
			break;
			case 0x7: // LBEQ: branch if equal
			if (cpu->ccr->getZ() == 1) branch = true;
			break;
			case 0x8: // LBVC: branch if overflow clear
			if (cpu->ccr->getV() == 0) branch = true;
			break;
			case 0x9: // LBVS: branch if overflow set
			if (cpu->ccr->getV() == 1) branch = true;
			break;
			case 0xA: // LBPL: branch if plus
			if (cpu->ccr->getN() == 0) branch = true;
			break;
			case 0xB: // LBMI: branch if minus
			if (cpu->ccr->getN() == 1) branch = true;
			break;
			case 0xC: // LBGE: branch if greater than or equal
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 0) branch = true;
			break;
			case 0xD: // LBLT: branch if less than
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 1) branch = true;
			break;
			case 0xE: // LBGT: branch if greater than
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 0) branch = true;
			break;
			case 0xF: // LBLE: branch if less than or equal
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 1) branch = true;
			break;
		}

		if (branch) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel16);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 46034 "hcs12x.cc"
}

static Operation *DecodeOpLbr(CodeType const& code, uint16_t addr)
{
	return new OpLbr(code, addr);
}

/* ******** Bit Condition Branch instructions *********** */
// if (b==1) BRCLR_instruction else BRSET_instruction;
#line 83 "hcs12x.isa"
uint8_t
#line 46046 "hcs12x.cc"
OpBr_clr_set_dir::getCycles()
{
#line 245 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 4; }
#line 46051 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46055 "hcs12x.cc"
OpBr_clr_set_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46059 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46062 "hcs12x.cc"
)
{
#line 247 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		if (b==1) {
			mnem = "BRCLR";
			} else {
			mnem = "BRSET";
		}

		sink << mnem << " 0x" << std::hex << opr8a << ", 0x" << std::hex << msk8 << ", " << std::dec << rel8;

		return mnem;
	}
#line 46079 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46083 "hcs12x.cc"
OpBr_clr_set_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46087 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46090 "hcs12x.cc"
)
{
#line 261 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = cpu->mmc->getDirectAddress(opr8a);
		uint8_t opr8aVal = cpu->memRead8(addr);

		if (b==0) {
			opr8aVal = ~opr8aVal;
		}

		if ((opr8aVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 46108 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_dir(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 46118 "hcs12x.cc"
OpBr_clr_set_ext::getCycles()
{
#line 278 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 5; }
#line 46123 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46127 "hcs12x.cc"
OpBr_clr_set_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46131 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46134 "hcs12x.cc"
)
{
#line 280 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		if (b==1) {
			mnem = "BRCLR";
			} else {
			mnem = "BRSET";
		}

		sink << mnem << " 0x" << std::hex << opr16a << ", 0x" << std::hex << msk8 << ", " << std::dec << rel8;

		return mnem;
	}
#line 46151 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46155 "hcs12x.cc"
OpBr_clr_set_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46159 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46162 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = opr16a;
		uint8_t opr16aVal = cpu->memRead8(addr);

		if (b==0) {
			opr16aVal = ~opr16aVal;
		}

		if ((opr16aVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 46180 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_ext(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 46190 "hcs12x.cc"
OpBr_clr_set_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 46194 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 46197 "hcs12x.cc"
)
{
#line 311 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 46206 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 46210 "hcs12x.cc"
OpBr_clr_set_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 46214 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 46217 "hcs12x.cc"
)
{
#line 317 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 46226 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 46230 "hcs12x.cc"
OpBr_clr_set_idx::getCycles()
{
#line 323 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 0, 0); }
#line 46235 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46239 "hcs12x.cc"
OpBr_clr_set_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46243 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46246 "hcs12x.cc"
)
{
#line 325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		if (b==1) {
			mnem = "BRCLR";
			} else {
			mnem = "BRSET";
		}

		sink << mnem << " ";
		xb->disasm(sink);
		sink << ", 0x" << std::hex << msk8 << ", " << std::dec << rel8;

		return mnem;
	}
#line 46265 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46269 "hcs12x.cc"
OpBr_clr_set_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46273 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46276 "hcs12x.cc"
)
{
#line 341 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = xb->getEAddr(cpu);
		uint8_t xbVal = cpu->memRead8(addr);

		if (b==0) {
			xbVal = ~xbVal;
		}

		if ((xbVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 46294 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_idx(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_idx(code, addr);
}

/* ********** Jump and subroutine instructions ******** */
// BSR: Branch to subroutine
#line 83 "hcs12x.isa"
uint8_t
#line 46306 "hcs12x.cc"
OpBsr::getCycles()
{
#line 361 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 4; }
#line 46311 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46315 "hcs12x.cc"
OpBsr::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46319 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46322 "hcs12x.cc"
)
{
#line 363 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "BSR";

		sink << mnem << " " << std::dec << rel8;

		return mnem;
	}
#line 46333 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46337 "hcs12x.cc"
OpBsr::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46341 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46344 "hcs12x.cc"
)
{
#line 371 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* Subroutine address fi PC
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);

		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));

		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 46368 "hcs12x.cc"
}

static Operation *DecodeOpBsr(CodeType const& code, uint16_t addr)
{
	return new OpBsr(code, addr);
}

// CALL: Call subroutine in Expanded Memory
#line 83 "hcs12x.isa"
uint8_t
#line 46379 "hcs12x.cc"
OpCall_ext::getCycles()
{
#line 395 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 7; }
#line 46384 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46388 "hcs12x.cc"
OpCall_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46392 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46395 "hcs12x.cc"
)
{
#line 397 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "CALL";

		sink << mnem << " 0x" << std::hex << opr16a << ", 0x" << std::hex << page;

		return mnem;
	}
#line 46406 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46410 "hcs12x.cc"
OpCall_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46414 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46417 "hcs12x.cc"
)
{
#line 405 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);

		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));

		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);

		addr = cpu->getRegSP();
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(page);
		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 46451 "hcs12x.cc"
}

static Operation *DecodeOpCall_ext(CodeType const& code, uint16_t addr)
{
	return new OpCall_ext(code, addr);
}

// I have to decode indexed-indirect addressing here,
// because in the case of indexed-indirect the value of PPAGE is stored in memory after the subroutine address
// XB decoder return only one address
#line 83 "hcs12x.isa"
uint8_t
#line 46464 "hcs12x.cc"
OpCall_16offset_idx_ind::getCycles()
{
#line 442 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 10; }
#line 46469 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46473 "hcs12x.cc"
OpCall_16offset_idx_ind::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46477 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46480 "hcs12x.cc"
)
{
#line 444 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "CALL";

		sink << mnem << " " << "[" << std::dec << n16 << "," << CPU::xb_getAddrRegLabel(rr) << "]";

		return mnem;
	}
#line 46491 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46495 "hcs12x.cc"
OpCall_16offset_idx_ind::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46499 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46502 "hcs12x.cc"
)
{
#line 452 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		physical_address_t addr;

		physical_address_t idxAddr = cpu->xb_getAddrRegValue(rr) + n16;

		address_t subAddr = cpu->memRead16(idxAddr);
		uint8_t   ppageVal = cpu->memRead16(idxAddr+2);

		cpu->setRegSP(cpu->getRegSP()-2);

		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));

		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(ppageVal);
		cpu->setRegPC(subAddr);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 46541 "hcs12x.cc"
}

static Operation *DecodeOpCall_16offset_idx_ind(CodeType const& code, uint16_t addr)
{
	return new OpCall_16offset_idx_ind(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 46551 "hcs12x.cc"
OpCall_accD_offset_idx_ind::getCycles()
{
#line 490 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 10; }
#line 46556 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46560 "hcs12x.cc"
OpCall_accD_offset_idx_ind::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46564 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46567 "hcs12x.cc"
)
{
#line 492 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "CALL";

		sink << mnem << " " << "[D," << CPU::xb_getAddrRegLabel(rr) << "]";

		return mnem;
	}
#line 46578 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46582 "hcs12x.cc"
OpCall_accD_offset_idx_ind::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46586 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46589 "hcs12x.cc"
)
{
#line 500 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		physical_address_t addr;

		physical_address_t idxAddr = cpu->getRegD() + cpu->xb_getAddrRegValue(rr);

		address_t subAddr = cpu->memRead16(idxAddr);
		uint8_t   ppageVal = cpu->memRead16(idxAddr+2);

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(ppageVal);
		cpu->setRegPC(subAddr);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 46626 "hcs12x.cc"
}

static Operation *DecodeOpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr)
{
	return new OpCall_accD_offset_idx_ind(code, addr);
}

// JMP: JUMP
#line 83 "hcs12x.isa"
uint8_t
#line 46637 "hcs12x.cc"
OpJmp_ext::getCycles()
{
#line 594 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 3; }
#line 46642 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46646 "hcs12x.cc"
OpJmp_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46650 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46653 "hcs12x.cc"
)
{
#line 596 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "JMP";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 46664 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46668 "hcs12x.cc"
OpJmp_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46672 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46675 "hcs12x.cc"
)
{
#line 604 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 46684 "hcs12x.cc"
}

static Operation *DecodeOpJmp_ext(CodeType const& code, uint16_t addr)
{
	return new OpJmp_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 46694 "hcs12x.cc"
OpJmp_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 46698 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 46701 "hcs12x.cc"
)
{
#line 612 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 46710 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 46714 "hcs12x.cc"
OpJmp_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 46718 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 46721 "hcs12x.cc"
)
{
#line 618 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 46730 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 46734 "hcs12x.cc"
OpJmp_idx::getCycles()
{
#line 624 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 46739 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46743 "hcs12x.cc"
OpJmp_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46747 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46750 "hcs12x.cc"
)
{
#line 626 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "JMP";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 46762 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46766 "hcs12x.cc"
OpJmp_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46770 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46773 "hcs12x.cc"
)
{
#line 635 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		cpu->setRegPC(xb->getEAddr(cpu));

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 46782 "hcs12x.cc"
}

static Operation *DecodeOpJmp_idx(CodeType const& code, uint16_t addr)
{
	return new OpJmp_idx(code, addr);
}

// JSR: Jump to subroutine
#line 83 "hcs12x.isa"
uint8_t
#line 46793 "hcs12x.cc"
OpJsr_dir::getCycles()
{
#line 644 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 4; }
#line 46798 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46802 "hcs12x.cc"
OpJsr_dir::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46806 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46809 "hcs12x.cc"
)
{
#line 646 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "JSR";

		sink << mnem << " 0x" << std::hex << opr8a;

		return mnem;
	}
#line 46820 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46824 "hcs12x.cc"
OpJsr_dir::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46828 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46831 "hcs12x.cc"
)
{
#line 654 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* subroutine address => PC
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		addr = cpu->mmc->getDirectAddress(opr8a);
		cpu->setRegPC((address_t) addr);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 46854 "hcs12x.cc"
}

static Operation *DecodeOpJsr_dir(CodeType const& code, uint16_t addr)
{
	return new OpJsr_dir(code, addr);
}

#line 83 "hcs12x.isa"
uint8_t
#line 46864 "hcs12x.cc"
OpJsr_ext::getCycles()
{
#line 676 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 4; }
#line 46869 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46873 "hcs12x.cc"
OpJsr_ext::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46877 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46880 "hcs12x.cc"
)
{
#line 678 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "JSR";

		sink << mnem << " 0x" << std::hex << opr16a;

		return mnem;
	}
#line 46891 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 46895 "hcs12x.cc"
OpJsr_ext::execute(
#line 62 "hcs12x.isa"
CPU *
#line 46899 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 46902 "hcs12x.cc"
)
{
#line 686 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 46919 "hcs12x.cc"
}

static Operation *DecodeOpJsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpJsr_ext(code, addr);
}

#line 74 "hcs12x.isa"
void
#line 46929 "hcs12x.cc"
OpJsr_idx::pre_execute(
#line 74 "hcs12x.isa"
ostream&
#line 46933 "hcs12x.cc"
#line 74 "hcs12x.isa"
sink
#line 46936 "hcs12x.cc"
)
{
#line 702 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		xb->pre_execute(sink);
		// after: other specific actions
	}
#line 46945 "hcs12x.cc"
}
#line 78 "hcs12x.isa"
void
#line 46949 "hcs12x.cc"
OpJsr_idx::post_execute(
#line 78 "hcs12x.isa"
ostream&
#line 46953 "hcs12x.cc"
#line 78 "hcs12x.isa"
sink
#line 46956 "hcs12x.cc"
)
{
#line 708 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		// before: other specific actions
		xb->post_execute(sink);
	}
#line 46965 "hcs12x.cc"
}
#line 83 "hcs12x.isa"
uint8_t
#line 46969 "hcs12x.cc"
OpJsr_idx::getCycles()
{
#line 714 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 46974 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 46978 "hcs12x.cc"
OpJsr_idx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 46982 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 46985 "hcs12x.cc"
)
{
#line 716 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "JSR";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 46997 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47001 "hcs12x.cc"
OpJsr_idx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47005 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47008 "hcs12x.cc"
)
{
#line 725 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr;
		physical_address_t jsrAddr = xb->getEAddr(cpu);

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->getRegSP();
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->getRegSP()+1;
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC(jsrAddr);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 47026 "hcs12x.cc"
}

static Operation *DecodeOpJsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpJsr_idx(code, addr);
}

// RTC: Return from call
#line 83 "hcs12x.isa"
uint8_t
#line 47037 "hcs12x.cc"
OpRtc::getCycles()
{
#line 743 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 7; }
#line 47042 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47046 "hcs12x.cc"
OpRtc::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47050 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47053 "hcs12x.cc"
)
{
#line 745 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "RTC";

		sink << mnem;

		return mnem;
	}
#line 47064 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47068 "hcs12x.cc"
OpRtc::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47072 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47075 "hcs12x.cc"
)
{
#line 753 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (M[SP]) => PPage
		* (SP)+1 => SP
		* (M[SP]):(M[SP+1]) => PCh:PCl
		* (SP)+2 => SP
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		uint8_t hByte, lByte;
		physical_address_t addr;

		addr = cpu->getRegSP();
		cpu->mmc->setPpage(cpu->memRead8(addr));
		cpu->setRegSP(cpu->getRegSP() + 1);

		addr = cpu->getRegSP();
		hByte = cpu->memRead8(addr);
		addr = cpu->getRegSP()+1;
		lByte = cpu->memRead8(addr);
		cpu->setRegPC(((uint16_t) hByte << 8) | (0x00FF & lByte));

		cpu->setRegSP(cpu->getRegSP() + 2);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 47105 "hcs12x.cc"
}

static Operation *DecodeOpRtc(CodeType const& code, uint16_t addr)
{
	return new OpRtc(code, addr);
}

// RTS: Return from subroutine
#line 83 "hcs12x.isa"
uint8_t
#line 47116 "hcs12x.cc"
OpRts::getCycles()
{
#line 783 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ return 5; }
#line 47121 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47125 "hcs12x.cc"
OpRts::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47129 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47132 "hcs12x.cc"
)
{
#line 785 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem = "RTS";

		sink << mnem;

		return mnem;
	}
#line 47143 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47147 "hcs12x.cc"
OpRts::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47151 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47154 "hcs12x.cc"
)
{
#line 793 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		uint8_t hByte, lByte;
		physical_address_t addr;

		addr = cpu->getRegSP();
		hByte = cpu->memRead8(addr);
		addr = cpu->getRegSP()+1;
		lByte = cpu->memRead8(addr);
		cpu->setRegPC(((uint16_t) hByte << 8) | (0x00FF & lByte));

		cpu->setRegSP(cpu->getRegSP() + 2);
	}
#line 47170 "hcs12x.cc"
}

static Operation *DecodeOpRts(CodeType const& code, uint16_t addr)
{
	return new OpRts(code, addr);
}

/* ************ Loop Primitive ********* */
#line 83 "hcs12x.isa"
uint8_t
#line 47181 "hcs12x.cc"
OpLoop::getCycles()
{
#line 813 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{ if (isBranch) return 3; else return 3; }
#line 47186 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47190 "hcs12x.cc"
OpLoop::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47194 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47197 "hcs12x.cc"
)
{
#line 815 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		string mnem;

		/*
		Encoding for lb is summarized in the following table.
		Bit 3 is not used (don’t care),
		Bit 5 selects branch on zero (DBEQ – 0) or not zero (DBNE – 1) versions,
		and bit 4 is the sign bit of the 9-bit relative offset.
		Bits 7 and 6 would be 0:0 for DBNE.
		*/
		uint8_t abdxys = (b765 << 5) | (b4 << 4) | (b3 << 3) | b210;

		switch (b765) {
			case 0x00: mnem = "DBEQ"; break;
			case 0x01: mnem = "DBNE"; break;
			case 0x02: mnem = "TBEQ"; break;
			case 0x03: mnem = "TBNE"; break;
			case 0x04: mnem = "IBEQ"; break;
			case 0x05: mnem = "IBNE"; break;
			default: mnem = "?";
		}

		sink << mnem << " " << EBLB::getRegName(b210) << " , " << std::dec << rel9;

		return mnem;
	}
#line 47227 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47231 "hcs12x.cc"
OpLoop::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47235 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47238 "hcs12x.cc"
)
{
#line 842 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		address_t branchAddr;

		isBranch = false;

		branchAddr = cpu->getRegPC() + rel9;

		switch (b765) {
			case 0x00: /*DBEQ*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					val = val - 1;
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					val = val - 1;
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val == 0);
			} break;
			case 0x01: /*DBNE*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					val = val - 1;
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					val = val - 1;
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val != 0);

			} break;
			case 0x02: /*TBEQ*/{
				isBranch = (cpu->eblb->getter<uint8_t>(b210) == 0);
			} break;
			case 0x03: /*TBNE*/{
				isBranch = (cpu->eblb->getter<uint8_t>(b210) != 0);
			} break;
			case 0x04: /*IBEQ*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					val = val + 1;
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					val = val + 1;
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val == 0);

			} break;
			case 0x05: /*IBNE*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					val = val + 1;
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					val = val + 1;
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val != 0);

			} break;
			default: /*???*/;
		}

		if (isBranch) {
			cpu->setRegPC(branchAddr);

			// TODO: Refill the instruction queue with three program words from the new address
		}

	}
#line 47321 "hcs12x.cc"
}

static Operation *DecodeOpLoop(CodeType const& code, uint16_t addr)
{
	return new OpLoop(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ********** Stack Pointer instructions ******** */
// CPS: Compare SP to memory
// is emulated in compare_test.isa
// DES: Decrement Sp
// is emulated in decrement_increment.isa
// INS: Increment SP
// is emulated in decrement_increment.isa
// LDS: load SP
// is emulated in load_store.isa
// LEAS: load effective address into SP
// is emulated in load_store.isa
// STS: store SP
// is emulated in load_store.isa
// TSX: transfer SP to X
// is emulated in transfer_exchange.isa
// TSY: transfer SP to Y
// is emulated in transfer_exchange.isa
// TXS: transfer X to SP
// is emulated in transfer_exchange.isa
// TYS: transfer Y to Sp
// is emulated in transfer_exchange.isa
/* ********** stack Operation instructions ********** */
// PSHA: Push A
#line 83 "hcs12x.isa"
uint8_t
#line 47387 "hcs12x.cc"
OpPsha::getCycles()
{
#line 75 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47392 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47396 "hcs12x.cc"
OpPsha::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47400 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47403 "hcs12x.cc"
)
{
#line 77 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHA";

		sink << mnem;
		return mnem;
	}
#line 47413 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47417 "hcs12x.cc"
OpPsha::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47421 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47424 "hcs12x.cc"
)
{
#line 84 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{

		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->getRegSP(), cpu->getRegA());
	}
#line 47433 "hcs12x.cc"
}

static Operation *DecodeOpPsha(CodeType const& code, uint16_t addr)
{
	return new OpPsha(code, addr);
}

// PSHB: Push B
#line 83 "hcs12x.isa"
uint8_t
#line 47444 "hcs12x.cc"
OpPshb::getCycles()
{
#line 94 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47449 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47453 "hcs12x.cc"
OpPshb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47457 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47460 "hcs12x.cc"
)
{
#line 96 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHB";

		sink << mnem;
		return mnem;
	}
#line 47470 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47474 "hcs12x.cc"
OpPshb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47478 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47481 "hcs12x.cc"
)
{
#line 103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->getRegSP(), cpu->getRegB());
	}
#line 47489 "hcs12x.cc"
}

static Operation *DecodeOpPshb(CodeType const& code, uint16_t addr)
{
	return new OpPshb(code, addr);
}

// PSHC: Push CCR (8 lower bits)
#line 83 "hcs12x.isa"
uint8_t
#line 47500 "hcs12x.cc"
OpPshc::getCycles()
{
#line 112 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47505 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47509 "hcs12x.cc"
OpPshc::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47513 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47516 "hcs12x.cc"
)
{
#line 114 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHC";

		sink << mnem;
		return mnem;
	}
#line 47526 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47530 "hcs12x.cc"
OpPshc::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47534 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47537 "hcs12x.cc"
)
{
#line 121 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->getRegSP(), cpu->ccr->getCCRLow());
	}
#line 47545 "hcs12x.cc"
}

static Operation *DecodeOpPshc(CodeType const& code, uint16_t addr)
{
	return new OpPshc(code, addr);
}

// PSHCW: Push CCR word (16 bits)
#line 83 "hcs12x.isa"
uint8_t
#line 47556 "hcs12x.cc"
OpPshcw::getCycles()
{
#line 130 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 47561 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47565 "hcs12x.cc"
OpPshcw::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47569 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47572 "hcs12x.cc"
)
{
#line 132 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHCW";

		sink << mnem;
		return mnem;
	}
#line 47582 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47586 "hcs12x.cc"
OpPshcw::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47590 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47593 "hcs12x.cc"
)
{
#line 139 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->ccr->getCCR());
	}
#line 47601 "hcs12x.cc"
}

static Operation *DecodeOpPshcw(CodeType const& code, uint16_t addr)
{
	return new OpPshcw(code, addr);
}

// PSHD: Push D
#line 83 "hcs12x.isa"
uint8_t
#line 47612 "hcs12x.cc"
OpPshd::getCycles()
{
#line 148 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47617 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47621 "hcs12x.cc"
OpPshd::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47625 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47628 "hcs12x.cc"
)
{
#line 150 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHD";

		sink << mnem;
		return mnem;
	}
#line 47638 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47642 "hcs12x.cc"
OpPshd::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47646 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47649 "hcs12x.cc"
)
{
#line 157 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegD());
	}
#line 47657 "hcs12x.cc"
}

static Operation *DecodeOpPshd(CodeType const& code, uint16_t addr)
{
	return new OpPshd(code, addr);
}

// PSHX: Push X
#line 83 "hcs12x.isa"
uint8_t
#line 47668 "hcs12x.cc"
OpPshx::getCycles()
{
#line 166 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47673 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47677 "hcs12x.cc"
OpPshx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47681 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47684 "hcs12x.cc"
)
{
#line 168 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHX";

		sink << mnem;
		return mnem;
	}
#line 47694 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47698 "hcs12x.cc"
OpPshx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47702 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47705 "hcs12x.cc"
)
{
#line 175 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegX());
	}
#line 47713 "hcs12x.cc"
}

static Operation *DecodeOpPshx(CodeType const& code, uint16_t addr)
{
	return new OpPshx(code, addr);
}

// PSHY: Push Y
#line 83 "hcs12x.isa"
uint8_t
#line 47724 "hcs12x.cc"
OpPshy::getCycles()
{
#line 184 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 2; }
#line 47729 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47733 "hcs12x.cc"
OpPshy::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47737 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47740 "hcs12x.cc"
)
{
#line 186 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PSHY";

		sink << mnem;
		return mnem;
	}
#line 47750 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47754 "hcs12x.cc"
OpPshy::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47758 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47761 "hcs12x.cc"
)
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegY());
	}
#line 47769 "hcs12x.cc"
}

static Operation *DecodeOpPshy(CodeType const& code, uint16_t addr)
{
	return new OpPshy(code, addr);
}

// PULA: Pull A
#line 83 "hcs12x.isa"
uint8_t
#line 47780 "hcs12x.cc"
OpPula::getCycles()
{
#line 202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 47785 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47789 "hcs12x.cc"
OpPula::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47793 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47796 "hcs12x.cc"
)
{
#line 204 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULA";

		sink << mnem;
		return mnem;
	}
#line 47806 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47810 "hcs12x.cc"
OpPula::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47814 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47817 "hcs12x.cc"
)
{
#line 211 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegA(cpu->memRead8(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 47825 "hcs12x.cc"
}

static Operation *DecodeOpPula(CodeType const& code, uint16_t addr)
{
	return new OpPula(code, addr);
}

// PULB: Pull B
#line 83 "hcs12x.isa"
uint8_t
#line 47836 "hcs12x.cc"
OpPulb::getCycles()
{
#line 220 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 47841 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47845 "hcs12x.cc"
OpPulb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47849 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47852 "hcs12x.cc"
)
{
#line 222 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULB";

		sink << mnem;
		return mnem;
	}
#line 47862 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47866 "hcs12x.cc"
OpPulb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47870 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47873 "hcs12x.cc"
)
{
#line 229 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegB(cpu->memRead8(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 47881 "hcs12x.cc"
}

static Operation *DecodeOpPulb(CodeType const& code, uint16_t addr)
{
	return new OpPulb(code, addr);
}

// PULC: Pull CCR (16 lower bits)
#line 83 "hcs12x.isa"
uint8_t
#line 47892 "hcs12x.cc"
OpPulc::getCycles()
{
#line 238 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 47897 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47901 "hcs12x.cc"
OpPulc::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47905 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47908 "hcs12x.cc"
)
{
#line 240 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULC";

		sink << mnem;
		return mnem;
	}
#line 47918 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47922 "hcs12x.cc"
OpPulc::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47926 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47929 "hcs12x.cc"
)
{
#line 247 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->ccr->setCCRLow(cpu->memRead8(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 47937 "hcs12x.cc"
}

static Operation *DecodeOpPulc(CodeType const& code, uint16_t addr)
{
	return new OpPulc(code, addr);
}

// PULCW: Pull CCR word
#line 83 "hcs12x.isa"
uint8_t
#line 47948 "hcs12x.cc"
OpPulcw::getCycles()
{
#line 256 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 4; }
#line 47953 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 47957 "hcs12x.cc"
OpPulcw::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 47961 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 47964 "hcs12x.cc"
)
{
#line 258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULCW";

		sink << mnem;
		return mnem;
	}
#line 47974 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 47978 "hcs12x.cc"
OpPulcw::execute(
#line 62 "hcs12x.isa"
CPU *
#line 47982 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 47985 "hcs12x.cc"
)
{
#line 265 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->ccr->setCCR(cpu->memRead16(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 47993 "hcs12x.cc"
}

static Operation *DecodeOpPulcw(CodeType const& code, uint16_t addr)
{
	return new OpPulcw(code, addr);
}

// PULD: Pull D
#line 83 "hcs12x.isa"
uint8_t
#line 48004 "hcs12x.cc"
OpPuld::getCycles()
{
#line 274 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 48009 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48013 "hcs12x.cc"
OpPuld::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48017 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48020 "hcs12x.cc"
)
{
#line 276 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULD";

		sink << mnem;
		return mnem;
	}
#line 48030 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48034 "hcs12x.cc"
OpPuld::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48038 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48041 "hcs12x.cc"
)
{
#line 283 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegD(cpu->memRead16(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 48049 "hcs12x.cc"
}

static Operation *DecodeOpPuld(CodeType const& code, uint16_t addr)
{
	return new OpPuld(code, addr);
}

// PULX: Pull X
#line 83 "hcs12x.isa"
uint8_t
#line 48060 "hcs12x.cc"
OpPulx::getCycles()
{
#line 292 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 48065 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48069 "hcs12x.cc"
OpPulx::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48073 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48076 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULX";

		sink << mnem;
		return mnem;
	}
#line 48086 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48090 "hcs12x.cc"
OpPulx::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48094 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48097 "hcs12x.cc"
)
{
#line 301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegX(cpu->memRead16(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 48105 "hcs12x.cc"
}

static Operation *DecodeOpPulx(CodeType const& code, uint16_t addr)
{
	return new OpPulx(code, addr);
}

// PULY: Pull Y
#line 83 "hcs12x.isa"
uint8_t
#line 48116 "hcs12x.cc"
OpPuly::getCycles()
{
#line 310 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{ return 3; }
#line 48121 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48125 "hcs12x.cc"
OpPuly::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48129 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48132 "hcs12x.cc"
)
{
#line 312 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		string mnem = "PULY";

		sink << mnem;
		return mnem;
	}
#line 48142 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48146 "hcs12x.cc"
OpPuly::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48150 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48153 "hcs12x.cc"
)
{
#line 319 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegY(cpu->memRead16(cpu->getRegSP()));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 48161 "hcs12x.cc"
}

static Operation *DecodeOpPuly(CodeType const& code, uint16_t addr)
{
	return new OpPuly(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// MEM: Membership function
#line 83 "hcs12x.isa"
uint8_t
#line 48205 "hcs12x.cc"
OpMem::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 5; }
#line 48210 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48214 "hcs12x.cc"
OpMem::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48218 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48221 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "MEM";

		sink << mnem;

		return mnem;
	}
#line 48232 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48236 "hcs12x.cc"
OpMem::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48240 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48243 "hcs12x.cc"
)
{
#line 49 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		// The final state of CCR flags is not defined

		/*

		Operation
		---------
		Grade of Membership ⇒ M(Y)
		(Y) + 0x0001 ⇒ Y
		(X) + 0x0004 ⇒ X

		Description
		-----------
		Before executing MEM, initialize A, X, and Y. Load A with the current crisp value of a system input
		variable. Load Y with the fuzzy input RAM location where the grade of membership is to be stored.
		Load X with the first address of a 4-byte data structure that describes a trapezoidal membership
	function. The data structure consists of:
		Point_1 — The x-axis starting point for the leading side (at MX)
		Point_2 — The x-axis position of the rightmost point (at MX+1)
		Slope_1 — The slope of the leading side (at MX+2)
		Slope_2—The slope of the trailing side (atMX+3); the right side slopes up and to the left from
		Point_2
		A Slope_1 or Slope_2 value of 0x00 is a special case in which the membership function either starts
		with a grade of 0xFF at input = Point_1, or ends with a grade of 0xFF at input = Point_2 (infinite slope).
		During execution, the value of A remains unchanged. X is incremented by four and Y is incremented
		by one.

		*/

		// Grade of Membership (gm) ⇒ M(Y)
		uint8_t gm;
		uint8_t p1, p2;

		uint8_t aVal = cpu->getRegA();
		address_t xVal = cpu->getRegX();
		address_t yVal = cpu->getRegY();

		p1 = cpu->memRead8(xVal);
		p2 = cpu->memRead8(xVal+1);

		if ((aVal < p1) or (aVal > p2)) {
			gm = 0;
			} else {
			uint8_t s1, s2, min1, min2;


			s1 = cpu->memRead8(xVal+2);
			s2 = cpu->memRead8(xVal+3);

			min1 = (aVal - p1) * s1;
			min2 = (p2 - aVal) * s2;
			if (min1 < min2) {
				cpu->memWrite8(yVal, min1);
				} else {
				cpu->memWrite8(yVal, min2);
			}
		}

		// (Y) + 0x0001 ⇒ Y
		cpu->setRegY(yVal + 1);

		// (X) + 0x0004 ⇒ X
		cpu->setRegX(xVal + 4);

	}
#line 48312 "hcs12x.cc"
}

static Operation *DecodeOpMem(CodeType const& code, uint16_t addr)
{
	return new OpMem(code, addr);
}

// REV: (8bits) MIN-MAX rule evaluation
// this instruction can be interrupted.
#line 83 "hcs12x.isa"
uint8_t
#line 48324 "hcs12x.cc"
OpRev::getCycles()
{
#line 119 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 0; /* TODO: take in account the fact that it may be interrupted */}
#line 48329 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48333 "hcs12x.cc"
OpRev::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48337 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48340 "hcs12x.cc"
)
{
#line 121 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "REV";

		sink << mnem;

		return mnem;
	}
#line 48351 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 62 "hcs12x.isa"
void
#line 48356 "hcs12x.cc"
OpRev::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48360 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48363 "hcs12x.cc"
)
{
#line 130 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The V flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		uint8_t aVal, ccrV, memX, memYX;
		address_t  xVal, yVal;

		xVal = cpu->getRegX();
		yVal = cpu->getRegY();

		memX = cpu->memRead8(xVal);
		while (memX != 0xFF) {

			ccrV = 0;
			aVal = 0xFF;
			while ((memX != 0xFE) && (memX != 0xFF)) {
				memYX = cpu->memRead8(yVal+memX);
				if (memYX < aVal) {
					aVal = memYX;
				}
				xVal++;
				memX = cpu->memRead8(xVal);
			}

			if (memX != 0xFF) {

				ccrV = 1;
				xVal++;
				memX = cpu->memRead8(xVal);
				while ((memX != 0xFE) && (memX != 0xFF)) {
					memYX = cpu->memRead8(yVal+memX);
					if (aVal > memYX) {
						cpu->memWrite8(yVal+memX, aVal);
					}
					xVal++;
					memX = cpu->memRead8(xVal);
				}

				if (memX != 0xFF) {
					xVal++;
					memX = cpu->memRead8(xVal);
				}
			}

			// check asynchronous interruptions
			if (cpu->HasAsynchronousInterrupt())
			{
				throw AsynchronousException();
			}

		}

		xVal++;

		cpu->setRegA(aVal);
		cpu->setRegX(xVal);
		cpu->setRegY(yVal);
		if (ccrV) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	}
#line 48427 "hcs12x.cc"
}

static Operation *DecodeOpRev(CodeType const& code, uint16_t addr)
{
	return new OpRev(code, addr);
}

// REVW: (16bits) MIN-MAX rule evaluation
// this instruction can be interrupted.
#line 83 "hcs12x.isa"
uint8_t
#line 48439 "hcs12x.cc"
OpRevw::getCycles()
{
#line 195 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 0; /* TODO: take in account the fact that it may be interrupted */}
#line 48444 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48448 "hcs12x.cc"
OpRevw::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48452 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48455 "hcs12x.cc"
)
{
#line 197 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "REVW";

		sink << mnem;

		return mnem;
	}
#line 48466 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 62 "hcs12x.isa"
void
#line 48471 "hcs12x.cc"
OpRevw::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48475 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48478 "hcs12x.cc"
)
{
#line 206 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The V flag is affected by operation.
		* The C flag is used for special purpose.
		* The final state for the others CCR flags is not defined.
		*/

		uint8_t aVal, ccrV, ccrC, memOfMemX, memY;
		address_t memX, xVal, yVal;

		xVal = cpu->getRegX();
		yVal = cpu->getRegY(); cpu->setRegTMP(1, yVal);  // (Y) weight pointer kept in TMP2
		ccrC = cpu->ccr->getC();

		memX = cpu->memRead16(xVal);
		while (memX != 0xFFFF) {

			ccrV = 0;
			aVal = 0xFF;
			while ((memX != 0xFFFE) && (memX != 0xFFFF)) {
				memOfMemX = cpu->memRead8(memX);
				if (memOfMemX < aVal) {
					aVal = memOfMemX;
				}
				xVal++;
				memX = cpu->memRead16(xVal);
			}

			if (memX != 0xFFFF) {
				// *** Apply weight	***
				if (ccrC == 1) {
					memY = cpu->memRead8(yVal);
					aVal = (uint8_t) ((uint16_t) aVal * (memY+1)) >> 8;  // cpu->setRegA(aVal);
					yVal++;  cpu->setRegTMP(1, yVal); // cpu->setRegY(yVal);
				}

				ccrV = 1;
				xVal++;
				memX = cpu->memRead16(xVal);
				while ((memX != 0xFFFE) && (memX != 0xFFFF)) {
					memOfMemX = cpu->memRead16(memX);
					if (aVal > memOfMemX) {
						cpu->memWrite8(memX, aVal);
					}
					xVal++;
					memX = cpu->memRead16(xVal);
				}

				if (memX != 0xFFFF) {
					xVal++;
					memX = cpu->memRead16(xVal);
				}
			}

			// check asynchronous interruptions
			if (cpu->HasAsynchronousInterrupt())
			{
				throw AsynchronousException();
			}

		}

		xVal++;

		cpu->setRegA(aVal);
		cpu->setRegX(xVal);
		cpu->setRegY(yVal);
		if (ccrV) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

	}
#line 48551 "hcs12x.cc"
}

static Operation *DecodeOpRevw(CodeType const& code, uint16_t addr)
{
	return new OpRevw(code, addr);
}

// WAV: Weighted Average Calculation
/*
This instruction can be interrupted.
New WAV instructions can be started and interrupted while a previous WAV instruction is interrupted
*/
#line 83 "hcs12x.isa"
uint8_t
#line 48566 "hcs12x.cc"
OpWav::getCycles()
{
#line 284 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 0; /* TODO: take in account the fact that it may be interrupted */}
#line 48571 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48575 "hcs12x.cc"
OpWav::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48579 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48582 "hcs12x.cc"
)
{
#line 286 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "WAV";

		sink << mnem;

		return mnem;
	}
#line 48593 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 62 "hcs12x.isa"
void
#line 48598 "hcs12x.cc"
OpWav::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48602 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48605 "hcs12x.cc"
)
{
#line 295 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The Z flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		/*
		* Do until B = 0, leave SOP in Y : D, SOW in X
		*   Partial Product = (M pointed to by X) × (M pointed to by Y)
		*   Sum-of-Products (24-bit SOP) = Previous SOP + Partial Product
		*   Sum-of-Weights (16-bit SOW) = Previous SOW + (M pointed to by Y)
		*   (X) + 0x0001 ⇒ X; (Y) + 0x0001 ⇒ Y
		*   (B) – 0x01 ⇒ B
		**/

		uint8_t bVal, memX, memY;
		address_t xVal, yVal;
		uint32_t sop;
		uint16_t pp, sow;

		bVal = cpu->getRegB();
		xVal = cpu->getRegX();
		yVal = cpu->getRegY();
		sop = 0;
		sow = 0;
		cpu->setRegTMP(0, 0x0000);
		cpu->setRegTMP(1, 0x0000);
		cpu->setRegTMP(2, 0x0000);

		while (bVal > 0) {

			/** TODO: WAV is interruptible only at this point and not after.
			* if (InterruptPending)
			* {
				*   Write word @ -2,SP (stack TMP3); SP = SP - 2;
				*   Write word @ -2,SP (stack TMP2); SP = SP - 2;
				*   Write word @ -2,SP (stack TMP1); SP = SP - 2;
				*   Adjust PC to point at 0x3C wavr pseudo-opcode (The second byte of WAV opcode).
				* }
			**/

			// check asynchronous interruptions
			if (cpu->HasAsynchronousInterrupt())
			{
				cpu->setRegSP(cpu->getRegSP()-2);
				cpu->memWrite16(cpu->getRegSP(), cpu->getRegTMP(2));
				cpu->setRegSP(cpu->getRegSP()-2);
				cpu->memWrite16(cpu->getRegSP(), cpu->getRegTMP(1));
				cpu->setRegSP(cpu->getRegSP()-2);
				cpu->memWrite16(cpu->getRegSP(), cpu->getRegTMP(0));

				//   Adjust PC to point at 0x3C wavr pseudo-opcode
				cpu->setRegPC(cpu->getRegPC()-1);

				throw AsynchronousException();

			}


			memY = cpu->memRead8(yVal);
			memX = cpu->memRead8(xVal);

			pp = memX * memY;
			sop += pp;
			cpu->setRegTMP(2, (uint16_t) (sop >> 16));
			cpu->setRegTMP(1, (uint16_t) sop);

			sow += memY;
			cpu->setRegTMP(0, sow);

			xVal++;
			yVal++;
			bVal--;

		}

		cpu->setRegB(bVal);
		cpu->setRegY(cpu->getRegTMP(2));
		cpu->setRegD(cpu->getRegTMP(1));
		cpu->setRegX(cpu->getRegTMP(0));

		cpu->ccr->setZ();
	}
#line 48691 "hcs12x.cc"
}

static Operation *DecodeOpWav(CodeType const& code, uint16_t addr)
{
	return new OpWav(code, addr);
}

// WAVR pseudo instruction: Resume execution of interrupted WAV instruction
#line 83 "hcs12x.isa"
uint8_t
#line 48702 "hcs12x.cc"
OpWavr::getCycles()
{
#line 381 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 0; /* TODO: linked to WAV instruction */}
#line 48707 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48711 "hcs12x.cc"
OpWavr::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48715 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48718 "hcs12x.cc"
)
{
#line 383 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "WAVR";

		sink << mnem;

		return mnem;
	}
#line 48729 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48733 "hcs12x.cc"
OpWavr::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48737 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48740 "hcs12x.cc"
)
{
#line 391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The Z flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		address_t sp = cpu->getRegSP();
		cpu->setRegTMP(0, cpu->memRead16(sp));
		cpu->setRegTMP(1, cpu->memRead16(sp+2));
		cpu->setRegTMP(2, cpu->memRead16(sp+4));
		cpu->setRegSP(sp+6);

		if ((cpu->getRegTMP(0) == 0) ||
		(cpu->getRegTMP(1) == 0) ||
		(cpu->getRegTMP(2) == 0))
		{
			cpu->ccr->setZ();
			} else {
			cpu->ccr->clrZ();
		}
	}
#line 48764 "hcs12x.cc"
}

static Operation *DecodeOpWavr(CodeType const& code, uint16_t addr)
{
	return new OpWavr(code, addr);
}

/* ********  TABLE INTERPOLATION Instructions ********* */
// TBL: 8-bit Table lookup and Interpolate
#line 83 "hcs12x.isa"
uint8_t
#line 48776 "hcs12x.cc"
OpTbl::getCycles()
{
#line 417 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 6; }
#line 48781 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48785 "hcs12x.cc"
OpTbl::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48789 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48792 "hcs12x.cc"
)
{
#line 419 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "TBL";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 48804 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48808 "hcs12x.cc"
OpTbl::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48812 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48815 "hcs12x.cc"
)
{
#line 428 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/*
		Operation: (M) + [(B) * ((M+1) - (M))] => A
		The intermediate value [(B) * (Y2 - Y1)] produces a 16-bit result
		with the radix point between bits 7 and 8.

		N: Set if MSB of result is set; cleared otherwise
		Z: Set if result is 0x00; cleared otherwise
		C: Set if result can be rounded up; cleared otherwise
		*/

		physical_address_t addr = xb->getEAddr(cpu);

		uint8_t bVal = cpu->getRegB();
		uint8_t mVal = cpu->memRead8(addr);
		uint8_t m1Val = cpu->memRead8(addr+1);

		uint16_t result = (uint16_t) mVal + (bVal * (m1Val - mVal));
		uint8_t msBits = (uint8_t) (result >> 8);
		uint8_t lowBits = (uint8_t) result;

		cpu->setRegA(msBits);
		if ((msBits & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN();}
		if (msBits == 0x00) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ();}
		if (lowBits > 0x7F) { cpu->ccr->setC(); } else { cpu->ccr->clrC();}
	}
#line 48845 "hcs12x.cc"
}

static Operation *DecodeOpTbl(CodeType const& code, uint16_t addr)
{
	return new OpTbl(code, addr);
}

// ETBL: 16-bit Table lookup and Interpolate
#line 83 "hcs12x.isa"
uint8_t
#line 48856 "hcs12x.cc"
OpEtlb::getCycles()
{
#line 459 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{ return 10; }
#line 48861 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48865 "hcs12x.cc"
OpEtlb::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48869 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48872 "hcs12x.cc"
)
{
#line 461 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		string mnem = "ETBL";

		sink << mnem << " ";
		xb->disasm(sink);

		return mnem;
	}
#line 48884 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48888 "hcs12x.cc"
OpEtlb::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48892 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 48895 "hcs12x.cc"
)
{
#line 470 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/*
		Operation: D = M + [(B) * ((M+2) - (M))]
		The intermediate value [(B) * ((M+2) - (M))] produces a 24-bit result
		with the radix point between bits 7 and 8.
		*/

		physical_address_t addr = xb->getEAddr(cpu);

		uint8_t bVal = cpu->getRegB();
		uint16_t mVal = cpu->memRead16(addr);
		uint16_t m1Val = cpu->memRead16(addr+2);

		uint32_t result = (uint32_t) mVal + (bVal * (m1Val - mVal));
		uint16_t msBits = (uint16_t) (result >> 8);
		uint8_t lowBits = (uint8_t) result;

		cpu->setRegD(msBits);
		if ((msBits & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN();}
		if (result == 0x0000) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ();}
		if (lowBits > 0x7F) { cpu->ccr->setC(); } else { cpu->ccr->clrC();}
	}
#line 48921 "hcs12x.cc"
}

static Operation *DecodeOpEtlb(CodeType const& code, uint16_t addr)
{
	return new OpEtlb(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// NOP:
#line 83 "hcs12x.isa"
uint8_t
#line 48965 "hcs12x.cc"
OpNop::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 1; }
#line 48970 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 48974 "hcs12x.cc"
OpNop::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 48978 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 48981 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "NOP";

		sink << mnem;
		return mnem;
	}
#line 48991 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 48995 "hcs12x.cc"
OpNop::execute(
#line 62 "hcs12x.isa"
CPU *
#line 48999 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49002 "hcs12x.cc"
)
{
#line 48 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		// This single-byte instruction increments the PC and does nothing else.
	}
#line 49009 "hcs12x.cc"
}

static Operation *DecodeOpNop(CodeType const& code, uint16_t addr)
{
	return new OpNop(code, addr);
}

// STOP:
#line 83 "hcs12x.isa"
uint8_t
#line 49020 "hcs12x.cc"
OpStop::getCycles()
{
#line 57 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ if (stopDisabled) return 2; else return 16; }
#line 49025 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49029 "hcs12x.cc"
OpStop::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49033 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49036 "hcs12x.cc"
)
{
#line 59 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "STOP";

		sink << mnem;
		return mnem;
	}
#line 49046 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 49050 "hcs12x.cc"
OpStop::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49054 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49057 "hcs12x.cc"
)
{
#line 66 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		if (cpu->ccr->getS() == 1) {
			stopDisabled = true;
			/*
			* if S control bit = 1, the STOP instruction is disabled and acts like two-cycle NOP
			*/
			// TODO: consume two cycles
			} else {
			stopDisabled = false;
			/*
			* (SP) – 0x0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; YH : YL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; XH : XL => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; B : A => (M(SP) : M(SP+1))
			* (SP) – 0x0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
			* Stop All Clocks and puts the device in standby mode
			*/

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->getRegSP(), cpu->getRegPC());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->getRegSP(), cpu->getRegY());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->getRegSP(), cpu->getRegX());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite8(cpu->getRegSP(), cpu->getRegB());
			cpu->memWrite8(cpu->getRegSP()+1, cpu->getRegA());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->getRegSP(), cpu->ccr->getCCR());

		/* TODO:
			* Stop All Clocks and puts the device in standby mode.
			* Asserting the RESET, XIRQ, or IRQ signals ends standby mode.
			*/

			cpu->Sleep();

		/* TODO:
			* If XIRQ is asserted while the X mask bit = 0 (XIRQ interrupts enabled),
			* execution resumes with a vector fetch for the XIRQ interrupt.
			* While the X mask bit = 1 (XIRQ interrupts disabled),
			* a 2-cycle recovery sequence is used to adjust the instruction queue and the stack pointer,
			* and execution continues with the next instruction after STOP.
			*/
		}
	}
#line 49112 "hcs12x.cc"
}

static Operation *DecodeOpStop(CodeType const& code, uint16_t addr)
{
	return new OpStop(code, addr);
}

// WAIT
#line 83 "hcs12x.isa"
uint8_t
#line 49123 "hcs12x.cc"
OpWai::getCycles()
{
#line 121 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 13; }
#line 49128 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49132 "hcs12x.cc"
OpWai::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49136 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49139 "hcs12x.cc"
)
{
#line 123 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "WAI";

		sink << mnem;
		return mnem;
	}
#line 49149 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 49153 "hcs12x.cc"
OpWai::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49157 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49160 "hcs12x.cc"
)
{
#line 130 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		/*
		* (SP) – 0x0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; B : A => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* The CPU12 then enters a wait state for an integer number of bus clock cycles.
		* During the wait state, CPU12 clocks are stopped, but otherMCUclocks can continue to run.
		* WAIT for not masked interrupt
		*/

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegPC());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegY());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->getRegX());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite8(cpu->getRegSP(), cpu->getRegB());
		cpu->memWrite8(cpu->getRegSP()+1, cpu->getRegA());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->getRegSP(), cpu->ccr->getCCR());

	/* TODO:
		* Enter a wait state for an integer number of bus clock cycle
		* Only CPU12 clocks are stopped
		* Wait for not masked interrupt
		*/

		cpu->Wait();

		/*
		* If XIRQ is asserted while the X mask bit = 0 (XIRQ interrupts enabled),
		* execution resumes with a vector fetch for the XIRQ interrupt.
		* While the X mask bit = 1 (XIRQ interrupts disabled),
		* a 2-cycle recovery sequence is used to adjust the instruction queue and the stack pointer,
		* and execution continues with the next instruction after WAI.
		*/
	}
#line 49209 "hcs12x.cc"
}

static Operation *DecodeOpWai(CodeType const& code, uint16_t addr)
{
	return new OpWai(code, addr);
}

// BGND: Enter Background debug mode
#line 83 "hcs12x.isa"
uint8_t
#line 49220 "hcs12x.cc"
OpBgnd::getCycles()
{
#line 180 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 5; }
#line 49225 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49229 "hcs12x.cc"
OpBgnd::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49233 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49236 "hcs12x.cc"
)
{
#line 182 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "BGND";

		sink << mnem;
		return mnem;
	}
#line 49246 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 49250 "hcs12x.cc"
OpBgnd::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49254 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49257 "hcs12x.cc"
)
{
#line 189 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		// TODO
	}
#line 49264 "hcs12x.cc"
}

static Operation *DecodeOpBgnd(CodeType const& code, uint16_t addr)
{
	return new OpBgnd(code, addr);
}

/* ********** Interrupt instructions ******** */
// RTI: Return from interrupt
#line 83 "hcs12x.isa"
uint8_t
#line 49276 "hcs12x.cc"
OpRti::getCycles()
{
#line 201 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ if (isPending) return 10; else return 8; }
#line 49281 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49285 "hcs12x.cc"
OpRti::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49289 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49292 "hcs12x.cc"
)
{
#line 203 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "RTI";

		sink << mnem;
		return mnem;
	}
#line 49302 "hcs12x.cc"
}
// TODO: check if there is interrupt pending and set "isPending"
#line 62 "hcs12x.isa"
void
#line 49307 "hcs12x.cc"
OpRti::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49311 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49314 "hcs12x.cc"
)
{
#line 212 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		/*
		* (M(SP) : M(SP+1)) => CCRH : CCRL; (SP) + 0x0002 => SP
		* (M(SP) : M(SP+1)) => B : A; (SP) + 0x0002 => SP
		* (M(SP) : M(SP+1)) => XH : XL; (SP) + 0x0004 => SP
		* (M(SP) : M(SP+1)) => PCH : PCL; (SP) – 0x0002 => SP
		* (M(SP) : M(SP+1)) => YH : YL; (SP) + 0x0004 => SP
		* */

		address_t addr = cpu->getRegSP();

		/* Leave bit X unchanged.
		* X bit can be set only by a reset or by recognition of an (!XIRQ) interrupt
		*/
		cpu->ccr->setCCR(cpu->memRead16(addr));

		addr = addr + 2;
		cpu->setRegB(cpu->memRead8(addr));
		cpu->setRegA(cpu->memRead8(addr+1));

		addr = addr + 2;
		cpu->setRegX(cpu->memRead16(addr));

		addr = addr + 2;
		cpu->setRegY(cpu->memRead16(addr));

		addr = addr + 2;
		cpu->setRegPC(cpu->memRead16(addr));

		addr = addr + 2;
		cpu->setRegSP(addr);
	}
#line 49351 "hcs12x.cc"
}

static Operation *DecodeOpRti(CodeType const& code, uint16_t addr)
{
	return new OpRti(code, addr);
}

// SWI: Software Interrupt
#line 83 "hcs12x.isa"
uint8_t
#line 49362 "hcs12x.cc"
OpSwi::getCycles()
{
#line 250 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 9; }
#line 49367 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49371 "hcs12x.cc"
OpSwi::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49375 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49378 "hcs12x.cc"
)
{
#line 252 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "SWI";

		sink << mnem;
		return mnem;
	}
#line 49388 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 49392 "hcs12x.cc"
OpSwi::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49396 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49399 "hcs12x.cc"
)
{
#line 259 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		/* (SP) – 0x0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; B : A=> (M(SP) : M(SP+1))
		* In case of CPU12
		* (SP) – 0x0001 => SP; CCR => (M(SP) )
		* In case of CPU12X
		* (SP) – 0x0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* 1 => I; 0 => U
		* (SWI Vector) => PC
		*/

		throw new NonMaskableSWIInterrupt();
	}
#line 49418 "hcs12x.cc"
}

static Operation *DecodeOpSwi(CodeType const& code, uint16_t addr)
{
	return new OpSwi(code, addr);
}

// SYS: System Call Interrupt
// System call interrupt vector is 0xFF12:0xFF13
#line 83 "hcs12x.isa"
uint8_t
#line 49430 "hcs12x.cc"
OpSys::getCycles()
{
#line 344 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{ return 10; }
#line 49435 "hcs12x.cc"
}
#line 68 "hcs12x.isa"
string
#line 49439 "hcs12x.cc"
OpSys::disasm(
#line 68 "hcs12x.isa"
ostream&
#line 49443 "hcs12x.cc"
#line 68 "hcs12x.isa"
sink
#line 49446 "hcs12x.cc"
)
{
#line 346 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		string mnem = "SYS";

		sink << mnem;
		return mnem;
	}
#line 49456 "hcs12x.cc"
}
#line 62 "hcs12x.isa"
void
#line 49460 "hcs12x.cc"
OpSys::execute(
#line 62 "hcs12x.isa"
CPU *
#line 49464 "hcs12x.cc"
#line 62 "hcs12x.isa"
cpu
#line 49467 "hcs12x.cc"
)
{
#line 353 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		/*
		* (SP) – 0x0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – 0x0002 => SP; B : A => (M(SP) : M(SP+1))
		* In case of CPU12
		* (SP) – 0x0001 => SP; CCR => (M(SP) )
		* In case of CPU12X
		* (SP) – 0x0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* 1 => I; 0 => U
		* (Trap Vector) => PC
		*/

		throw new SysCallInterrupt();

	}
#line 49489 "hcs12x.cc"
}

static Operation *DecodeOpSys(CodeType const& code, uint16_t addr)
{
	return new OpSys(code, addr);
}

OpCall_idx::OpCall_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		page = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpCall_idx::~OpCall_idx()
{
	delete xb;
}

OpTrap::OpTrap(CodeType const& code, uint16_t addr) : Operation(code, addr, "trap")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		trapnum = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_imm::OpLdaab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_dir::OpLdaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_ext::OpLdaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_idx::OpLdaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLdaab_idx::~OpLdaab_idx()
{
	delete xb;
}

OpLd_dyxs_imm::OpLd_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_dir::OpLd_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_ext::OpLd_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_idx::OpLd_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_idx::~OpLd_dyxs_idx()
{
	delete xb;
}

OpLeay::OpLeay(CodeType const& code, uint16_t addr) : Operation(code, addr, "leay")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeay::~OpLeay()
{
	delete xb;
}

OpLeax::OpLeax(CodeType const& code, uint16_t addr) : Operation(code, addr, "leax")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeax::~OpLeax()
{
	delete xb;
}

OpLeas::OpLeas(CodeType const& code, uint16_t addr) : Operation(code, addr, "leas")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeas::~OpLeas()
{
	delete xb;
}

OpStaab_dir::OpStaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 8) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpStaab_ext::OpStaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpStaab_idx::OpStaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpStaab_idx::~OpStaab_idx()
{
	delete xb;
}

OpSt_dyxs_dir::OpSt_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_ext::OpSt_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_idx::OpSt_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_idx::~OpSt_dyxs_idx()
{
	delete xb;
}

OpGldaab_dir::OpGldaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGldaab_ext::OpGldaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGldaab_idx::OpGldaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGldaab_idx::~OpGldaab_idx()
{
	delete xb;
}

OpGld_dyxs_dir::OpGld_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_ext::OpGld_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_idx::OpGld_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_idx::~OpGld_dyxs_idx()
{
	delete xb;
}

OpGstaab_dir::OpGstaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 8) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGstaab_ext::OpGstaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGstaab_idx::OpGstaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGstaab_idx::~OpGstaab_idx()
{
	delete xb;
}

OpGst_dyxs_dir::OpGst_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_ext::OpGst_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_idx::OpGst_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_idx::~OpGst_dyxs_idx()
{
	delete xb;
}

OpT_ab_ba::OpT_ab_ba(CodeType const& code, uint16_t addr) : Operation(code, addr, "t_ab_ba")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpExg_hcs12::OpExg_hcs12(CodeType const& code, uint16_t addr) : Operation(code, addr, "exg_hcs12")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTfr_hcs12::OpTfr_hcs12(CodeType const& code, uint16_t addr) : Operation(code, addr, "tfr_hcs12")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		hls = ((_subword_ >> 3) & 0x1ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpExg_hcs12x::OpExg_hcs12x(CodeType const& code, uint16_t addr) : Operation(code, addr, "exg_hcs12x")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTfr_hcs12x::OpTfr_hcs12x(CodeType const& code, uint16_t addr) : Operation(code, addr, "tfr_hcs12x")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMovb_0B::OpMovb_0B(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0B")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_08::OpMovb_08(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_08")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMovb_08::~OpMovb_08()
{
	delete xb;
}

OpMovb_0C::OpMovb_0C(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0C")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16asrc = ((_subword_ >> 16) & 0xffffULL);
		opr16adst = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpMovb_09::OpMovb_09(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_09")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16asrc = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_09::~OpMovb_09()
{
	delete xb;
}

OpMovb_0D::OpMovb_0D(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0D")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_0D::~OpMovb_0D()
{
	delete xb;
}

OpMovb_0A::OpMovb_0A(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0A")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xbsrc = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbsrc->GetEncoding().size );
	xbdst = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbdst->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMovb_0A::~OpMovb_0A()
{
	delete xbsrc;
	delete xbdst;
}

OpMovw_03::OpMovw_03(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_03")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_04::OpMovw_04(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_04")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16asrc = ((_subword_ >> 16) & 0xffffULL);
		opr16adst = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpMovw_00::OpMovw_00(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_00")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_00::~OpMovw_00()
{
	delete xb;
}

OpMovw_01::OpMovw_01(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_01")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16asrc = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_01::~OpMovw_01()
{
	delete xb;
}

OpMovw_05::OpMovw_05(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_05")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_05::~OpMovw_05()
{
	delete xb;
}

OpMovw_02::OpMovw_02(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_02")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xbsrc = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbsrc->GetEncoding().size );
	xbdst = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbdst->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMovw_02::~OpMovw_02()
{
	delete xbsrc;
	delete xbdst;
}

OpAba::OpAba(CodeType const& code, uint16_t addr) : Operation(code, addr, "aba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAbx::OpAbx(CodeType const& code, uint16_t addr) : Operation(code, addr, "abx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAby::OpAby(CodeType const& code, uint16_t addr) : Operation(code, addr, "aby")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_imm::OpAdc_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_dir::OpAdc_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_ext::OpAdc_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_idx::OpAdc_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_idx::~OpAdc_ab_idx()
{
	delete xb;
}

OpAdd_ab_imm::OpAdd_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_dir::OpAdd_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_ext::OpAdd_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_idx::OpAdd_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_idx::~OpAdd_ab_idx()
{
	delete xb;
}

OpAded_imm::OpAded_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAded_dir::OpAded_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAded_ext::OpAded_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAded_idx::OpAded_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAded_idx::~OpAded_idx()
{
	delete xb;
}

OpAde_xy_imm::OpAde_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_dir::OpAde_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_ext::OpAde_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_idx::OpAde_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAde_xy_idx::~OpAde_xy_idx()
{
	delete xb;
}

OpAdd_xy_imm::OpAdd_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_dir::OpAdd_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_ext::OpAdd_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_idx::OpAdd_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_idx::~OpAdd_xy_idx()
{
	delete xb;
}

OpAdd_sub_d_imm::OpAdd_sub_d_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_dir::OpAdd_sub_d_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_ext::OpAdd_sub_d_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_idx::OpAdd_sub_d_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_idx::~OpAdd_sub_d_idx()
{
	delete xb;
}

OpSba::OpSba(CodeType const& code, uint16_t addr) : Operation(code, addr, "sba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_imm::OpSbc_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_dir::OpSbc_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_ext::OpSbc_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_idx::OpSbc_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_idx::~OpSbc_ab_idx()
{
	delete xb;
}

OpSbed_imm::OpSbed_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbed_dir::OpSbed_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbed_ext::OpSbed_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbed_idx::OpSbed_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbed_idx::~OpSbed_idx()
{
	delete xb;
}

OpSbe_xy_imm::OpSbe_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_dir::OpSbe_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_ext::OpSbe_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_idx::OpSbe_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_idx::~OpSbe_xy_idx()
{
	delete xb;
}

OpSub_ab_imm::OpSub_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_dir::OpSub_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_ext::OpSub_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_idx::OpSub_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSub_ab_idx::~OpSub_ab_idx()
{
	delete xb;
}

OpSub_xy_imm::OpSub_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_dir::OpSub_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_ext::OpSub_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_idx::OpSub_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSub_xy_idx::~OpSub_xy_idx()
{
	delete xb;
}

OpDaa::OpDaa(CodeType const& code, uint16_t addr) : Operation(code, addr, "daa")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDec_ext::OpDec_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDec_idx::OpDec_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpDec_idx::~OpDec_idx()
{
	delete xb;
}

OpDec_ab::OpDec_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpDecw_ext::OpDecw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "decw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpDecw_idx::OpDecw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "decw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpDecw_idx::~OpDecw_idx()
{
	delete xb;
}

OpDec_xy::OpDec_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDes::OpDes(CodeType const& code, uint16_t addr) : Operation(code, addr, "des")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDex::OpDex(CodeType const& code, uint16_t addr) : Operation(code, addr, "dex")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpDey::OpDey(CodeType const& code, uint16_t addr) : Operation(code, addr, "dey")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpInc_ext::OpInc_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpInc_idx::OpInc_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpInc_idx::~OpInc_idx()
{
	delete xb;
}

OpInc_ab::OpInc_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpIncw_ext::OpIncw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "incw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpIncw_idx::OpIncw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "incw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpIncw_idx::~OpIncw_idx()
{
	delete xb;
}

OpInc_xy::OpInc_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIns::OpIns(CodeType const& code, uint16_t addr) : Operation(code, addr, "ins")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpInx::OpInx(CodeType const& code, uint16_t addr) : Operation(code, addr, "inx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpIny::OpIny(CodeType const& code, uint16_t addr) : Operation(code, addr, "iny")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpCba::OpCba(CodeType const& code, uint16_t addr) : Operation(code, addr, "cba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_imm::OpCmp_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_dir::OpCmp_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_ext::OpCmp_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_idx::OpCmp_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_idx::~OpCmp_ab_idx()
{
	delete xb;
}

OpCp_dyxs_imm::OpCp_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_dir::OpCp_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_ext::OpCp_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_idx::OpCp_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_idx::~OpCp_dyxs_idx()
{
	delete xb;
}

OpCpe_dyxs_imm::OpCpe_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_dir::OpCpe_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_ext::OpCpe_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_idx::OpCpe_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_idx::~OpCpe_dyxs_idx()
{
	delete xb;
}

OpTst_ext::OpTst_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpTst_idx::OpTst_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTst_idx::~OpTst_idx()
{
	delete xb;
}

OpTst_ab::OpTst_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTstw_ext::OpTstw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "tstw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpTstw_idx::OpTstw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "tstw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTstw_idx::~OpTstw_idx()
{
	delete xb;
}

OpTst_xy::OpTst_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEmind::OpEmind(CodeType const& code, uint16_t addr) : Operation(code, addr, "emind")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmind::~OpEmind()
{
	delete xb;
}

OpEminm::OpEminm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eminm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEminm::~OpEminm()
{
	delete xb;
}

OpMina::OpMina(CodeType const& code, uint16_t addr) : Operation(code, addr, "mina")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMina::~OpMina()
{
	delete xb;
}

OpMinm::OpMinm(CodeType const& code, uint16_t addr) : Operation(code, addr, "minm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMinm::~OpMinm()
{
	delete xb;
}

OpEmaxd::OpEmaxd(CodeType const& code, uint16_t addr) : Operation(code, addr, "emaxd")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmaxd::~OpEmaxd()
{
	delete xb;
}

OpEmaxm::OpEmaxm(CodeType const& code, uint16_t addr) : Operation(code, addr, "emaxm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmaxm::~OpEmaxm()
{
	delete xb;
}

OpMaxa::OpMaxa(CodeType const& code, uint16_t addr) : Operation(code, addr, "maxa")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMaxa::~OpMaxa()
{
	delete xb;
}

OpMaxm::OpMaxm(CodeType const& code, uint16_t addr) : Operation(code, addr, "maxm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMaxm::~OpMaxm()
{
	delete xb;
}

OpAnd_ab_imm::OpAnd_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_dir::OpAnd_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_ext::OpAnd_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_idx::OpAnd_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_idx::~OpAnd_ab_idx()
{
	delete xb;
}

OpAndcc_imm::OpAndcc_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "andcc_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_imm::OpAnd_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_dir::OpAnd_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_ext::OpAnd_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_idx::OpAnd_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_idx::~OpAnd_xy_idx()
{
	delete xb;
}

OpOra_ab_imm::OpOra_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_dir::OpOra_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_ext::OpOra_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_idx::OpOra_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpOra_ab_idx::~OpOra_ab_idx()
{
	delete xb;
}

OpOrcc_imm::OpOrcc_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "orcc_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_imm::OpOr_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_dir::OpOr_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_ext::OpOr_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_idx::OpOr_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpOr_xy_idx::~OpOr_xy_idx()
{
	delete xb;
}

OpEor_ab_imm::OpEor_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_dir::OpEor_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_ext::OpEor_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_idx::OpEor_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEor_ab_idx::~OpEor_ab_idx()
{
	delete xb;
}

OpEor_xy_imm::OpEor_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_dir::OpEor_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_ext::OpEor_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_idx::OpEor_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEor_xy_idx::~OpEor_xy_idx()
{
	delete xb;
}

OpClc::OpClc(CodeType const& code, uint16_t addr) : Operation(code, addr, "clc")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCli::OpCli(CodeType const& code, uint16_t addr) : Operation(code, addr, "cli")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClv::OpClv(CodeType const& code, uint16_t addr) : Operation(code, addr, "clv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClr_ext::OpClr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClr_idx::OpClr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpClr_idx::~OpClr_idx()
{
	delete xb;
}

OpClrw_ext::OpClrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "clrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClrw_idx::OpClrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "clrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpClrw_idx::~OpClrw_idx()
{
	delete xb;
}

OpClr_ab::OpClr_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpClr_xy::OpClr_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCom_ext::OpCom_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCom_idx::OpCom_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCom_idx::~OpCom_idx()
{
	delete xb;
}

OpCom_ab::OpCom_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpComw_ext::OpComw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "comw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpComw_idx::OpComw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "comw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpComw_idx::~OpComw_idx()
{
	delete xb;
}

OpCom_xy::OpCom_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNeg_ext::OpNeg_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNeg_idx::OpNeg_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpNeg_idx::~OpNeg_idx()
{
	delete xb;
}

OpNeg_ab::OpNeg_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpNegw_ext::OpNegw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "negw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNegw_idx::OpNegw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "negw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpNegw_idx::~OpNegw_idx()
{
	delete xb;
}

OpNeg_xy::OpNeg_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBclr_dir::OpBclr_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 8) & 0xffULL);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBclr_ext::OpBclr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBclr_idx::OpBclr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBclr_idx::~OpBclr_idx()
{
	delete xb;
}

OpBit_ab_imm::OpBit_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_dir::OpBit_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_ext::OpBit_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_idx::OpBit_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpBit_ab_idx::~OpBit_ab_idx()
{
	delete xb;
}

OpBit_xy_imm::OpBit_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_dir::OpBit_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_ext::OpBit_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_idx::OpBit_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpBit_xy_idx::~OpBit_xy_idx()
{
	delete xb;
}

OpBset_dir::OpBset_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 8) & 0xffULL);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBset_ext::OpBset_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBset_idx::OpBset_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBset_idx::~OpBset_idx()
{
	delete xb;
}

OpLsl_ext::OpLsl_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsl_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsl_idx::OpLsl_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsl_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsl_idx::~OpLsl_idx()
{
	delete xb;
}

OpLsla::OpLsla(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsla")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLslb::OpLslb(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsld::OpLsld(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsld")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLslw_ext::OpLslw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLslw_idx::OpLslw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLslw_idx::~OpLslw_idx()
{
	delete xb;
}

OpLslx::OpLslx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsly::OpLsly(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsly")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRol_ext::OpRol_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rol_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRol_idx::OpRol_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rol_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRol_idx::~OpRol_idx()
{
	delete xb;
}

OpRola::OpRola(CodeType const& code, uint16_t addr) : Operation(code, addr, "rola")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRolb::OpRolb(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRolw_ext::OpRolw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRolw_idx::OpRolw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRolw_idx::~OpRolw_idx()
{
	delete xb;
}

OpRolx::OpRolx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRoly::OpRoly(CodeType const& code, uint16_t addr) : Operation(code, addr, "roly")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsr_ext::OpLsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsr_idx::OpLsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsr_idx::~OpLsr_idx()
{
	delete xb;
}

OpLsra::OpLsra(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsra")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrb::OpLsrb(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrd::OpLsrd(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrw_ext::OpLsrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsrw_idx::OpLsrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsrw_idx::~OpLsrw_idx()
{
	delete xb;
}

OpLsrx::OpLsrx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsry::OpLsry(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsry")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRor_ext::OpRor_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ror_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRor_idx::OpRor_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ror_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRor_idx::~OpRor_idx()
{
	delete xb;
}

OpRora::OpRora(CodeType const& code, uint16_t addr) : Operation(code, addr, "rora")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRorb::OpRorb(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRorw_ext::OpRorw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRorw_idx::OpRorw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRorw_idx::~OpRorw_idx()
{
	delete xb;
}

OpRorx::OpRorx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRory::OpRory(CodeType const& code, uint16_t addr) : Operation(code, addr, "rory")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsr_ext::OpAsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "asr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsr_idx::OpAsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAsr_idx::~OpAsr_idx()
{
	delete xb;
}

OpAsra::OpAsra(CodeType const& code, uint16_t addr) : Operation(code, addr, "asra")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAsrb::OpAsrb(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAsrw_ext::OpAsrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsrw_idx::OpAsrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAsrw_idx::~OpAsrw_idx()
{
	delete xb;
}

OpAsrx::OpAsrx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsry::OpAsry(CodeType const& code, uint16_t addr) : Operation(code, addr, "asry")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBtas_dir::OpBtas_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_dir")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr8a = ((_subword_ >> 8) & 0xffULL);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBtas_ext::OpBtas_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 8) & 0xffffULL);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBtas_idx::OpBtas_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBtas_idx::~OpBtas_idx()
{
	delete xb;
}

OpEmul::OpEmul(CodeType const& code, uint16_t addr) : Operation(code, addr, "emul")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEmuls::OpEmuls(CodeType const& code, uint16_t addr) : Operation(code, addr, "emuls")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMul::OpMul(CodeType const& code, uint16_t addr) : Operation(code, addr, "mul")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEdiv::OpEdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "ediv")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEdivs::OpEdivs(CodeType const& code, uint16_t addr) : Operation(code, addr, "edivs")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpFdiv::OpFdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "fdiv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIdiv::OpIdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "idiv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIdivs::OpIdivs(CodeType const& code, uint16_t addr) : Operation(code, addr, "idivs")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEmacs::OpEmacs(CodeType const& code, uint16_t addr) : Operation(code, addr, "emacs")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbr::OpSbr(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbr")
,branch(
#line 44 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
false )
#line 52822 "hcs12x.cc"
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		sel = ((_subword_ >> 8) & 0xfULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLbr::OpLbr(CodeType const& code, uint16_t addr) : Operation(code, addr, "lbr")
,branch(
#line 146 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
false )
#line 52838 "hcs12x.cc"
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		sel = ((_subword_ >> 16) & 0xfULL);
		rel16 = (((int32_t((_subword_ >> 0) & 0xffffLL)) << 16) >> 16);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_dir::OpBr_clr_set_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_dir")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 24) & 0x1ULL);
		opr8a = ((_subword_ >> 16) & 0xffULL);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_ext::OpBr_clr_set_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 16) & 0xffffULL);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_idx::OpBr_clr_set_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_idx::~OpBr_clr_set_idx()
{
	delete xb;
}

OpBsr::OpBsr(CodeType const& code, uint16_t addr) : Operation(code, addr, "bsr")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCall_ext::OpCall_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 8) & 0xffffULL);
		page = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpCall_16offset_idx_ind::OpCall_16offset_idx_ind(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_16offset_idx_ind")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rr = ((_subword_ >> 3) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		n16 = (((int32_t((_subword_ >> 0) & 0xffffLL)) << 16) >> 16);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCall_accD_offset_idx_ind::OpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_accD_offset_idx_ind")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rr = ((_subword_ >> 3) & 0x3ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpJmp_ext::OpJmp_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "jmp_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJmp_idx::OpJmp_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "jmp_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpJmp_idx::~OpJmp_idx()
{
	delete xb;
}

OpJsr_dir::OpJsr_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJsr_ext::OpJsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJsr_idx::OpJsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpJsr_idx::~OpJsr_idx()
{
	delete xb;
}

OpRtc::OpRtc(CodeType const& code, uint16_t addr) : Operation(code, addr, "rtc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRts::OpRts(CodeType const& code, uint16_t addr) : Operation(code, addr, "rts")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLoop::OpLoop(CodeType const& code, uint16_t addr) : Operation(code, addr, "loop")
,isBranch(
#line 811 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
false )
#line 53039 "hcs12x.cc"
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b765 = ((_subword_ >> 5) & 0x7ULL);
		b4 = ((_subword_ >> 4) & 0x1ULL);
		b3 = ((_subword_ >> 3) & 0x1ULL);
		b210 = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rel9 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPsha::OpPsha(CodeType const& code, uint16_t addr) : Operation(code, addr, "psha")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshb::OpPshb(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshc::OpPshc(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshcw::OpPshcw(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshcw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpPshd::OpPshd(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshx::OpPshx(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshy::OpPshy(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshy")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPula::OpPula(CodeType const& code, uint16_t addr) : Operation(code, addr, "pula")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulb::OpPulb(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulc::OpPulc(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulcw::OpPulcw(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulcw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpPuld::OpPuld(CodeType const& code, uint16_t addr) : Operation(code, addr, "puld")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulx::OpPulx(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPuly::OpPuly(CodeType const& code, uint16_t addr) : Operation(code, addr, "puly")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMem::OpMem(CodeType const& code, uint16_t addr) : Operation(code, addr, "mem")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRev::OpRev(CodeType const& code, uint16_t addr) : Operation(code, addr, "rev")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRevw::OpRevw(CodeType const& code, uint16_t addr) : Operation(code, addr, "revw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWav::OpWav(CodeType const& code, uint16_t addr) : Operation(code, addr, "wav")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWavr::OpWavr(CodeType const& code, uint16_t addr) : Operation(code, addr, "wavr")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTbl::OpTbl(CodeType const& code, uint16_t addr) : Operation(code, addr, "tbl")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTbl::~OpTbl()
{
	delete xb;
}

OpEtlb::OpEtlb(CodeType const& code, uint16_t addr) : Operation(code, addr, "etlb")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEtlb::~OpEtlb()
{
	delete xb;
}

OpNop::OpNop(CodeType const& code, uint16_t addr) : Operation(code, addr, "nop")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpStop::OpStop(CodeType const& code, uint16_t addr) : Operation(code, addr, "stop")
,stopDisabled(
#line 55 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
false )
#line 53230 "hcs12x.cc"
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWai::OpWai(CodeType const& code, uint16_t addr) : Operation(code, addr, "wai")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBgnd::OpBgnd(CodeType const& code, uint16_t addr) : Operation(code, addr, "bgnd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRti::OpRti(CodeType const& code, uint16_t addr) : Operation(code, addr, "rti")
,isPending(
#line 199 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
false )
#line 53255 "hcs12x.cc"
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpSwi::OpSwi(CodeType const& code, uint16_t addr) : Operation(code, addr, "swi")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpSys::OpSys(CodeType const& code, uint16_t addr) : Operation(code, addr, "sys")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

DecodeMapPage::DecodeMapPage(uint16_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

DecodeMapPage::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

DecodeTableEntry::DecodeTableEntry(CodeType const& opcode, CodeType const& opcode_mask, Operation *(*decode)(CodeType const&, uint16_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

Decoder::Decoder()
{
	little_endian = false;
	mru_page = 0;
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSys));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3f" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpSwi));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRti));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x00" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBgnd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3e" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpWai));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3e" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpStop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEtlb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTbl));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpWavr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpWav));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRevw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRev));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x01" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpMem));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x31" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPuly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x30" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPuld));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x38" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpPulcw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x38" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x33" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x32" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPula));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x35" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x34" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x39" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpPshcw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x39" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x37" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x36" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPsha));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x04" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLoop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRts));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRtc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x15" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x16" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x17" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x05" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJmp_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x06" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJmp_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b\xe7" ), 2 ), CodeType( (uint8_t*)( "\xff\xe7" ), 2 ), DecodeOpCall_accD_offset_idx_ind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b\xe3" ), 2 ), CodeType( (uint8_t*)( "\xff\xe7" ), 2 ), DecodeOpCall_16offset_idx_ind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCall_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x07" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBsr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x20" ), 2 ), CodeType( (uint8_t*)( "\xff\xf0" ), 2 ), DecodeOpLbr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x20" ), 1 ), CodeType( (uint8_t*)( "\xf0" ), 1 ), DecodeOpSbr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x12" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmacs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x15" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIdivs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x10" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x11" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpFdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x14" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEdivs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x11" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpEdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x12" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpMul));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x13" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmuls));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x13" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpEmul));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x37" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x36" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x35" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x57" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsry));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x47" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x67" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x77" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x57" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsrb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x47" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsra));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x67" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x77" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x56" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRory));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x46" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x66" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x76" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x56" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRorb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x46" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRora));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x66" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRor_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x76" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRor_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x54" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsry));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x44" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x64" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x74" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x49" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsrd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x54" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsrb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x44" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsra));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x64" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x74" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x55" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRoly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x45" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x65" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x75" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x55" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRolb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x45" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRola));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x65" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRol_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x75" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRol_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x58" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x48" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x68" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x78" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x59" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsld));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x58" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLslb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x48" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsla));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x68" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsl_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x78" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsl_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa5" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb5" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x95" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x85" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa5" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb5" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x95" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x85" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x40" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpNeg_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x60" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpNegw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x70" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpNegw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x40" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpNeg_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x60" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNeg_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x70" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNeg_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x41" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpCom_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x61" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpComw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x71" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpComw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x41" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpCom_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x61" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCom_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x71" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCom_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x87" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpClr_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x87" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpClr_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x69" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x79" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x69" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpClr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x79" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpClr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xfd" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xef" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpCli));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xfe" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa8" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb8" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x98" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x88" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa8" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb8" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x98" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x88" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xaa" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xba" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9a" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8a" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x14" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpOrcc_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xaa" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xba" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9a" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8a" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa4" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb4" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x94" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x84" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAndcc_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa4" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb4" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x94" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x84" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMaxm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x18" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMaxa));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1e" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmaxm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmaxd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMinm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x19" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMina));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEminm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x97" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpTst_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xe7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTstw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xf7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTstw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x97" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpTst_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xe7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTst_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xf7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTst_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xac" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xbc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xac" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xbc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa1" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb1" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x91" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x81" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x17" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpCba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x02" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpIny));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x08" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b\x81" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIns));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x42" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpInc_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x62" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIncw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x72" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIncw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x42" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpInc_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x62" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInc_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x72" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInc_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x03" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDey));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x09" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDex));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b\x9f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDes));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x43" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpDec_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x63" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDecw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x73" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDecw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x43" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpDec_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x63" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDec_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x73" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDec_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x07" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDaa));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa0" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb0" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x90" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x80" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa0" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb0" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x90" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x80" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa2" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb2" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x92" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x82" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x93" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x83" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa2" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb2" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x92" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x82" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x16" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa3" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb3" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x93" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x83" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xab" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xbb" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9b" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8b" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa9" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb9" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x99" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x89" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xe3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xf3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xd3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xc3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xab" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xbb" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9b" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8b" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa9" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb9" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x99" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x89" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x19\xed" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAby));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1a\xe5" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAbx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x06" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x02" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_02));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x05" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_05));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x01" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_01));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x00" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_00));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x04" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_04));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x03" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_03));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0A));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0D));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x09" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_09));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0C));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x08" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_08));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0B));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x08" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpTfr_hcs12x));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x88" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpExg_hcs12x));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x00" ), 2 ), CodeType( (uint8_t*)( "\xff\x80" ), 2 ), DecodeOpTfr_hcs12));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x80" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpExg_hcs12));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0e" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpT_ab_ba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x6c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x7c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x5c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x6a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x7a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x5a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xec" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xfc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xdc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa6" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb6" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x96" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x6c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x7c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x5c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x6a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x7a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x5a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeas));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeax));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x19" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeay));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xec" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xfc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xdc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xcc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa6" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb6" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x96" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x86" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTrap));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCall_idx));
}

Decoder::~Decoder()
{
	InvalidateDecodingCache();
}

void Decoder::Fetch( CodeType&, uint16_t )
{
	assert( ! "Calling unimplemented virtual method Fetch" );
}

Operation *Decoder::NCDecode(uint16_t addr)
{
	Operation *operation;
	CodeType code;
	Fetch( code, addr );
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if( code.match( decode_table[idx].opcode, decode_table[idx].opcode_mask) )
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation(code, addr, "???");
	return operation;
}

Operation *Decoder::NCDecode(uint16_t addr, CodeType const& code)
{
	Operation *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if( code.match( decode_table[idx].opcode, decode_table[idx].opcode_mask) )
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation(code, addr, "???");
	return operation;
}

void Decoder::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

void Decoder::InvalidateDecodingCacheEntry(uint16_t addr)
{
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

inline DecodeMapPage *Decoder::FindPage(uint16_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

Operation *Decoder::Decode(uint16_t addr)
{
	Operation *operation;
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage(page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		return operation;
	}
	operation = NCDecode(addr);
	page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

Operation *Decoder::Decode(uint16_t addr, CodeType const& insn)
{
	Operation *operation;
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(insn.match( operation->GetEncoding() ) && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

void Decoder::SetLittleEndian()
{
	little_endian = true;
}

void Decoder::SetBigEndian()
{
	little_endian = false;
}

} } } } }
