#include "hcs12x.hh"
#include <cassert>
#include <ostream>
#include <cstring>
#line 56 "hcs12x.isa"

#include <unisim/component/cxx/processor/hcs12x/xb.hh>

using unisim::component::cxx::processor::hcs12x::XB::XbModes;

#line 12 "hcs12x.cc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace hcs12x {
unsigned int const CodeType::maxsize;
std::ostream& operator << ( std::ostream& _sink, CodeType const& _ct ) {
	char const* xrepr = "0123456789abcdef";
	char const* sep = "";
	for( unsigned int idx = 0; idx < _ct.size; ++idx, sep = " " ) {
		uint32_t byte = _ct.str[idx];
		_sink << sep << xrepr[byte/16] << xrepr[byte%16];
	}
	return _sink;
}
Operation::Operation(CodeType const& _code, uint16_t _addr, const char *_name)
:
encoding(_code),
addr(_addr),
name(_name)
{
}

Operation::~Operation()
{
}

#line 73 "hcs12x.isa"
uint8_t
#line 38 "hcs12x.cc"
Operation::getCycles()
{
#line 73 "hcs12x.isa"
	{
		/*
		* if (indexed_addressing) then
		*   return XbModes::GetIDXCycles(xb->getXbMode(), <idx_cyles>, <idx1_cyles>, <idx2_cyles>, <idxd_ind_cyles>, <idx2_ind_cyles>);
		*
		*/
		return 1;
	}
#line 50 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 54 "hcs12x.cc"
Operation::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 58 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 61 "hcs12x.cc"
)
{
#line 69 "hcs12x.isa"
	{
		sink << "?";
	}
#line 68 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 72 "hcs12x.cc"
Operation::execute(
#line 63 "hcs12x.isa"
CPU *
#line 76 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 79 "hcs12x.cc"
)
{
#line 63 "hcs12x.isa"
	{
		printf("Unknown instruction\n");

		exit(-1);
	}
#line 88 "hcs12x.cc"
}
class OpCall_idx : public Operation
{
public:
	OpCall_idx(CodeType const& code, uint16_t addr);
	~OpCall_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 97 "hcs12x.cc"
	* xb;
	uint32_t page;
	virtual
#line 69 "hcs12x.isa"
	void
#line 103 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 107 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 110 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 151 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 155 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 158 "hcs12x.cc"
	);
private:
};

class OpTrap : public Operation
{
public:
	OpTrap(CodeType const& code, uint16_t addr);
	uint32_t trapnum;
	virtual
#line 69 "hcs12x.isa"
	void
#line 171 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 175 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 178 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 219 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 223 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 226 "hcs12x.cc"
	);
private:
};

class OpLdaab_imm : public Operation
{
public:
	OpLdaab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 240 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 245 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 249 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 252 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 293 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 297 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 300 "hcs12x.cc"
	);
private:
};

class OpLdaab_dir : public Operation
{
public:
	OpLdaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 314 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 319 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 323 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 326 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 367 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 371 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 374 "hcs12x.cc"
	);
private:
};

class OpLdaab_ext : public Operation
{
public:
	OpLdaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 388 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 393 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 397 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 400 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 441 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 445 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 448 "hcs12x.cc"
	);
private:
};

class OpLdaab_idx : public Operation
{
public:
	OpLdaab_idx(CodeType const& code, uint16_t addr);
	~OpLdaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 461 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 466 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 471 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 475 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 478 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 519 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 523 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 526 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_imm : public Operation
{
public:
	OpLd_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 540 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 545 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 549 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 552 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 593 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 597 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 600 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_dir : public Operation
{
public:
	OpLd_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t dd;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 614 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 619 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 623 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 626 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 667 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 671 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 674 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_ext : public Operation
{
public:
	OpLd_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 688 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 693 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 697 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 700 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 741 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 745 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 748 "hcs12x.cc"
	);
private:
};

class OpLd_dyxs_idx : public Operation
{
public:
	OpLd_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpLd_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 761 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 766 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 771 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 775 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 778 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 819 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 823 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 826 "hcs12x.cc"
	);
private:
};

class OpLeay : public Operation
{
public:
	OpLeay(CodeType const& code, uint16_t addr);
	~OpLeay();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 838 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 843 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 848 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 852 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 855 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 896 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 900 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 903 "hcs12x.cc"
	);
private:
};

class OpLeax : public Operation
{
public:
	OpLeax(CodeType const& code, uint16_t addr);
	~OpLeax();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 915 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 920 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 925 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 929 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 932 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 973 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 977 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 980 "hcs12x.cc"
	);
private:
};

class OpLeas : public Operation
{
public:
	OpLeas(CodeType const& code, uint16_t addr);
	~OpLeas();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 992 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 997 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1002 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1006 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1009 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1050 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1054 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1057 "hcs12x.cc"
	);
private:
};

class OpStaab_dir : public Operation
{
public:
	OpStaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1071 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1076 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1080 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1083 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1124 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1128 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1131 "hcs12x.cc"
	);
private:
};

class OpStaab_ext : public Operation
{
public:
	OpStaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1145 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1150 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1154 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1157 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1198 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1202 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1205 "hcs12x.cc"
	);
private:
};

class OpStaab_idx : public Operation
{
public:
	OpStaab_idx(CodeType const& code, uint16_t addr);
	~OpStaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1218 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1223 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1228 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1232 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1235 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1276 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1280 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1283 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_dir : public Operation
{
public:
	OpSt_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1297 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1302 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1306 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1309 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1350 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1354 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1357 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_ext : public Operation
{
public:
	OpSt_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1371 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1376 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1380 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1383 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1424 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1428 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1431 "hcs12x.cc"
	);
private:
};

class OpSt_dyxs_idx : public Operation
{
public:
	OpSt_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpSt_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1444 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1449 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1454 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1458 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1461 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1502 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1506 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1509 "hcs12x.cc"
	);
private:
};

class OpGldaab_dir : public Operation
{
public:
	OpGldaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1523 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1528 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1532 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1535 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1576 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1580 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1583 "hcs12x.cc"
	);
private:
};

class OpGldaab_ext : public Operation
{
public:
	OpGldaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1597 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1602 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1606 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1609 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1650 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1654 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1657 "hcs12x.cc"
	);
private:
};

class OpGldaab_idx : public Operation
{
public:
	OpGldaab_idx(CodeType const& code, uint16_t addr);
	~OpGldaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1670 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1675 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1680 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1684 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1687 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1728 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1732 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1735 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_dir : public Operation
{
public:
	OpGld_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t dd;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1749 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1754 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1758 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1761 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1802 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1806 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1809 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_ext : public Operation
{
public:
	OpGld_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1823 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1828 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1832 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1835 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1876 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1880 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1883 "hcs12x.cc"
	);
private:
};

class OpGld_dyxs_idx : public Operation
{
public:
	OpGld_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpGld_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 1896 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1901 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1906 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1910 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1913 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 1954 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 1958 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 1961 "hcs12x.cc"
	);
private:
};

class OpGstaab_dir : public Operation
{
public:
	OpGstaab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 1975 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 1980 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 1984 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 1987 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2028 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2032 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2035 "hcs12x.cc"
	);
private:
};

class OpGstaab_ext : public Operation
{
public:
	OpGstaab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2049 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2054 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2058 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2061 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2102 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2106 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2109 "hcs12x.cc"
	);
private:
};

class OpGstaab_idx : public Operation
{
public:
	OpGstaab_idx(CodeType const& code, uint16_t addr);
	~OpGstaab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2122 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2127 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2132 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2136 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2139 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2180 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2184 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2187 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_dir : public Operation
{
public:
	OpGst_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2201 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2206 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2210 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2213 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2254 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2258 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2261 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_ext : public Operation
{
public:
	OpGst_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2275 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2280 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2284 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2287 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2328 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2332 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2335 "hcs12x.cc"
	);
private:
};

class OpGst_dyxs_idx : public Operation
{
public:
	OpGst_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpGst_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2348 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2353 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2358 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2362 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2365 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2406 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2410 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2413 "hcs12x.cc"
	);
private:
};

class OpT_ab_ba : public Operation
{
public:
	OpT_ab_ba(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2426 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2431 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2435 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2438 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2479 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2483 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2486 "hcs12x.cc"
	);
private:
};

class OpExg_hcs12 : public Operation
{
public:
	OpExg_hcs12(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2500 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2505 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2509 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2512 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2553 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2557 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2560 "hcs12x.cc"
	);
private:
};

class OpTfr_hcs12 : public Operation
{
public:
	OpTfr_hcs12(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t hls;
	uint32_t lls;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2575 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2580 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2584 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2587 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2628 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2632 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2635 "hcs12x.cc"
	);
private:
};

class OpExg_hcs12x : public Operation
{
public:
	OpExg_hcs12x(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2649 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2654 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2658 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2661 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2702 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2706 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2709 "hcs12x.cc"
	);
private:
};

class OpTfr_hcs12x : public Operation
{
public:
	OpTfr_hcs12x(CodeType const& code, uint16_t addr);
	uint32_t lms;
	uint32_t lls;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2723 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2728 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2732 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2735 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2776 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2780 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2783 "hcs12x.cc"
	);
private:
};

class OpMovb_0B : public Operation
{
public:
	OpMovb_0B(CodeType const& code, uint16_t addr);
	uint32_t ii;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2797 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2802 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2806 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2809 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2850 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2854 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2857 "hcs12x.cc"
	);
private:
};

class OpMovb_08 : public Operation
{
public:
	OpMovb_08(CodeType const& code, uint16_t addr);
	~OpMovb_08();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 2869 "hcs12x.cc"
	* xb;
	uint32_t ii;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2875 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2880 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2884 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2887 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 2928 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 2932 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 2935 "hcs12x.cc"
	);
private:
};

class OpMovb_0C : public Operation
{
public:
	OpMovb_0C(CodeType const& code, uint16_t addr);
	uint32_t opr16asrc;
	uint32_t opr16adst;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 2949 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 2954 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 2958 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 2961 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3002 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3006 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3009 "hcs12x.cc"
	);
private:
};

class OpMovb_09 : public Operation
{
public:
	OpMovb_09(CodeType const& code, uint16_t addr);
	~OpMovb_09();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3021 "hcs12x.cc"
	* xb;
	uint32_t opr16asrc;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3027 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3032 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3036 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3039 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3080 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3084 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3087 "hcs12x.cc"
	);
private:
};

class OpMovb_0D : public Operation
{
public:
	OpMovb_0D(CodeType const& code, uint16_t addr);
	~OpMovb_0D();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3099 "hcs12x.cc"
	* xb;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3105 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3110 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3114 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3117 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3158 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3162 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3165 "hcs12x.cc"
	);
private:
};

class OpMovb_0A : public Operation
{
public:
	OpMovb_0A(CodeType const& code, uint16_t addr);
	~OpMovb_0A();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3177 "hcs12x.cc"
	* xbsrc;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3181 "hcs12x.cc"
	* xbdst;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3186 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3191 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3195 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3198 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3239 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3243 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3246 "hcs12x.cc"
	);
private:
};

class OpMovw_03 : public Operation
{
public:
	OpMovw_03(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3260 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3265 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3269 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3272 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3313 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3317 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3320 "hcs12x.cc"
	);
private:
};

class OpMovw_04 : public Operation
{
public:
	OpMovw_04(CodeType const& code, uint16_t addr);
	uint32_t opr16asrc;
	uint32_t opr16adst;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3334 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3339 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3343 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3346 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3387 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3391 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3394 "hcs12x.cc"
	);
private:
};

class OpMovw_00 : public Operation
{
public:
	OpMovw_00(CodeType const& code, uint16_t addr);
	~OpMovw_00();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3406 "hcs12x.cc"
	* xb;
	uint32_t opr16i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 3412 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3416 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3419 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3460 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3464 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3467 "hcs12x.cc"
	);
private:
};

class OpMovw_01 : public Operation
{
public:
	OpMovw_01(CodeType const& code, uint16_t addr);
	~OpMovw_01();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3479 "hcs12x.cc"
	* xb;
	uint32_t opr16asrc;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3485 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3490 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3494 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3497 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3538 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3542 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3545 "hcs12x.cc"
	);
private:
};

class OpMovw_05 : public Operation
{
public:
	OpMovw_05(CodeType const& code, uint16_t addr);
	~OpMovw_05();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3557 "hcs12x.cc"
	* xb;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3563 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3568 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3572 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3575 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3616 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3620 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3623 "hcs12x.cc"
	);
private:
};

class OpMovw_02 : public Operation
{
public:
	OpMovw_02(CodeType const& code, uint16_t addr);
	~OpMovw_02();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3635 "hcs12x.cc"
	* xbsrc;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 3639 "hcs12x.cc"
	* xbdst;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3644 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3649 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3653 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3656 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3697 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3701 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3704 "hcs12x.cc"
	);
private:
};

class OpAba : public Operation
{
public:
	OpAba(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3716 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3721 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3725 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3728 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3769 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3773 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3776 "hcs12x.cc"
	);
private:
};

class OpAbx : public Operation
{
public:
	OpAbx(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3788 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3793 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3797 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3800 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3841 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3845 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3848 "hcs12x.cc"
	);
private:
};

class OpAby : public Operation
{
public:
	OpAby(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3860 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3865 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3869 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3872 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3913 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3917 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3920 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_imm : public Operation
{
public:
	OpAdc_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 3934 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 3939 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 3943 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 3946 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 3987 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 3991 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 3994 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_dir : public Operation
{
public:
	OpAdc_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4008 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4013 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4017 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4020 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4061 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4065 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4068 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_ext : public Operation
{
public:
	OpAdc_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4082 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4087 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4091 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4094 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4135 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4139 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4142 "hcs12x.cc"
	);
private:
};

class OpAdc_ab_idx : public Operation
{
public:
	OpAdc_ab_idx(CodeType const& code, uint16_t addr);
	~OpAdc_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4155 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4160 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4165 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4169 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4172 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4213 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4217 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4220 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_imm : public Operation
{
public:
	OpAdd_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4234 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4239 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4243 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4246 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4287 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4291 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4294 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_dir : public Operation
{
public:
	OpAdd_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4308 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4313 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4317 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4320 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4361 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4365 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4368 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_ext : public Operation
{
public:
	OpAdd_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4382 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4387 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4391 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4394 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4435 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4439 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4442 "hcs12x.cc"
	);
private:
};

class OpAdd_ab_idx : public Operation
{
public:
	OpAdd_ab_idx(CodeType const& code, uint16_t addr);
	~OpAdd_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4455 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4460 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4465 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4469 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4472 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4513 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4517 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4520 "hcs12x.cc"
	);
private:
};

class OpAded_imm : public Operation
{
public:
	OpAded_imm(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4533 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4538 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4542 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4545 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4586 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4590 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4593 "hcs12x.cc"
	);
private:
};

class OpAded_dir : public Operation
{
public:
	OpAded_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4606 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4611 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4615 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4618 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4659 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4663 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4666 "hcs12x.cc"
	);
private:
};

class OpAded_ext : public Operation
{
public:
	OpAded_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4679 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4684 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4688 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4691 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4732 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4736 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4739 "hcs12x.cc"
	);
private:
};

class OpAded_idx : public Operation
{
public:
	OpAded_idx(CodeType const& code, uint16_t addr);
	~OpAded_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 4751 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4756 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4761 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4765 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4768 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4809 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4813 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4816 "hcs12x.cc"
	);
private:
};

class OpAde_xy_imm : public Operation
{
public:
	OpAde_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4830 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4835 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4839 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4842 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4883 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4887 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4890 "hcs12x.cc"
	);
private:
};

class OpAde_xy_dir : public Operation
{
public:
	OpAde_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4904 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4909 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4913 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4916 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 4957 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 4961 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 4964 "hcs12x.cc"
	);
private:
};

class OpAde_xy_ext : public Operation
{
public:
	OpAde_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 4978 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 4983 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 4987 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 4990 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5031 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5035 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5038 "hcs12x.cc"
	);
private:
};

class OpAde_xy_idx : public Operation
{
public:
	OpAde_xy_idx(CodeType const& code, uint16_t addr);
	~OpAde_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5051 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5056 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5061 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5065 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5068 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5109 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5113 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5116 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_imm : public Operation
{
public:
	OpAdd_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5130 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5135 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5139 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5142 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5183 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5187 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5190 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_dir : public Operation
{
public:
	OpAdd_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5204 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5209 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5213 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5216 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5257 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5261 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5264 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_ext : public Operation
{
public:
	OpAdd_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5278 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5283 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5287 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5290 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5331 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5335 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5338 "hcs12x.cc"
	);
private:
};

class OpAdd_xy_idx : public Operation
{
public:
	OpAdd_xy_idx(CodeType const& code, uint16_t addr);
	~OpAdd_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5351 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5356 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5361 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5365 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5368 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5409 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5413 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5416 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_imm : public Operation
{
public:
	OpAdd_sub_d_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5430 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5435 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5439 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5442 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5483 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5487 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5490 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_dir : public Operation
{
public:
	OpAdd_sub_d_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5504 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5509 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5513 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5516 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5557 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5561 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5564 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_ext : public Operation
{
public:
	OpAdd_sub_d_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5578 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5583 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5587 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5590 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5631 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5635 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5638 "hcs12x.cc"
	);
private:
};

class OpAdd_sub_d_idx : public Operation
{
public:
	OpAdd_sub_d_idx(CodeType const& code, uint16_t addr);
	~OpAdd_sub_d_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 5651 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5656 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5661 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5665 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5668 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5709 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5713 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5716 "hcs12x.cc"
	);
private:
};

class OpSba : public Operation
{
public:
	OpSba(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5728 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5733 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5737 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5740 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5781 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5785 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5788 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_imm : public Operation
{
public:
	OpSbc_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5802 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5807 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5811 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5814 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5855 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5859 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5862 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_dir : public Operation
{
public:
	OpSbc_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5876 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5881 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5885 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5888 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 5929 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 5933 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 5936 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_ext : public Operation
{
public:
	OpSbc_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 5950 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 5955 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 5959 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 5962 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6003 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6007 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6010 "hcs12x.cc"
	);
private:
};

class OpSbc_ab_idx : public Operation
{
public:
	OpSbc_ab_idx(CodeType const& code, uint16_t addr);
	~OpSbc_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6023 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6028 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6033 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6037 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6040 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6081 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6085 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6088 "hcs12x.cc"
	);
private:
};

class OpSbed_imm : public Operation
{
public:
	OpSbed_imm(CodeType const& code, uint16_t addr);
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6101 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6106 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6110 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6113 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6154 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6158 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6161 "hcs12x.cc"
	);
private:
};

class OpSbed_dir : public Operation
{
public:
	OpSbed_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6174 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6179 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6183 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6186 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6227 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6231 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6234 "hcs12x.cc"
	);
private:
};

class OpSbed_ext : public Operation
{
public:
	OpSbed_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6247 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6252 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6256 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6259 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6300 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6304 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6307 "hcs12x.cc"
	);
private:
};

class OpSbed_idx : public Operation
{
public:
	OpSbed_idx(CodeType const& code, uint16_t addr);
	~OpSbed_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6319 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6324 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6329 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6333 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6336 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6377 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6381 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6384 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_imm : public Operation
{
public:
	OpSbe_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6398 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6403 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6407 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6410 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6451 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6455 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6458 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_dir : public Operation
{
public:
	OpSbe_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6472 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6477 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6481 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6484 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6525 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6529 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6532 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_ext : public Operation
{
public:
	OpSbe_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6546 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6551 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6555 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6558 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6599 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6603 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6606 "hcs12x.cc"
	);
private:
};

class OpSbe_xy_idx : public Operation
{
public:
	OpSbe_xy_idx(CodeType const& code, uint16_t addr);
	~OpSbe_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6619 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6624 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6629 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6633 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6636 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6677 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6681 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6684 "hcs12x.cc"
	);
private:
};

class OpSub_ab_imm : public Operation
{
public:
	OpSub_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6698 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6703 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6707 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6710 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6751 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6755 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6758 "hcs12x.cc"
	);
private:
};

class OpSub_ab_dir : public Operation
{
public:
	OpSub_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6772 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6777 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6781 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6784 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6825 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6829 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6832 "hcs12x.cc"
	);
private:
};

class OpSub_ab_ext : public Operation
{
public:
	OpSub_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6846 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6851 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6855 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6858 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6899 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6903 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6906 "hcs12x.cc"
	);
private:
};

class OpSub_ab_idx : public Operation
{
public:
	OpSub_ab_idx(CodeType const& code, uint16_t addr);
	~OpSub_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 6919 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6924 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 6929 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 6933 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 6936 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 6977 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 6981 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 6984 "hcs12x.cc"
	);
private:
};

class OpSub_xy_imm : public Operation
{
public:
	OpSub_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 6998 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7003 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7007 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7010 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7051 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7055 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7058 "hcs12x.cc"
	);
private:
};

class OpSub_xy_dir : public Operation
{
public:
	OpSub_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7072 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7077 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7081 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7084 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7125 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7129 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7132 "hcs12x.cc"
	);
private:
};

class OpSub_xy_ext : public Operation
{
public:
	OpSub_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7146 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7151 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7155 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7158 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7199 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7203 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7206 "hcs12x.cc"
	);
private:
};

class OpSub_xy_idx : public Operation
{
public:
	OpSub_xy_idx(CodeType const& code, uint16_t addr);
	~OpSub_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7219 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7224 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7229 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7233 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7236 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7277 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7281 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7284 "hcs12x.cc"
	);
private:
};

class OpDaa : public Operation
{
public:
	OpDaa(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7296 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7301 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7305 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7308 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7349 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7353 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7356 "hcs12x.cc"
	);
private:
};

class OpDec_ext : public Operation
{
public:
	OpDec_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7369 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7374 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7378 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7381 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7422 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7426 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7429 "hcs12x.cc"
	);
private:
};

class OpDec_idx : public Operation
{
public:
	OpDec_idx(CodeType const& code, uint16_t addr);
	~OpDec_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7441 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7446 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7451 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7455 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7458 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7499 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7503 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7506 "hcs12x.cc"
	);
private:
};

class OpDec_ab : public Operation
{
public:
	OpDec_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7519 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7524 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7528 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7531 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7572 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7576 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7579 "hcs12x.cc"
	);
private:
};

class OpDecw_ext : public Operation
{
public:
	OpDecw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7592 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7597 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7601 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7604 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7645 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7649 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7652 "hcs12x.cc"
	);
private:
};

class OpDecw_idx : public Operation
{
public:
	OpDecw_idx(CodeType const& code, uint16_t addr);
	~OpDecw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 7664 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7669 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7674 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7678 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7681 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7722 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7726 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7729 "hcs12x.cc"
	);
private:
};

class OpDec_xy : public Operation
{
public:
	OpDec_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7742 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7747 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7751 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7754 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7795 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7799 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7802 "hcs12x.cc"
	);
private:
};

class OpDes : public Operation
{
public:
	OpDes(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7814 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7819 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7823 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7826 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7867 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7871 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7874 "hcs12x.cc"
	);
private:
};

class OpDex : public Operation
{
public:
	OpDex(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7886 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7891 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7895 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7898 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 7939 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 7943 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 7946 "hcs12x.cc"
	);
private:
};

class OpDey : public Operation
{
public:
	OpDey(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 7958 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 7963 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 7967 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 7970 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8011 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8015 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8018 "hcs12x.cc"
	);
private:
};

class OpInc_ext : public Operation
{
public:
	OpInc_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8031 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8036 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8040 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8043 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8084 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8088 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8091 "hcs12x.cc"
	);
private:
};

class OpInc_idx : public Operation
{
public:
	OpInc_idx(CodeType const& code, uint16_t addr);
	~OpInc_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8103 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8108 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8113 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8117 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8120 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8161 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8165 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8168 "hcs12x.cc"
	);
private:
};

class OpInc_ab : public Operation
{
public:
	OpInc_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8181 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8186 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8190 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8193 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8234 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8238 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8241 "hcs12x.cc"
	);
private:
};

class OpIncw_ext : public Operation
{
public:
	OpIncw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8254 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8259 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8263 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8266 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8307 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8311 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8314 "hcs12x.cc"
	);
private:
};

class OpIncw_idx : public Operation
{
public:
	OpIncw_idx(CodeType const& code, uint16_t addr);
	~OpIncw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8326 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8331 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8336 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8340 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8343 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8384 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8388 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8391 "hcs12x.cc"
	);
private:
};

class OpInc_xy : public Operation
{
public:
	OpInc_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8404 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8409 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8413 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8416 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8457 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8461 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8464 "hcs12x.cc"
	);
private:
};

class OpIns : public Operation
{
public:
	OpIns(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8476 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8481 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8485 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8488 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8529 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8533 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8536 "hcs12x.cc"
	);
private:
};

class OpInx : public Operation
{
public:
	OpInx(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8548 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8553 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8557 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8560 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8601 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8605 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8608 "hcs12x.cc"
	);
private:
};

class OpIny : public Operation
{
public:
	OpIny(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8620 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8625 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8629 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8632 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8673 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8677 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8680 "hcs12x.cc"
	);
private:
};

class OpCba : public Operation
{
public:
	OpCba(CodeType const& code, uint16_t addr);
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8692 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8697 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8701 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8704 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8745 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8749 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8752 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_imm : public Operation
{
public:
	OpCmp_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8766 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8771 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8775 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8778 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8819 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8823 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8826 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_dir : public Operation
{
public:
	OpCmp_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8840 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8845 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8849 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8852 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8893 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8897 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8900 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_ext : public Operation
{
public:
	OpCmp_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8914 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8919 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 8923 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 8926 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 8967 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 8971 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 8974 "hcs12x.cc"
	);
private:
};

class OpCmp_ab_idx : public Operation
{
public:
	OpCmp_ab_idx(CodeType const& code, uint16_t addr);
	~OpCmp_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 8987 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 8992 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 8997 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9001 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9004 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9045 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9049 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9052 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_imm : public Operation
{
public:
	OpCp_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9066 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9071 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9075 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9078 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9119 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9123 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9126 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_dir : public Operation
{
public:
	OpCp_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9140 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9145 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9149 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9152 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9193 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9197 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9200 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_ext : public Operation
{
public:
	OpCp_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9214 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9219 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9223 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9226 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9267 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9271 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9274 "hcs12x.cc"
	);
private:
};

class OpCp_dyxs_idx : public Operation
{
public:
	OpCp_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpCp_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9287 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9292 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9297 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9301 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9304 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9345 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9349 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9352 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_imm : public Operation
{
public:
	OpCpe_dyxs_imm(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16i;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9366 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9371 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9375 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9378 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9419 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9423 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9426 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_dir : public Operation
{
public:
	OpCpe_dyxs_dir(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr8a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9440 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9445 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9449 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9452 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9493 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9497 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9500 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_ext : public Operation
{
public:
	OpCpe_dyxs_ext(CodeType const& code, uint16_t addr);
	uint32_t dyxs;
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9514 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9519 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9523 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9526 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9567 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9571 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9574 "hcs12x.cc"
	);
private:
};

class OpCpe_dyxs_idx : public Operation
{
public:
	OpCpe_dyxs_idx(CodeType const& code, uint16_t addr);
	~OpCpe_dyxs_idx();
	uint32_t dyxs;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9587 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9592 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9597 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9601 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9604 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9645 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9649 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9652 "hcs12x.cc"
	);
private:
};

class OpTst_ext : public Operation
{
public:
	OpTst_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9665 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9670 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9674 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9677 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9718 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9722 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9725 "hcs12x.cc"
	);
private:
};

class OpTst_idx : public Operation
{
public:
	OpTst_idx(CodeType const& code, uint16_t addr);
	~OpTst_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9737 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9742 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9747 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9751 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9754 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9795 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9799 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9802 "hcs12x.cc"
	);
private:
};

class OpTst_ab : public Operation
{
public:
	OpTst_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9815 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9820 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9824 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9827 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9868 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9872 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9875 "hcs12x.cc"
	);
private:
};

class OpTstw_ext : public Operation
{
public:
	OpTstw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9888 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9893 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9897 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9900 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 9941 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 9945 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 9948 "hcs12x.cc"
	);
private:
};

class OpTstw_idx : public Operation
{
public:
	OpTstw_idx(CodeType const& code, uint16_t addr);
	~OpTstw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 9960 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 9965 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 9970 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 9974 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 9977 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10018 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10022 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10025 "hcs12x.cc"
	);
private:
};

class OpTst_xy : public Operation
{
public:
	OpTst_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10038 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10043 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10047 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10050 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10091 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10095 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10098 "hcs12x.cc"
	);
private:
};

class OpEmind : public Operation
{
public:
	OpEmind(CodeType const& code, uint16_t addr);
	~OpEmind();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10110 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10115 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10120 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10124 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10127 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10168 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10172 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10175 "hcs12x.cc"
	);
private:
};

class OpEminm : public Operation
{
public:
	OpEminm(CodeType const& code, uint16_t addr);
	~OpEminm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10187 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10192 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10197 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10201 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10204 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10245 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10249 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10252 "hcs12x.cc"
	);
private:
};

class OpMina : public Operation
{
public:
	OpMina(CodeType const& code, uint16_t addr);
	~OpMina();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10264 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10269 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10274 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10278 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10281 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10322 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10326 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10329 "hcs12x.cc"
	);
private:
};

class OpMinm : public Operation
{
public:
	OpMinm(CodeType const& code, uint16_t addr);
	~OpMinm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10341 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10346 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10351 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10355 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10358 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10399 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10403 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10406 "hcs12x.cc"
	);
private:
};

class OpEmaxd : public Operation
{
public:
	OpEmaxd(CodeType const& code, uint16_t addr);
	~OpEmaxd();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10418 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10423 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10428 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10432 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10435 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10476 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10480 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10483 "hcs12x.cc"
	);
private:
};

class OpEmaxm : public Operation
{
public:
	OpEmaxm(CodeType const& code, uint16_t addr);
	~OpEmaxm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10495 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10500 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10505 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10509 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10512 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10553 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10557 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10560 "hcs12x.cc"
	);
private:
};

class OpMaxa : public Operation
{
public:
	OpMaxa(CodeType const& code, uint16_t addr);
	~OpMaxa();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10572 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10577 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10582 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10586 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10589 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10630 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10634 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10637 "hcs12x.cc"
	);
private:
};

class OpMaxm : public Operation
{
public:
	OpMaxm(CodeType const& code, uint16_t addr);
	~OpMaxm();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10649 "hcs12x.cc"
	* xb;
	virtual
#line 73 "hcs12x.isa"
	uint8_t
#line 10654 "hcs12x.cc"
	getCycles();
	virtual
#line 69 "hcs12x.isa"
	void
#line 10659 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10663 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10666 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10707 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10711 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10714 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_imm : public Operation
{
public:
	OpAnd_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 10728 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10732 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10735 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10776 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10780 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10783 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_dir : public Operation
{
public:
	OpAnd_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 10797 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10801 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10804 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10845 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10849 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10852 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_ext : public Operation
{
public:
	OpAnd_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 10866 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10870 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10873 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10914 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10918 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10921 "hcs12x.cc"
	);
private:
};

class OpAnd_ab_idx : public Operation
{
public:
	OpAnd_ab_idx(CodeType const& code, uint16_t addr);
	~OpAnd_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 10934 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 10939 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 10943 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 10946 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 10987 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 10991 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 10994 "hcs12x.cc"
	);
private:
};

class OpAndcc_imm : public Operation
{
public:
	OpAndcc_imm(CodeType const& code, uint16_t addr);
	uint32_t opr8i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11007 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11011 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11014 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11055 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11059 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11062 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_imm : public Operation
{
public:
	OpAnd_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11076 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11080 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11083 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11124 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11128 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11131 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_dir : public Operation
{
public:
	OpAnd_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11145 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11149 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11152 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11193 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11197 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11200 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_ext : public Operation
{
public:
	OpAnd_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11214 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11218 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11221 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11262 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11266 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11269 "hcs12x.cc"
	);
private:
};

class OpAnd_xy_idx : public Operation
{
public:
	OpAnd_xy_idx(CodeType const& code, uint16_t addr);
	~OpAnd_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11282 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11287 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11291 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11294 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11335 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11339 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11342 "hcs12x.cc"
	);
private:
};

class OpOra_ab_imm : public Operation
{
public:
	OpOra_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11356 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11360 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11363 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11404 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11408 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11411 "hcs12x.cc"
	);
private:
};

class OpOra_ab_dir : public Operation
{
public:
	OpOra_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11425 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11429 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11432 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11473 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11477 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11480 "hcs12x.cc"
	);
private:
};

class OpOra_ab_ext : public Operation
{
public:
	OpOra_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11494 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11498 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11501 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11542 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11546 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11549 "hcs12x.cc"
	);
private:
};

class OpOra_ab_idx : public Operation
{
public:
	OpOra_ab_idx(CodeType const& code, uint16_t addr);
	~OpOra_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11562 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11567 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11571 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11574 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11615 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11619 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11622 "hcs12x.cc"
	);
private:
};

class OpOrcc_imm : public Operation
{
public:
	OpOrcc_imm(CodeType const& code, uint16_t addr);
	uint32_t opr8i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11635 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11639 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11642 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11683 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11687 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11690 "hcs12x.cc"
	);
private:
};

class OpOr_xy_imm : public Operation
{
public:
	OpOr_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11704 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11708 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11711 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11752 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11756 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11759 "hcs12x.cc"
	);
private:
};

class OpOr_xy_dir : public Operation
{
public:
	OpOr_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11773 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11777 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11780 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11821 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11825 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11828 "hcs12x.cc"
	);
private:
};

class OpOr_xy_ext : public Operation
{
public:
	OpOr_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11842 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11846 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11849 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11890 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11894 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11897 "hcs12x.cc"
	);
private:
};

class OpOr_xy_idx : public Operation
{
public:
	OpOr_xy_idx(CodeType const& code, uint16_t addr);
	~OpOr_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 11910 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11915 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11919 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11922 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 11963 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 11967 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 11970 "hcs12x.cc"
	);
private:
};

class OpEor_ab_imm : public Operation
{
public:
	OpEor_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 11984 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 11988 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 11991 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12032 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12036 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12039 "hcs12x.cc"
	);
private:
};

class OpEor_ab_dir : public Operation
{
public:
	OpEor_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12053 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12057 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12060 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12101 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12105 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12108 "hcs12x.cc"
	);
private:
};

class OpEor_ab_ext : public Operation
{
public:
	OpEor_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12122 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12126 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12129 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12170 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12174 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12177 "hcs12x.cc"
	);
private:
};

class OpEor_ab_idx : public Operation
{
public:
	OpEor_ab_idx(CodeType const& code, uint16_t addr);
	~OpEor_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12190 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12195 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12199 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12202 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12243 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12247 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12250 "hcs12x.cc"
	);
private:
};

class OpEor_xy_imm : public Operation
{
public:
	OpEor_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12264 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12268 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12271 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12312 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12316 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12319 "hcs12x.cc"
	);
private:
};

class OpEor_xy_dir : public Operation
{
public:
	OpEor_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12333 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12337 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12340 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12381 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12385 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12388 "hcs12x.cc"
	);
private:
};

class OpEor_xy_ext : public Operation
{
public:
	OpEor_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12402 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12406 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12409 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12450 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12454 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12457 "hcs12x.cc"
	);
private:
};

class OpEor_xy_idx : public Operation
{
public:
	OpEor_xy_idx(CodeType const& code, uint16_t addr);
	~OpEor_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12470 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12475 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12479 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12482 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12523 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12527 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12530 "hcs12x.cc"
	);
private:
};

class OpClc : public Operation
{
public:
	OpClc(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 12542 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12546 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12549 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12590 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12594 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12597 "hcs12x.cc"
	);
private:
};

class OpCli : public Operation
{
public:
	OpCli(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 12609 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12613 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12616 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12657 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12661 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12664 "hcs12x.cc"
	);
private:
};

class OpClv : public Operation
{
public:
	OpClv(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 12676 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12680 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12683 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12724 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12728 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12731 "hcs12x.cc"
	);
private:
};

class OpClr_ext : public Operation
{
public:
	OpClr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12744 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12748 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12751 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12792 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12796 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12799 "hcs12x.cc"
	);
private:
};

class OpClr_idx : public Operation
{
public:
	OpClr_idx(CodeType const& code, uint16_t addr);
	~OpClr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12811 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12816 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12820 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12823 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12864 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12868 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12871 "hcs12x.cc"
	);
private:
};

class OpClrw_ext : public Operation
{
public:
	OpClrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12884 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12888 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12891 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 12932 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 12936 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 12939 "hcs12x.cc"
	);
private:
};

class OpClrw_idx : public Operation
{
public:
	OpClrw_idx(CodeType const& code, uint16_t addr);
	~OpClrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 12951 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 12956 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 12960 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 12963 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13004 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13008 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13011 "hcs12x.cc"
	);
private:
};

class OpClr_ab : public Operation
{
public:
	OpClr_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13024 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13028 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13031 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13072 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13076 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13079 "hcs12x.cc"
	);
private:
};

class OpClr_xy : public Operation
{
public:
	OpClr_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13092 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13096 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13099 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13140 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13144 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13147 "hcs12x.cc"
	);
private:
};

class OpCom_ext : public Operation
{
public:
	OpCom_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13160 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13164 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13167 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13208 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13212 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13215 "hcs12x.cc"
	);
private:
};

class OpCom_idx : public Operation
{
public:
	OpCom_idx(CodeType const& code, uint16_t addr);
	~OpCom_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13227 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13232 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13236 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13239 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13280 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13284 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13287 "hcs12x.cc"
	);
private:
};

class OpCom_ab : public Operation
{
public:
	OpCom_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13300 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13304 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13307 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13348 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13352 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13355 "hcs12x.cc"
	);
private:
};

class OpComw_ext : public Operation
{
public:
	OpComw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13368 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13372 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13375 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13416 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13420 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13423 "hcs12x.cc"
	);
private:
};

class OpComw_idx : public Operation
{
public:
	OpComw_idx(CodeType const& code, uint16_t addr);
	~OpComw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13435 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13440 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13444 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13447 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13488 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13492 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13495 "hcs12x.cc"
	);
private:
};

class OpCom_xy : public Operation
{
public:
	OpCom_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13508 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13512 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13515 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13556 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13560 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13563 "hcs12x.cc"
	);
private:
};

class OpNeg_ext : public Operation
{
public:
	OpNeg_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13576 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13580 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13583 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13624 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13628 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13631 "hcs12x.cc"
	);
private:
};

class OpNeg_idx : public Operation
{
public:
	OpNeg_idx(CodeType const& code, uint16_t addr);
	~OpNeg_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13643 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13648 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13652 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13655 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13696 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13700 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13703 "hcs12x.cc"
	);
private:
};

class OpNeg_ab : public Operation
{
public:
	OpNeg_ab(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13716 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13720 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13723 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13764 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13768 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13771 "hcs12x.cc"
	);
private:
};

class OpNegw_ext : public Operation
{
public:
	OpNegw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13784 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13788 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13791 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13832 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13836 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13839 "hcs12x.cc"
	);
private:
};

class OpNegw_idx : public Operation
{
public:
	OpNegw_idx(CodeType const& code, uint16_t addr);
	~OpNegw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 13851 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13856 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13860 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13863 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13904 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13908 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13911 "hcs12x.cc"
	);
private:
};

class OpNeg_xy : public Operation
{
public:
	OpNeg_xy(CodeType const& code, uint16_t addr);
	uint32_t b;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13924 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13928 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 13931 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 13972 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 13976 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 13979 "hcs12x.cc"
	);
private:
};

class OpBclr_dir : public Operation
{
public:
	OpBclr_dir(CodeType const& code, uint16_t addr);
	uint32_t dd;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 13993 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 13997 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14000 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14041 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14045 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14048 "hcs12x.cc"
	);
private:
};

class OpBclr_ext : public Operation
{
public:
	OpBclr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14062 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14066 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14069 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14110 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14114 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14117 "hcs12x.cc"
	);
private:
};

class OpBclr_idx : public Operation
{
public:
	OpBclr_idx(CodeType const& code, uint16_t addr);
	~OpBclr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14129 "hcs12x.cc"
	* xb;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14135 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14139 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14142 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14183 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14187 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14190 "hcs12x.cc"
	);
private:
};

class OpBit_ab_imm : public Operation
{
public:
	OpBit_ab_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t ii;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14204 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14208 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14211 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14252 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14256 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14259 "hcs12x.cc"
	);
private:
};

class OpBit_ab_dir : public Operation
{
public:
	OpBit_ab_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14273 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14277 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14280 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14321 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14325 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14328 "hcs12x.cc"
	);
private:
};

class OpBit_ab_ext : public Operation
{
public:
	OpBit_ab_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14342 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14346 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14349 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14390 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14394 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14397 "hcs12x.cc"
	);
private:
};

class OpBit_ab_idx : public Operation
{
public:
	OpBit_ab_idx(CodeType const& code, uint16_t addr);
	~OpBit_ab_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14410 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14415 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14419 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14422 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14463 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14467 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14470 "hcs12x.cc"
	);
private:
};

class OpBit_xy_imm : public Operation
{
public:
	OpBit_xy_imm(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16i;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14484 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14488 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14491 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14532 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14536 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14539 "hcs12x.cc"
	);
private:
};

class OpBit_xy_dir : public Operation
{
public:
	OpBit_xy_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14553 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14557 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14560 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14601 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14605 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14608 "hcs12x.cc"
	);
private:
};

class OpBit_xy_ext : public Operation
{
public:
	OpBit_xy_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14622 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14626 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14629 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14670 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14674 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14677 "hcs12x.cc"
	);
private:
};

class OpBit_xy_idx : public Operation
{
public:
	OpBit_xy_idx(CodeType const& code, uint16_t addr);
	~OpBit_xy_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14690 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14695 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14699 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14702 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14743 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14747 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14750 "hcs12x.cc"
	);
private:
};

class OpBset_dir : public Operation
{
public:
	OpBset_dir(CodeType const& code, uint16_t addr);
	uint32_t dd;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14764 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14768 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14771 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14812 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14816 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14819 "hcs12x.cc"
	);
private:
};

class OpBset_ext : public Operation
{
public:
	OpBset_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14833 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14837 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14840 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14881 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14885 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14888 "hcs12x.cc"
	);
private:
};

class OpBset_idx : public Operation
{
public:
	OpBset_idx(CodeType const& code, uint16_t addr);
	~OpBset_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 14900 "hcs12x.cc"
	* xb;
	uint32_t mm;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14906 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14910 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14913 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 14954 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 14958 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 14961 "hcs12x.cc"
	);
private:
};

class OpLsl_ext : public Operation
{
public:
	OpLsl_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 14974 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 14978 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 14981 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15022 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15026 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15029 "hcs12x.cc"
	);
private:
};

class OpLsl_idx : public Operation
{
public:
	OpLsl_idx(CodeType const& code, uint16_t addr);
	~OpLsl_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15041 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15046 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15050 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15053 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15094 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15098 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15101 "hcs12x.cc"
	);
private:
};

class OpLsla : public Operation
{
public:
	OpLsla(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15113 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15117 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15120 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15161 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15165 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15168 "hcs12x.cc"
	);
private:
};

class OpLslb : public Operation
{
public:
	OpLslb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15180 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15184 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15187 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15228 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15232 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15235 "hcs12x.cc"
	);
private:
};

class OpLsld : public Operation
{
public:
	OpLsld(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15247 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15251 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15295 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15299 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15302 "hcs12x.cc"
	);
private:
};

class OpLslw_ext : public Operation
{
public:
	OpLslw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15315 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15319 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15322 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15363 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15367 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15370 "hcs12x.cc"
	);
private:
};

class OpLslw_idx : public Operation
{
public:
	OpLslw_idx(CodeType const& code, uint16_t addr);
	~OpLslw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15382 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15387 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15391 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15394 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15435 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15439 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15442 "hcs12x.cc"
	);
private:
};

class OpLslx : public Operation
{
public:
	OpLslx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15454 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15458 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15461 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15502 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15506 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15509 "hcs12x.cc"
	);
private:
};

class OpLsly : public Operation
{
public:
	OpLsly(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15521 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15525 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15528 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15569 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15573 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15576 "hcs12x.cc"
	);
private:
};

class OpRol_ext : public Operation
{
public:
	OpRol_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15589 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15593 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15596 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15637 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15641 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15644 "hcs12x.cc"
	);
private:
};

class OpRol_idx : public Operation
{
public:
	OpRol_idx(CodeType const& code, uint16_t addr);
	~OpRol_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15656 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15661 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15665 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15668 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15709 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15713 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15716 "hcs12x.cc"
	);
private:
};

class OpRola : public Operation
{
public:
	OpRola(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15728 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15732 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15735 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15776 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15780 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15783 "hcs12x.cc"
	);
private:
};

class OpRolb : public Operation
{
public:
	OpRolb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 15795 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15799 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15802 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15843 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15847 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15850 "hcs12x.cc"
	);
private:
};

class OpRolw_ext : public Operation
{
public:
	OpRolw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15863 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15867 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15870 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15911 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15915 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15918 "hcs12x.cc"
	);
private:
};

class OpRolw_idx : public Operation
{
public:
	OpRolw_idx(CodeType const& code, uint16_t addr);
	~OpRolw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 15930 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 15935 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 15939 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 15942 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 15983 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 15987 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 15990 "hcs12x.cc"
	);
private:
};

class OpRolx : public Operation
{
public:
	OpRolx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16002 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16006 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16009 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16050 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16054 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16057 "hcs12x.cc"
	);
private:
};

class OpRoly : public Operation
{
public:
	OpRoly(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16069 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16073 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16076 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16117 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16121 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16124 "hcs12x.cc"
	);
private:
};

class OpLsr_ext : public Operation
{
public:
	OpLsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16137 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16141 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16144 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16185 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16189 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16192 "hcs12x.cc"
	);
private:
};

class OpLsr_idx : public Operation
{
public:
	OpLsr_idx(CodeType const& code, uint16_t addr);
	~OpLsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16204 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16209 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16213 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16216 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16257 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16261 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16264 "hcs12x.cc"
	);
private:
};

class OpLsra : public Operation
{
public:
	OpLsra(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16276 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16280 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16283 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16324 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16328 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16331 "hcs12x.cc"
	);
private:
};

class OpLsrb : public Operation
{
public:
	OpLsrb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16343 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16347 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16350 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16391 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16395 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16398 "hcs12x.cc"
	);
private:
};

class OpLsrd : public Operation
{
public:
	OpLsrd(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16410 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16414 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16417 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16458 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16462 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16465 "hcs12x.cc"
	);
private:
};

class OpLsrw_ext : public Operation
{
public:
	OpLsrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16478 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16482 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16485 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16526 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16530 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16533 "hcs12x.cc"
	);
private:
};

class OpLsrw_idx : public Operation
{
public:
	OpLsrw_idx(CodeType const& code, uint16_t addr);
	~OpLsrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16545 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16550 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16554 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16557 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16598 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16602 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16605 "hcs12x.cc"
	);
private:
};

class OpLsrx : public Operation
{
public:
	OpLsrx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16617 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16621 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16624 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16665 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16669 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16672 "hcs12x.cc"
	);
private:
};

class OpLsry : public Operation
{
public:
	OpLsry(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16684 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16688 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16691 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16732 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16736 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16739 "hcs12x.cc"
	);
private:
};

class OpRor_ext : public Operation
{
public:
	OpRor_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16752 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16756 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16759 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16800 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16804 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16807 "hcs12x.cc"
	);
private:
};

class OpRor_idx : public Operation
{
public:
	OpRor_idx(CodeType const& code, uint16_t addr);
	~OpRor_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 16819 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 16824 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16828 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16831 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16872 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16876 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16879 "hcs12x.cc"
	);
private:
};

class OpRora : public Operation
{
public:
	OpRora(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16891 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16895 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16898 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 16939 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 16943 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 16946 "hcs12x.cc"
	);
private:
};

class OpRorb : public Operation
{
public:
	OpRorb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 16958 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 16962 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 16965 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17006 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17010 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17013 "hcs12x.cc"
	);
private:
};

class OpRorw_ext : public Operation
{
public:
	OpRorw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17026 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17030 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17033 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17074 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17078 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17081 "hcs12x.cc"
	);
private:
};

class OpRorw_idx : public Operation
{
public:
	OpRorw_idx(CodeType const& code, uint16_t addr);
	~OpRorw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17093 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17098 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17102 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17105 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17146 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17150 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17153 "hcs12x.cc"
	);
private:
};

class OpRorx : public Operation
{
public:
	OpRorx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17165 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17169 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17172 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17213 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17217 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17220 "hcs12x.cc"
	);
private:
};

class OpRory : public Operation
{
public:
	OpRory(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17232 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17236 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17239 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17280 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17284 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17287 "hcs12x.cc"
	);
private:
};

class OpAsr_ext : public Operation
{
public:
	OpAsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17300 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17304 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17307 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17348 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17352 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17355 "hcs12x.cc"
	);
private:
};

class OpAsr_idx : public Operation
{
public:
	OpAsr_idx(CodeType const& code, uint16_t addr);
	~OpAsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17367 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17372 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17376 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17379 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17420 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17424 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17427 "hcs12x.cc"
	);
private:
};

class OpAsra : public Operation
{
public:
	OpAsra(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17439 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17443 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17446 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17487 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17491 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17494 "hcs12x.cc"
	);
private:
};

class OpAsrb : public Operation
{
public:
	OpAsrb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17506 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17510 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17513 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17554 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17558 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17561 "hcs12x.cc"
	);
private:
};

class OpAsrw_ext : public Operation
{
public:
	OpAsrw_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17574 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17578 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17581 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17622 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17626 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17629 "hcs12x.cc"
	);
private:
};

class OpAsrw_idx : public Operation
{
public:
	OpAsrw_idx(CodeType const& code, uint16_t addr);
	~OpAsrw_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17641 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17646 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17650 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17653 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17694 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17698 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17701 "hcs12x.cc"
	);
private:
};

class OpAsrx : public Operation
{
public:
	OpAsrx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17713 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17717 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17720 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17761 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17765 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17768 "hcs12x.cc"
	);
private:
};

class OpAsry : public Operation
{
public:
	OpAsry(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 17780 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17784 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17787 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17828 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17832 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17835 "hcs12x.cc"
	);
private:
};

class OpBtas_dir : public Operation
{
public:
	OpBtas_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	uint32_t msk8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17849 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17853 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17856 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17897 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17901 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17904 "hcs12x.cc"
	);
private:
};

class OpBtas_ext : public Operation
{
public:
	OpBtas_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t msk8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17918 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17922 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17925 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 17966 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 17970 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 17973 "hcs12x.cc"
	);
private:
};

class OpBtas_idx : public Operation
{
public:
	OpBtas_idx(CodeType const& code, uint16_t addr);
	~OpBtas_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 17985 "hcs12x.cc"
	* xb;
	uint32_t msk8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 17991 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 17995 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 17998 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18039 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18043 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18046 "hcs12x.cc"
	);
private:
};

class OpEmul : public Operation
{
public:
	OpEmul(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18058 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18062 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18065 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18106 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18110 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18113 "hcs12x.cc"
	);
private:
};

class OpEmuls : public Operation
{
public:
	OpEmuls(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18125 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18129 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18132 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18173 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18177 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18180 "hcs12x.cc"
	);
private:
};

class OpMul : public Operation
{
public:
	OpMul(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18192 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18196 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18199 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18240 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18244 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18247 "hcs12x.cc"
	);
private:
};

class OpEdiv : public Operation
{
public:
	OpEdiv(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18259 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18263 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18266 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18307 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18311 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18314 "hcs12x.cc"
	);
private:
};

class OpEdivs : public Operation
{
public:
	OpEdivs(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18326 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18330 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18333 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18374 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18378 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18381 "hcs12x.cc"
	);
private:
};

class OpFdiv : public Operation
{
public:
	OpFdiv(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18393 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18397 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18400 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18441 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18445 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18448 "hcs12x.cc"
	);
private:
};

class OpIdiv : public Operation
{
public:
	OpIdiv(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18460 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18464 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18467 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18508 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18512 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18515 "hcs12x.cc"
	);
private:
};

class OpIdivs : public Operation
{
public:
	OpIdivs(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 18527 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18531 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18534 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18575 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18579 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18582 "hcs12x.cc"
	);
private:
};

class OpEmacs : public Operation
{
public:
	OpEmacs(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18595 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18599 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18602 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18643 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18647 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18650 "hcs12x.cc"
	);
private:
};

class OpSbr : public Operation
{
public:
	OpSbr(CodeType const& code, uint16_t addr);
	uint32_t sel;
	int32_t rel8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18664 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18668 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18671 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18712 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18716 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18719 "hcs12x.cc"
	);
private:
};

class OpLbr : public Operation
{
public:
	OpLbr(CodeType const& code, uint16_t addr);
	uint32_t sel;
	int32_t rel16;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18733 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18737 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18740 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18781 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18785 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18788 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_dir : public Operation
{
public:
	OpBr_clr_set_dir(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr8a;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18804 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18808 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18811 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18852 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18856 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18859 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_ext : public Operation
{
public:
	OpBr_clr_set_ext(CodeType const& code, uint16_t addr);
	uint32_t b;
	uint32_t opr16a;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18875 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18879 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18882 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18923 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 18927 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 18930 "hcs12x.cc"
	);
private:
};

class OpBr_clr_set_idx : public Operation
{
public:
	OpBr_clr_set_idx(CodeType const& code, uint16_t addr);
	~OpBr_clr_set_idx();
	uint32_t b;
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 18943 "hcs12x.cc"
	* xb;
	uint32_t msk8;
	int32_t rel8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 18950 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 18954 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 18957 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 18998 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19002 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19005 "hcs12x.cc"
	);
private:
};

class OpBsr : public Operation
{
public:
	OpBsr(CodeType const& code, uint16_t addr);
	uint32_t rel8;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19018 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19022 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19025 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19066 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19070 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19073 "hcs12x.cc"
	);
private:
};

class OpCall_ext : public Operation
{
public:
	OpCall_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	uint32_t page;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19087 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19091 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19094 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19135 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19139 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19142 "hcs12x.cc"
	);
private:
};

class OpCall_16offset_idx_ind : public Operation
{
public:
	OpCall_16offset_idx_ind(CodeType const& code, uint16_t addr);
	uint32_t rr;
	int32_t n16;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19156 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19160 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19163 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19204 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19208 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19211 "hcs12x.cc"
	);
private:
};

class OpCall_accD_offset_idx_ind : public Operation
{
public:
	OpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr);
	uint32_t rr;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19224 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19228 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19231 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19272 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19276 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19279 "hcs12x.cc"
	);
private:
};

class OpJmp_ext : public Operation
{
public:
	OpJmp_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19292 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19296 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19299 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19340 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19344 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19347 "hcs12x.cc"
	);
private:
};

class OpJmp_idx : public Operation
{
public:
	OpJmp_idx(CodeType const& code, uint16_t addr);
	~OpJmp_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 19359 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19364 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19368 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19371 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19412 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19416 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19419 "hcs12x.cc"
	);
private:
};

class OpJsr_dir : public Operation
{
public:
	OpJsr_dir(CodeType const& code, uint16_t addr);
	uint32_t opr8a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19432 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19436 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19439 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19480 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19484 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19487 "hcs12x.cc"
	);
private:
};

class OpJsr_ext : public Operation
{
public:
	OpJsr_ext(CodeType const& code, uint16_t addr);
	uint32_t opr16a;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19500 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19504 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19507 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19548 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19552 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19555 "hcs12x.cc"
	);
private:
};

class OpJsr_idx : public Operation
{
public:
	OpJsr_idx(CodeType const& code, uint16_t addr);
	~OpJsr_idx();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 19567 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19572 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19576 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19579 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19620 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19624 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19627 "hcs12x.cc"
	);
private:
};

class OpRtc : public Operation
{
public:
	OpRtc(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 19639 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19643 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19646 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19687 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19691 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19694 "hcs12x.cc"
	);
private:
};

class OpRts : public Operation
{
public:
	OpRts(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 19706 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19710 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19713 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19754 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19758 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19761 "hcs12x.cc"
	);
private:
};

class OpLoop : public Operation
{
public:
	OpLoop(CodeType const& code, uint16_t addr);
	uint32_t b765;
	uint32_t b4;
	uint32_t b3;
	uint32_t b210;
	int32_t rel9;
	virtual
#line 69 "hcs12x.isa"
	void
#line 19778 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19782 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19785 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19826 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19830 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19833 "hcs12x.cc"
	);
private:
};

class OpPsha : public Operation
{
public:
	OpPsha(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 19845 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19849 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19852 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19893 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19897 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19900 "hcs12x.cc"
	);
private:
};

class OpPshb : public Operation
{
public:
	OpPshb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 19912 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19916 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19919 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 19960 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 19964 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 19967 "hcs12x.cc"
	);
private:
};

class OpPshc : public Operation
{
public:
	OpPshc(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 19979 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 19983 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 19986 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20027 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20031 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20034 "hcs12x.cc"
	);
private:
};

class OpPshcw : public Operation
{
public:
	OpPshcw(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20046 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20050 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20053 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20094 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20098 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20101 "hcs12x.cc"
	);
private:
};

class OpPshd : public Operation
{
public:
	OpPshd(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20113 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20117 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20120 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20161 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20165 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20168 "hcs12x.cc"
	);
private:
};

class OpPshx : public Operation
{
public:
	OpPshx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20180 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20184 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20187 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20228 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20232 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20235 "hcs12x.cc"
	);
private:
};

class OpPshy : public Operation
{
public:
	OpPshy(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20247 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20251 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20254 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20295 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20299 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20302 "hcs12x.cc"
	);
private:
};

class OpPula : public Operation
{
public:
	OpPula(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20314 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20318 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20321 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20362 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20366 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20369 "hcs12x.cc"
	);
private:
};

class OpPulb : public Operation
{
public:
	OpPulb(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20381 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20385 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20388 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20429 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20433 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20436 "hcs12x.cc"
	);
private:
};

class OpPulc : public Operation
{
public:
	OpPulc(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20448 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20452 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20455 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20496 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20500 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20503 "hcs12x.cc"
	);
private:
};

class OpPulcw : public Operation
{
public:
	OpPulcw(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20515 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20519 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20522 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20563 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20567 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20570 "hcs12x.cc"
	);
private:
};

class OpPuld : public Operation
{
public:
	OpPuld(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20582 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20586 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20589 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20630 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20634 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20637 "hcs12x.cc"
	);
private:
};

class OpPulx : public Operation
{
public:
	OpPulx(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20649 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20653 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20656 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20697 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20701 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20704 "hcs12x.cc"
	);
private:
};

class OpPuly : public Operation
{
public:
	OpPuly(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20716 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20720 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20723 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20764 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20768 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20771 "hcs12x.cc"
	);
private:
};

class OpMem : public Operation
{
public:
	OpMem(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20783 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20787 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20790 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20831 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20835 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20838 "hcs12x.cc"
	);
private:
};

class OpRev : public Operation
{
public:
	OpRev(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20850 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20854 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20857 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20898 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20902 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20905 "hcs12x.cc"
	);
private:
};

class OpRevw : public Operation
{
public:
	OpRevw(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20917 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20921 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20924 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 20965 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 20969 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 20972 "hcs12x.cc"
	);
private:
};

class OpWav : public Operation
{
public:
	OpWav(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 20984 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 20988 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 20991 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21032 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21036 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21039 "hcs12x.cc"
	);
private:
};

class OpWavr : public Operation
{
public:
	OpWavr(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21051 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21055 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21058 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21099 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21103 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21106 "hcs12x.cc"
	);
private:
};

class OpTbl : public Operation
{
public:
	OpTbl(CodeType const& code, uint16_t addr);
	~OpTbl();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 21118 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 21123 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21127 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21130 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21171 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21175 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21178 "hcs12x.cc"
	);
private:
};

class OpEtlb : public Operation
{
public:
	OpEtlb(CodeType const& code, uint16_t addr);
	~OpEtlb();
#line 1 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./xb_sub.isa"
	unisim::component::cxx::processor::hcs12x::XB::Operation
#line 21190 "hcs12x.cc"
	* xb;
	virtual
#line 69 "hcs12x.isa"
	void
#line 21195 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21199 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21202 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21243 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21247 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21250 "hcs12x.cc"
	);
private:
};

class OpNop : public Operation
{
public:
	OpNop(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21262 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21266 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21269 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21310 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21314 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21317 "hcs12x.cc"
	);
private:
};

class OpStop : public Operation
{
public:
	OpStop(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21329 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21333 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21336 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21377 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21381 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21384 "hcs12x.cc"
	);
private:
};

class OpWait : public Operation
{
public:
	OpWait(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21396 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21400 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21403 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21444 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21448 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21451 "hcs12x.cc"
	);
private:
};

class OpBgnd : public Operation
{
public:
	OpBgnd(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21463 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21467 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21470 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21511 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21515 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21518 "hcs12x.cc"
	);
private:
};

class OpRti : public Operation
{
public:
	OpRti(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21530 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21534 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21537 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21578 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21582 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21585 "hcs12x.cc"
	);
private:
};

class OpSwi : public Operation
{
public:
	OpSwi(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21597 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21601 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21604 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21645 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21649 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21652 "hcs12x.cc"
	);
private:
};

class OpSys : public Operation
{
public:
	OpSys(CodeType const& code, uint16_t addr);
	virtual
#line 69 "hcs12x.isa"
	void
#line 21664 "hcs12x.cc"
	disasm(
#line 69 "hcs12x.isa"
	ostream&
#line 21668 "hcs12x.cc"
#line 69 "hcs12x.isa"
	sink
#line 21671 "hcs12x.cc"
	);
	/*
	*  Copyright (c) 2008,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
	*/
	/* instruction endian */
	// subdecoder XB
	//subdecoder XB {unisim::component::cxx::processor::hcs12x::XB} [8;24]
	virtual
#line 63 "hcs12x.isa"
	void
#line 21712 "hcs12x.cc"
	execute(
#line 63 "hcs12x.isa"
	CPU *
#line 21716 "hcs12x.cc"
#line 63 "hcs12x.isa"
	cpu
#line 21719 "hcs12x.cc"
	);
private:
};

#line 69 "hcs12x.isa"
void
#line 21726 "hcs12x.cc"
OpCall_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 21730 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 21733 "hcs12x.cc"
)
{
#line 461 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "CALL ";
		xb->disasm(sink);
		sink << ", $" << std::hex << page;
	}
#line 21742 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 21746 "hcs12x.cc"
OpCall_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 21750 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 21753 "hcs12x.cc"
)
{
#line 467 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(page);
		cpu->setRegPC(xb->getEAddr(cpu));

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 21784 "hcs12x.cc"
}

static Operation *DecodeOpCall_idx(CodeType const& code, uint16_t addr)
{
	return new OpCall_idx(code, addr);
}

// TRAP: unimplemented opcode trap
// trapnum: Trap number $30-$39 or $40-$FF
#line 69 "hcs12x.isa"
void
#line 21796 "hcs12x.cc"
OpTrap::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 21800 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 21803 "hcs12x.cc"
)
{
#line 262 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "TRAP $" << std::hex << trapnum;
	}
#line 21810 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 21814 "hcs12x.cc"
OpTrap::execute(
#line 63 "hcs12x.isa"
CPU *
#line 21818 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 21821 "hcs12x.cc"
)
{
#line 266 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		if (((trapnum >= 0x30) && (trapnum <= 0x39)) || ((trapnum >= 0x40) && (trapnum <= 0xFF))) {
			/*
			* (SP) – $0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; YH : YL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; XH : XL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; B : A => (M(SP) : M(SP+1))
			* In case of CPU12
			* (SP) – $0001 => SP; CCR => (M(SP) )
			* In case of CPU12X
			* (SP) – $0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
			* 1 => I; 0 => U
			* (Trap Vector) => PC
			*/

			address_t addr = cpu->getRegSP();

			addr = addr - 2;
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegPC());

			addr = addr - 2;
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());

			addr = addr - 2;
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());

			addr = addr - 2;
			cpu->memWrite8(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());

			addr = addr - 2;
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());

			// 1 => I; 0 => U
			cpu->ccr->setI();
			cpu->ccr->setCCRHigh(cpu->ccr->getCCRHigh() & 0x7F);

			// (Trap Vector) => PC
			cpu->setRegPC(cpu->memRead16(CONFIG::TRAP_VECTOR_ADDRESS));
		}
	}
#line 21867 "hcs12x.cc"
}

static Operation *DecodeOpTrap(CodeType const& code, uint16_t addr)
{
	return new OpTrap(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// LDAA or LDAB #opr8i
#line 73 "hcs12x.isa"
uint8_t
#line 21911 "hcs12x.cc"
OpLdaab_imm::getCycles()
{
#line 38 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 1; }
#line 21916 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 21920 "hcs12x.cc"
OpLdaab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 21924 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 21927 "hcs12x.cc"
)
{
#line 40 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "LDAA #$";
			} else {
			sink << "LDAB #$";
		}
		sink  << std::hex << opr8i;
	}
#line 21939 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 21943 "hcs12x.cc"
OpLdaab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 21947 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 21950 "hcs12x.cc"
)
{
#line 49 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			cpu->setRegA(opr8i); // ldaa #<opr8i>
			} else {
			cpu->setRegB(opr8i); // ldab #<opr8i>
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (opr8i == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((opr8i & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 21965 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_imm(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_imm(code, addr);
}

// LDAA or LDAB opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 21976 "hcs12x.cc"
OpLdaab_dir::getCycles()
{
#line 64 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 21981 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 21985 "hcs12x.cc"
OpLdaab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 21989 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 21992 "hcs12x.cc"
)
{
#line 66 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "LDAA $";
			} else {
			sink << "LDAB $";
		}
		sink << std::hex << opr8a;
	}
#line 22004 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22008 "hcs12x.cc"
OpLdaab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22012 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22015 "hcs12x.cc"
)
{
#line 75 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 22032 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_dir(code, addr);
}

// LDAA or LDAB opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 22043 "hcs12x.cc"
OpLdaab_ext::getCycles()
{
#line 92 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 22048 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22052 "hcs12x.cc"
OpLdaab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22056 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22059 "hcs12x.cc"
)
{
#line 94 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "LDAA $";
			} else {
			sink << "LDAB $";
		}
		sink << std::hex << opr16a;
	}
#line 22071 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22075 "hcs12x.cc"
OpLdaab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22079 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22082 "hcs12x.cc"
)
{
#line 103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22101 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_ext(code, addr);
}

// LDAA or LDAB oprx0_xysp
// LDAA or LDAB oprx9,xysp
// LDAA or LDAB oprx16,xysp
// LDAA or LDAB [D,xysp]
// LDAA or LDAB [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 22116 "hcs12x.cc"
OpLdaab_idx::getCycles()
{
#line 126 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 22121 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22125 "hcs12x.cc"
OpLdaab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22129 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22132 "hcs12x.cc"
)
{
#line 128 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "LDAA ";
			} else {
			sink << "LDAB ";
		}
		xb->disasm(sink);
	}
#line 22144 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22148 "hcs12x.cc"
OpLdaab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22152 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22155 "hcs12x.cc"
)
{
#line 137 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t		val = cpu->memRead8(addr);

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22176 "hcs12x.cc"
}

static Operation *DecodeOpLdaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpLdaab_idx(code, addr);
}

// LDD or LDY or LDX or LDS #opr16i
#line 73 "hcs12x.isa"
uint8_t
#line 22187 "hcs12x.cc"
OpLd_dyxs_imm::getCycles()
{
#line 158 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 22192 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22196 "hcs12x.cc"
OpLd_dyxs_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22200 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22203 "hcs12x.cc"
)
{
#line 160 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "LDD #$"; break;
			case 1: sink << "LDY #$"; break;
			case 2: sink << "LDX #$"; break;
			case 3: sink << "LDS #$"; break;
		}
		sink << std::hex << opr16i;
	}
#line 22217 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22221 "hcs12x.cc"
OpLd_dyxs_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22225 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22228 "hcs12x.cc"
)
{
#line 171 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: cpu->setRegD(opr16i); break;
			case 1: cpu->setRegY(opr16i); break;
			case 2: cpu->setRegX(opr16i); break;
			case 3: cpu->setRegSP(opr16i); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (opr16i == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((opr16i & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22246 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_imm(code, addr);
}

// LDD or LDY or LDX or LDS opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 22257 "hcs12x.cc"
OpLd_dyxs_dir::getCycles()
{
#line 189 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 22262 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22266 "hcs12x.cc"
OpLd_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22270 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22273 "hcs12x.cc"
)
{
#line 191 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "LDD $"; break;
			case 1: sink << "LDY $"; break;
			case 2: sink << "LDX $"; break;
			case 3: sink << "LDS $"; break;
		}
		sink << std::hex << dd;
	}
#line 22287 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22291 "hcs12x.cc"
OpLd_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22295 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22298 "hcs12x.cc"
)
{
#line 202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(dd, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);
		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22317 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_dir(code, addr);
}

// LDD or LDY or LDX or LDS opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 22328 "hcs12x.cc"
OpLd_dyxs_ext::getCycles()
{
#line 221 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 22333 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22337 "hcs12x.cc"
OpLd_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22341 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22344 "hcs12x.cc"
)
{
#line 223 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "LDD $"; break;
			case 1: sink << "LDY $"; break;
			case 2: sink << "LDX $"; break;
			case 3: sink << "LDS $"; break;
		}

		sink << std::hex << opr16a;
	}
#line 22359 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22363 "hcs12x.cc"
OpLd_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22367 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22370 "hcs12x.cc"
)
{
#line 235 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22391 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_ext(code, addr);
}

// LDD or LDY or LDX or LDS oprx0_xysp
// LDD or LDY or LDX or LDS oprx9,xysp
// LDD or LDY or LDX or LDS oprx16,xysp
// LDD or LDY or LDX or LDS [D,xysp]
// LDD or LDY or LDX or LDS [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 22406 "hcs12x.cc"
OpLd_dyxs_idx::getCycles()
{
#line 260 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 22411 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22415 "hcs12x.cc"
OpLd_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22419 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22422 "hcs12x.cc"
)
{
#line 262 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "LDD "; break;
			case 1: sink << "LDY "; break;
			case 2: sink << "LDX "; break;
			case 3: sink << "LDS "; break;
		}

		xb->disasm(sink);
	}
#line 22437 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22441 "hcs12x.cc"
OpLd_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22445 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22448 "hcs12x.cc"
)
{
#line 274 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t	val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22470 "hcs12x.cc"
}

static Operation *DecodeOpLd_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpLd_dyxs_idx(code, addr);
}

// LEAY oprx0_xysp
// LEAY oprx9,xysp
// LEAY oprx16,xysp
#line 73 "hcs12x.isa"
uint8_t
#line 22483 "hcs12x.cc"
OpLeay::getCycles()
{
#line 299 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 22488 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22492 "hcs12x.cc"
OpLeay::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22496 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22499 "hcs12x.cc"
)
{
#line 301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		sink << "LEAY ";
		xb->disasm(sink);
	}
#line 22508 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22512 "hcs12x.cc"
OpLeay::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22516 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22519 "hcs12x.cc"
)
{
#line 307 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegY(addr);

	}
#line 22530 "hcs12x.cc"
}

static Operation *DecodeOpLeay(CodeType const& code, uint16_t addr)
{
	return new OpLeay(code, addr);
}

// LEAX oprx0_xysp
// LEAX oprx9,xysp
// LEAX oprx16,xysp
#line 73 "hcs12x.isa"
uint8_t
#line 22543 "hcs12x.cc"
OpLeax::getCycles()
{
#line 320 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 22548 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22552 "hcs12x.cc"
OpLeax::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22556 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22559 "hcs12x.cc"
)
{
#line 322 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		sink << "LEAX ";

		xb->disasm(sink);
	}
#line 22569 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22573 "hcs12x.cc"
OpLeax::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22577 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22580 "hcs12x.cc"
)
{
#line 329 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegX(addr);

	}
#line 22591 "hcs12x.cc"
}

static Operation *DecodeOpLeax(CodeType const& code, uint16_t addr)
{
	return new OpLeax(code, addr);
}

// LEAS  oprx0_xysp
// LEAS  oprx9,xysp
// LEAS  oprx16,xysp
#line 73 "hcs12x.isa"
uint8_t
#line 22604 "hcs12x.cc"
OpLeas::getCycles()
{
#line 342 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 2, 2, 0, 0); }
#line 22609 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22613 "hcs12x.cc"
OpLeas::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22617 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22620 "hcs12x.cc"
)
{
#line 344 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		sink << "LEAS ";

		xb->disasm(sink);
	}
#line 22630 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22634 "hcs12x.cc"
OpLeas::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22638 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22641 "hcs12x.cc"
)
{
#line 351 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		address_t	addr = xb->getEAddr(cpu);

		cpu->setRegSP(addr);

	}
#line 22652 "hcs12x.cc"
}

static Operation *DecodeOpLeas(CodeType const& code, uint16_t addr)
{
	return new OpLeas(code, addr);
}

// STAA or STAB opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 22663 "hcs12x.cc"
OpStaab_dir::getCycles()
{
#line 362 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 22668 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22672 "hcs12x.cc"
OpStaab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22676 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22679 "hcs12x.cc"
)
{
#line 364 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "STAA $";
			} else {
			sink << "STAB $";
		}
		sink << std::hex << opr8a;

	}
#line 22693 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22697 "hcs12x.cc"
OpStaab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22701 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22704 "hcs12x.cc"
)
{
#line 375 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }

		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22723 "hcs12x.cc"
}

static Operation *DecodeOpStaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpStaab_dir(code, addr);
}

// STAA or STAB opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 22734 "hcs12x.cc"
OpStaab_ext::getCycles()
{
#line 394 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 22739 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22743 "hcs12x.cc"
OpStaab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22747 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22750 "hcs12x.cc"
)
{
#line 396 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "STAA $";
			} else {
			sink << "STAB $";
		}
		sink << std::hex << opr16a;

	}
#line 22764 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22768 "hcs12x.cc"
OpStaab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22772 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22775 "hcs12x.cc"
)
{
#line 407 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t	val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22793 "hcs12x.cc"
}

static Operation *DecodeOpStaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpStaab_ext(code, addr);
}

// STAA or STAB oprx0_xysp
// STAA or STAB oprx9,xysp
// STAA or STAB oprx16,xysp
// STAA or STAB [D,xysp]
// STAA or STAB [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 22808 "hcs12x.cc"
OpStaab_idx::getCycles()
{
#line 430 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ XbModes::GetIDXCycles(xb->getXbMode(), 2, 3, 3, 4, 4); }
#line 22813 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22817 "hcs12x.cc"
OpStaab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22821 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22824 "hcs12x.cc"
)
{
#line 432 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "STAA ";
			} else {
			sink << "STAB ";
		}
		xb->disasm(sink);

	}
#line 22838 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22842 "hcs12x.cc"
OpStaab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22846 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22849 "hcs12x.cc"
)
{
#line 443 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t val;
		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22867 "hcs12x.cc"
}

static Operation *DecodeOpStaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpStaab_idx(code, addr);
}

// STD or STY or STX or STS opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 22878 "hcs12x.cc"
OpSt_dyxs_dir::getCycles()
{
#line 461 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 2; }
#line 22883 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22887 "hcs12x.cc"
OpSt_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22891 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22894 "hcs12x.cc"
)
{
#line 463 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "STD $"; break;
			case 1: sink << "STY $"; break;
			case 2: sink << "STX $"; break;
			case 3: sink << "STS $"; break;
		}

		sink << std::hex << opr8a;
	}
#line 22909 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22913 "hcs12x.cc"
OpSt_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22917 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22920 "hcs12x.cc"
)
{
#line 475 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 22944 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_dir(code, addr);
}

// STD or STY or STX or STS opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 22955 "hcs12x.cc"
OpSt_dyxs_ext::getCycles()
{
#line 499 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 22960 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 22964 "hcs12x.cc"
OpSt_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 22968 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 22971 "hcs12x.cc"
)
{
#line 501 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "STD $"; break;
			case 1: sink << "STY $"; break;
			case 2: sink << "STX $"; break;
			case 3: sink << "STS $"; break;
		}

		sink << std::hex << opr16a;

	}
#line 22987 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 22991 "hcs12x.cc"
OpSt_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 22995 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 22998 "hcs12x.cc"
)
{
#line 514 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val = 0;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23022 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_ext(code, addr);
}

// STD or STY or STX or STS oprx0_xysp
// STD or STY or STX or STS oprx9,xysp
// STD or STY or STX or STS oprx16,xysp
// STD or STY or STX or STS [D,xysp]
// STD or STY or STX or STS [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 23037 "hcs12x.cc"
OpSt_dyxs_idx::getCycles()
{
#line 543 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 2, 3, 3, 4, 4); }
#line 23042 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23046 "hcs12x.cc"
OpSt_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23050 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23053 "hcs12x.cc"
)
{
#line 545 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "STD "; break;
			case 1: sink << "STY "; break;
			case 2: sink << "STX "; break;
			case 3: sink << "STS "; break;
		}

		xb->disasm(sink);

	}
#line 23069 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23073 "hcs12x.cc"
OpSt_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23077 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23080 "hcs12x.cc"
)
{
#line 558 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t val = 0;

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}
		cpu->memWrite16(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23104 "hcs12x.cc"
}

static Operation *DecodeOpSt_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpSt_dyxs_idx(code, addr);
}

// **********  GLOBAL MEMORY MODE ***************
// GLDAA or GLDAB opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 23116 "hcs12x.cc"
OpGldaab_dir::getCycles()
{
#line 584 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23121 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23125 "hcs12x.cc"
OpGldaab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23129 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23132 "hcs12x.cc"
)
{
#line 586 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "GLDAA $";
			} else {
			sink << "GLDAB $";
		}
		sink << std::hex << opr8a;
	}
#line 23144 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23148 "hcs12x.cc"
OpGldaab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23152 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23155 "hcs12x.cc"
)
{
#line 595 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, W_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 23172 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_dir(code, addr);
}

// GLDAA or GLDAB opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 23183 "hcs12x.cc"
OpGldaab_ext::getCycles()
{
#line 612 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23188 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23192 "hcs12x.cc"
OpGldaab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23196 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23199 "hcs12x.cc"
)
{
#line 614 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "GLDAA $";
			} else {
			sink << "GLDAB $";
		}
		sink << std::hex << opr16a;
	}
#line 23211 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23215 "hcs12x.cc"
OpGldaab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23219 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23222 "hcs12x.cc"
)
{
#line 623 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint8_t val = cpu->memRead8(addr);
		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23241 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_ext(code, addr);
}

// GLDAA or GLDAB oprx0_xysp
// GLDAA or GLDAB oprx9,xysp
// GLDAA or GLDAB oprx16,xysp
// GLDAA or GLDAB [D,xysp]
// GLDAA or GLDAB [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 23256 "hcs12x.cc"
OpGldaab_idx::getCycles()
{
#line 646 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 23261 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23265 "hcs12x.cc"
OpGldaab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23269 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23272 "hcs12x.cc"
)
{
#line 648 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		if (b==0) {
			sink << "GLDAA ";
			} else {
			sink << "GLDAB ";
		}
		xb->disasm(sink);
	}
#line 23284 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23288 "hcs12x.cc"
OpGldaab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23292 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23295 "hcs12x.cc"
)
{
#line 657 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint8_t		val = cpu->memRead8(addr);

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23316 "hcs12x.cc"
}

static Operation *DecodeOpGldaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpGldaab_idx(code, addr);
}

// GLDD or GLDY or GLDX or GLDS opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 23327 "hcs12x.cc"
OpGld_dyxs_dir::getCycles()
{
#line 678 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23332 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23336 "hcs12x.cc"
OpGld_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23340 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23343 "hcs12x.cc"
)
{
#line 680 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GLDD $"; break;
			case 1: sink << "GLDY $"; break;
			case 2: sink << "GLDX $"; break;
			case 3: sink << "GLDS $"; break;
		}
		sink << std::hex << dd;
	}
#line 23357 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23361 "hcs12x.cc"
OpGld_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23365 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23368 "hcs12x.cc"
)
{
#line 691 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(dd, MEMORY::DIRECT, W_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);
		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23387 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_dir(code, addr);
}

// GLDD or GLDY or GLDX or GLDS opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 23398 "hcs12x.cc"
OpGld_dyxs_ext::getCycles()
{
#line 710 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23403 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23407 "hcs12x.cc"
OpGld_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23411 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23414 "hcs12x.cc"
)
{
#line 712 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GLDD $"; break;
			case 1: sink << "GLDY $"; break;
			case 2: sink << "GLDX $"; break;
			case 3: sink << "GLDS $"; break;
		}

		sink << std::hex << opr16a;
	}
#line 23429 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23433 "hcs12x.cc"
OpGld_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23437 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23440 "hcs12x.cc"
)
{
#line 724 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint16_t val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23461 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_ext(code, addr);
}

// GLDD or GLDY or GLDX or GLDS oprx0_xysp
// GLDD or GLDY or GLDX or GLDS oprx9,xysp
// GLDD or GLDY or GLDX or GLDS oprx16,xysp
// GLDD or GLDY or GLDX or GLDS [D,xysp]
// GLDD or GLDY or GLDX or GLDS [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 23476 "hcs12x.cc"
OpGld_dyxs_idx::getCycles()
{
#line 749 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 23481 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23485 "hcs12x.cc"
OpGld_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23489 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23492 "hcs12x.cc"
)
{
#line 751 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GLDD "; break;
			case 1: sink << "GLDY "; break;
			case 2: sink << "GLDX "; break;
			case 3: sink << "GLDS "; break;
		}

		xb->disasm(sink);
	}
#line 23507 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23511 "hcs12x.cc"
OpGld_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23515 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23518 "hcs12x.cc"
)
{
#line 763 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint16_t	val = cpu->memRead16(addr);

		switch (dyxs) {
			case 0: cpu->setRegD(val); break;
			case 1: cpu->setRegY(val); break;
			case 2: cpu->setRegX(val); break;
			case 3: cpu->setRegSP(val); break;
		}
		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23540 "hcs12x.cc"
}

static Operation *DecodeOpGld_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpGld_dyxs_idx(code, addr);
}

// GSTAA or GSTAB opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 23551 "hcs12x.cc"
OpGstaab_dir::getCycles()
{
#line 785 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 23556 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23560 "hcs12x.cc"
OpGstaab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23564 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23567 "hcs12x.cc"
)
{
#line 787 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "GSTAA $";
			} else {
			sink << "GSTAB $";
		}
		sink << std::hex << opr8a;

	}
#line 23581 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23585 "hcs12x.cc"
OpGstaab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23589 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23592 "hcs12x.cc"
)
{
#line 798 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, W_GLOBAL_ADDRESS);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }

		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23611 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_dir(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_dir(code, addr);
}

// GSTAA or GSTAB opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 23622 "hcs12x.cc"
OpGstaab_ext::getCycles()
{
#line 817 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23627 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23631 "hcs12x.cc"
OpGstaab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23635 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23638 "hcs12x.cc"
)
{
#line 819 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "GSTAA $";
			} else {
			sink << "GSTAB $";
		}
		sink << std::hex << opr16a;

	}
#line 23652 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23656 "hcs12x.cc"
OpGstaab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23660 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23663 "hcs12x.cc"
)
{
#line 830 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint8_t	val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23681 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_ext(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_ext(code, addr);
}

// GSTAA or GSTAB oprx0_xysp
// GSTAA or GSTAB oprx9,xysp
// GSTAA or GSTAB oprx16,xysp
// GSTAA or GSTAB [D,xysp]
// GSTAA or GSTAB [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 23696 "hcs12x.cc"
OpGstaab_idx::getCycles()
{
#line 853 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 4, 5, 5); }
#line 23701 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23705 "hcs12x.cc"
OpGstaab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23709 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23712 "hcs12x.cc"
)
{
#line 855 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		if (b==0) {
			sink << "GSTAA ";
			} else {
			sink << "GSTAB ";
		}
		xb->disasm(sink);

	}
#line 23726 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23730 "hcs12x.cc"
OpGstaab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23734 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23737 "hcs12x.cc"
)
{
#line 866 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint8_t val;
		if (b == 0) { val = cpu->getRegA(); } else { val = cpu->getRegB(); }
		cpu->memWrite8(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23755 "hcs12x.cc"
}

static Operation *DecodeOpGstaab_idx(CodeType const& code, uint16_t addr)
{
	return new OpGstaab_idx(code, addr);
}

// GSTD or GSTY or GSTX or GSTS opr8a
#line 73 "hcs12x.isa"
uint8_t
#line 23766 "hcs12x.cc"
OpGst_dyxs_dir::getCycles()
{
#line 884 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 3; }
#line 23771 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23775 "hcs12x.cc"
OpGst_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23779 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23782 "hcs12x.cc"
)
{
#line 886 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GSTD $"; break;
			case 1: sink << "GSTY $"; break;
			case 2: sink << "GSTX $"; break;
			case 3: sink << "GSTS $"; break;
		}

		sink << std::hex << opr8a;
	}
#line 23797 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23801 "hcs12x.cc"
OpGst_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23805 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23808 "hcs12x.cc"
)
{
#line 898 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, W_GLOBAL_ADDRESS);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23832 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_dir(code, addr);
}

// GSTD or GSTY or GSTX or GSTS opr16a
#line 73 "hcs12x.isa"
uint8_t
#line 23843 "hcs12x.cc"
OpGst_dyxs_ext::getCycles()
{
#line 922 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return 4; }
#line 23848 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23852 "hcs12x.cc"
OpGst_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23856 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23859 "hcs12x.cc"
)
{
#line 924 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GSTD $"; break;
			case 1: sink << "GSTY $"; break;
			case 2: sink << "GSTX $"; break;
			case 3: sink << "GSTS $"; break;
		}

		sink << std::hex << opr16a;

	}
#line 23875 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23879 "hcs12x.cc"
OpGst_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23883 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23886 "hcs12x.cc"
)
{
#line 937 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		uint16_t val = 0;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}

		cpu->memWrite16(addr, val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23910 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_ext(code, addr);
}

// GSTD or GSTY or GSTX or GSTS oprx0_xysp
// GSTD or GSTY or GSTX or GSTS oprx9,xysp
// GSTD or GSTY or GSTX or GSTS oprx16,xysp
// GSTD or GSTY or GSTX or GSTS [D,xysp]
// GSTD or GSTY or GSTX or GSTS [oprx16,xysp]
#line 73 "hcs12x.isa"
uint8_t
#line 23925 "hcs12x.cc"
OpGst_dyxs_idx::getCycles()
{
#line 966 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 4, 5, 5); }
#line 23930 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 23934 "hcs12x.cc"
OpGst_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 23938 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 23941 "hcs12x.cc"
)
{
#line 968 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		switch (dyxs) {
			case 0: sink << "GSTD "; break;
			case 1: sink << "GSTY "; break;
			case 2: sink << "GSTX "; break;
			case 3: sink << "GSTS "; break;
		}

		xb->disasm(sink);

	}
#line 23957 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 23961 "hcs12x.cc"
OpGst_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 23965 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 23968 "hcs12x.cc"
)
{
#line 981 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./load_store.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, W_GLOBAL_ADDRESS);

		uint16_t val = 0;

		switch (dyxs) {
			case 0: val = cpu->getRegD(); break;
			case 1: val = cpu->getRegY(); break;
			case 2: val = cpu->getRegX(); break;
			case 3: val = cpu->getRegSP(); break;
		}
		cpu->memWrite16(addr,val);

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	}
#line 23992 "hcs12x.cc"
}

static Operation *DecodeOpGst_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpGst_dyxs_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// A->B  or B->A
#line 73 "hcs12x.isa"
uint8_t
#line 24036 "hcs12x.cc"
OpT_ab_ba::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 2; }
#line 24041 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 24045 "hcs12x.cc"
OpT_ab_ba::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24049 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24052 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		if (b == 0) { sink << "TAB"; } else { sink << "TBA";}
	}
#line 24059 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24063 "hcs12x.cc"
OpT_ab_ba::execute(
#line 63 "hcs12x.isa"
CPU *
#line 24067 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 24070 "hcs12x.cc"
)
{
#line 45 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		uint8_t val;

		if (b == 0) {
			val = cpu->getRegA();
			cpu->setRegB(val);
			} else {
			val = cpu->getRegB();
			cpu->setRegA(val);
		}

		// CRC flags 0->V; setZ; setN
		cpu->ccr->clrV();
		if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }
	}
#line 24090 "hcs12x.cc"
}

static Operation *DecodeOpT_ab_ba(CodeType const& code, uint16_t addr)
{
	return new OpT_ab_ba(code, addr);
}

// ****************  Common Section to HCS12X ( HLS = 0 ) *************
// *************** HCS12 - EXCHANGE Instructions ************
// XGDX or XGDY or EXG
#line 73 "hcs12x.isa"
uint8_t
#line 24103 "hcs12x.cc"
OpExg_hcs12::getCycles()
{
#line 68 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 24108 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 69 "hcs12x.isa"
void
#line 24116 "hcs12x.cc"
OpExg_hcs12::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24120 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24123 "hcs12x.cc"
)
{
#line 74 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		// Exchange register Contents. There is no sign extension
		uint8_t eb = (1 << 8) | (lms << 4) | (0 << 3) | lls;

		switch (eb)
		{
			case 0xC5: sink << "XGDX "; break;
			case 0xC6: sink << "XGDY "; break;
			default: sink << "EXG ";
		}

		sink << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);

	}
#line 24157 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24161 "hcs12x.cc"
OpExg_hcs12::execute(
#line 63 "hcs12x.isa"
CPU *
#line 24165 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 24168 "hcs12x.cc"
)
{
#line 105 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Exchange register Contents. EXG r1, r2
		// There is no sign extension
		// Only CCR[7:0] is used for HCS12

		if (srcSize == dstSize) {
			// (r1) <=> (r2)
			if (srcSize == 8) {
				cpu->eblb->exchange<uint8_t>(rrSrc, rrDst);
				} else {
				cpu->eblb->exchange<uint16_t>(rrSrc, rrDst);
			}
		}
		else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
			// $00:(r1) => r2
			// if r2 isn't D then && (r2[7:0]) => r1
			uint16_t r1Val = 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc);
			uint8_t r2Val = (uint8_t) cpu->eblb->getter<uint16_t>(rrDst); // only low 8 bits
			cpu->eblb->setter<uint16_t>(rrDst, r1Val);
			if (rrDst != 4 /* reg D*/) {
				cpu->eblb->setter<uint16_t>(rrDst, r2Val);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8)) {
			// (r1[7:0]) => (r2)
			// if r2 is A then $00:(r2) => r1 else $FF:(r2) => r1
			uint8_t r1Val = cpu->eblb->getter<uint16_t>(rrSrc); // only low 8 bits
			uint8_t r2Val = cpu->eblb->getter<uint8_t>(rrDst);

			cpu->eblb->setter<uint8_t>(rrDst,r1Val);
			if (rrDst == 0 /*reg A*/) {
				cpu->eblb->setter<uint16_t>(rrSrc, 0x00FF & r2Val);
				} else {
				cpu->eblb->setter<uint16_t>(rrSrc, 0xFF00 | r2Val);
			}
		}

	}
#line 24236 "hcs12x.cc"
}

static Operation *DecodeOpExg_hcs12(CodeType const& code, uint16_t addr)
{
	return new OpExg_hcs12(code, addr);
}

// ***************************  TRANSFER Instructions
// TFR or TPA or TSX or TSY or TXS or TYS or SEX
#line 73 "hcs12x.isa"
uint8_t
#line 24248 "hcs12x.cc"
OpTfr_hcs12::getCycles()
{
#line 175 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 24253 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 69 "hcs12x.isa"
void
#line 24261 "hcs12x.cc"
OpTfr_hcs12::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24265 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24268 "hcs12x.cc"
)
{
#line 181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		// Transfer Register Content to Another register
		uint8_t eb = (0 << 8) | (lms << 4) | (0 << 3) | lls;

		switch (eb)
		{
			case 0x02: sink << "TAP "; break;
			case 0x20: sink << "TPA "; break;
			case 0x75: sink << "TSX "; break;
			case 0x76: sink << "TSY "; break;
			case 0x57: sink << "TXS "; break;
			case 0x67: sink << "TYS "; break;
			default: sink << "TFR " << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
		}

	}
#line 24304 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24308 "hcs12x.cc"
OpTfr_hcs12::execute(
#line 63 "hcs12x.isa"
CPU *
#line 24312 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 24315 "hcs12x.cc"
)
{
#line 215 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;
		uint8_t oldCCRLow = cpu->ccr->getCCRLow();

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
			case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Transfer Register Content to Another register
		// Only CCR[7:0] is used for HCS12

		/*
		if (sizeof(r1) && sizeof(r2) { (r1) => (r2)}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:r1 => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => (r2) }
		*/

		if (srcSize == dstSize) {
			// (r1) => (r2)
			if (srcSize == 8) {
				cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
				} else {
				cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
			}
		}
		else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
			// sex:r1 => r2
			if ((cpu->eblb->getter<uint8_t>(rrSrc) & 0x80) == 0x80)
			{ // if r1 bit 7 = 1 then $FF:(r1) => r2
				cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) | 0xFF00);
			} else
			{ // if r1 bit 7 = 1 then $00:(r1) => r2
				cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) & 0x00FF);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8)) {
			// (r1[7:0]) => (r2)
			uint8_t tmp = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
			cpu->eblb->setter<uint8_t>(rrDst, tmp);
		}

		if ((oldCCRLow & 0x40) == 0x00) {
			cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
		}
	}
#line 24384 "hcs12x.cc"
}

static Operation *DecodeOpTfr_hcs12(CodeType const& code, uint16_t addr)
{
	return new OpTfr_hcs12(code, addr);
}

// ****************  Specific Section to HCS12X ( HLS = 1 ) *************
// ***************  HCS12X - EXCHANGE Instructions ************
// XGDX or XGDY or EXG
#line 73 "hcs12x.isa"
uint8_t
#line 24397 "hcs12x.cc"
OpExg_hcs12x::getCycles()
{
#line 288 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 24402 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 69 "hcs12x.isa"
void
#line 24410 "hcs12x.cc"
OpExg_hcs12x::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24414 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24417 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lls = EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break;
			case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls = EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break;
			case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break;
			default: rrDst = lls;
		}

		// Exchange register Contents. There is no sign extension

		string srcName = EBLB::getRegName(rrSrc);
		string dstName = EBLB::getRegName(rrDst);

		if (lls == EBLB::EBLBMSLSRegs::A ) {
			if (lms == EBLB::EBLBMSLSRegs::CCR ) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "H";
			}
			} if (lls == EBLB::EBLBMSLSRegs::B) {
			if (lms == EBLB::EBLBMSLSRegs::CCR) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "L";
			}
		}

		if (lms == EBLB::EBLBMSLSRegs::A) {
			if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "H";
			}
			} if (lms == EBLB::EBLBMSLSRegs::B) {
			if (lls == EBLB::EBLBMSLSRegs::CCR) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "L";
			}
		}

		// Exchange Registers Contents
		uint8_t eb = (1 << 8) | (lms << 4) | (1 << 3) | lls;

		switch (eb)
		{
			case 0xC5: sink << "XGDX "; break;
			case 0xC6: sink << "XGDY "; break;
			default: sink << "EXG ";
		}

		sink << srcName << "," << dstName;

	}
#line 24517 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24521 "hcs12x.cc"
OpExg_hcs12x::execute(
#line 63 "hcs12x.isa"
CPU *
#line 24525 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 24528 "hcs12x.cc"
)
{
#line 391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRWord
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;
		uint8_t oldCCRLow = cpu->ccr->getCCRLow();

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Exchange register Contents. There is no sign extension
		/*
		if (sizeof(r1) && sizeof(r2) { (r1) <=> (r2)}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {$00:(r1) => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) <=> (r2) }
		*/

		if ( srcSize == dstSize)
		{
			// (r1) <=> (r2)
			if (srcSize == 8)
			{
				cpu->eblb->exchange<uint8_t>(rrSrc,rrDst);
			}
			else if (srcSize == 16)
			{
				cpu->eblb->exchange<uint16_t>(rrSrc,rrDst);
			}
		}
		else if ((srcSize == 8) && (dstSize == 16))
		{
			// $00:(r1) => r2
			/* if (r2 is D) $00:(r1) => D
			* else
			*  if (r1 is A) (r1) => r2H
			*  else if (r1 is B) (r1) => r2L
			*/
			if (rrDst == EBLB::EBLBRegs::D /* reg D */)
			{
				cpu->eblb->setter<uint16_t>(rrDst, 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
			}
			else if (rrSrc == EBLB::EBLBRegs::A)
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;  // get the lower bits
				tmp = tmp | (((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) << 8);
				cpu->eblb->setter<uint16_t>(rrDst, tmp);
			}
			else if (rrSrc == EBLB::EBLBRegs::B)
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00; // get higher bits
				tmp = tmp | ( 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
				cpu->eblb->setter<uint16_t>(rrDst, tmp);
			}
		}
		else if ((srcSize == 16) && (dstSize == 8))
		{
			// (r1[7:0]) <=> (r2)
			/*
			* if (r1 is D)
			* 	 if (r2 is A) (B) <=> (A)
			* 	 else $FF => A // r2 is B
			* else
			* 	 if (r2 is A) (r1H) <=> A
			* 	 else (r1L) <=> B
			*/
			if (rrSrc == EBLB::EBLBRegs::D) {
				if (rrDst == EBLB::EBLBRegs::A) {
					cpu->eblb->exchange<uint8_t>(EBLB::EBLBRegs::B, EBLB::EBLBRegs::A);
					} else if (rrDst == EBLB::EBLBRegs::B) {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, 0xFF);
				}
				} else {
				if (rrDst == EBLB::EBLBRegs::A) {
					uint16_t a16 = ((uint16_t) cpu->eblb->getter<uint16_t>(EBLB::EBLBRegs::A)) << 8;
					uint8_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) >> 8;
					uint16_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;

					cpu->eblb->setter<uint16_t>(rrSrc, a16 | r1l);
					cpu->eblb->setter<uint8_t>(rrDst, r1h);

					} else if (rrDst == EBLB::EBLBRegs::B) {
					uint16_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) & 0xFF00;
					uint8_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
					uint16_t b16 = 0x00FF & cpu->eblb->getter<uint8_t>(rrDst);

					cpu->eblb->setter<uint16_t>(rrSrc, r1h | b16);
					cpu->eblb->setter<uint16_t>(rrDst, r1l);
				}
			}
		}

		if ((oldCCRLow & 0x40) == 0x00) {
			cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
		}
	}
#line 24661 "hcs12x.cc"
}

static Operation *DecodeOpExg_hcs12x(CodeType const& code, uint16_t addr)
{
	return new OpExg_hcs12x(code, addr);
}

// *************************** HCS12X - TRANSFER Instructions
// TAP or TFR or TPA or TSX or TSY or TXS or TYS or SEX
#line 73 "hcs12x.isa"
uint8_t
#line 24673 "hcs12x.cc"
OpTfr_hcs12x::getCycles()
{
#line 526 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{ return 1; }
#line 24678 "hcs12x.cc"
}
/*
* lms sourceRegister index
* lls destinationRegister index
* */
#line 69 "hcs12x.isa"
void
#line 24686 "hcs12x.cc"
OpTfr_hcs12x::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24690 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24693 "hcs12x.cc"
)
{
#line 532 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{

		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
			case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lls = EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break;
			case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls = EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
			case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
				} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
				} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break;
			case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
				} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break;
			default: rrDst = lls;
		}

		// Transfer register Contents. TFR r1,r2

		string srcName = EBLB::getRegName(rrSrc);
		string dstName = EBLB::getRegName(rrDst);

		if (lls == EBLB::EBLBMSLSRegs::A ) {
			if (lms == EBLB::EBLBMSLSRegs::CCR ) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "H";
			}
			} if (lls == EBLB::EBLBMSLSRegs::B) {
			if (lms == EBLB::EBLBMSLSRegs::CCR) {
				srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
				srcName = srcName + "L";
			}
		}

		if (lms == EBLB::EBLBMSLSRegs::A) {
			if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "H";
			}
			} if (lms == EBLB::EBLBMSLSRegs::B) {
			if (lls == EBLB::EBLBMSLSRegs::CCR) {
				dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);
			}
			else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
				dstName = dstName + "L";
			}
		}

		// Transfer Register Content to Another register
		uint8_t eb = (0 << 8) | (lms << 4) | (1 << 3) | lls;

		switch (eb)
		{
			case 0x02: sink << "TAP "; break;
			case 0x20: sink << "TPA "; break;
			case 0x75: sink << "TSX "; break;
			case 0x76: sink << "TSY "; break;
			case 0x57: sink << "TXS "; break;
			case 0x67: sink << "TYS "; break;
			default: sink << "TFR ";
		}

		sink << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
	}
#line 24796 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24800 "hcs12x.cc"
OpTfr_hcs12x::execute(
#line 63 "hcs12x.isa"
CPU *
#line 24804 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 24807 "hcs12x.cc"
)
{
#line 632 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./transfer_exchange.isa"
	{
		/* Legal "rr" value for EBLB::setter and EBLB::getter functions
		* 0x00:A; 0x01:B;
		* 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
		* 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
		* 0x04:D; 0x05:X; 0x06:Y; 0x07:SP
		*/

		uint8_t srcSize, dstSize;
		uint8_t rrSrc, rrDst;

		// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
		switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrSrc = lms;
		}

		switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx:
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
				} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break;
			default: rrDst = lls;
		}

		srcSize = EBLB::getRegSize(rrSrc);
		dstSize = EBLB::getRegSize(rrDst);

		// Transfer Register Content to Another register
		/*
		if (sizeof(r1) && sizeof(r2) { (r1) => r2}
		else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:(r1) => r2}
		else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => r2 }
		*/

		if (srcSize == dstSize)
		{
			/*
			* if ((r1 is D) && ((r2 is X) || (r2 is Y))) then sex:D => r2
			* else (r1) => r2
			*/
			if ((rrSrc == EBLB::EBLBRegs::D) && ((rrDst == EBLB::EBLBRegs::X) || (rrDst == EBLB::EBLBRegs::Y)))
			{
				uint16_t tmp = cpu->eblb->getter<uint16_t>(rrSrc);
				if ((tmp & 0x8000) == 0x8000) {
					cpu->eblb->setter<uint16_t>(rrDst, 0xFFFF);
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, 0x0000);
				}
				} else {
				if (srcSize == 8) {
					cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
				}
			}

		} else if ((srcSize == 8) && (dstSize == 16))
		{
			/*
			* if (r2 is D) then sex:(r1) => r2
			* else
			*    if (r1 is A) then (r1) => r2H
			*    else (r1) => r2L
			* */
			if (rrDst == EBLB::EBLBRegs::D) {
				uint8_t tmp = cpu->eblb->getter<uint8_t>(rrSrc);
				if ((tmp & 0x80) == 0x80) {
					cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) | 0xFF00);
					} else {
					cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) & 0x00FF);
				}
				} else {
				uint8_t r1 = cpu->eblb->getter<uint8_t>(rrSrc);
				if (rrSrc == EBLB::EBLBRegs::A) {
					uint16_t r2l = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;
					cpu->eblb->setter<uint16_t>(rrDst, (((uint16_t) r1) << 8) | r2l);
					} else {
					uint16_t r2h = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00;
					cpu->eblb->setter<uint16_t>(rrDst, r2h | r1);
				}
			}
		} else if ((srcSize == 16) && (dstSize == 8))
		{
			/*
			* if (r2 is A) then
			*   if (r1 is D) then B => A
			*   else r1H => A
			* else
			*   r1L => B
			*/
			if (rrDst == EBLB::EBLBRegs::A) {
				if (rrSrc == EBLB::EBLBRegs::D) {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, cpu->eblb->getter<uint8_t>(EBLB::EBLBRegs::B));
					} else {
					cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) >> 8));
				}
				} else {
				cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::B, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) & 0x00FF));
			}
		}
	}
#line 24928 "hcs12x.cc"
}

static Operation *DecodeOpTfr_hcs12x(CodeType const& code, uint16_t addr)
{
	return new OpTfr_hcs12x(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
#line 73 "hcs12x.isa"
uint8_t
#line 24971 "hcs12x.cc"
OpMovb_0B::getCycles()
{
#line 38 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 3;}
#line 24976 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 24980 "hcs12x.cc"
OpMovb_0B::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 24984 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 24987 "hcs12x.cc"
)
{
#line 40 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVB #$" << std::hex << ii << ",$" << std::hex << opr16a;
	}
#line 24994 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 24998 "hcs12x.cc"
OpMovb_0B::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25002 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25005 "hcs12x.cc"
)
{
#line 44 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		cpu->memWrite8(addr,ii);
	}
#line 25014 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0B(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0B(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25024 "hcs12x.cc"
OpMovb_08::getCycles()
{
#line 52 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 4, 5); }
#line 25029 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25033 "hcs12x.cc"
OpMovb_08::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25037 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25040 "hcs12x.cc"
)
{
#line 54 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		sink << "MOVB #$" << std::hex << ii << ",";
		xb->disasm(sink);
	}
#line 25049 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25053 "hcs12x.cc"
OpMovb_08::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25057 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25060 "hcs12x.cc"
)
{
#line 60 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		cpu->memWrite8(addr,ii);
	}
#line 25069 "hcs12x.cc"
}

static Operation *DecodeOpMovb_08(CodeType const& code, uint16_t addr)
{
	return new OpMovb_08(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25079 "hcs12x.cc"
OpMovb_0C::getCycles()
{
#line 69 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 5; }
#line 25084 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25088 "hcs12x.cc"
OpMovb_0C::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25092 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25095 "hcs12x.cc"
)
{
#line 71 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVB $" << std::hex << opr16asrc << ",$" << std::hex << opr16adst;
	}
#line 25102 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25106 "hcs12x.cc"
OpMovb_0C::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25110 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25113 "hcs12x.cc"
)
{
#line 75 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = cpu->mmc->getPhysicalAddress(opr16asrc, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addrdst = cpu->mmc->getPhysicalAddress(opr16adst, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t tmp = cpu->memRead8(addrsrc);
		cpu->memWrite8(addrdst, tmp);
	}
#line 25124 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0C(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0C(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25134 "hcs12x.cc"
OpMovb_09::getCycles()
{
#line 85 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 5, 6); }
#line 25139 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25143 "hcs12x.cc"
OpMovb_09::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25147 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25150 "hcs12x.cc"
)
{
#line 87 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVB $" <<  std::hex << opr16asrc << ",";
		xb->disasm(sink);
	}
#line 25158 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25162 "hcs12x.cc"
OpMovb_09::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25166 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25169 "hcs12x.cc"
)
{
#line 92 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		uint16_t addr = xb->getEAddr(cpu);
		uint8_t tmp = cpu->memRead8(opr16asrc);
		cpu->memWrite8(addr, tmp);
	}
#line 25178 "hcs12x.cc"
}

static Operation *DecodeOpMovb_09(CodeType const& code, uint16_t addr)
{
	return new OpMovb_09(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25188 "hcs12x.cc"
OpMovb_0D::getCycles()
{
#line 100 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 6, 7); }
#line 25193 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25197 "hcs12x.cc"
OpMovb_0D::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25201 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25204 "hcs12x.cc"
)
{
#line 102 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVB ";
		xb->disasm(sink);
		sink << ",$" << std::hex << opr16a;
	}
#line 25213 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25217 "hcs12x.cc"
OpMovb_0D::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25221 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25224 "hcs12x.cc"
)
{
#line 108 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrxb = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addropr16a = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t tmp = cpu->memRead8(addrxb);
		cpu->memWrite8(addropr16a, tmp);
	}
#line 25235 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0D(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0D(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25245 "hcs12x.cc"
OpMovb_0A::getCycles()
{
#line 118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		switch (xbsrc->getXbMode())
		{
			case XbModes::IDX: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 4, 5, 5, 6);
			case XbModes::IDX1: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 5, 6, 6, 7);
			case XbModes::IDX2: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 5, 6, 6, 6);
			case XbModes::IDXD_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 6, 6, 7, 7, 8);
			case XbModes::IDX2_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 7, 7, 8, 8, 9);
			default: return 0x00;
		}
	}
#line 25261 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25265 "hcs12x.cc"
OpMovb_0A::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25269 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25272 "hcs12x.cc"
)
{
#line 131 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVB ";
		xbsrc->disasm(sink);
		sink << ",";
		xbdst->disasm(sink);
	}
#line 25282 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25286 "hcs12x.cc"
OpMovb_0A::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25290 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25293 "hcs12x.cc"
)
{
#line 138 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		uint16_t addrsrc = xbsrc->getEAddr(cpu);
		uint16_t addrdst = xbdst->getEAddr(cpu);
		uint8_t  tmp = cpu->memRead8(addrsrc);
		cpu->memWrite8(addrdst, tmp);
	}
#line 25303 "hcs12x.cc"
}

static Operation *DecodeOpMovb_0A(CodeType const& code, uint16_t addr)
{
	return new OpMovb_0A(code, addr);
}

// ---------
#line 73 "hcs12x.isa"
uint8_t
#line 25314 "hcs12x.cc"
OpMovw_03::getCycles()
{
#line 149 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 4; }
#line 25319 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25323 "hcs12x.cc"
OpMovw_03::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25327 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25330 "hcs12x.cc"
)
{
#line 151 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVW #$" << std::hex << opr16i << ",$" << std::hex << opr16a;
	}
#line 25337 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25341 "hcs12x.cc"
OpMovw_03::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25345 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25348 "hcs12x.cc"
)
{
#line 155 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		cpu->memWrite16(addr,opr16i);
	}
#line 25357 "hcs12x.cc"
}

static Operation *DecodeOpMovw_03(CodeType const& code, uint16_t addr)
{
	return new OpMovw_03(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25367 "hcs12x.cc"
OpMovw_04::getCycles()
{
#line 163 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return 5; }
#line 25372 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25376 "hcs12x.cc"
OpMovw_04::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25380 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25383 "hcs12x.cc"
)
{
#line 165 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVW $" << std::hex << opr16asrc << ",$" << std::hex << opr16adst;
	}
#line 25390 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25394 "hcs12x.cc"
OpMovw_04::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25398 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25401 "hcs12x.cc"
)
{
#line 169 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = cpu->mmc->getPhysicalAddress(opr16asrc, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addrdst = cpu->mmc->getPhysicalAddress(opr16adst, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addrdst, tmp);
	}
#line 25412 "hcs12x.cc"
}

static Operation *DecodeOpMovw_04(CodeType const& code, uint16_t addr)
{
	return new OpMovw_04(code, addr);
}

// Movw_18_00 IDX IDX1 IDX2 [D,IDX] [IDX2]
#line 69 "hcs12x.isa"
void
#line 25423 "hcs12x.cc"
OpMovw_00::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25427 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25430 "hcs12x.cc"
)
{
#line 181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		sink << "MOVW #$" << std::hex << opr16i << ",";
		xb->disasm(sink);
	}
#line 25439 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25443 "hcs12x.cc"
OpMovw_00::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25447 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25450 "hcs12x.cc"
)
{
#line 187 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		cpu->memWrite16(addr,opr16i);
	}
#line 25459 "hcs12x.cc"
}

static Operation *DecodeOpMovw_00(CodeType const& code, uint16_t addr)
{
	return new OpMovw_00(code, addr);
}

/*
* Movbw_18_01 IDX IDX1 IDX2 [D,IDX] [IDX2]
* */
#line 73 "hcs12x.isa"
uint8_t
#line 25472 "hcs12x.cc"
OpMovw_01::getCycles()
{
#line 200 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 5, 6); }
#line 25477 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25481 "hcs12x.cc"
OpMovw_01::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25485 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25488 "hcs12x.cc"
)
{
#line 202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVW $" <<  std::hex << opr16asrc << ",";
		xb->disasm(sink);
	}
#line 25496 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25500 "hcs12x.cc"
OpMovw_01::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25504 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25507 "hcs12x.cc"
)
{
#line 207 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addrsrc = cpu->mmc->getPhysicalAddress(opr16asrc, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addr, tmp);
	}
#line 25518 "hcs12x.cc"
}

static Operation *DecodeOpMovw_01(CodeType const& code, uint16_t addr)
{
	return new OpMovw_01(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25528 "hcs12x.cc"
OpMovw_05::getCycles()
{
#line 218 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 6, 7); }
#line 25533 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25537 "hcs12x.cc"
OpMovw_05::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25541 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25544 "hcs12x.cc"
)
{
#line 220 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVW ";
		xb->disasm(sink);
		sink << ",$" << std::hex << opr16a;
	}
#line 25553 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25557 "hcs12x.cc"
OpMovw_05::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25561 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25564 "hcs12x.cc"
)
{
#line 226 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrxb = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addrdst = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t tmp = cpu->memRead16(addrxb);
		cpu->memWrite16(addrdst, tmp);
	}
#line 25575 "hcs12x.cc"
}

static Operation *DecodeOpMovw_05(CodeType const& code, uint16_t addr)
{
	return new OpMovw_05(code, addr);
}

#line 73 "hcs12x.isa"
uint8_t
#line 25585 "hcs12x.cc"
OpMovw_02::getCycles()
{
#line 236 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{

		switch (xbsrc->getXbMode())
		{
			case XbModes::IDX: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 5, 5, 6, 7);
			case XbModes::IDX1: return XbModes::GetIDXCycles(xbdst->getXbMode(), 4, 5, 5, 6, 7);
			case XbModes::IDX2: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 6, 6, 7, 8);
			case XbModes::IDXD_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 5, 6, 6, 7, 8);
			case XbModes::IDX2_Ind: return XbModes::GetIDXCycles(xbdst->getXbMode(), 6, 7, 6, 8, 9);
			default: return 0x00;
		}
	}
#line 25601 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25605 "hcs12x.cc"
OpMovw_02::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25609 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25612 "hcs12x.cc"
)
{
#line 249 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		sink << "MOVW ";
		xbsrc->disasm(sink);
		sink << ",";
		xbdst->disasm(sink);
	}
#line 25622 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25626 "hcs12x.cc"
OpMovw_02::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25630 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25633 "hcs12x.cc"
)
{
#line 256 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./move.isa"
	{
		physical_address_t addrsrc = cpu->mmc->getPhysicalAddress(xbsrc->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		physical_address_t addrdst = cpu->mmc->getPhysicalAddress(xbdst->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t  tmp = cpu->memRead16(addrsrc);
		cpu->memWrite16(addrdst, tmp);
	}
#line 25644 "hcs12x.cc"
}

static Operation *DecodeOpMovw_02(CodeType const& code, uint16_t addr)
{
	return new OpMovw_02(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ***** Addition Instructions ****** */
// ABA ( A+B => A)
#line 73 "hcs12x.isa"
uint8_t
#line 25689 "hcs12x.cc"
OpAba::getCycles()
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 25694 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25698 "hcs12x.cc"
OpAba::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25702 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25705 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ABA";
	}
#line 25712 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25716 "hcs12x.cc"
OpAba::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25720 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25723 "hcs12x.cc"
)
{
#line 47 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t aVal = cpu->getRegA();
		uint8_t bVal = cpu->getRegB();

		Add8(result, carry_out, overflow, aVal, bVal, carry_in);

		cpu->setRegA(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((aVal & 0x0F)+(bVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (cpu->getRegA() & 0x08);
		uint8_t b3 = (cpu->getRegB() & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & b3) | (b3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();
	}
#line 25752 "hcs12x.cc"
}

static Operation *DecodeOpAba(CodeType const& code, uint16_t addr)
{
	return new OpAba(code, addr);
}

// ABX  (X+B => X)
#line 73 "hcs12x.isa"
uint8_t
#line 25763 "hcs12x.cc"
OpAbx::getCycles()
{
#line 76 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 25768 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25772 "hcs12x.cc"
OpAbx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25776 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25779 "hcs12x.cc"
)
{
#line 78 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ABX";
	}
#line 25786 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25790 "hcs12x.cc"
OpAbx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25794 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25797 "hcs12x.cc"
)
{
#line 82 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{

		uint16_t result;
		uint8_t carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t bVal = cpu->getRegB();
		uint16_t xVal = cpu->getRegX();

		Add16(result, carry_out, overflow,(uint16_t) bVal, xVal, carry_in);

		cpu->setRegX(result);

	}
#line 25815 "hcs12x.cc"
}

static Operation *DecodeOpAbx(CodeType const& code, uint16_t addr)
{
	return new OpAbx(code, addr);
}

// ABY (Y+B=>Y)
#line 73 "hcs12x.isa"
uint8_t
#line 25826 "hcs12x.cc"
OpAby::getCycles()
{
#line 100 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2;}
#line 25831 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25835 "hcs12x.cc"
OpAby::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25839 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25842 "hcs12x.cc"
)
{
#line 102 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ABY";
	}
#line 25849 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25853 "hcs12x.cc"
OpAby::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25857 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25860 "hcs12x.cc"
)
{
#line 105 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint16_t result;
		uint8_t carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t bVal = cpu->getRegB();
		uint16_t yVal = cpu->getRegY();

		Add16(result, carry_out, overflow, (uint16_t) bVal, yVal, carry_in);

		cpu->setRegY(result);

	}
#line 25877 "hcs12x.cc"
}

static Operation *DecodeOpAby(CodeType const& code, uint16_t addr)
{
	return new OpAby(code, addr);
}

// ADCab IMM  (regAB + ii + carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 25888 "hcs12x.cc"
OpAdc_ab_imm::getCycles()
{
#line 122 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1;}
#line 25893 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25897 "hcs12x.cc"
OpAdc_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25901 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25904 "hcs12x.cc"
)
{
#line 124 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADCA #$";
			} else {
			sink << "ADCB #$";
		}
		sink << std::hex << opr8i;
	}
#line 25916 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 25920 "hcs12x.cc"
OpAdc_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 25924 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 25927 "hcs12x.cc"
)
{
#line 133 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Add8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8i & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8i & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();
	}
#line 25964 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_imm(code, addr);
}

// ADCab DIR  (regAB + mem[regDirect:opr8a] + carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 25975 "hcs12x.cc"
OpAdc_ab_dir::getCycles()
{
#line 170 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3;}
#line 25980 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 25984 "hcs12x.cc"
OpAdc_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 25988 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 25991 "hcs12x.cc"
)
{
#line 172 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADCA $";
			} else {
			sink << "ADCB $";
		}
		sink << std::hex << opr8a;
	}
#line 26003 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26007 "hcs12x.cc"
OpAdc_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26011 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26014 "hcs12x.cc"
)
{
#line 181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26055 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_dir(code, addr);
}

// ADCab EXT (regAB + mem[opr16a] + carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26066 "hcs12x.cc"
OpAdc_ab_ext::getCycles()
{
#line 222 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3;}
#line 26071 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26075 "hcs12x.cc"
OpAdc_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26079 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26082 "hcs12x.cc"
)
{
#line 224 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADCA $";
			} else {
			sink << "ADCB $";
		}
		sink << std::hex << opr16a;
	}
#line 26094 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26098 "hcs12x.cc"
OpAdc_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26102 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26105 "hcs12x.cc"
)
{
#line 233 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr16aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr16aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26146 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_ext(code, addr);
}

// ADCab IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB + mem[xb->addrE] + carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26157 "hcs12x.cc"
OpAdc_ab_idx::getCycles()
{
#line 274 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 26162 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26166 "hcs12x.cc"
OpAdc_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26170 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26173 "hcs12x.cc"
)
{
#line 276 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "ADCA ";
			} else {
			sink << "ADCB ";
		}

		xb->disasm(sink);
	}
#line 26186 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26190 "hcs12x.cc"
OpAdc_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26194 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26197 "hcs12x.cc"
)
{
#line 286 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(xbVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (xbVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26239 "hcs12x.cc"
}

static Operation *DecodeOpAdc_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdc_ab_idx(code, addr);
}

// ADDab IMM (regAB + ii => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26250 "hcs12x.cc"
OpAdd_ab_imm::getCycles()
{
#line 328 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 26255 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26259 "hcs12x.cc"
OpAdd_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26263 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26266 "hcs12x.cc"
)
{
#line 330 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDA #$";
			} else {
			sink << "ADDB #$";
		}
		sink << std::hex << opr8i;
	}
#line 26278 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26282 "hcs12x.cc"
OpAdd_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26286 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26289 "hcs12x.cc"
)
{
#line 339 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Add8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8i & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8i & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26327 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_imm(code, addr);
}

// ADDab DIR  (regAB + mem[regDirect:opr8a] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26338 "hcs12x.cc"
OpAdd_ab_dir::getCycles()
{
#line 377 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 26343 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26347 "hcs12x.cc"
OpAdd_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26351 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26354 "hcs12x.cc"
)
{
#line 379 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDA $";
			} else {
			sink << "ADDB $";
		}
		sink << std::hex << opr8a;
	}
#line 26366 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26370 "hcs12x.cc"
OpAdd_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26374 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26377 "hcs12x.cc"
)
{
#line 388 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr8aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr8aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26418 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_dir(code, addr);
}

// ADDab EXT  (regAB + mem[opr16a] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26429 "hcs12x.cc"
OpAdd_ab_ext::getCycles()
{
#line 429 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 26434 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26438 "hcs12x.cc"
OpAdd_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26442 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26445 "hcs12x.cc"
)
{
#line 431 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDA $";
			} else {
			sink << "ADDB $";
		}
		sink << std::hex << opr16a;
	}
#line 26457 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26461 "hcs12x.cc"
OpAdd_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26465 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26468 "hcs12x.cc"
)
{
#line 440 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(opr16aVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (opr16aVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26509 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_ext(code, addr);
}

// ADDab  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB + mem[xb->addrE] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 26520 "hcs12x.cc"
OpAdd_ab_idx::getCycles()
{
#line 481 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 26525 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26529 "hcs12x.cc"
OpAdd_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26533 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26536 "hcs12x.cc"
)
{
#line 483 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "ADDA ";
			} else {
			sink << "ADDB ";
		}

		xb->disasm(sink);
	}
#line 26549 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26553 "hcs12x.cc"
OpAdd_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26557 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26560 "hcs12x.cc"
)
{
#line 493 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		Add8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

		//	if (((regVal & 0x0F)+(xbVal & 0x0F)) > 0x09) cpu->ccr->setH(); else cpu->ccr->clrH();

		uint8_t a3 = (regVal & 0x08);
		uint8_t m3 = (xbVal & 0x08);
		uint8_t _r3 = ~(result & 0x08);

		if ((a3 & m3) | (m3 & _r3) | (_r3 & a3)) cpu->ccr->setH(); else cpu->ccr->clrH();

	}
#line 26602 "hcs12x.cc"
}

static Operation *DecodeOpAdd_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_ab_idx(code, addr);
}

// ADED IMM  (regD + #opr16i + carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 26613 "hcs12x.cc"
OpAded_imm::getCycles()
{
#line 535 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 26618 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26622 "hcs12x.cc"
OpAded_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26626 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26629 "hcs12x.cc"
)
{
#line 537 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ADED #$" << std::hex << opr16i;
	}
#line 26636 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26640 "hcs12x.cc"
OpAded_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26644 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26647 "hcs12x.cc"
)
{
#line 541 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 26669 "hcs12x.cc"
}

static Operation *DecodeOpAded_imm(CodeType const& code, uint16_t addr)
{
	return new OpAded_imm(code, addr);
}

// ADED DIR  (regD + mem16[regDirect:opr8a] + carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 26680 "hcs12x.cc"
OpAded_dir::getCycles()
{
#line 563 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 26685 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26689 "hcs12x.cc"
OpAded_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26693 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26696 "hcs12x.cc"
)
{
#line 565 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ADED $" << std::hex << opr8a;
	}
#line 26703 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26707 "hcs12x.cc"
OpAded_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26711 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26714 "hcs12x.cc"
)
{
#line 569 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 26738 "hcs12x.cc"
}

static Operation *DecodeOpAded_dir(CodeType const& code, uint16_t addr)
{
	return new OpAded_dir(code, addr);
}

// ADED EXT (regD + mem16[opr16a] + carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 26749 "hcs12x.cc"
OpAded_ext::getCycles()
{
#line 593 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 26754 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26758 "hcs12x.cc"
OpAded_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26762 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26765 "hcs12x.cc"
)
{
#line 595 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ADED $" << std::hex << opr16a;
	}
#line 26772 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26776 "hcs12x.cc"
OpAded_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26780 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26783 "hcs12x.cc"
)
{
#line 599 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 26809 "hcs12x.cc"
}

static Operation *DecodeOpAded_ext(CodeType const& code, uint16_t addr)
{
	return new OpAded_ext(code, addr);
}

// ADED IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD + mem16[xb->addrE] + carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 26820 "hcs12x.cc"
OpAded_idx::getCycles()
{
#line 625 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 26825 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26829 "hcs12x.cc"
OpAded_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26833 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26836 "hcs12x.cc"
)
{
#line 627 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "ADED ";
		xb->disasm(sink);
	}
#line 26844 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26848 "hcs12x.cc"
OpAded_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26852 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26855 "hcs12x.cc"
)
{
#line 632 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 26880 "hcs12x.cc"
}

static Operation *DecodeOpAded_idx(CodeType const& code, uint16_t addr)
{
	return new OpAded_idx(code, addr);
}

// ADExy IMM  (regXY + #opr16i + carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 26891 "hcs12x.cc"
OpAde_xy_imm::getCycles()
{
#line 657 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 26896 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26900 "hcs12x.cc"
OpAde_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26904 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26907 "hcs12x.cc"
)
{
#line 659 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADEX #$";
			} else {
			sink << "ADEY #$";
		}
		sink << std::hex << opr16i;
	}
#line 26919 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 26923 "hcs12x.cc"
OpAde_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 26927 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 26930 "hcs12x.cc"
)
{
#line 668 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 26961 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_imm(code, addr);
}

// ADExy DIR  (regXY + mem16[regDirect:opr8a] + carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 26972 "hcs12x.cc"
OpAde_xy_dir::getCycles()
{
#line 699 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 26977 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 26981 "hcs12x.cc"
OpAde_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 26985 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 26988 "hcs12x.cc"
)
{
#line 701 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADEX $";
			} else {
			sink << "ADEY $";
		}
		sink << std::hex << opr8a;
	}
#line 27000 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27004 "hcs12x.cc"
OpAde_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27008 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27011 "hcs12x.cc"
)
{
#line 710 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27044 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_dir(code, addr);
}

// ADExy EXT (regXY + mem16[opr16a] + carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27055 "hcs12x.cc"
OpAde_xy_ext::getCycles()
{
#line 743 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 27060 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27064 "hcs12x.cc"
OpAde_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27068 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27071 "hcs12x.cc"
)
{
#line 745 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADEX $";
			} else {
			sink << "ADEY $";
		}
		sink << std::hex << opr16a;
	}
#line 27083 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27087 "hcs12x.cc"
OpAde_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27091 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27094 "hcs12x.cc"
)
{
#line 754 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 27128 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_ext(code, addr);
}

// ADExy IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY + mem16[xb->addrE] + carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27139 "hcs12x.cc"
OpAde_xy_idx::getCycles()
{
#line 788 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 27144 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27148 "hcs12x.cc"
OpAde_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27152 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27155 "hcs12x.cc"
)
{
#line 790 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "ADEX ";
			} else {
			sink << "ADEY ";
		}

		xb->disasm(sink);
	}
#line 27168 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27172 "hcs12x.cc"
OpAde_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27176 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27179 "hcs12x.cc"
)
{
#line 800 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27213 "hcs12x.cc"
}

static Operation *DecodeOpAde_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAde_xy_idx(code, addr);
}

// ADDxy IMM (regXY + #opr16i => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27224 "hcs12x.cc"
OpAdd_xy_imm::getCycles()
{
#line 835 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 27229 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27233 "hcs12x.cc"
OpAdd_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27237 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27240 "hcs12x.cc"
)
{
#line 837 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDX #$";
			} else {
			sink << "ADDY #$";
		}
		sink << std::hex << opr16i;
	}
#line 27252 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27256 "hcs12x.cc"
OpAdd_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27260 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27263 "hcs12x.cc"
)
{
#line 846 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Add16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 27294 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_imm(code, addr);
}

// ADDxy DIR  (regXY + mem16[regDirect:opr8a] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27305 "hcs12x.cc"
OpAdd_xy_dir::getCycles()
{
#line 877 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 27310 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27314 "hcs12x.cc"
OpAdd_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27318 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27321 "hcs12x.cc"
)
{
#line 879 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDX $";
			} else {
			sink << "ADDY $";
		}
		sink << std::hex << opr8a;
	}
#line 27333 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27337 "hcs12x.cc"
OpAdd_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27341 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27344 "hcs12x.cc"
)
{
#line 888 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;
		uint8_t carry_in = 0;
		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27377 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_dir(code, addr);
}

// ADDxy EXT  (regXY + mem16[opr16a] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27388 "hcs12x.cc"
OpAdd_xy_ext::getCycles()
{
#line 921 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 27393 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27397 "hcs12x.cc"
OpAdd_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27401 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27404 "hcs12x.cc"
)
{
#line 923 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "ADDX $";
			} else {
			sink << "ADDY $";
		}
		sink << std::hex << opr16a;
	}
#line 27416 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27420 "hcs12x.cc"
OpAdd_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27424 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27427 "hcs12x.cc"
)
{
#line 932 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 27461 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_ext(code, addr);
}

// ADDxy  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY + mem16[xb->addrE] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 27472 "hcs12x.cc"
OpAdd_xy_idx::getCycles()
{
#line 966 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 27477 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27481 "hcs12x.cc"
OpAdd_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27485 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27488 "hcs12x.cc"
)
{
#line 968 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "ADDX ";
			} else {
			sink << "ADDY ";
		}

		xb->disasm(sink);
	}
#line 27501 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27505 "hcs12x.cc"
OpAdd_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27509 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27512 "hcs12x.cc"
)
{
#line 978 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Add16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27546 "hcs12x.cc"
}

static Operation *DecodeOpAdd_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_xy_idx(code, addr);
}

// SUBD IMM or ADDD IMM (regD -+ ii => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 27557 "hcs12x.cc"
OpAdd_sub_d_imm::getCycles()
{
#line 1015 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2; }
#line 27562 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27566 "hcs12x.cc"
OpAdd_sub_d_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27570 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27573 "hcs12x.cc"
)
{
#line 1017 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBD #$";
			} else {
			sink << "ADDD #$";
		}
		sink << std::hex << opr16i;
	}
#line 27585 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27589 "hcs12x.cc"
OpAdd_sub_d_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27593 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27596 "hcs12x.cc"
)
{
#line 1026 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal = cpu->getRegD();

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr16i, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27621 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_imm(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_imm(code, addr);
}

// SUBD DIR or ADDD DIR  (regD -+ mem[regDirect+opr8a])
#line 73 "hcs12x.isa"
uint8_t
#line 27632 "hcs12x.cc"
OpAdd_sub_d_dir::getCycles()
{
#line 1051 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 27637 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27641 "hcs12x.cc"
OpAdd_sub_d_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27645 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27648 "hcs12x.cc"
)
{
#line 1053 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBD $";
			} else {
			sink << "ADDD $";
		}
		sink << std::hex << opr8a;
	}
#line 27660 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27664 "hcs12x.cc"
OpAdd_sub_d_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27668 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27671 "hcs12x.cc"
)
{
#line 1062 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr8aVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27699 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_dir(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_dir(code, addr);
}

// SUBD EXT or ADDD EXT (regD -+ mem[opr16a]) => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 27710 "hcs12x.cc"
OpAdd_sub_d_ext::getCycles()
{
#line 1090 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 27715 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27719 "hcs12x.cc"
OpAdd_sub_d_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27723 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27726 "hcs12x.cc"
)
{
#line 1092 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBD $";
			} else {
			sink << "ADDD $";
		}

		sink << std::hex << opr16a;

	}
#line 27740 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27744 "hcs12x.cc"
OpAdd_sub_d_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27748 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27751 "hcs12x.cc"
)
{
#line 1103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, opr16aVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27779 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_ext(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_ext(code, addr);
}

// SUBD/ADDD  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD -+ mem[xb->addrE] => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 27790 "hcs12x.cc"
OpAdd_sub_d_idx::getCycles()
{
#line 1131 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 27795 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27799 "hcs12x.cc"
OpAdd_sub_d_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27803 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27806 "hcs12x.cc"
)
{
#line 1133 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBD ";
			} else {
			sink << "ADDD ";
		}

		xb->disasm(sink);
	}
#line 27819 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27823 "hcs12x.cc"
OpAdd_sub_d_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27827 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27830 "hcs12x.cc"
)
{
#line 1143 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);
			} else {
			Add16(result, carry_out, overflow, regVal, xbVal, carry_in);
		}

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27858 "hcs12x.cc"
}

static Operation *DecodeOpAdd_sub_d_idx(CodeType const& code, uint16_t addr)
{
	return new OpAdd_sub_d_idx(code, addr);
}

/* ****** Subtraction Instructions **** */
// SBA  (regA - regB => regA)
#line 73 "hcs12x.isa"
uint8_t
#line 27870 "hcs12x.cc"
OpSba::getCycles()
{
#line 1173 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 2; }
#line 27875 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27879 "hcs12x.cc"
OpSba::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27883 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27886 "hcs12x.cc"
)
{
#line 1175 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "SBA";
	}
#line 27893 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27897 "hcs12x.cc"
OpSba::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27901 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27904 "hcs12x.cc"
)
{
#line 1179 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in=0;
		uint8_t aVal = cpu->getRegA();
		uint8_t bVal = cpu->getRegB();

		Sub8(result, carry_out, overflow, aVal, bVal, carry_in);

		cpu->setRegA(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 27925 "hcs12x.cc"
}

static Operation *DecodeOpSba(CodeType const& code, uint16_t addr)
{
	return new OpSba(code, addr);
}

// SBCA/SBCB  IMM (regAB - ii - carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 27936 "hcs12x.cc"
OpSbc_ab_imm::getCycles()
{
#line 1200 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 27941 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 27945 "hcs12x.cc"
OpSbc_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 27949 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 27952 "hcs12x.cc"
)
{
#line 1202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBCA #$";
			} else {
			sink << "SBCB #$";
		}
		sink << std::hex << opr8i;
	}
#line 27964 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 27968 "hcs12x.cc"
OpSbc_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 27972 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 27975 "hcs12x.cc"
)
{
#line 1211 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28004 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_imm(code, addr);
}

// SBCA/SBCB  DIR  (regAB - mem[regDirect:opr8a] - carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 28015 "hcs12x.cc"
OpSbc_ab_dir::getCycles()
{
#line 1240 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28020 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28024 "hcs12x.cc"
OpSbc_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28028 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28031 "hcs12x.cc"
)
{
#line 1242 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBCA $";
			} else {
			sink << "SBCB $";
		}
		sink << std::hex << opr8a;
	}
#line 28043 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28047 "hcs12x.cc"
OpSbc_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28051 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28054 "hcs12x.cc"
)
{
#line 1251 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28085 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_dir(code, addr);
}

// SBCA/SBCB  EXT (regAB - mem[opr16a] - carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 28096 "hcs12x.cc"
OpSbc_ab_ext::getCycles()
{
#line 1282 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28101 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28105 "hcs12x.cc"
OpSbc_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28109 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28112 "hcs12x.cc"
)
{
#line 1284 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBCA $";
			} else {
			sink << "SBCB $";
		}
		sink << std::hex << opr16a;
	}
#line 28124 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28128 "hcs12x.cc"
OpSbc_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28132 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28135 "hcs12x.cc"
)
{
#line 1293 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28167 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_ext(code, addr);
}

// SBCA/SBCB IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB - mem[xb->addrE] - carry => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 28178 "hcs12x.cc"
OpSbc_ab_idx::getCycles()
{
#line 1325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 28183 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28187 "hcs12x.cc"
OpSbc_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28191 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28194 "hcs12x.cc"
)
{
#line 1327 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "SBCA ";
			} else {
			sink << "SBCB ";
		}

		xb->disasm(sink);
	}
#line 28207 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28211 "hcs12x.cc"
OpSbc_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28215 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28218 "hcs12x.cc"
)
{
#line 1337 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = cpu->ccr->getC();

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28251 "hcs12x.cc"
}

static Operation *DecodeOpSbc_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbc_ab_idx(code, addr);
}

// SBED  IMM (regD - #opr16i - carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 28262 "hcs12x.cc"
OpSbed_imm::getCycles()
{
#line 1370 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28267 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28271 "hcs12x.cc"
OpSbed_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28275 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28278 "hcs12x.cc"
)
{
#line 1372 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "SBED #$" << std::hex << opr16i;
	}
#line 28285 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28289 "hcs12x.cc"
OpSbed_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28293 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28296 "hcs12x.cc"
)
{
#line 1376 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28317 "hcs12x.cc"
}

static Operation *DecodeOpSbed_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbed_imm(code, addr);
}

// SBED  DIR  (regD - mem16[regDirect:opr8a] - carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 28328 "hcs12x.cc"
OpSbed_dir::getCycles()
{
#line 1397 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 28333 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28337 "hcs12x.cc"
OpSbed_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28341 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28344 "hcs12x.cc"
)
{
#line 1399 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "SBED $" << std::hex << opr8a;
	}
#line 28351 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28355 "hcs12x.cc"
OpSbed_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28359 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28362 "hcs12x.cc"
)
{
#line 1403 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28386 "hcs12x.cc"
}

static Operation *DecodeOpSbed_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbed_dir(code, addr);
}

// SBED  EXT (regD - mem16[opr16a] - carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 28397 "hcs12x.cc"
OpSbed_ext::getCycles()
{
#line 1427 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 28402 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28406 "hcs12x.cc"
OpSbed_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28410 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28413 "hcs12x.cc"
)
{
#line 1429 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "SBED $" << std::hex << opr16a;
	}
#line 28420 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28424 "hcs12x.cc"
OpSbed_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28428 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28431 "hcs12x.cc"
)
{
#line 1433 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28456 "hcs12x.cc"
}

static Operation *DecodeOpSbed_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbed_ext(code, addr);
}

// SBED IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regD - mem16[xb->addrE] - carry => regD)
#line 73 "hcs12x.isa"
uint8_t
#line 28467 "hcs12x.cc"
OpSbed_idx::getCycles()
{
#line 1458 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 28472 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28476 "hcs12x.cc"
OpSbed_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28480 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28483 "hcs12x.cc"
)
{
#line 1460 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "SBED ";
		xb->disasm(sink);
	}
#line 28491 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28495 "hcs12x.cc"
OpSbed_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28499 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28502 "hcs12x.cc"
)
{
#line 1465 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal = cpu->getRegD();

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		cpu->setRegD(result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28527 "hcs12x.cc"
}

static Operation *DecodeOpSbed_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbed_idx(code, addr);
}

// SBEX/SBEY  IMM (regXY - #opr16i - carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 28538 "hcs12x.cc"
OpSbe_xy_imm::getCycles()
{
#line 1490 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28543 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28547 "hcs12x.cc"
OpSbe_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28551 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28554 "hcs12x.cc"
)
{
#line 1492 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBEX #$";
			} else {
			sink << "SBEY #$";
		}
		sink << std::hex << opr16i;
	}
#line 28566 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28570 "hcs12x.cc"
OpSbe_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28574 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28577 "hcs12x.cc"
)
{
#line 1501 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28607 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_imm(code, addr);
}

// SBEX/SBEY  DIR  (regXY - mem16[regDirect:opr8a] - carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 28618 "hcs12x.cc"
OpSbe_xy_dir::getCycles()
{
#line 1531 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 28623 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28627 "hcs12x.cc"
OpSbe_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28631 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28634 "hcs12x.cc"
)
{
#line 1533 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBEX $";
			} else {
			sink << "SBEY $";
		}
		sink << std::hex << opr8a;
	}
#line 28646 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28650 "hcs12x.cc"
OpSbe_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28654 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28657 "hcs12x.cc"
)
{
#line 1542 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28689 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_dir(code, addr);
}

// SBEX/SBEY  EXT (regXY - mem16[opr16a] - carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 28700 "hcs12x.cc"
OpSbe_xy_ext::getCycles()
{
#line 1574 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 28705 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28709 "hcs12x.cc"
OpSbe_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28713 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28716 "hcs12x.cc"
)
{
#line 1576 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SBEX $";
			} else {
			sink << "SBEY $";
		}
		sink << std::hex << opr16a;
	}
#line 28728 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28732 "hcs12x.cc"
OpSbe_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28736 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28739 "hcs12x.cc"
)
{
#line 1585 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28772 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_ext(code, addr);
}

// SBEX/SBEY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY - mem16[xb->addrE] - carry => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 28783 "hcs12x.cc"
OpSbe_xy_idx::getCycles()
{
#line 1618 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 28788 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28792 "hcs12x.cc"
OpSbe_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28796 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28799 "hcs12x.cc"
)
{
#line 1620 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "SBEX ";
			} else {
			sink << "SBEY ";
		}

		xb->disasm(sink);
	}
#line 28812 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28816 "hcs12x.cc"
OpSbe_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28820 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28823 "hcs12x.cc"
)
{
#line 1630 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = cpu->ccr->getC();

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 28857 "hcs12x.cc"
}

static Operation *DecodeOpSbe_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpSbe_xy_idx(code, addr);
}

// SUBA/SUBB  IMM (regAB - ii => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 28868 "hcs12x.cc"
OpSub_ab_imm::getCycles()
{
#line 1664 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 1; }
#line 28873 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28877 "hcs12x.cc"
OpSub_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28881 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28884 "hcs12x.cc"
)
{
#line 1666 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBA #$";
			} else {
			sink << "SUBB #$";
		}
		sink << std::hex << opr8i;
	}
#line 28896 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28900 "hcs12x.cc"
OpSub_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28904 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28907 "hcs12x.cc"
)
{
#line 1675 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 28937 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_imm(code, addr);
}

// SUBA/SUBB  DIR  (regAB - mem[regDirect:opr8a] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 28948 "hcs12x.cc"
OpSub_ab_dir::getCycles()
{
#line 1705 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 28953 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 28957 "hcs12x.cc"
OpSub_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 28961 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 28964 "hcs12x.cc"
)
{
#line 1707 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBA $";
			} else {
			sink << "SUBB $";
		}
		sink << std::hex << opr8a;
	}
#line 28976 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 28980 "hcs12x.cc"
OpSub_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 28984 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 28987 "hcs12x.cc"
)
{
#line 1716 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;
		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29019 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_dir(code, addr);
}

// SUBA/SUBB  EXT (regAB - mem[opr16a] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 29030 "hcs12x.cc"
OpSub_ab_ext::getCycles()
{
#line 1748 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 29035 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29039 "hcs12x.cc"
OpSub_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29043 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29046 "hcs12x.cc"
)
{
#line 1750 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBA $";
			} else {
			sink << "SUBB $";
		}
		sink << std::hex << opr16a;
	}
#line 29058 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29062 "hcs12x.cc"
OpSub_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29066 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29069 "hcs12x.cc"
)
{
#line 1759 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29102 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_ext(code, addr);
}

// SUBA/SUBB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regAB - mem[xb->addrE] => regAB)
#line 73 "hcs12x.isa"
uint8_t
#line 29113 "hcs12x.cc"
OpSub_ab_idx::getCycles()
{
#line 1792 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 29118 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29122 "hcs12x.cc"
OpSub_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29126 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29129 "hcs12x.cc"
)
{
#line 1794 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "SUBA ";
			} else {
			sink << "SUBB ";
		}

		xb->disasm(sink);
	}
#line 29142 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29146 "hcs12x.cc"
OpSub_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29150 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29153 "hcs12x.cc"
)
{
#line 1804 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t result, carry_out, overflow;

		uint8_t carry_in = 0;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 29186 "hcs12x.cc"
}

static Operation *DecodeOpSub_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpSub_ab_idx(code, addr);
}

// ******************************
// SUBX/SUBY  IMM (regXy - opr16i => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 29198 "hcs12x.cc"
OpSub_xy_imm::getCycles()
{
#line 1839 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 29203 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29207 "hcs12x.cc"
OpSub_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29211 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29214 "hcs12x.cc"
)
{
#line 1841 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBX #$";
			} else {
			sink << "SUBY #$";
		}
		sink << std::hex << opr16i;
	}
#line 29226 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29230 "hcs12x.cc"
OpSub_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29234 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29237 "hcs12x.cc"
)
{
#line 1850 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29268 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_imm(code, addr);
}

// SUBX/SUBY  DIR  (regXY - mem16[regDirect:opr8a] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 29279 "hcs12x.cc"
OpSub_xy_dir::getCycles()
{
#line 1881 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29284 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29288 "hcs12x.cc"
OpSub_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29292 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29295 "hcs12x.cc"
)
{
#line 1883 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBX $";
			} else {
			sink << "SUBY $";
		}
		sink << std::hex << opr8a;
	}
#line 29307 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29311 "hcs12x.cc"
OpSub_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29315 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29318 "hcs12x.cc"
)
{
#line 1892 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;
		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}


		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29351 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_dir(code, addr);
}

// SUBX/SUBY  EXT (regXY - mem16[opr16a] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 29362 "hcs12x.cc"
OpSub_xy_ext::getCycles()
{
#line 1925 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 4; }
#line 29367 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29371 "hcs12x.cc"
OpSub_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29375 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29378 "hcs12x.cc"
)
{
#line 1927 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0) {
			sink << "SUBX $";
			} else {
			sink << "SUBY $";
		}
		sink << std::hex << opr16a;
	}
#line 29390 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29394 "hcs12x.cc"
OpSub_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29398 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29401 "hcs12x.cc"
)
{
#line 1936 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;
		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29435 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_ext(code, addr);
}

// SUBX/SUBY  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]  (regXY - mem16[xb->addrE] => regXY)
#line 73 "hcs12x.isa"
uint8_t
#line 29446 "hcs12x.cc"
OpSub_xy_idx::getCycles()
{
#line 1970 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 29451 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29455 "hcs12x.cc"
OpSub_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29459 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29462 "hcs12x.cc"
)
{
#line 1972 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		if (b==0){
			sink << "SUBX ";
			} else {
			sink << "SUBY ";
		}

		xb->disasm(sink);
	}
#line 29475 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29479 "hcs12x.cc"
OpSub_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29483 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29486 "hcs12x.cc"
)
{
#line 1982 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		uint8_t carry_in = 0;

		uint16_t regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 29520 "hcs12x.cc"
}

static Operation *DecodeOpSub_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpSub_xy_idx(code, addr);
}

/* ***** Binary-Coded Decimal Instructions ****** */
// DAA (if (ccr.H) then regA + 0x6 => regA)
#line 73 "hcs12x.isa"
uint8_t
#line 29532 "hcs12x.cc"
OpDaa::getCycles()
{
#line 2019 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{ return 3; }
#line 29537 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29541 "hcs12x.cc"
OpDaa::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29545 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29548 "hcs12x.cc"
)
{
#line 2021 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		sink << "DAA";
	}
#line 29555 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29559 "hcs12x.cc"
OpDaa::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29563 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29566 "hcs12x.cc"
)
{
#line 2025 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./addition_substraction.isa"
	{
		uint8_t hBit = cpu->ccr->getH();
		uint8_t cBit = cpu->ccr->getC();

		uint8_t overflow, carry_out, result;

		uint8_t aVal = cpu->getRegA();
		uint8_t a74 =  aVal >> 4;
		uint8_t a30 = aVal & 0x0F;


		if ((cBit == 0) &&
		(a74 < 0x9) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x06, 0x00);
			cpu->setRegA(result);
			cpu->ccr->clrC();
		}

		if ((cBit == 0) &&
		(a74 < 0xA) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x06, 0x00);
			cpu->setRegA(result);
			cpu->ccr->clrC();
		}

		if ((cBit == 0) &&
		(a74 > 0x9) &&
		(hBit == 0) &&
		(a30 < 0xA))
		{
			Add8(result, carry_out, overflow, aVal, 0x60, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 0) &&
		(a74 > 0x8) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 0) &&
		(a74 > 0x9) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x3) &&
		(hBit == 0) &&
		(a30 < 0xA))
		{
			Add8(result, carry_out, overflow, aVal, 0x60, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x3) &&
		(hBit == 0) &&
		(a30 > 0x9))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((cBit == 1) &&
		(a74 < 0x4) &&
		(hBit == 1) &&
		(a30 < 0x4))
		{
			Add8(result, carry_out, overflow, aVal, 0x66, 0x00);
			cpu->setRegA(result);
			cpu->ccr->setC();
		}

		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
		if (result == 0x00) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if (overflow == 1) cpu->ccr->setV(); else cpu->ccr->clrV();
	}
#line 29665 "hcs12x.cc"
}

static Operation *DecodeOpDaa(CodeType const& code, uint16_t addr)
{
	return new OpDaa(code, addr);
}

// -*- C++ -*-
// DEC EXT
#line 73 "hcs12x.isa"
uint8_t
#line 29677 "hcs12x.cc"
OpDec_ext::getCycles()
{
#line 6 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 4; }
#line 29682 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29686 "hcs12x.cc"
OpDec_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29690 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29693 "hcs12x.cc"
)
{
#line 8 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DEC $" << std::hex << opr16a;
	}
#line 29700 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29704 "hcs12x.cc"
OpDec_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29708 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29711 "hcs12x.cc"
)
{
#line 12 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29729 "hcs12x.cc"
}

static Operation *DecodeOpDec_ext(CodeType const& code, uint16_t addr)
{
	return new OpDec_ext(code, addr);
}

// DEC IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 29740 "hcs12x.cc"
OpDec_idx::getCycles()
{
#line 30 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 29745 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29749 "hcs12x.cc"
OpDec_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29753 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29756 "hcs12x.cc"
)
{
#line 32 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DEC ";
		xb->disasm(sink);
	}
#line 29764 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29768 "hcs12x.cc"
OpDec_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29772 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29775 "hcs12x.cc"
)
{
#line 37 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29795 "hcs12x.cc"
}

static Operation *DecodeOpDec_idx(CodeType const& code, uint16_t addr)
{
	return new OpDec_idx(code, addr);
}

// DECA  or DECB
#line 73 "hcs12x.isa"
uint8_t
#line 29806 "hcs12x.cc"
OpDec_ab::getCycles()
{
#line 57 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 29811 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29815 "hcs12x.cc"
OpDec_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29819 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29822 "hcs12x.cc"
)
{
#line 59 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		if (b == 0) {
			sink << "DECA";
			} else {
			sink << "DECB";
		}
	}
#line 29833 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29837 "hcs12x.cc"
OpDec_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29841 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29844 "hcs12x.cc"
)
{
#line 67 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint8_t result, carry_out, overflow, carry_in;

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		carry_in = 0;
		Sub8(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 29874 "hcs12x.cc"
}

static Operation *DecodeOpDec_ab(CodeType const& code, uint16_t addr)
{
	return new OpDec_ab(code, addr);
}

// DECW  EXT
#line 73 "hcs12x.isa"
uint8_t
#line 29885 "hcs12x.cc"
OpDecw_ext::getCycles()
{
#line 97 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 5; }
#line 29890 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29894 "hcs12x.cc"
OpDecw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29898 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29901 "hcs12x.cc"
)
{
#line 99 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DECW $" << std::hex << opr16a;
	}
#line 29908 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29912 "hcs12x.cc"
OpDecw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29916 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29919 "hcs12x.cc"
)
{
#line 103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);
		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 29939 "hcs12x.cc"
}

static Operation *DecodeOpDecw_ext(CodeType const& code, uint16_t addr)
{
	return new OpDecw_ext(code, addr);
}

// DECW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 29950 "hcs12x.cc"
OpDecw_idx::getCycles()
{
#line 123 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 5, 7, 7); }
#line 29955 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 29959 "hcs12x.cc"
OpDecw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 29963 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 29966 "hcs12x.cc"
)
{
#line 125 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DECW ";
		xb->disasm(sink);
	}
#line 29974 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 29978 "hcs12x.cc"
OpDecw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 29982 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 29985 "hcs12x.cc"
)
{
#line 130 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30006 "hcs12x.cc"
}

static Operation *DecodeOpDecw_idx(CodeType const& code, uint16_t addr)
{
	return new OpDecw_idx(code, addr);
}

// DECX or DECY
#line 73 "hcs12x.isa"
uint8_t
#line 30017 "hcs12x.cc"
OpDec_xy::getCycles()
{
#line 151 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 30022 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30026 "hcs12x.cc"
OpDec_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30030 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30033 "hcs12x.cc"
)
{
#line 153 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		if (b==0) {
			sink << "DECX";
			} else {
			sink << "DECY";
		}
	}
#line 30044 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30048 "hcs12x.cc"
OpDec_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30052 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30055 "hcs12x.cc"
)
{
#line 161 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Sub16(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 30086 "hcs12x.cc"
}

static Operation *DecodeOpDec_xy(CodeType const& code, uint16_t addr)
{
	return new OpDec_xy(code, addr);
}

// DES
#line 73 "hcs12x.isa"
uint8_t
#line 30097 "hcs12x.cc"
OpDes::getCycles()
{
#line 192 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 30102 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30106 "hcs12x.cc"
OpDes::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30110 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30113 "hcs12x.cc"
)
{
#line 194 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DES";
	}
#line 30120 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30124 "hcs12x.cc"
OpDes::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30128 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30131 "hcs12x.cc"
)
{
#line 198 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		cpu->setRegSP(cpu->getRegSP() - 1);
	}
#line 30138 "hcs12x.cc"
}

static Operation *DecodeOpDes(CodeType const& code, uint16_t addr)
{
	return new OpDes(code, addr);
}

// DEX
#line 73 "hcs12x.isa"
uint8_t
#line 30149 "hcs12x.cc"
OpDex::getCycles()
{
#line 205 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 30154 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30158 "hcs12x.cc"
OpDex::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30162 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30165 "hcs12x.cc"
)
{
#line 207 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DEX";
	}
#line 30172 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30176 "hcs12x.cc"
OpDex::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30180 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30183 "hcs12x.cc"
)
{
#line 211 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegX();
		val--;
		cpu->setRegX(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 30193 "hcs12x.cc"
}

static Operation *DecodeOpDex(CodeType const& code, uint16_t addr)
{
	return new OpDex(code, addr);
}

// DEY
#line 73 "hcs12x.isa"
uint8_t
#line 30204 "hcs12x.cc"
OpDey::getCycles()
{
#line 221 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 30209 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30213 "hcs12x.cc"
OpDey::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30217 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30220 "hcs12x.cc"
)
{
#line 223 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "DEY";
	}
#line 30227 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30231 "hcs12x.cc"
OpDey::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30235 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30238 "hcs12x.cc"
)
{
#line 227 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegY();
		val--;
		cpu->setRegY(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 30248 "hcs12x.cc"
}

static Operation *DecodeOpDey(CodeType const& code, uint16_t addr)
{
	return new OpDey(code, addr);
}

/* ********* Increment Instructions ****** */
// INC EXT
#line 73 "hcs12x.isa"
uint8_t
#line 30260 "hcs12x.cc"
OpInc_ext::getCycles()
{
#line 239 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 4; }
#line 30265 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30269 "hcs12x.cc"
OpInc_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30273 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30276 "hcs12x.cc"
)
{
#line 241 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INC $" << std::hex << opr16a;
	}
#line 30283 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30287 "hcs12x.cc"
OpInc_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30291 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30294 "hcs12x.cc"
)
{
#line 245 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Add8(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30313 "hcs12x.cc"
}

static Operation *DecodeOpInc_ext(CodeType const& code, uint16_t addr)
{
	return new OpInc_ext(code, addr);
}

// INC IDX or IDX or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 30324 "hcs12x.cc"
OpInc_idx::getCycles()
{
#line 264 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 4, 5, 6, 6); }
#line 30329 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30333 "hcs12x.cc"
OpInc_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30337 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30340 "hcs12x.cc"
)
{
#line 266 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INC ";
		xb->disasm(sink);
	}
#line 30348 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30352 "hcs12x.cc"
OpInc_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30356 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30359 "hcs12x.cc"
)
{
#line 271 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Add8(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite8(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30379 "hcs12x.cc"
}

static Operation *DecodeOpInc_idx(CodeType const& code, uint16_t addr)
{
	return new OpInc_idx(code, addr);
}

// INCA  or INCB
#line 73 "hcs12x.isa"
uint8_t
#line 30390 "hcs12x.cc"
OpInc_ab::getCycles()
{
#line 291 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 30395 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30399 "hcs12x.cc"
OpInc_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30403 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30406 "hcs12x.cc"
)
{
#line 293 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		if (b == 0) {
			sink << "INCA";
			} else {
			sink << "INCB";
		}
	}
#line 30417 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30421 "hcs12x.cc"
OpInc_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30425 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30428 "hcs12x.cc"
)
{
#line 301 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint8_t result, carry_out, overflow, carry_in;

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		carry_in = 0;
		Add8(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 30458 "hcs12x.cc"
}

static Operation *DecodeOpInc_ab(CodeType const& code, uint16_t addr)
{
	return new OpInc_ab(code, addr);
}

// INCW EXT
#line 73 "hcs12x.isa"
uint8_t
#line 30469 "hcs12x.cc"
OpIncw_ext::getCycles()
{
#line 331 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 5; }
#line 30474 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30478 "hcs12x.cc"
OpIncw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30482 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30485 "hcs12x.cc"
)
{
#line 333 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INCW $" << std::hex << opr16a;
	}
#line 30492 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30496 "hcs12x.cc"
OpIncw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30500 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30503 "hcs12x.cc"
)
{
#line 337 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);
		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, opr16aVal, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30523 "hcs12x.cc"
}

static Operation *DecodeOpIncw_ext(CodeType const& code, uint16_t addr)
{
	return new OpIncw_ext(code, addr);
}

// INCW  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 30534 "hcs12x.cc"
OpIncw_idx::getCycles()
{
#line 357 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 30539 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30543 "hcs12x.cc"
OpIncw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30547 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30550 "hcs12x.cc"
)
{
#line 359 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INCW ";
		xb->disasm(sink);
	}
#line 30558 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30562 "hcs12x.cc"
OpIncw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30566 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30569 "hcs12x.cc"
)
{
#line 364 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, val, 1, carry_in);

		cpu->memWrite16(addr, result);

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30590 "hcs12x.cc"
}

static Operation *DecodeOpIncw_idx(CodeType const& code, uint16_t addr)
{
	return new OpIncw_idx(code, addr);
}

// INX or INCY
#line 73 "hcs12x.isa"
uint8_t
#line 30601 "hcs12x.cc"
OpInc_xy::getCycles()
{
#line 385 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 30606 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30610 "hcs12x.cc"
OpInc_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30614 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30617 "hcs12x.cc"
)
{
#line 387 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		if (b==0) {
			sink << "INCX";
			} else {
			sink << "INCY";
		}
	}
#line 30628 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30632 "hcs12x.cc"
OpInc_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30636 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30639 "hcs12x.cc"
)
{
#line 395 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		uint16_t result;
		uint8_t carry_out, overflow, carry_in;

		carry_in = 0;
		Add16(result, carry_out, overflow, val, 1, carry_in);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 30670 "hcs12x.cc"
}

static Operation *DecodeOpInc_xy(CodeType const& code, uint16_t addr)
{
	return new OpInc_xy(code, addr);
}

// INS
#line 73 "hcs12x.isa"
uint8_t
#line 30681 "hcs12x.cc"
OpIns::getCycles()
{
#line 426 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 2; }
#line 30686 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30690 "hcs12x.cc"
OpIns::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30694 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30697 "hcs12x.cc"
)
{
#line 428 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INS";
	}
#line 30704 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30708 "hcs12x.cc"
OpIns::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30712 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30715 "hcs12x.cc"
)
{
#line 432 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		cpu->setRegSP(cpu->getRegSP() + 1);
	}
#line 30722 "hcs12x.cc"
}

static Operation *DecodeOpIns(CodeType const& code, uint16_t addr)
{
	return new OpIns(code, addr);
}

// INX
#line 73 "hcs12x.isa"
uint8_t
#line 30733 "hcs12x.cc"
OpInx::getCycles()
{
#line 439 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 30738 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30742 "hcs12x.cc"
OpInx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30746 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30749 "hcs12x.cc"
)
{
#line 441 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INX";
	}
#line 30756 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30760 "hcs12x.cc"
OpInx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30764 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30767 "hcs12x.cc"
)
{
#line 445 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegX();
		val++;
		cpu->setRegX(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 30777 "hcs12x.cc"
}

static Operation *DecodeOpInx(CodeType const& code, uint16_t addr)
{
	return new OpInx(code, addr);
}

// INY
#line 73 "hcs12x.isa"
uint8_t
#line 30788 "hcs12x.cc"
OpIny::getCycles()
{
#line 455 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{ return 1; }
#line 30793 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30797 "hcs12x.cc"
OpIny::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30801 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30804 "hcs12x.cc"
)
{
#line 457 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		sink << "INY";
	}
#line 30811 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30815 "hcs12x.cc"
OpIny::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30819 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30822 "hcs12x.cc"
)
{
#line 461 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./decrement_increment.isa"
	{
		uint16_t val = cpu->getRegY();
		val++;
		cpu->setRegY(val);
		if (val == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
	}
#line 30832 "hcs12x.cc"
}

static Operation *DecodeOpIny(CodeType const& code, uint16_t addr)
{
	return new OpIny(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// CBA
#line 73 "hcs12x.isa"
uint8_t
#line 30876 "hcs12x.cc"
OpCba::getCycles()
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 30881 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30885 "hcs12x.cc"
OpCba::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30889 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30892 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		sink << "CBA";
	}
#line 30899 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30903 "hcs12x.cc"
OpCba::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30907 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30910 "hcs12x.cc"
)
{
#line 45 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;

		carry_in = 0;
		Sub8(result, carry_out, overflow, cpu->getRegA(), cpu->getRegB(), carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30925 "hcs12x.cc"
}

static Operation *DecodeOpCba(CodeType const& code, uint16_t addr)
{
	return new OpCba(code, addr);
}

//  CMPab  IMM
#line 73 "hcs12x.isa"
uint8_t
#line 30936 "hcs12x.cc"
OpCmp_ab_imm::getCycles()
{
#line 61 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 1; }
#line 30941 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 30945 "hcs12x.cc"
OpCmp_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 30949 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 30952 "hcs12x.cc"
)
{
#line 63 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		if (b==0) {
			sink << "CMPA #$";
			} else {
			sink << "CMPB #$";
		}
		sink << std::hex << opr8i;
	}
#line 30964 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 30968 "hcs12x.cc"
OpCmp_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 30972 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 30975 "hcs12x.cc"
)
{
#line 72 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 30997 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_imm(code, addr);
}

// CMPab  DIR
#line 73 "hcs12x.isa"
uint8_t
#line 31008 "hcs12x.cc"
OpCmp_ab_dir::getCycles()
{
#line 94 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31013 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31017 "hcs12x.cc"
OpCmp_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31021 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31024 "hcs12x.cc"
)
{
#line 96 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		if (b==0) {
			sink << "CMPA $";
			} else {
			sink << "CMPB $";
		}
		sink << std::hex << opr8a;
	}
#line 31036 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31040 "hcs12x.cc"
OpCmp_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31044 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31047 "hcs12x.cc"
)
{
#line 105 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31071 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_dir(code, addr);
}

// CMPab  EXT
#line 73 "hcs12x.isa"
uint8_t
#line 31082 "hcs12x.cc"
OpCmp_ab_ext::getCycles()
{
#line 129 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31087 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31091 "hcs12x.cc"
OpCmp_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31095 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31098 "hcs12x.cc"
)
{
#line 131 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		if (b==0) {
			sink << "CMPA $";
			} else {
			sink << "CMPB $";
		}
		sink << std::hex << opr16a;
	}
#line 31110 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31114 "hcs12x.cc"
OpCmp_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31118 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31121 "hcs12x.cc"
)
{
#line 140 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t opr16aVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31146 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_ext(code, addr);
}

// CMPab  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 31157 "hcs12x.cc"
OpCmp_ab_idx::getCycles()
{
#line 165 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 31162 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31166 "hcs12x.cc"
OpCmp_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31170 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31173 "hcs12x.cc"
)
{
#line 167 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		if (b==0) {
			sink << "CMPA ";
			} else {
			sink << "CMPB ";
		}
		xb->disasm(sink);
	}
#line 31185 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31189 "hcs12x.cc"
OpCmp_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31193 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31196 "hcs12x.cc"
)
{
#line 176 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31220 "hcs12x.cc"
}

static Operation *DecodeOpCmp_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpCmp_ab_idx(code, addr);
}

// CPdyxs  IMM
#line 73 "hcs12x.isa"
uint8_t
#line 31231 "hcs12x.cc"
OpCp_dyxs_imm::getCycles()
{
#line 200 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 31236 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31240 "hcs12x.cc"
OpCp_dyxs_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31244 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31247 "hcs12x.cc"
)
{
#line 202 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPD #$"; break;
			case 1: sink << "CPY #$"; break;
			case 2: sink << "CPX #$"; break;
			case 3: sink << "CPS #$";
		}
		sink << std::hex << opr16i;
	}
#line 31260 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31264 "hcs12x.cc"
OpCp_dyxs_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31268 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31271 "hcs12x.cc"
)
{
#line 212 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31295 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_imm(code, addr);
}

// CPdyxs DIR
#line 73 "hcs12x.isa"
uint8_t
#line 31306 "hcs12x.cc"
OpCp_dyxs_dir::getCycles()
{
#line 236 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31311 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31315 "hcs12x.cc"
OpCp_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31319 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31322 "hcs12x.cc"
)
{
#line 238 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPD $"; break;
			case 1: sink << "CPY $"; break;
			case 2: sink << "CPX $"; break;
			case 3: sink << "CPS $";
		}
		sink << std::hex << opr8a;
	}
#line 31335 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31339 "hcs12x.cc"
OpCp_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31343 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31346 "hcs12x.cc"
)
{
#line 248 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		uint16_t opr8aVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		opr8aVal = cpu->memRead16(addr);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31373 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_dir(code, addr);
}

// CPdyxs EXT
#line 73 "hcs12x.isa"
uint8_t
#line 31384 "hcs12x.cc"
OpCp_dyxs_ext::getCycles()
{
#line 275 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31389 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31393 "hcs12x.cc"
OpCp_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31397 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31400 "hcs12x.cc"
)
{
#line 277 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPD $"; break;
			case 1: sink << "CPY $"; break;
			case 2: sink << "CPX $"; break;
			case 3: sink << "CPS $";
		}
		sink << std::hex << opr16a;
	}
#line 31413 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31417 "hcs12x.cc"
OpCp_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31421 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31424 "hcs12x.cc"
)
{
#line 287 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		uint16_t opr16aVal = cpu->memRead16(opr16a);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31449 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_ext(code, addr);
}

// CPdyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 31460 "hcs12x.cc"
OpCp_dyxs_idx::getCycles()
{
#line 312 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 31465 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31469 "hcs12x.cc"
OpCp_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31473 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31476 "hcs12x.cc"
)
{
#line 314 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPD "; break;
			case 1: sink << "CPY "; break;
			case 2: sink << "CPX "; break;
			case 3: sink << "CPS ";
		}
		xb->disasm(sink);
	}
#line 31489 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31493 "hcs12x.cc"
OpCp_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31497 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31500 "hcs12x.cc"
)
{
#line 324 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		carry_in = 0;
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31525 "hcs12x.cc"
}

static Operation *DecodeOpCp_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpCp_dyxs_idx(code, addr);
}

/* ****** Compare to memory with Borrow ********** */
// CPE_dyxs  IMM
#line 73 "hcs12x.isa"
uint8_t
#line 31537 "hcs12x.cc"
OpCpe_dyxs_imm::getCycles()
{
#line 351 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31542 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31546 "hcs12x.cc"
OpCpe_dyxs_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31550 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31553 "hcs12x.cc"
)
{
#line 353 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPED #$"; break;
			case 1: sink << "CPEY #$"; break;
			case 2: sink << "CPEX #$"; break;
			case 3: sink << "CPES #$";
		}
		sink << std::hex << opr16i;
	}
#line 31566 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31570 "hcs12x.cc"
OpCpe_dyxs_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31574 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31577 "hcs12x.cc"
)
{
#line 363 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;

		zeroBit = cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16i, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31602 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_imm(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_imm(code, addr);
}

// CPE_dyxs DIR
#line 73 "hcs12x.isa"
uint8_t
#line 31613 "hcs12x.cc"
OpCpe_dyxs_dir::getCycles()
{
#line 388 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 31618 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31622 "hcs12x.cc"
OpCpe_dyxs_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31626 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31629 "hcs12x.cc"
)
{
#line 390 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPED $"; break;
			case 1: sink << "CPEY $"; break;
			case 2: sink << "CPEX $"; break;
			case 3: sink << "CPES $";
		}
		sink << std::hex << opr8a;
	}
#line 31642 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31646 "hcs12x.cc"
OpCpe_dyxs_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31650 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31653 "hcs12x.cc"
)
{
#line 400 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		uint16_t opr8aVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		opr8aVal = cpu->memRead16(addr);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr8aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31681 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_dir(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_dir(code, addr);
}

// CPE_dyxs EXT
#line 73 "hcs12x.isa"
uint8_t
#line 31692 "hcs12x.cc"
OpCpe_dyxs_ext::getCycles()
{
#line 428 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 31697 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31701 "hcs12x.cc"
OpCpe_dyxs_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31705 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31708 "hcs12x.cc"
)
{
#line 430 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPED $"; break;
			case 1: sink << "CPEY $"; break;
			case 2: sink << "CPEX $"; break;
			case 3: sink << "CPES $";
		}
		sink << std::hex << opr16a;
	}
#line 31721 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31725 "hcs12x.cc"
OpCpe_dyxs_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31729 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31732 "hcs12x.cc"
)
{
#line 440 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		uint16_t opr16aVal = cpu->memRead16(opr16a);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, opr16aVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31758 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_ext(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_ext(code, addr);
}

// CPE_dyxs  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 31769 "hcs12x.cc"
OpCpe_dyxs_idx::getCycles()
{
#line 466 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 31774 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31778 "hcs12x.cc"
OpCpe_dyxs_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31782 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31785 "hcs12x.cc"
)
{
#line 468 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (dyxs) {
			case 0: sink << "CPED "; break;
			case 1: sink << "CPEY "; break;
			case 2: sink << "CPEX "; break;
			case 3: sink << "CPES ";
		}
		xb->disasm(sink);
	}
#line 31798 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31802 "hcs12x.cc"
OpCpe_dyxs_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31806 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31809 "hcs12x.cc"
)
{
#line 478 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in, zeroBit;
		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		zeroBit =  cpu->ccr->getZ();
		carry_in = cpu->ccr->getC();
		switch (dyxs) {
			case 0: regVal = cpu->getRegD(); break;
			case 1: regVal = cpu->getRegY(); break;
			case 2: regVal = cpu->getRegX(); break;
			case 3: regVal = cpu->getRegSP();
		}

		Sub16(result, carry_out, overflow, regVal, xbVal, carry_in);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (zeroBit && (result == 0)) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31835 "hcs12x.cc"
}

static Operation *DecodeOpCpe_dyxs_idx(CodeType const& code, uint16_t addr)
{
	return new OpCpe_dyxs_idx(code, addr);
}

/* ************ Test Instructions **************** */
// TST EXT
#line 73 "hcs12x.isa"
uint8_t
#line 31847 "hcs12x.cc"
OpTst_ext::getCycles()
{
#line 507 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 3; }
#line 31852 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31856 "hcs12x.cc"
OpTst_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31860 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31863 "hcs12x.cc"
)
{
#line 509 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		sink << "TST $" << std::hex << opr16a;
	}
#line 31870 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31874 "hcs12x.cc"
OpTst_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31878 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31881 "hcs12x.cc"
)
{
#line 513 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint8_t result;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);
		carry_in = 0;

		Sub8(result, carry_out, overflow, opr16aVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 31900 "hcs12x.cc"
}

static Operation *DecodeOpTst_ext(CodeType const& code, uint16_t addr)
{
	return new OpTst_ext(code, addr);
}

// TST IDX or IDX1 or IDX2 or [D,IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 31911 "hcs12x.cc"
OpTst_idx::getCycles()
{
#line 532 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 3, 3, 4, 6, 6); }
#line 31916 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31920 "hcs12x.cc"
OpTst_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31924 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31927 "hcs12x.cc"
)
{
#line 534 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		sink << "TST ";
		xb->disasm(sink);
	}
#line 31935 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 31939 "hcs12x.cc"
OpTst_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 31943 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 31946 "hcs12x.cc"
)
{
#line 539 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint8_t result;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		carry_in = 0;

		Sub8(result, carry_out, overflow, xbVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 31965 "hcs12x.cc"
}

static Operation *DecodeOpTst_idx(CodeType const& code, uint16_t addr)
{
	return new OpTst_idx(code, addr);
}

// TSTA or TSTB
#line 73 "hcs12x.isa"
uint8_t
#line 31976 "hcs12x.cc"
OpTst_ab::getCycles()
{
#line 558 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 1; }
#line 31981 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 31985 "hcs12x.cc"
OpTst_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 31989 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 31992 "hcs12x.cc"
)
{
#line 560 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		if (b==0) {
			sink << "TSTA ";
			} else {
			sink << "TSTB ";
		}
	}
#line 32003 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32007 "hcs12x.cc"
OpTst_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32011 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32014 "hcs12x.cc"
)
{
#line 568 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t result, carry_out, overflow, carry_in;
		uint8_t regVal;

		carry_in = 0;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, regVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32036 "hcs12x.cc"
}

static Operation *DecodeOpTst_ab(CodeType const& code, uint16_t addr)
{
	return new OpTst_ab(code, addr);
}

// TSTW EXT
#line 73 "hcs12x.isa"
uint8_t
#line 32047 "hcs12x.cc"
OpTstw_ext::getCycles()
{
#line 590 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 4; }
#line 32052 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32056 "hcs12x.cc"
OpTstw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32060 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32063 "hcs12x.cc"
)
{
#line 592 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		sink << "TSTW $" << std::hex << opr16a;
	}
#line 32070 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32074 "hcs12x.cc"
OpTstw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32078 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32081 "hcs12x.cc"
)
{
#line 596 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		carry_in = 0;

		Sub16(result, carry_out, overflow, opr16aVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 32101 "hcs12x.cc"
}

static Operation *DecodeOpTstw_ext(CodeType const& code, uint16_t addr)
{
	return new OpTstw_ext(code, addr);
}

// TSTW IDX or IDX1 or IDX2 or [D, IDX] or [IDX2]
#line 73 "hcs12x.isa"
uint8_t
#line 32112 "hcs12x.cc"
OpTstw_idx::getCycles()
{
#line 616 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32117 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32121 "hcs12x.cc"
OpTstw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32125 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32128 "hcs12x.cc"
)
{
#line 618 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		sink << "TSTW ";
		xb->disasm(sink);
	}
#line 32136 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32140 "hcs12x.cc"
OpTstw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32144 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32147 "hcs12x.cc"
)
{
#line 623 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		carry_in = 0;

		Sub16(result, carry_out, overflow, xbVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32166 "hcs12x.cc"
}

static Operation *DecodeOpTstw_idx(CodeType const& code, uint16_t addr)
{
	return new OpTstw_idx(code, addr);
}

// TSTX or TSTY
#line 73 "hcs12x.isa"
uint8_t
#line 32177 "hcs12x.cc"
OpTst_xy::getCycles()
{
#line 642 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return 2; }
#line 32182 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32186 "hcs12x.cc"
OpTst_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32190 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32193 "hcs12x.cc"
)
{
#line 644 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		switch (b) {
			case 0: sink << "TSTX "; break;
			case 1: sink << "TSTY "; break;
		}
	}
#line 32203 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32207 "hcs12x.cc"
OpTst_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32211 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32214 "hcs12x.cc"
)
{
#line 651 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{
		uint8_t carry_out, overflow, carry_in;
		uint16_t result, regVal;

		carry_in = 0;
		switch (b) {
			case 0: regVal = cpu->getRegY(); break;
			case 1: regVal = cpu->getRegY();; break;
		}

		Sub16(result, carry_out, overflow, regVal, 0, carry_in);

		cpu->ccr->clrC();
		cpu->ccr->clrV();
		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 32235 "hcs12x.cc"
}

static Operation *DecodeOpTst_xy(CodeType const& code, uint16_t addr)
{
	return new OpTst_xy(code, addr);
}

/* ************ Minimum Instructions ************* */
// EMIND: MIN ((D), (M : M + 1)) ⇒ D
// opcode(EMIND)-> 0x18 0x1B
#line 73 "hcs12x.isa"
uint8_t
#line 32248 "hcs12x.cc"
OpEmind::getCycles()
{
#line 677 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32253 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32257 "hcs12x.cc"
OpEmind::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32261 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32264 "hcs12x.cc"
)
{
#line 679 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "EMIND ";
		xb->disasm(sink);
	}
#line 32273 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32277 "hcs12x.cc"
OpEmind::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32281 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32284 "hcs12x.cc"
)
{
#line 685 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t mVal = cpu->memRead16(addr);

		uint16_t min;
		if (dVal > mVal) { min == mVal; } else { min = dVal; }

		uint16_t result = dVal - mVal;

		cpu->setRegD(min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32319 "hcs12x.cc"
}

static Operation *DecodeOpEmind(CodeType const& code, uint16_t addr)
{
	return new OpEmind(code, addr);
}

// EMINM: MIN ((D), (M : M + 1)) ⇒ M : M + 1
// opcode(EMINM)-> 0x18 0x1F
#line 73 "hcs12x.isa"
uint8_t
#line 32331 "hcs12x.cc"
OpEminm::getCycles()
{
#line 722 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 32336 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32340 "hcs12x.cc"
OpEminm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32344 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32347 "hcs12x.cc"
)
{
#line 724 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "EMINM ";
		xb->disasm(sink);
	}
#line 32356 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32360 "hcs12x.cc"
OpEminm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32364 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32367 "hcs12x.cc"
)
{
#line 730 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t mVal = cpu->memRead16(addr);

		uint16_t min;
		if (dVal > mVal) { min == mVal; } else { min = dVal; }

		uint16_t result = dVal - mVal;

		cpu->memWrite16(addr, min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32402 "hcs12x.cc"
}

static Operation *DecodeOpEminm(CodeType const& code, uint16_t addr)
{
	return new OpEminm(code, addr);
}

// MINA: MIN ((A), (M)) ⇒ A
// opcode(MINA)-> 0x18 0x19
#line 73 "hcs12x.isa"
uint8_t
#line 32414 "hcs12x.cc"
OpMina::getCycles()
{
#line 768 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32419 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32423 "hcs12x.cc"
OpMina::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32427 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32430 "hcs12x.cc"
)
{
#line 770 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "MINA ";

		xb->disasm(sink);
	}
#line 32440 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32444 "hcs12x.cc"
OpMina::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32448 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32451 "hcs12x.cc"
)
{
#line 777 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t min;
		if (aVal > mVal) { min == mVal; } else { min = aVal; }

		uint8_t result = aVal - mVal;

		cpu->setRegA(min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32486 "hcs12x.cc"
}

static Operation *DecodeOpMina(CodeType const& code, uint16_t addr)
{
	return new OpMina(code, addr);
}

// MINM: MIN ((A), (M)) ⇒ M
// opcode(MINM)->0x18 0x1D
#line 73 "hcs12x.isa"
uint8_t
#line 32498 "hcs12x.cc"
OpMinm::getCycles()
{
#line 814 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 32503 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32507 "hcs12x.cc"
OpMinm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32511 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32514 "hcs12x.cc"
)
{
#line 816 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "MINM ";

		xb->disasm(sink);
	}
#line 32524 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32528 "hcs12x.cc"
OpMinm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32532 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32535 "hcs12x.cc"
)
{
#line 823 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t min;
		if (aVal > mVal) { min == mVal; } else { min = aVal; }

		uint8_t result = aVal - mVal;

		cpu->memWrite8(addr, min);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32570 "hcs12x.cc"
}

static Operation *DecodeOpMinm(CodeType const& code, uint16_t addr)
{
	return new OpMinm(code, addr);
}

/* ************ Maximum Instructions ************* */
// EMAND: MAX ((D), (M : M + 1)) ⇒ D
// opcode(EMAXD)-> 0x18 0x1A
#line 73 "hcs12x.isa"
uint8_t
#line 32583 "hcs12x.cc"
OpEmaxd::getCycles()
{
#line 863 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32588 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32592 "hcs12x.cc"
OpEmaxd::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32596 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32599 "hcs12x.cc"
)
{
#line 865 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "EMAXD ";
		xb->disasm(sink);
	}
#line 32608 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32612 "hcs12x.cc"
OpEmaxd::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32616 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32619 "hcs12x.cc"
)
{
#line 871 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t mVal = cpu->memRead16(addr);

		uint16_t max;
		if (mVal > dVal) { max == mVal; } else { max = dVal; }

		uint16_t result = dVal - mVal;

		cpu->setRegD(max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32655 "hcs12x.cc"
}

static Operation *DecodeOpEmaxd(CodeType const& code, uint16_t addr)
{
	return new OpEmaxd(code, addr);
}

// EMANM: MAX ((D), (M : M + 1)) ⇒ M : M + 1
// opcode(EMAXM)-> 0x18 0x1E
#line 73 "hcs12x.isa"
uint8_t
#line 32667 "hcs12x.cc"
OpEmaxm::getCycles()
{
#line 909 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 32672 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32676 "hcs12x.cc"
OpEmaxm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32680 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32683 "hcs12x.cc"
)
{
#line 911 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "EMAXM ";
		xb->disasm(sink);
	}
#line 32692 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32696 "hcs12x.cc"
OpEmaxm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32700 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32703 "hcs12x.cc"
)
{
#line 917 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint16_t dVal = cpu->getRegD();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint16_t mVal = cpu->memRead16(addr);

		uint16_t max;
		if (mVal > dVal) { max == mVal; } else { max = dVal; }

		uint16_t result = dVal - mVal;

		cpu->memWrite16(addr, max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $0000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: D15 • !M15 • !R15 + !D15 • M15 • R15
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((dVal & 0x8000) & ~(mVal & 0x8000) & ~(result & 0x8000) | ~(dVal & 0x8000) & (mVal & 0x8000) & (result & 0x8000)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !D15 • M15 + M15 • R15 + R15 • !D15
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > dVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32739 "hcs12x.cc"
}

static Operation *DecodeOpEmaxm(CodeType const& code, uint16_t addr)
{
	return new OpEmaxm(code, addr);
}

// MAXA: MAX ((A), (M)) ⇒ A
// opcode(MAXA)-> 0x18 0x18
#line 73 "hcs12x.isa"
uint8_t
#line 32751 "hcs12x.cc"
OpMaxa::getCycles()
{
#line 956 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 4, 5, 7, 7); }
#line 32756 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32760 "hcs12x.cc"
OpMaxa::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32764 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32767 "hcs12x.cc"
)
{
#line 958 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "MAXA ";
		xb->disasm(sink);
	}
#line 32776 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32780 "hcs12x.cc"
OpMaxa::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32784 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32787 "hcs12x.cc"
)
{
#line 964 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t max;
		if (mVal > aVal) { max == mVal; } else { max = aVal; }

		uint8_t result = aVal - mVal;

		cpu->setRegA(max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32822 "hcs12x.cc"
}

static Operation *DecodeOpMaxa(CodeType const& code, uint16_t addr)
{
	return new OpMaxa(code, addr);
}

// MAXM: MAx ((A), (M)) ⇒ M
// opcode(MAXM)->0x18 0x1C
#line 73 "hcs12x.isa"
uint8_t
#line 32834 "hcs12x.cc"
OpMaxm::getCycles()
{
#line 1001 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{ return XbModes::GetIDXCycles(xb->getXbMode(), 4, 5, 6, 7, 7); }
#line 32839 "hcs12x.cc"
}
#line 69 "hcs12x.isa"
void
#line 32843 "hcs12x.cc"
OpMaxm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32847 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32850 "hcs12x.cc"
)
{
#line 1003 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		sink << "MAXM ";
		xb->disasm(sink);
	}
#line 32859 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32863 "hcs12x.cc"
OpMaxm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32867 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32870 "hcs12x.cc"
)
{
#line 1009 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./compare_test.isa"
	{

		uint8_t aVal = cpu->getRegA();
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t mVal = cpu->memRead8(addr);

		uint8_t max;
		if (mVal > aVal) { max == mVal; } else { max = aVal; }

		uint8_t result = aVal - mVal;

		cpu->memWrite8(addr, max);

		// N: Set if MSB of result is set; cleared otherwise
		if ((result & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
		// Z: Set if result is $00; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* V: A7 • !M7 • !R7 + !A7 • M7 • R7
		* Set if a two’s complement overflow resulted from the operation; cleared
		* otherwise
		*/
		if ((aVal & 0x80) & ~(mVal & 0x80) & ~(result & 0x80) | ~(aVal & 0x80) & (mVal & 0x80) & (result & 0x80)) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		/*
		* C: !A7 • M7 + M7 • R7 + R7 • !A7
		* Set if the value of the content of memory is larger than the value of the
		* accumulator; cleared otherwise
		*/
		if (mVal > aVal) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 32905 "hcs12x.cc"
}

static Operation *DecodeOpMaxm(CodeType const& code, uint16_t addr)
{
	return new OpMaxm(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// ANDA/ANDB  IMM  (regAB & ii => regAB)
#line 69 "hcs12x.isa"
void
#line 32949 "hcs12x.cc"
OpAnd_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 32953 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 32956 "hcs12x.cc"
)
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDA #$";
			} else {
			sink << "ANDB #$";
		}
		sink << std::hex << opr8i;
	}
#line 32968 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 32972 "hcs12x.cc"
OpAnd_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 32976 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 32979 "hcs12x.cc"
)
{
#line 48 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal & opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 33007 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_imm(code, addr);
}

// ANDA/ANDB  DIR  (regAB & mem[regDirect:opr8a] => regAB)s
#line 69 "hcs12x.isa"
void
#line 33018 "hcs12x.cc"
OpAnd_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33022 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33025 "hcs12x.cc"
)
{
#line 76 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDA $";
			} else {
			sink << "ANDB $";
		}
		sink << std::hex << opr8a;
	}
#line 33037 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33041 "hcs12x.cc"
OpAnd_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33045 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33048 "hcs12x.cc"
)
{
#line 85 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal & opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33077 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_dir(code, addr);
}

// ANDA/ANDB EXT (regAB & mem[opr16a] => regAB)
#line 69 "hcs12x.isa"
void
#line 33088 "hcs12x.cc"
OpAnd_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33092 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33095 "hcs12x.cc"
)
{
#line 114 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDA $";
			} else {
			sink << "ANDB $";
		}
		sink << std::hex << opr16a;
	}
#line 33107 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33111 "hcs12x.cc"
OpAnd_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33115 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33118 "hcs12x.cc"
)
{
#line 123 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal & opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33147 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_ext(code, addr);
}

// ANDA/ANDB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB & mem[xb->addrE] => regAB)
#line 69 "hcs12x.isa"
void
#line 33158 "hcs12x.cc"
OpAnd_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33162 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33165 "hcs12x.cc"
)
{
#line 152 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0){
			sink << "ANDA ";
			} else {
			sink << "ANDB ";
		}

		xb->disasm(sink);
	}
#line 33178 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33182 "hcs12x.cc"
OpAnd_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33186 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33189 "hcs12x.cc"
)
{
#line 162 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal & xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33219 "hcs12x.cc"
}

static Operation *DecodeOpAnd_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpAnd_ab_idx(code, addr);
}

// ANDCC  IMM  (ccr & ii => ccr)
#line 69 "hcs12x.isa"
void
#line 33230 "hcs12x.cc"
OpAndcc_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33234 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33237 "hcs12x.cc"
)
{
#line 192 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		sink << "ANDCC #$" << std::hex << opr8i;
	}
#line 33245 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33249 "hcs12x.cc"
OpAndcc_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33253 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33256 "hcs12x.cc"
)
{
#line 197 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal = cpu->ccr->getCCRLow();

		result = regVal & opr8i;

		cpu->ccr->setCCRLow(result);

	}
#line 33270 "hcs12x.cc"
}

static Operation *DecodeOpAndcc_imm(CodeType const& code, uint16_t addr)
{
	return new OpAndcc_imm(code, addr);
}

// ANDX/ANDY IMM (regXY & opr16i => regXY)
#line 69 "hcs12x.isa"
void
#line 33281 "hcs12x.cc"
OpAnd_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33285 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33288 "hcs12x.cc"
)
{
#line 211 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDX #$";
			} else {
			sink << "ANDY #$";
		}

		sink << std::hex << opr16i;
	}
#line 33301 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33305 "hcs12x.cc"
OpAnd_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33309 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33312 "hcs12x.cc"
)
{
#line 221 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33339 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_imm(code, addr);
}

// ANDX/ANDY DIR (regXY & mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 33350 "hcs12x.cc"
OpAnd_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33354 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33357 "hcs12x.cc"
)
{
#line 248 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDX $";
			} else {
			sink << "ANDY $";
		}

		sink << std::hex << opr8a;
	}
#line 33370 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33374 "hcs12x.cc"
OpAnd_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33378 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33381 "hcs12x.cc"
)
{
#line 258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33410 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_dir(code, addr);
}

// ANDX/ANDY EXT (regXY & mem[opr16a]:mem[opr16a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 33421 "hcs12x.cc"
OpAnd_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33425 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33428 "hcs12x.cc"
)
{
#line 287 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDX $";
			} else {
			sink << "ANDY $";
		}

		sink << std::hex << opr16a;
	}
#line 33441 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33445 "hcs12x.cc"
OpAnd_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33449 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33452 "hcs12x.cc"
)
{
#line 297 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33481 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_ext(code, addr);
}

// ANDX/ANDY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY & mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 33492 "hcs12x.cc"
OpAnd_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33496 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33499 "hcs12x.cc"
)
{
#line 326 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ANDX ";
			} else {
			sink << "ANDY ";
		}

		xb->disasm(sink);
	}
#line 33512 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33516 "hcs12x.cc"
OpAnd_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33520 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33523 "hcs12x.cc"
)
{
#line 336 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal & xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33552 "hcs12x.cc"
}

static Operation *DecodeOpAnd_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpAnd_xy_idx(code, addr);
}

// ORAA/ORAB IMM (regAB or opr8i => regAB)
#line 69 "hcs12x.isa"
void
#line 33563 "hcs12x.cc"
OpOra_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33567 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33570 "hcs12x.cc"
)
{
#line 366 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORA #$";
			} else {
			sink << "ORB #$";
		}
		sink << std::hex << opr8i;
	}
#line 33582 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33586 "hcs12x.cc"
OpOra_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33590 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33593 "hcs12x.cc"
)
{
#line 375 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal | opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();

	}
#line 33621 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_imm(code, addr);
}

// ORAA/ORAB  DIR  (regAB | mem[regDirect:opr8a] => regAB)s
#line 69 "hcs12x.isa"
void
#line 33632 "hcs12x.cc"
OpOra_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33636 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33639 "hcs12x.cc"
)
{
#line 403 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORAA $";
			} else {
			sink << "ORAB $";
		}
		sink << std::hex << opr8a;
	}
#line 33651 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33655 "hcs12x.cc"
OpOra_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33659 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33662 "hcs12x.cc"
)
{
#line 412 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal | opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33691 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_dir(code, addr);
}

// ORAA/ORAB EXT (regAB | mem[opr16a] => regAB)
#line 69 "hcs12x.isa"
void
#line 33702 "hcs12x.cc"
OpOra_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33706 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33709 "hcs12x.cc"
)
{
#line 441 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORAA $";
			} else {
			sink << "ORAB $";
		}
		sink << std::hex << opr16a;
	}
#line 33721 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33725 "hcs12x.cc"
OpOra_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33729 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33732 "hcs12x.cc"
)
{
#line 450 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal | opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33761 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_ext(code, addr);
}

// ORAA/ORAB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB | mem[xb->addrE] => regAB)
#line 69 "hcs12x.isa"
void
#line 33772 "hcs12x.cc"
OpOra_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33776 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33779 "hcs12x.cc"
)
{
#line 479 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0){
			sink << "ORAA ";
			} else {
			sink << "ORAB ";
		}

		xb->disasm(sink);
	}
#line 33792 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33796 "hcs12x.cc"
OpOra_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33800 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33803 "hcs12x.cc"
)
{
#line 489 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal | xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33833 "hcs12x.cc"
}

static Operation *DecodeOpOra_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpOra_ab_idx(code, addr);
}

// ORCC  IMM  (ccr & ii => ccr)
#line 69 "hcs12x.isa"
void
#line 33844 "hcs12x.cc"
OpOrcc_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33848 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33851 "hcs12x.cc"
)
{
#line 519 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		sink << "ORCC #$" << std::hex << opr8i;
	}
#line 33859 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33863 "hcs12x.cc"
OpOrcc_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33867 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33870 "hcs12x.cc"
)
{
#line 524 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result, xFlag;

		uint8_t regVal = cpu->ccr->getCCRLow();

		// get ccr.X which may not be affected by ORCC instruction
		// if (ccr.X==1) then xFlag=0xFF else xFlag=0xBF;  0xBF = 0b10111111
		xFlag = regVal | 0xBF;

		result = (regVal | opr8i) & xFlag;

		cpu->ccr->setCCRLow(result);

	}
#line 33888 "hcs12x.cc"
}

static Operation *DecodeOpOrcc_imm(CodeType const& code, uint16_t addr)
{
	return new OpOrcc_imm(code, addr);
}

// TODO: implement specialization ++++++++++++++
// SEC: set carry
// use specialize orcc_imm with opr8i=0x01
// SEI: set I (inhibit I interrupts)
// use specialize orcc_imm with opr8i=0x10
// SEV: set overflow
// use specialize orcc_imm with opr8i=0x02
// end todo specialization ++++++++++++++++++++++
// ORX/ORY IMM (regXY | opr16i => regXY)
#line 69 "hcs12x.isa"
void
#line 33907 "hcs12x.cc"
OpOr_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33911 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33914 "hcs12x.cc"
)
{
#line 556 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORX #$";
			} else {
			sink << "ORY #$";
		}

		sink << std::hex << opr16i;
	}
#line 33927 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 33931 "hcs12x.cc"
OpOr_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 33935 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 33938 "hcs12x.cc"
)
{
#line 566 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 33965 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_imm(code, addr);
}

// ORX/ORY DIR (regXY | mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 33976 "hcs12x.cc"
OpOr_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 33980 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 33983 "hcs12x.cc"
)
{
#line 593 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORX $";
			} else {
			sink << "ORY $";
		}

		sink << std::hex << opr8a;
	}
#line 33996 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34000 "hcs12x.cc"
OpOr_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34004 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34007 "hcs12x.cc"
)
{
#line 603 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34036 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_dir(code, addr);
}

// ORX/ORY EXT (regXY | mem[opr16a]:mem[opr16a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 34047 "hcs12x.cc"
OpOr_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34051 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34054 "hcs12x.cc"
)
{
#line 632 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORX $";
			} else {
			sink << "ORY $";
		}

		sink << std::hex << opr16a;
	}
#line 34067 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34071 "hcs12x.cc"
OpOr_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34075 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34078 "hcs12x.cc"
)
{
#line 642 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34107 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_ext(code, addr);
}

// ORX/ORY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY | mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 34118 "hcs12x.cc"
OpOr_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34122 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34125 "hcs12x.cc"
)
{
#line 671 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORX ";
			} else {
			sink << "ORY ";
		}

		xb->disasm(sink);
	}
#line 34138 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34142 "hcs12x.cc"
OpOr_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34146 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34149 "hcs12x.cc"
)
{
#line 681 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal | xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34178 "hcs12x.cc"
}

static Operation *DecodeOpOr_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpOr_xy_idx(code, addr);
}

// EORA/EORB IMM (regAB ^ opr8i => regAB)
#line 69 "hcs12x.isa"
void
#line 34189 "hcs12x.cc"
OpEor_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34193 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34196 "hcs12x.cc"
)
{
#line 711 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EOR #$";
			} else {
			sink << "EOR #$";
		}
		sink << std::hex << opr8i;
	}
#line 34208 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34212 "hcs12x.cc"
OpEor_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34216 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34219 "hcs12x.cc"
)
{
#line 720 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}

		result = regVal ^ opr8i;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34246 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_imm(code, addr);
}

// EORA/EORB  DIR  (regAB ^ mem[regDirect:opr8a] => regAB)s
#line 69 "hcs12x.isa"
void
#line 34257 "hcs12x.cc"
OpEor_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34261 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34264 "hcs12x.cc"
)
{
#line 747 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "ORAA $";
			} else {
			sink << "ORAB $";
		}
		sink << std::hex << opr8a;
	}
#line 34276 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34280 "hcs12x.cc"
OpEor_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34284 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34287 "hcs12x.cc"
)
{
#line 756 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		result = regVal ^ opr8aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34316 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_dir(code, addr);
}

// EORA/EORB EXT (regAB ^ mem[opr16a] => regAB)
#line 69 "hcs12x.isa"
void
#line 34327 "hcs12x.cc"
OpEor_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34331 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34334 "hcs12x.cc"
)
{
#line 785 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EORA $";
			} else {
			sink << "EORB $";
		}
		sink << std::hex << opr16a;
	}
#line 34346 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34350 "hcs12x.cc"
OpEor_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34354 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34357 "hcs12x.cc"
)
{
#line 794 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;
		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		result = regVal ^ opr16aVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34386 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_ext(code, addr);
}

// EORA/EORB  IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regAB ^ mem[xb->addrE] => regAB)
#line 69 "hcs12x.isa"
void
#line 34397 "hcs12x.cc"
OpEor_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34401 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34404 "hcs12x.cc"
)
{
#line 823 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0){
			sink << "EORA ";
			} else {
			sink << "EORB ";
		}

		xb->disasm(sink);
	}
#line 34417 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34421 "hcs12x.cc"
OpEor_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34425 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34428 "hcs12x.cc"
)
{
#line 833 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		uint8_t result;

		uint8_t regVal;

		if (b==0) {
			regVal = cpu->getRegA();
			} else {
			regVal = cpu->getRegB();
		}
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		result = regVal ^ xbVal;

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x80) == 0x80) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34458 "hcs12x.cc"
}

static Operation *DecodeOpEor_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpEor_ab_idx(code, addr);
}

// EORX/EORY IMM (regXY ^ opr16i => regXY)
#line 69 "hcs12x.isa"
void
#line 34469 "hcs12x.cc"
OpEor_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34473 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34476 "hcs12x.cc"
)
{
#line 863 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EORX #$";
			} else {
			sink << "EORY #$";
		}

		sink << std::hex << opr16i;
	}
#line 34489 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34493 "hcs12x.cc"
OpEor_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34497 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34500 "hcs12x.cc"
)
{
#line 873 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr16i;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34527 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_imm(code, addr);
}

// EORX/EORY DIR (regXY ^ mem[regDirect:opr8a]:mem[regDirect:opr8a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 34538 "hcs12x.cc"
OpEor_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34542 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34545 "hcs12x.cc"
)
{
#line 900 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EORX $";
			} else {
			sink << "eORY $";
		}

		sink << std::hex << opr8a;
	}
#line 34558 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34562 "hcs12x.cc"
OpEor_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34566 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34569 "hcs12x.cc"
)
{
#line 910 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t opr8aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr8aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34598 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_dir(code, addr);
}

// EORX/EORY EXT (regXY ^ mem[opr16a]:mem[opr16a+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 34609 "hcs12x.cc"
OpEor_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34613 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34616 "hcs12x.cc"
)
{
#line 939 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EORX $";
			} else {
			sink << "EORY $";
		}

		sink << std::hex << opr16a;
	}
#line 34629 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34633 "hcs12x.cc"
OpEor_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34637 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34640 "hcs12x.cc"
)
{
#line 949 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t opr16aVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ opr16aVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34669 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_ext(code, addr);
}

// EORX/EORY IDX or IDX1 or IDX2 or [D,IDX] or [IDX2] (regXY ^ mem[xb->addrE]:mem[xb->addrE+1] => regXY)
#line 69 "hcs12x.isa"
void
#line 34680 "hcs12x.cc"
OpEor_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34684 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34687 "hcs12x.cc"
)
{
#line 978 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{
		if (b==0) {
			sink << "EORX ";
			} else {
			sink << "EORY ";
		}

		xb->disasm(sink);
	}
#line 34700 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34704 "hcs12x.cc"
OpEor_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34708 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34711 "hcs12x.cc"
)
{
#line 988 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./boolean-logic.isa"
	{

		uint16_t result, regVal;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t xbVal = cpu->memRead16(addr);

		if (b==0) {
			regVal = cpu->getRegX();
			} else {
			regVal = cpu->getRegY();
		}

		result = regVal ^ xbVal;

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		cpu->ccr->clrV();

		if (result == 0) cpu->ccr->setZ(); else cpu->ccr->clrZ();
		if ((result & 0x8000) == 0x8000) cpu->ccr->setN(); else cpu->ccr->clrN();
	}
#line 34740 "hcs12x.cc"
}

static Operation *DecodeOpEor_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpEor_xy_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ********** Clear, Complement, and Negate instructions ********* */
// CLC: clear bit C
#line 69 "hcs12x.isa"
void
#line 34785 "hcs12x.cc"
OpClc::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34789 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34792 "hcs12x.cc"
)
{
#line 41 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLC";
	}
#line 34799 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34803 "hcs12x.cc"
OpClc::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34807 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34810 "hcs12x.cc"
)
{
#line 45 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrC();
	}
#line 34817 "hcs12x.cc"
}

static Operation *DecodeOpClc(CodeType const& code, uint16_t addr)
{
	return new OpClc(code, addr);
}

// CLI: clear bit I
#line 69 "hcs12x.isa"
void
#line 34828 "hcs12x.cc"
OpCli::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34832 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34835 "hcs12x.cc"
)
{
#line 52 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLI";
	}
#line 34842 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34846 "hcs12x.cc"
OpCli::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34850 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34853 "hcs12x.cc"
)
{
#line 56 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrI();
	}
#line 34860 "hcs12x.cc"
}

static Operation *DecodeOpCli(CodeType const& code, uint16_t addr)
{
	return new OpCli(code, addr);
}

// CLV: clear bit V
#line 69 "hcs12x.isa"
void
#line 34871 "hcs12x.cc"
OpClv::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34875 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34878 "hcs12x.cc"
)
{
#line 63 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLV";
	}
#line 34885 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34889 "hcs12x.cc"
OpClv::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34893 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34896 "hcs12x.cc"
)
{
#line 67 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		cpu->ccr->clrV();
	}
#line 34903 "hcs12x.cc"
}

static Operation *DecodeOpClv(CodeType const& code, uint16_t addr)
{
	return new OpClv(code, addr);
}

// clear Memory
#line 69 "hcs12x.isa"
void
#line 34914 "hcs12x.cc"
OpClr_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34918 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34921 "hcs12x.cc"
)
{
#line 74 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLR $" << std::hex << opr16a;
	}
#line 34928 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34932 "hcs12x.cc"
OpClr_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34936 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34939 "hcs12x.cc"
)
{
#line 78 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 34952 "hcs12x.cc"
}

static Operation *DecodeOpClr_ext(CodeType const& code, uint16_t addr)
{
	return new OpClr_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 34962 "hcs12x.cc"
OpClr_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 34966 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 34969 "hcs12x.cc"
)
{
#line 90 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLR ";
		xb->disasm(sink);
	}
#line 34977 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 34981 "hcs12x.cc"
OpClr_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 34985 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 34988 "hcs12x.cc"
)
{
#line 95 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 35001 "hcs12x.cc"
}

static Operation *DecodeOpClr_idx(CodeType const& code, uint16_t addr)
{
	return new OpClr_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35011 "hcs12x.cc"
OpClrw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35015 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35018 "hcs12x.cc"
)
{
#line 107 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLRW $" << std::hex << opr16a;
	}
#line 35025 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35029 "hcs12x.cc"
OpClrw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35033 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35036 "hcs12x.cc"
)
{
#line 111 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite16(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 35049 "hcs12x.cc"
}

static Operation *DecodeOpClrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpClrw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35059 "hcs12x.cc"
OpClrw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35063 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35066 "hcs12x.cc"
)
{
#line 123 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "CLRW ";
		xb->disasm(sink);
	}
#line 35074 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35078 "hcs12x.cc"
OpClrw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35082 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35085 "hcs12x.cc"
)
{
#line 128 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite16(addr, 0);

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 35098 "hcs12x.cc"
}

static Operation *DecodeOpClrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpClrw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35108 "hcs12x.cc"
OpClr_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35112 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35115 "hcs12x.cc"
)
{
#line 140 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "CLRA";
			} else {
			sink << "CLRB";
		}
	}
#line 35126 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35130 "hcs12x.cc"
OpClr_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35134 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35137 "hcs12x.cc"
)
{
#line 148 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		if (b==0) {
			cpu->setRegA(0);
			} else {
			cpu->setRegB(0);
		}

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 35154 "hcs12x.cc"
}

static Operation *DecodeOpClr_ab(CodeType const& code, uint16_t addr)
{
	return new OpClr_ab(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35164 "hcs12x.cc"
OpClr_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35168 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35171 "hcs12x.cc"
)
{
#line 164 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "CLRX";
			} else {
			sink << "CLRY";
		}
	}
#line 35182 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35186 "hcs12x.cc"
OpClr_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35190 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35193 "hcs12x.cc"
)
{
#line 172 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		if (b==0) {
			cpu->setRegX(0);
			} else {
			cpu->setRegY(0);
		}

		cpu->ccr->clrN();
		cpu->ccr->setZ();
		cpu->ccr->clrV();
		cpu->ccr->clrC();
	}
#line 35210 "hcs12x.cc"
}

static Operation *DecodeOpClr_xy(CodeType const& code, uint16_t addr)
{
	return new OpClr_xy(code, addr);
}

// COM: One's complement memory Location
#line 69 "hcs12x.isa"
void
#line 35221 "hcs12x.cc"
OpCom_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35225 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35228 "hcs12x.cc"
)
{
#line 189 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "COM $" << std::hex << opr16a;
	}
#line 35235 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35239 "hcs12x.cc"
OpCom_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35243 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35246 "hcs12x.cc"
)
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = ~cpu->memRead8(addr);
		cpu->memWrite8(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35260 "hcs12x.cc"
}

static Operation *DecodeOpCom_ext(CodeType const& code, uint16_t addr)
{
	return new OpCom_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35270 "hcs12x.cc"
OpCom_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35274 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35277 "hcs12x.cc"
)
{
#line 206 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "COM ";
		xb->disasm(sink);
	}
#line 35285 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35289 "hcs12x.cc"
OpCom_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35293 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35296 "hcs12x.cc"
)
{
#line 211 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = ~cpu->memRead8(addr);
		cpu->memWrite8(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35311 "hcs12x.cc"
}

static Operation *DecodeOpCom_idx(CodeType const& code, uint16_t addr)
{
	return new OpCom_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35321 "hcs12x.cc"
OpCom_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35325 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35328 "hcs12x.cc"
)
{
#line 225 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "COMA";
			} else {
			sink << "COMB";
		}
	}
#line 35339 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35343 "hcs12x.cc"
OpCom_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35347 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35350 "hcs12x.cc"
)
{
#line 233 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t val;
		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		val = ~val;

		if (b==0) {
			cpu->setRegA(val);
			} else {
			cpu->setRegB(val);
		}

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35376 "hcs12x.cc"
}

static Operation *DecodeOpCom_ab(CodeType const& code, uint16_t addr)
{
	return new OpCom_ab(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35386 "hcs12x.cc"
OpComw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35390 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35393 "hcs12x.cc"
)
{
#line 258 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "COMW $" << std::hex << opr16a;
	}
#line 35400 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35404 "hcs12x.cc"
OpComw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35408 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35411 "hcs12x.cc"
)
{
#line 262 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = ~cpu->memRead16(addr);
		cpu->memWrite16(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35425 "hcs12x.cc"
}

static Operation *DecodeOpComw_ext(CodeType const& code, uint16_t addr)
{
	return new OpComw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35435 "hcs12x.cc"
OpComw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35439 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35442 "hcs12x.cc"
)
{
#line 275 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "COMW ";
		xb->disasm(sink);
	}
#line 35450 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35454 "hcs12x.cc"
OpComw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35458 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35461 "hcs12x.cc"
)
{
#line 280 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = ~cpu->memRead16(addr);
		cpu->memWrite16(addr, val);

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35476 "hcs12x.cc"
}

static Operation *DecodeOpComw_idx(CodeType const& code, uint16_t addr)
{
	return new OpComw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35486 "hcs12x.cc"
OpCom_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35490 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35493 "hcs12x.cc"
)
{
#line 294 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "COMX";
			} else {
			sink << "COMY";
		}
	}
#line 35504 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35508 "hcs12x.cc"
OpCom_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35512 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35515 "hcs12x.cc"
)
{
#line 302 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint16_t val;
		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		val = ~val;

		if (b==0) {
			cpu->setRegX(val);
			} else {
			cpu->setRegY(val);
		}

		cpu->ccr->setC();
		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else {cpu->ccr->clrN();}
	}
#line 35541 "hcs12x.cc"
}

static Operation *DecodeOpCom_xy(CodeType const& code, uint16_t addr)
{
	return new OpCom_xy(code, addr);
}

// NEG: Two's Complement Negate
#line 69 "hcs12x.isa"
void
#line 35552 "hcs12x.cc"
OpNeg_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35556 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35559 "hcs12x.cc"
)
{
#line 328 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "NEG $" << std::hex << opr16a;
	}
#line 35566 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35570 "hcs12x.cc"
OpNeg_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35574 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35577 "hcs12x.cc"
)
{
#line 332 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t result, carry_out, overflow;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		Sub8(result, carry_out, overflow, 0, cpu->memRead8(addr), 0);
		cpu->memWrite8(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 35592 "hcs12x.cc"
}

static Operation *DecodeOpNeg_ext(CodeType const& code, uint16_t addr)
{
	return new OpNeg_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35602 "hcs12x.cc"
OpNeg_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35606 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35609 "hcs12x.cc"
)
{
#line 346 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "NEG $";
		xb->disasm(sink);
	}
#line 35617 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35621 "hcs12x.cc"
OpNeg_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35625 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35628 "hcs12x.cc"
)
{
#line 351 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t result, carry_out, overflow;
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		Sub8(result, carry_out, overflow, 0, cpu->memRead8(addr), 0);
		cpu->memWrite8(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}

	}
#line 35646 "hcs12x.cc"
}

static Operation *DecodeOpNeg_idx(CodeType const& code, uint16_t addr)
{
	return new OpNeg_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35656 "hcs12x.cc"
OpNeg_ab::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35660 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35663 "hcs12x.cc"
)
{
#line 368 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "NEGA";
			} else {
			sink << "NEGB";
		}
	}
#line 35674 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35678 "hcs12x.cc"
OpNeg_ab::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35682 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35685 "hcs12x.cc"
)
{
#line 376 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val, result, carry_out, overflow;

		if (b==0) {
			val = cpu->getRegA();
			} else {
			val = cpu->getRegB();
		}

		Sub8(result, carry_out, overflow, 0, val, 0);

		if (b==0) {
			cpu->setRegA(result);
			} else {
			cpu->setRegB(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x80) == 0x80) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 35711 "hcs12x.cc"
}

static Operation *DecodeOpNeg_ab(CodeType const& code, uint16_t addr)
{
	return new OpNeg_ab(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35721 "hcs12x.cc"
OpNegw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35725 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35728 "hcs12x.cc"
)
{
#line 401 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "NEGW $" << std::hex << opr16a;
	}
#line 35735 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35739 "hcs12x.cc"
OpNegw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35743 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35746 "hcs12x.cc"
)
{
#line 405 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t result;

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		Sub16(result, carry_out, overflow, 0, cpu->memRead16(addr), 0);
		cpu->memWrite16(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 35764 "hcs12x.cc"
}

static Operation *DecodeOpNegw_ext(CodeType const& code, uint16_t addr)
{
	return new OpNegw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35774 "hcs12x.cc"
OpNegw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35778 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35781 "hcs12x.cc"
)
{
#line 422 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "NEGW $";
		xb->disasm(sink);
	}
#line 35789 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35793 "hcs12x.cc"
OpNegw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35797 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35800 "hcs12x.cc"
)
{
#line 427 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		uint8_t carry_out, overflow;
		uint16_t result;

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		Sub16(result, carry_out, overflow, 0, cpu->memRead16(addr), 0);
		cpu->memWrite16(addr, result);

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}

	}
#line 35820 "hcs12x.cc"
}

static Operation *DecodeOpNegw_idx(CodeType const& code, uint16_t addr)
{
	return new OpNegw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35830 "hcs12x.cc"
OpNeg_xy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35834 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35837 "hcs12x.cc"
)
{
#line 446 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "NEGX";
			} else {
			sink << "NEGY";
		}
	}
#line 35848 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35852 "hcs12x.cc"
OpNeg_xy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35856 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35859 "hcs12x.cc"
)
{
#line 454 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t carry_out, overflow;
		uint16_t val, result;

		if (b==0) {
			val = cpu->getRegX();
			} else {
			val = cpu->getRegY();
		}

		Sub16(result, carry_out, overflow, 0, val, 0);

		if (b==0) {
			cpu->setRegX(result);
			} else {
			cpu->setRegY(result);
		}

		if (carry_out) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (overflow) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
		if (result == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((result & 0x8000) == 0x8000) {cpu->ccr->setN();} else { cpu->ccr->clrN();}
	}
#line 35886 "hcs12x.cc"
}

static Operation *DecodeOpNeg_xy(CodeType const& code, uint16_t addr)
{
	return new OpNeg_xy(code, addr);
}

/* ********** Bit Test and Manipulation Instructions ************* */
// BCLR: Clear bit(s) in memory
#line 69 "hcs12x.isa"
void
#line 35898 "hcs12x.cc"
OpBclr_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35902 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35905 "hcs12x.cc"
)
{
#line 484 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BCLR $" << std::hex << dd << ", $" << std::hex << mm;
	}
#line 35912 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35916 "hcs12x.cc"
OpBclr_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35920 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35923 "hcs12x.cc"
)
{
#line 488 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(dd, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t ddVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = ddVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 35940 "hcs12x.cc"
}

static Operation *DecodeOpBclr_dir(CodeType const& code, uint16_t addr)
{
	return new OpBclr_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 35950 "hcs12x.cc"
OpBclr_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 35954 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 35957 "hcs12x.cc"
)
{
#line 504 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BCLR $" << std::hex << opr16a << ", $" << std::hex << mm;
	}
#line 35964 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 35968 "hcs12x.cc"
OpBclr_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 35972 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 35975 "hcs12x.cc"
)
{
#line 508 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = opr16aVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 35992 "hcs12x.cc"
}

static Operation *DecodeOpBclr_ext(CodeType const& code, uint16_t addr)
{
	return new OpBclr_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36002 "hcs12x.cc"
OpBclr_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36006 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36009 "hcs12x.cc"
)
{
#line 524 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BCLR ";
		xb->disasm(sink);
		sink << ", $" << std::hex << mm;
	}
#line 36018 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36022 "hcs12x.cc"
OpBclr_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36026 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36029 "hcs12x.cc"
)
{
#line 530 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);
		uint8_t mmCom = ~mm;

		uint8_t val = xbVal & mmCom;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 36047 "hcs12x.cc"
}

static Operation *DecodeOpBclr_idx(CodeType const& code, uint16_t addr)
{
	return new OpBclr_idx(code, addr);
}

// BITA or BITB: bit test A/B (Logical 'AND' A/B with Memory
#line 69 "hcs12x.isa"
void
#line 36058 "hcs12x.cc"
OpBit_ab_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36062 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36065 "hcs12x.cc"
)
{
#line 548 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITA #$";
			} else {
			sink << "BITB #$";
		}
		sink << std::hex << ii;
	}
#line 36077 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36081 "hcs12x.cc"
OpBit_ab_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36085 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36088 "hcs12x.cc"
)
{
#line 557 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & ii;
			} else {
			val = cpu->getRegB() & ii;
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36106 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_imm(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_imm(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36116 "hcs12x.cc"
OpBit_ab_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36120 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36123 "hcs12x.cc"
)
{
#line 574 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITA $";
			} else {
			sink << "BITB $";
		}
		sink << std::hex << opr8a;
	}
#line 36135 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36139 "hcs12x.cc"
OpBit_ab_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36143 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36146 "hcs12x.cc"
)
{
#line 583 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36165 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_dir(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36175 "hcs12x.cc"
OpBit_ab_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36179 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36182 "hcs12x.cc"
)
{
#line 601 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITA $";
			} else {
			sink << "BITB $";
		}
		sink << std::hex << opr16a;
	}
#line 36194 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36198 "hcs12x.cc"
OpBit_ab_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36202 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36205 "hcs12x.cc"
)
{
#line 610 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36224 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_ext(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36234 "hcs12x.cc"
OpBit_ab_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36238 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36241 "hcs12x.cc"
)
{
#line 628 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITA ";
			} else {
			sink << "BITB ";
		}
		xb->disasm(sink);
	}
#line 36253 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36257 "hcs12x.cc"
OpBit_ab_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36261 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36264 "hcs12x.cc"
)
{
#line 637 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val;

		if (b==0) {
			val = cpu->getRegA() & cpu->memRead8(addr);
			} else {
			val = cpu->getRegB() & cpu->memRead8(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36283 "hcs12x.cc"
}

static Operation *DecodeOpBit_ab_idx(CodeType const& code, uint16_t addr)
{
	return new OpBit_ab_idx(code, addr);
}

// BITX or BITY: bit test X/Y (Logical 'AND' X/Y with Memory
#line 69 "hcs12x.isa"
void
#line 36294 "hcs12x.cc"
OpBit_xy_imm::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36298 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36301 "hcs12x.cc"
)
{
#line 656 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITX #$";
			} else {
			sink << "BITY #$";
		}
		sink << std::hex << opr16i;
	}
#line 36313 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36317 "hcs12x.cc"
OpBit_xy_imm::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36321 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36324 "hcs12x.cc"
)
{
#line 665 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & opr16i;
			} else {
			val = cpu->getRegY() & opr16i;
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36342 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_imm(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_imm(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36352 "hcs12x.cc"
OpBit_xy_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36356 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36359 "hcs12x.cc"
)
{
#line 682 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITA $";
			} else {
			sink << "BITB $";
		}
		sink << std::hex << opr8a;
	}
#line 36371 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36375 "hcs12x.cc"
OpBit_xy_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36379 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36382 "hcs12x.cc"
)
{
#line 691 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36401 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_dir(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36411 "hcs12x.cc"
OpBit_xy_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36415 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36418 "hcs12x.cc"
)
{
#line 709 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITX $";
			} else {
			sink << "BITY $";
		}
		sink << std::hex << opr16a;
	}
#line 36430 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36434 "hcs12x.cc"
OpBit_xy_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36438 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36441 "hcs12x.cc"
)
{
#line 718 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36460 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_ext(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36470 "hcs12x.cc"
OpBit_xy_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36474 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36477 "hcs12x.cc"
)
{
#line 736 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		if (b==0) {
			sink << "BITX ";
			} else {
			sink << "BITY ";
		}
		xb->disasm(sink);
	}
#line 36489 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36493 "hcs12x.cc"
OpBit_xy_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36497 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36500 "hcs12x.cc"
)
{
#line 745 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val;

		if (b==0) {
			val = cpu->getRegX() & cpu->memRead16(addr);
			} else {
			val = cpu->getRegY() & cpu->memRead16(addr);
		}

		cpu->ccr->clrV();

		if (val == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();};
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN();} else { cpu->ccr->clrN();};
	}
#line 36519 "hcs12x.cc"
}

static Operation *DecodeOpBit_xy_idx(CodeType const& code, uint16_t addr)
{
	return new OpBit_xy_idx(code, addr);
}

// BSET: Set bits in memory
#line 69 "hcs12x.isa"
void
#line 36530 "hcs12x.cc"
OpBset_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36534 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36537 "hcs12x.cc"
)
{
#line 764 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BSET $" << std::hex << dd << ", $" << std::hex << mm;
	}
#line 36544 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36548 "hcs12x.cc"
OpBset_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36552 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36555 "hcs12x.cc"
)
{
#line 768 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(dd, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t ddVal = cpu->memRead8(addr);

		uint8_t val = ddVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 36571 "hcs12x.cc"
}

static Operation *DecodeOpBset_dir(CodeType const& code, uint16_t addr)
{
	return new OpBset_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36581 "hcs12x.cc"
OpBset_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36585 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36588 "hcs12x.cc"
)
{
#line 783 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BSET $" << std::hex << opr16a << ", $" << std::hex << mm;
	}
#line 36595 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36599 "hcs12x.cc"
OpBset_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36603 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36606 "hcs12x.cc"
)
{
#line 787 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		uint8_t val = opr16aVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 36622 "hcs12x.cc"
}

static Operation *DecodeOpBset_ext(CodeType const& code, uint16_t addr)
{
	return new OpBset_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36632 "hcs12x.cc"
OpBset_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36636 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36639 "hcs12x.cc"
)
{
#line 802 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BSET ";
		xb->disasm(sink);
		sink << ", $" << std::hex << mm;
	}
#line 36648 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36652 "hcs12x.cc"
OpBset_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36656 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36659 "hcs12x.cc"
)
{
#line 808 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		uint8_t val = xbVal | mm;

		cpu->memWrite8(addr, val);

		cpu->ccr->clrV();
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 36676 "hcs12x.cc"
}

static Operation *DecodeOpBset_idx(CodeType const& code, uint16_t addr)
{
	return new OpBset_idx(code, addr);
}

/* ********** Shift and Rotate instructions ********************** */
// LSL: Logical Shift Left
// ASL: Arithmetic Shift Left
#line 69 "hcs12x.isa"
void
#line 36689 "hcs12x.cc"
OpLsl_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36693 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36696 "hcs12x.cc"
)
{
#line 828 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSL $" << std::hex << opr16a;
	}
#line 36703 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36707 "hcs12x.cc"
OpLsl_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36711 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36714 "hcs12x.cc"
)
{
#line 832 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x80) == 0x80) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		val = val << 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36732 "hcs12x.cc"
}

static Operation *DecodeOpLsl_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsl_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36742 "hcs12x.cc"
OpLsl_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36746 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36749 "hcs12x.cc"
)
{
#line 849 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSL ";
		xb->disasm(sink);
	}
#line 36757 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36761 "hcs12x.cc"
OpLsl_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36765 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36768 "hcs12x.cc"
)
{
#line 854 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36787 "hcs12x.cc"
}

static Operation *DecodeOpLsl_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsl_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36797 "hcs12x.cc"
OpLsla::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36801 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36804 "hcs12x.cc"
)
{
#line 872 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLA";
	}
#line 36811 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36815 "hcs12x.cc"
OpLsla::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36819 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36822 "hcs12x.cc"
)
{
#line 876 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegA(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36839 "hcs12x.cc"
}

static Operation *DecodeOpLsla(CodeType const& code, uint16_t addr)
{
	return new OpLsla(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36849 "hcs12x.cc"
OpLslb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36853 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36856 "hcs12x.cc"
)
{
#line 892 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLB";
	}
#line 36863 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36867 "hcs12x.cc"
OpLslb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36871 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36874 "hcs12x.cc"
)
{
#line 896 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		if ((val & 0x80) == 0x80) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegB(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36891 "hcs12x.cc"
}

static Operation *DecodeOpLslb(CodeType const& code, uint16_t addr)
{
	return new OpLslb(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 36901 "hcs12x.cc"
OpLsld::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36905 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36908 "hcs12x.cc"
)
{
#line 912 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLD";
	}
#line 36915 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36919 "hcs12x.cc"
OpLsld::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36923 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36926 "hcs12x.cc"
)
{
#line 916 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegD();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegD(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36943 "hcs12x.cc"
}

static Operation *DecodeOpLsld(CodeType const& code, uint16_t addr)
{
	return new OpLsld(code, addr);
}

// LSLW: Logical Shift Left
// ASLW: Arithmetic Shift Left
#line 69 "hcs12x.isa"
void
#line 36955 "hcs12x.cc"
OpLslw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 36959 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 36962 "hcs12x.cc"
)
{
#line 935 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLW $" << std::hex << opr16a;
	}
#line 36969 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 36973 "hcs12x.cc"
OpLslw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 36977 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 36980 "hcs12x.cc"
)
{
#line 939 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		val = val << 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 36998 "hcs12x.cc"
}

static Operation *DecodeOpLslw_ext(CodeType const& code, uint16_t addr)
{
	return new OpLslw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37008 "hcs12x.cc"
OpLslw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37012 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37015 "hcs12x.cc"
)
{
#line 956 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLW ";
		xb->disasm(sink);
	}
#line 37023 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37027 "hcs12x.cc"
OpLslw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37031 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37034 "hcs12x.cc"
)
{
#line 961 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37053 "hcs12x.cc"
}

static Operation *DecodeOpLslw_idx(CodeType const& code, uint16_t addr)
{
	return new OpLslw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37063 "hcs12x.cc"
OpLslx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37067 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37070 "hcs12x.cc"
)
{
#line 979 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLX";
	}
#line 37077 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37081 "hcs12x.cc"
OpLslx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37085 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37088 "hcs12x.cc"
)
{
#line 983 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegX(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37105 "hcs12x.cc"
}

static Operation *DecodeOpLslx(CodeType const& code, uint16_t addr)
{
	return new OpLslx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37115 "hcs12x.cc"
OpLsly::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37119 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37122 "hcs12x.cc"
)
{
#line 999 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSLY";
	}
#line 37129 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37133 "hcs12x.cc"
OpLsly::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37137 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37140 "hcs12x.cc"
)
{
#line 1003 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		if ((val & 0x8000) == 0x8000) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val << 1;
		cpu->setRegY(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37157 "hcs12x.cc"
}

static Operation *DecodeOpLsly(CodeType const& code, uint16_t addr)
{
	return new OpLsly(code, addr);
}

// ROL: Rotate Memory/Accumulator Left through carry
#line 69 "hcs12x.isa"
void
#line 37168 "hcs12x.cc"
OpRol_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37172 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37175 "hcs12x.cc"
)
{
#line 1020 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROL $" << std::hex << opr16a;
	}
#line 37182 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37186 "hcs12x.cc"
OpRol_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37190 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37193 "hcs12x.cc"
)
{
#line 1024 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37212 "hcs12x.cc"
}

static Operation *DecodeOpRol_ext(CodeType const& code, uint16_t addr)
{
	return new OpRol_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37222 "hcs12x.cc"
OpRol_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37226 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37229 "hcs12x.cc"
)
{
#line 1042 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROL ";
		xb->disasm(sink);
	}
#line 37237 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37241 "hcs12x.cc"
OpRol_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37245 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37248 "hcs12x.cc"
)
{
#line 1047 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37268 "hcs12x.cc"
}

static Operation *DecodeOpRol_idx(CodeType const& code, uint16_t addr)
{
	return new OpRol_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37278 "hcs12x.cc"
OpRola::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37282 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37285 "hcs12x.cc"
)
{
#line 1066 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLA";
	}
#line 37292 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37296 "hcs12x.cc"
OpRola::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37300 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37303 "hcs12x.cc"
)
{
#line 1070 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37321 "hcs12x.cc"
}

static Operation *DecodeOpRola(CodeType const& code, uint16_t addr)
{
	return new OpRola(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37331 "hcs12x.cc"
OpRolb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37335 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37338 "hcs12x.cc"
)
{
#line 1087 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLB";
	}
#line 37345 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37349 "hcs12x.cc"
OpRolb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37353 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37356 "hcs12x.cc"
)
{
#line 1091 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t carry = 0;
		if ((val & 0x80) == 0x80) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37374 "hcs12x.cc"
}

static Operation *DecodeOpRolb(CodeType const& code, uint16_t addr)
{
	return new OpRolb(code, addr);
}

// ROLW: Rotate word Memory/Accumulator Left through carry
#line 69 "hcs12x.isa"
void
#line 37385 "hcs12x.cc"
OpRolw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37389 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37392 "hcs12x.cc"
)
{
#line 1110 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLw $" << std::hex << opr16a;
	}
#line 37399 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37403 "hcs12x.cc"
OpRolw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37407 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37410 "hcs12x.cc"
)
{
#line 1114 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37429 "hcs12x.cc"
}

static Operation *DecodeOpRolw_ext(CodeType const& code, uint16_t addr)
{
	return new OpRolw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37439 "hcs12x.cc"
OpRolw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37443 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37446 "hcs12x.cc"
)
{
#line 1132 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLW ";
		xb->disasm(sink);
	}
#line 37454 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37458 "hcs12x.cc"
OpRolw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37462 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37465 "hcs12x.cc"
)
{
#line 1137 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37485 "hcs12x.cc"
}

static Operation *DecodeOpRolw_idx(CodeType const& code, uint16_t addr)
{
	return new OpRolw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37495 "hcs12x.cc"
OpRolx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37499 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37502 "hcs12x.cc"
)
{
#line 1156 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLX";
	}
#line 37509 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37513 "hcs12x.cc"
OpRolx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37517 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37520 "hcs12x.cc"
)
{
#line 1160 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37538 "hcs12x.cc"
}

static Operation *DecodeOpRolx(CodeType const& code, uint16_t addr)
{
	return new OpRolx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37548 "hcs12x.cc"
OpRoly::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37552 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37555 "hcs12x.cc"
)
{
#line 1177 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROLY";
	}
#line 37562 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37566 "hcs12x.cc"
OpRoly::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37570 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37573 "hcs12x.cc"
)
{
#line 1181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t carry = 0;
		if ((val & 0x8000) == 0x8000) { carry = 1; }
		val = (val << 1) | carry;
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37591 "hcs12x.cc"
}

static Operation *DecodeOpRoly(CodeType const& code, uint16_t addr)
{
	return new OpRoly(code, addr);
}

// LSR: Logical Shift Right
#line 69 "hcs12x.isa"
void
#line 37602 "hcs12x.cc"
OpLsr_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37606 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37609 "hcs12x.cc"
)
{
#line 1199 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSR $" << std::hex << opr16a;
	}
#line 37616 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37620 "hcs12x.cc"
OpLsr_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37624 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37627 "hcs12x.cc"
)
{
#line 1203 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();}	else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37645 "hcs12x.cc"
}

static Operation *DecodeOpLsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsr_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37655 "hcs12x.cc"
OpLsr_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37659 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37662 "hcs12x.cc"
)
{
#line 1220 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSR ";
		xb->disasm(sink);
	}
#line 37670 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37674 "hcs12x.cc"
OpLsr_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37678 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37681 "hcs12x.cc"
)
{
#line 1225 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite8(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37700 "hcs12x.cc"
}

static Operation *DecodeOpLsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsr_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37710 "hcs12x.cc"
OpLsra::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37714 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37717 "hcs12x.cc"
)
{
#line 1243 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRA";
	}
#line 37724 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37728 "hcs12x.cc"
OpLsra::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37732 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37735 "hcs12x.cc"
)
{
#line 1247 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegA(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37752 "hcs12x.cc"
}

static Operation *DecodeOpLsra(CodeType const& code, uint16_t addr)
{
	return new OpLsra(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37762 "hcs12x.cc"
OpLsrb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37766 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37769 "hcs12x.cc"
)
{
#line 1263 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRB";
	}
#line 37776 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37780 "hcs12x.cc"
OpLsrb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37784 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37787 "hcs12x.cc"
)
{
#line 1267 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		if ((val & 0x01) == 0x01) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegB(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37804 "hcs12x.cc"
}

static Operation *DecodeOpLsrb(CodeType const& code, uint16_t addr)
{
	return new OpLsrb(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37814 "hcs12x.cc"
OpLsrd::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37818 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37821 "hcs12x.cc"
)
{
#line 1283 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRD";
	}
#line 37828 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37832 "hcs12x.cc"
OpLsrd::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37836 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37839 "hcs12x.cc"
)
{
#line 1287 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegD();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();}	else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegD(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37856 "hcs12x.cc"
}

static Operation *DecodeOpLsrd(CodeType const& code, uint16_t addr)
{
	return new OpLsrd(code, addr);
}

// LSRW: Logical Shift Right word
#line 69 "hcs12x.isa"
void
#line 37867 "hcs12x.cc"
OpLsrw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37871 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37874 "hcs12x.cc"
)
{
#line 1304 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRW $" << std::hex << opr16a;
	}
#line 37881 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37885 "hcs12x.cc"
OpLsrw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37889 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37892 "hcs12x.cc"
)
{
#line 1308 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();}	else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37910 "hcs12x.cc"
}

static Operation *DecodeOpLsrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpLsrw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37920 "hcs12x.cc"
OpLsrw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37924 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37927 "hcs12x.cc"
)
{
#line 1325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRW ";
		xb->disasm(sink);
	}
#line 37935 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37939 "hcs12x.cc"
OpLsrw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37943 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 37946 "hcs12x.cc"
)
{
#line 1330 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else  { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->memWrite16(addr, val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 37965 "hcs12x.cc"
}

static Operation *DecodeOpLsrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpLsrw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 37975 "hcs12x.cc"
OpLsrx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 37979 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 37982 "hcs12x.cc"
)
{
#line 1348 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRX";
	}
#line 37989 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 37993 "hcs12x.cc"
OpLsrx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 37997 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38000 "hcs12x.cc"
)
{
#line 1352 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegX(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38017 "hcs12x.cc"
}

static Operation *DecodeOpLsrx(CodeType const& code, uint16_t addr)
{
	return new OpLsrx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38027 "hcs12x.cc"
OpLsry::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38031 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38034 "hcs12x.cc"
)
{
#line 1368 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "LSRY";
	}
#line 38041 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38045 "hcs12x.cc"
OpLsry::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38049 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38052 "hcs12x.cc"
)
{
#line 1372 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		if ((val & 0x0001) == 0x0001) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

		val = val >> 1;
		cpu->setRegY(val);

		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38069 "hcs12x.cc"
}

static Operation *DecodeOpLsry(CodeType const& code, uint16_t addr)
{
	return new OpLsry(code, addr);
}

// ROR: Rotate Memory/Accumulator Right through Carry
#line 69 "hcs12x.isa"
void
#line 38080 "hcs12x.cc"
OpRor_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38084 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38087 "hcs12x.cc"
)
{
#line 1389 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROR $" << std::hex << opr16a;
	}
#line 38094 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38098 "hcs12x.cc"
OpRor_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38102 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38105 "hcs12x.cc"
)
{
#line 1393 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		cpu->ccr->clrN();

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38124 "hcs12x.cc"
}

static Operation *DecodeOpRor_ext(CodeType const& code, uint16_t addr)
{
	return new OpRor_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38134 "hcs12x.cc"
OpRor_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38138 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38141 "hcs12x.cc"
)
{
#line 1411 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ROR ";
		xb->disasm(sink);
	}
#line 38149 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38153 "hcs12x.cc"
OpRor_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38157 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38160 "hcs12x.cc"
)
{
#line 1416 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38180 "hcs12x.cc"
}

static Operation *DecodeOpRor_idx(CodeType const& code, uint16_t addr)
{
	return new OpRor_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38190 "hcs12x.cc"
OpRora::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38194 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38197 "hcs12x.cc"
)
{
#line 1435 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORA";
	}
#line 38204 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38208 "hcs12x.cc"
OpRora::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38212 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38215 "hcs12x.cc"
)
{
#line 1439 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38233 "hcs12x.cc"
}

static Operation *DecodeOpRora(CodeType const& code, uint16_t addr)
{
	return new OpRora(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38243 "hcs12x.cc"
OpRorb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38247 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38250 "hcs12x.cc"
)
{
#line 1456 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORB";
	}
#line 38257 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38261 "hcs12x.cc"
OpRorb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38265 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38268 "hcs12x.cc"
)
{
#line 1460 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }
		val = (carry << 7) | (val >> 1);
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38286 "hcs12x.cc"
}

static Operation *DecodeOpRorb(CodeType const& code, uint16_t addr)
{
	return new OpRorb(code, addr);
}

// RORW: Rotate word Memory/Accumulator Right through Carry
#line 69 "hcs12x.isa"
void
#line 38297 "hcs12x.cc"
OpRorw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38301 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38304 "hcs12x.cc"
)
{
#line 1479 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORW $" << std::hex << opr16a;
	}
#line 38311 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38315 "hcs12x.cc"
OpRorw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38319 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38322 "hcs12x.cc"
)
{
#line 1483 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38341 "hcs12x.cc"
}

static Operation *DecodeOpRorw_ext(CodeType const& code, uint16_t addr)
{
	return new OpRorw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38351 "hcs12x.cc"
OpRorw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38355 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38358 "hcs12x.cc"
)
{
#line 1501 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORW ";
		xb->disasm(sink);
	}
#line 38366 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38370 "hcs12x.cc"
OpRorw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38374 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38377 "hcs12x.cc"
)
{
#line 1506 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38397 "hcs12x.cc"
}

static Operation *DecodeOpRorw_idx(CodeType const& code, uint16_t addr)
{
	return new OpRorw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38407 "hcs12x.cc"
OpRorx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38411 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38414 "hcs12x.cc"
)
{
#line 1525 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORX";
	}
#line 38421 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38425 "hcs12x.cc"
OpRorx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38429 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38432 "hcs12x.cc"
)
{
#line 1529 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38450 "hcs12x.cc"
}

static Operation *DecodeOpRorx(CodeType const& code, uint16_t addr)
{
	return new OpRorx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38460 "hcs12x.cc"
OpRory::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38464 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38467 "hcs12x.cc"
)
{
#line 1546 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "RORY";
	}
#line 38474 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38478 "hcs12x.cc"
OpRory::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38482 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38485 "hcs12x.cc"
)
{
#line 1550 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }
		val = (carry << 15) | (val >> 1);
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38503 "hcs12x.cc"
}

static Operation *DecodeOpRory(CodeType const& code, uint16_t addr)
{
	return new OpRory(code, addr);
}

// ASR: Arithmetic Shift Right
#line 69 "hcs12x.isa"
void
#line 38514 "hcs12x.cc"
OpAsr_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38518 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38521 "hcs12x.cc"
)
{
#line 1568 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASR $" << std::hex << opr16a;
	}
#line 38528 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38532 "hcs12x.cc"
OpAsr_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38536 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38539 "hcs12x.cc"
)
{
#line 1572 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38561 "hcs12x.cc"
}

static Operation *DecodeOpAsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpAsr_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38571 "hcs12x.cc"
OpAsr_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38575 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38578 "hcs12x.cc"
)
{
#line 1593 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASR ";
		xb->disasm(sink);
	}
#line 38586 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38590 "hcs12x.cc"
OpAsr_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38594 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38597 "hcs12x.cc"
)
{
#line 1598 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t val = cpu->memRead8(addr);

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite8(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38620 "hcs12x.cc"
}

static Operation *DecodeOpAsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpAsr_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38630 "hcs12x.cc"
OpAsra::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38634 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38637 "hcs12x.cc"
)
{
#line 1620 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRA";
	}
#line 38644 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38648 "hcs12x.cc"
OpAsra::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38652 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38655 "hcs12x.cc"
)
{
#line 1624 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegA();

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegA(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38676 "hcs12x.cc"
}

static Operation *DecodeOpAsra(CodeType const& code, uint16_t addr)
{
	return new OpAsra(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38686 "hcs12x.cc"
OpAsrb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38690 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38693 "hcs12x.cc"
)
{
#line 1644 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRB";
	}
#line 38700 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38704 "hcs12x.cc"
OpAsrb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38708 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38711 "hcs12x.cc"
)
{
#line 1648 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint8_t val = cpu->getRegB();

		uint8_t msb = val & 0x80;

		uint8_t carry = 0;
		if ((val & 0x01) == 0x01) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegB(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38732 "hcs12x.cc"
}

static Operation *DecodeOpAsrb(CodeType const& code, uint16_t addr)
{
	return new OpAsrb(code, addr);
}

// ASRW: Arithmetic Shift Right word
#line 69 "hcs12x.isa"
void
#line 38743 "hcs12x.cc"
OpAsrw_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38747 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38750 "hcs12x.cc"
)
{
#line 1669 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRW $" << std::hex << opr16a;
	}
#line 38757 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38761 "hcs12x.cc"
OpAsrw_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38765 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38768 "hcs12x.cc"
)
{
#line 1673 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38790 "hcs12x.cc"
}

static Operation *DecodeOpAsrw_ext(CodeType const& code, uint16_t addr)
{
	return new OpAsrw_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38800 "hcs12x.cc"
OpAsrw_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38804 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38807 "hcs12x.cc"
)
{
#line 1694 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRW ";
		xb->disasm(sink);
	}
#line 38815 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38819 "hcs12x.cc"
OpAsrw_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38823 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38826 "hcs12x.cc"
)
{
#line 1699 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint16_t val = cpu->memRead16(addr);

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->memWrite16(addr, val);

		if (carry) { cpu->ccr->setC();} else { cpu->ccr->clrC();}
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38849 "hcs12x.cc"
}

static Operation *DecodeOpAsrw_idx(CodeType const& code, uint16_t addr)
{
	return new OpAsrw_idx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38859 "hcs12x.cc"
OpAsrx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38863 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38866 "hcs12x.cc"
)
{
#line 1721 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRX";
	}
#line 38873 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38877 "hcs12x.cc"
OpAsrx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38881 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38884 "hcs12x.cc"
)
{
#line 1725 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegX();

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegX(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38905 "hcs12x.cc"
}

static Operation *DecodeOpAsrx(CodeType const& code, uint16_t addr)
{
	return new OpAsrx(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 38915 "hcs12x.cc"
OpAsry::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38919 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38922 "hcs12x.cc"
)
{
#line 1745 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "ASRY";
	}
#line 38929 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38933 "hcs12x.cc"
OpAsry::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38937 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38940 "hcs12x.cc"
)
{
#line 1749 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		uint16_t val = cpu->getRegY();

		uint16_t msb = val & 0x8000;

		uint16_t carry = 0;
		if ((val & 0x0001) == 0x0001) { carry = 1; }

		val = (val >> 1) | msb;
		cpu->setRegY(val);

		if (carry) { cpu->ccr->setC(); }	else { cpu->ccr->clrC(); }
		if (val == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((val & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		if (cpu->ccr->getN() ^ cpu->ccr->getC()) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
	}
#line 38961 "hcs12x.cc"
}

static Operation *DecodeOpAsry(CodeType const& code, uint16_t addr)
{
	return new OpAsry(code, addr);
}

// BTAS: Bit(s) Test and Set in Memory
#line 69 "hcs12x.isa"
void
#line 38972 "hcs12x.cc"
OpBtas_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 38976 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 38979 "hcs12x.cc"
)
{
#line 1771 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BTAS $" << std::hex << opr8a << ", $" << std::hex << msk8;
	}
#line 38986 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 38990 "hcs12x.cc"
OpBtas_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 38994 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 38997 "hcs12x.cc"
)
{
#line 1775 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		/*
		If (M) & (Mask) = 0, then set Z, else clear Z
		(M) | (Mask) => M

		N: Set if MSB of test is set; cleared otherwise
		Z: Set if test is $00; cleared otherwise
		V: 0; cleared
		*/
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		uint8_t test = opr8aVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, opr8aVal | msk8);
	}
#line 39020 "hcs12x.cc"
}

static Operation *DecodeOpBtas_dir(CodeType const& code, uint16_t addr)
{
	return new OpBtas_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 39030 "hcs12x.cc"
OpBtas_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39034 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39037 "hcs12x.cc"
)
{
#line 1797 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BTAS $" << std::hex << opr16a << ", $" << std::hex << msk8;
	}
#line 39044 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39048 "hcs12x.cc"
OpBtas_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39052 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39055 "hcs12x.cc"
)
{
#line 1801 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		uint8_t test = opr16aVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, opr16aVal | msk8);
	}
#line 39071 "hcs12x.cc"
}

static Operation *DecodeOpBtas_ext(CodeType const& code, uint16_t addr)
{
	return new OpBtas_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 39081 "hcs12x.cc"
OpBtas_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39085 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39088 "hcs12x.cc"
)
{
#line 1816 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{
		sink << "BTAS ";
		xb->disasm(sink);
		sink << ", $" << std::hex << msk8;
	}
#line 39097 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39101 "hcs12x.cc"
OpBtas_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39105 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39108 "hcs12x.cc"
)
{
#line 1822 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./bit.isa"
	{

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		uint8_t test = xbVal & msk8;
		if (test == 0) { cpu->ccr->setZ();} else { cpu->ccr->clrZ();}
		if ((test & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN();}
		cpu->ccr->clrV();

		cpu->memWrite8(addr, xbVal | msk8);
	}
#line 39124 "hcs12x.cc"
}

static Operation *DecodeOpBtas_idx(CodeType const& code, uint16_t addr)
{
	return new OpBtas_idx(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// EMUL: 16 by 16 Bit Multiply (unsigned) (D) x (Y) => Y:D
#line 69 "hcs12x.isa"
void
#line 39168 "hcs12x.cc"
OpEmul::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39172 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39175 "hcs12x.cc"
)
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "EMUL";
	}
#line 39182 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39186 "hcs12x.cc"
OpEmul::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39190 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39193 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint32_t result = (uint32_t) cpu->getRegD() * cpu->getRegY();

		cpu->setRegY(result >> 16);
		cpu->setRegD((uint16_t) result);

		if ((result & 0x00008000) == 0x00008000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		if ((result & 0x80000000) == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 39207 "hcs12x.cc"
}

static Operation *DecodeOpEmul(CodeType const& code, uint16_t addr)
{
	return new OpEmul(code, addr);
}

// EMULS: 16 by 16 Bit Multiply (signed) (D) x (Y) => Y:D
#line 69 "hcs12x.isa"
void
#line 39218 "hcs12x.cc"
OpEmuls::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39222 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39225 "hcs12x.cc"
)
{
#line 57 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "EMULS";
	}
#line 39232 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39236 "hcs12x.cc"
OpEmuls::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39240 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39243 "hcs12x.cc"
)
{
#line 61 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint32_t result = (uint32_t) cpu->getRegD() * cpu->getRegY();

		cpu->setRegY((uint16_t) (result >> 16));
		cpu->setRegD((uint16_t) result);

		/*
		* C: Set if bit 15 of the result is set; cleared otherwise
		*/
		if ((result & 0x8000) == 0x8000) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }

		/*
		* Z: Set if result is $00000000; cleared otherwise
		*/
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

		/*
		* N: Set if the MSB of the result is set; cleared otherwise
		*/
		if ((result & 0x80000000) == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }


	}
#line 39270 "hcs12x.cc"
}

static Operation *DecodeOpEmuls(CodeType const& code, uint16_t addr)
{
	return new OpEmuls(code, addr);
}

// MUL: 8 by 8 Bit Multiply (unsigned) (A) x (B) => A:B
#line 69 "hcs12x.isa"
void
#line 39281 "hcs12x.cc"
OpMul::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39285 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39288 "hcs12x.cc"
)
{
#line 88 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "MUL";
	}
#line 39295 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39299 "hcs12x.cc"
OpMul::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39303 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39306 "hcs12x.cc"
)
{
#line 92 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		uint16_t result = cpu->getRegA() * cpu->getRegB();

		cpu->setRegD(result);

		if ((result & 0x0080) == 0x0080) { cpu->ccr->setC(); } else { cpu->ccr->clrC(); }
	}
#line 39317 "hcs12x.cc"
}

static Operation *DecodeOpMul(CodeType const& code, uint16_t addr)
{
	return new OpMul(code, addr);
}

// EDIV: 32 by 16 bit to 16 bit divide (unsigned) (Y:D) div (X) => Y remainder => D
#line 69 "hcs12x.isa"
void
#line 39328 "hcs12x.cc"
OpEdiv::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39332 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39335 "hcs12x.cc"
)
{
#line 103 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "EDIV";
	}
#line 39342 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39346 "hcs12x.cc"
OpEdiv::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39350 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39353 "hcs12x.cc"
)
{
#line 107 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		// TODO
		/*
		* source_url: http://www.embeddedrelated.com/groups/68hc12/show/3775.php
		*
		* U16 X, Y, Z;
		* X = (U16)(((U32)Y * 1000) / (U16)Z);
		*
		* with an EMUL and an EDIV is that if the 32/16 bit EDIV division overflows, then the
		* HC12 does not generate a result at all (it just sets the V flag).
		* Therefore using a simple EDIV does not generate the same result
		* for all possible Y and Z's as calculating it with longs.
		*/
		uint32_t dividend = ((uint32_t) cpu->getRegY() << 16) | (0x00FF & cpu->getRegD());
		uint16_t divisor = cpu->getRegX();
		uint32_t quotion = cpu->getRegY();
		uint16_t remind = cpu->getRegD();

		if (divisor == 0) {
			// TODO: throw an exception "division by 0"
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;

			if (quotion > 0xFFFF) {
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();

				cpu->setRegY((uint16_t) quotion);
				cpu->setRegD(remind);

				if (quotion == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
				if ((cpu->getRegY() & 0x8000) == 0x8000 ) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
			}
		}

	}
#line 39397 "hcs12x.cc"
}

static Operation *DecodeOpEdiv(CodeType const& code, uint16_t addr)
{
	return new OpEdiv(code, addr);
}

// EDIVS: 32 by 16 bit to 16 bit divide (signed)  (Y:D) div (X) => Y remainder => D
#line 69 "hcs12x.isa"
void
#line 39408 "hcs12x.cc"
OpEdivs::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39412 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39415 "hcs12x.cc"
)
{
#line 151 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "EDIVS";
	}
#line 39422 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39426 "hcs12x.cc"
OpEdivs::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39430 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39433 "hcs12x.cc"
)
{
#line 155 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{

		uint32_t dividend = ((uint32_t) cpu->getRegY() << 16) | (0x00FF & cpu->getRegD());
		uint16_t divisor = cpu->getRegX();
		uint32_t quotion = cpu->getRegY();
		uint16_t remind = cpu->getRegD();

		if (divisor == 0) {
			// TODO: throw an exception "division by 0"
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();

			quotion = dividend / divisor;
			remind = dividend % divisor;

			if (quotion > 0x7FFF) {
			/* NOTA:
				* For EDIVS, there is a mistake in specification about setting V.
				*/
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();

				cpu->setRegY((uint16_t) quotion); // cpu->setRegY((uint16_t) quotion | ((quotion >> 16) & 0x8000));
				cpu->setRegD(remind);

				if (quotion == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }

				if (cpu->getRegY() & 0x8000 == 0x8000 ) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
			}
		}
	}
#line 39470 "hcs12x.cc"
}

static Operation *DecodeOpEdivs(CodeType const& code, uint16_t addr)
{
	return new OpEdivs(code, addr);
}

// FDIV: 16 by 16 fractional divide
#line 69 "hcs12x.isa"
void
#line 39481 "hcs12x.cc"
OpFdiv::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39485 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39488 "hcs12x.cc"
)
{
#line 192 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "FDIV";
	}
#line 39495 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39499 "hcs12x.cc"
OpFdiv::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39503 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39506 "hcs12x.cc"
)
{
#line 196 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* FDIV is equivalent to multiplying the numerator by 2^16 and then performing 32 by 16-bit integer division. */

		uint32_t dividend = (uint32_t) cpu->getRegD() << 16;
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = dividend;

		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			if (dividend >= divisor) {
				cpu->ccr->setV();
				} else {
				cpu->ccr->clrV();
				quotion = dividend / divisor;
				remind = dividend % divisor;
			}
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
	}
#line 39535 "hcs12x.cc"
}

static Operation *DecodeOpFdiv(CodeType const& code, uint16_t addr)
{
	return new OpFdiv(code, addr);
}

// IDIV: 16 by 16 integer divide (unsigned)
#line 69 "hcs12x.isa"
void
#line 39546 "hcs12x.cc"
OpIdiv::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39550 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39553 "hcs12x.cc"
)
{
#line 225 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "IDIV";
	}
#line 39560 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39564 "hcs12x.cc"
OpIdiv::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39568 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39571 "hcs12x.cc"
)
{
#line 229 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* In the case of division by zero, C is set, the quotient is set to $FFFF,
		and the remainder is indeterminate. */

		uint16_t dividend = cpu->getRegD();
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = dividend;

		cpu->ccr->clrV();
		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
	}
#line 39597 "hcs12x.cc"
}

static Operation *DecodeOpIdiv(CodeType const& code, uint16_t addr)
{
	return new OpIdiv(code, addr);
}

// IDIVS: 16 by 16 integer divide (signed)
#line 69 "hcs12x.isa"
void
#line 39608 "hcs12x.cc"
OpIdivs::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39612 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39615 "hcs12x.cc"
)
{
#line 255 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "IDIVS";
	}
#line 39622 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39626 "hcs12x.cc"
OpIdivs::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39630 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39633 "hcs12x.cc"
)
{
#line 259 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* In the case of division by zero, C is set, the quotient is set to $FFFF,
		and the remainder is indeterminate. */

		uint16_t dividend = cpu->getRegD();
		uint16_t divisor = cpu->getRegX();
		uint16_t quotion = 0xFFFF;
		uint16_t remind = dividend;

		cpu->ccr->clrV();
		if (divisor == 0) {
			cpu->ccr->setC();
			} else {
			cpu->ccr->clrC();
			quotion = dividend / divisor;
			remind = dividend % divisor;
		}

		cpu->setRegX(quotion);
		cpu->setRegD(remind);
		/*
		* V: Set if the result was > $7FFF or < $8000; cleared otherwise
		* V: Set for numerator $8000 (-32768) and denominator $FFFF (-1) result is (+32768)
		* Undefined after division by zero
		*/
		if ((dividend == 0x8000) && (divisor == 0xFFFF)) { cpu->ccr->setV(); } else { cpu->ccr->clrV();}
		if (quotion == 0) { cpu->ccr->setZ(); }  else { cpu->ccr->clrZ(); }
		if ((quotion & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }
	}
#line 39666 "hcs12x.cc"
}

static Operation *DecodeOpIdivs(CodeType const& code, uint16_t addr)
{
	return new OpIdivs(code, addr);
}

/* ********* Multiply and Accumulate instruction ********* */
// EMACS: Multiply an Accumulate Instruction
#line 69 "hcs12x.isa"
void
#line 39678 "hcs12x.cc"
OpEmacs::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39682 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39685 "hcs12x.cc"
)
{
#line 295 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		sink << "EMACS $" << std::hex << opr16a;
	}
#line 39692 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39696 "hcs12x.cc"
OpEmacs::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39700 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39703 "hcs12x.cc"
)
{
#line 299 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./multiplication_division.isa"
	{
		/* operation: (M(X) : M(X+1)) × (M(Y) : M(Y+1)) + (M ~ M+3) ⇒ M ~ M+3 */

		uint16_t xOpr, yOpr;
		uint32_t accOpr, result, inter;


		xOpr = cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegX(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		yOpr = cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegY(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		accOpr = cpu->memRead16(cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		accOpr = (accOpr << 16) | cpu->memRead16(cpu->mmc->getPhysicalAddress(opr16a+2, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));

		inter = (uint32_t) xOpr * yOpr;
		result =  inter + accOpr;

		cpu->memWrite16(cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), (uint16_t) (accOpr >> 16));
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(opr16a+2, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), (uint16_t) accOpr);

		// N: Set if MSB of result is set; cleared otherwise
		if (result & 0x80000000 == 0x80000000) { cpu->ccr->setN(); } else { cpu->ccr->clrN(); }

		// Z: Set if result is $00000000; cleared otherwise
		if (result == 0) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ(); }
		/*
		* I: Intermediate result
		* R: Result
		* M: 32 bit accumulator in memory (second operand in the addition)
		* */

		/* V: M31 • I31 • !R31 + !M31 • !I31 • R31
		* Set if result > $7FFFFFFF (+ overflow) or < $80000000 (– underflow)
		* Indicates two’s complement overflow
		*/
		// if (result > 0x7FFFFFFF) { cpu->ccr->setV(); } else { cpu->ccr->clrV(); }
		if (((accOpr & 0x80000000) & (inter & 0x80000000) & ~(result & 0x80000000) | ~(accOpr & 0x80000000) & ~(inter & 0x80000000) & (result & 0x80000000)) >> 31) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

		/* C: M15 • I15 + I15 • !R15 + !R15 • M15
		* Set if there was a carry from bit 15 of the result; cleared otherwise
		* Indicates a carry from low word to high word of the result occurred
		*/
		if (((accOpr & 0x00008000) & (inter & 0x00008000) | (inter & 0x00008000) & ~(result & 0x00008000) | ~(result & 0x00008000) & (accOpr & 0x00008000)) >> 15) { cpu->ccr->setC();} else { cpu->ccr->clrC();}

	}
#line 39750 "hcs12x.cc"
}

static Operation *DecodeOpEmacs(CodeType const& code, uint16_t addr)
{
	return new OpEmacs(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// TODO: Very Important
// relied to instruction Queue
// Do not forgot to perform three program word fetches to refill the queue after a branch or subroutine call
/* ********* Short Branch Instructions ******** */
#line 69 "hcs12x.isa"
void
#line 39797 "hcs12x.cc"
OpSbr::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39801 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39804 "hcs12x.cc"
)
{
#line 44 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		switch (sel) {
			case 0x0: sink << "BRA ";break;
			case 0x1: sink << "BRN ";break;
			case 0x2: sink << "BHI ";break;
			case 0x3: sink << "BLS ";break;
			case 0x4: sink << "BCC "; /* same opcode for BHS */ break;
			case 0x5: sink << "BCS "; /* same opcode for BLO */ break;
			case 0x6: sink << "BNE ";break;
			case 0x7: sink << "BEQ ";break;
			case 0x8: sink << "BVC ";break;
			case 0x9: sink << "BVS ";break;
			case 0xA: sink << "BPL ";break;
			case 0xB: sink << "BMI ";break;
			case 0xC: sink << "BGE ";break;
			case 0xD: sink << "BLT ";break;
			case 0xE: sink << "BGT ";break;
			case 0xF: sink << "BLE ";break;
		}
		sink << std::dec << rel8;
	}
#line 39830 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39834 "hcs12x.cc"
OpSbr::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39838 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39841 "hcs12x.cc"
)
{
#line 67 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		bool branch = false;

		switch (sel) {
			case 0x0: // BRA: branch always
			branch = true;
			break;
			case 0x1: // BRN: branch never
			// Nothing to do
			break;
			case 0x2: // BHI: branch if higher (C+Z=0)
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 0) branch = true;
			break;
			case 0x3: // BLS: branch if lower or same
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 1) branch = true;
			break;
			case 0x4: // BCC: branch if carel8y clear or BHS: branch if higher or same
			if (cpu->ccr->getC() == 0) branch = true;
			break;
			case 0x5: // BCS: branch if carel8y set or BLO: branch if lower
			if (cpu->ccr->getC() == 1) branch = true;
			break;
			case 0x6: // BNE: branch if not equal
			if (cpu->ccr->getZ() == 0) branch = true;
			break;
			case 0x7: // BEQ: branch if equal
			if (cpu->ccr->getZ() == 1) branch = true;
			break;
			case 0x8: // BVC: branch if overflow clear
			if (cpu->ccr->getV() == 0) branch = true;
			break;
			case 0x9: // BVS: branch if overflow set
			if (cpu->ccr->getV() == 1) branch = true;
			break;
			case 0xA: // BPL: branch if plus
			if (cpu->ccr->getN() == 0) branch = true;
			break;
			case 0xB: // BMI: branch if minus
			if (cpu->ccr->getN() == 1) branch = true;
			break;
			case 0xC: // BGE: branch if greater than or equal
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 0) branch = true;
			break;
			case 0xD: // BLT: branch if less than
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 1) branch = true;
			break;
			case 0xE: { // BGT: branch if greater than
				if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 0) branch = true;
			}
			break;
			case 0xF: // BLE: branch if less than or equal
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 1) branch = true;
			break;
		}

		if (branch) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 39906 "hcs12x.cc"
}

static Operation *DecodeOpSbr(CodeType const& code, uint16_t addr)
{
	return new OpSbr(code, addr);
}

/* ******** Long Branch Instructions ******* */
#line 69 "hcs12x.isa"
void
#line 39917 "hcs12x.cc"
OpLbr::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 39921 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 39924 "hcs12x.cc"
)
{
#line 133 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		switch (sel) {
			case 0x0: sink << "LBRA ";break;
			case 0x1: sink << "LBRN ";break;
			case 0x2: sink << "LBHI ";break;
			case 0x3: sink << "LBLS ";break;
			case 0x4: sink << "LBCC "; /* same opcode for LBHS */ break;
			case 0x5: sink << "LBCS "; /* same opcode for LBLO */ break;
			case 0x6: sink << "LBNE ";break;
			case 0x7: sink << "LBEQ ";break;
			case 0x8: sink << "LBVC ";break;
			case 0x9: sink << "LBVS ";break;
			case 0xA: sink << "LBPL ";break;
			case 0xB: sink << "LBMI ";break;
			case 0xC: sink << "LBGE ";break;
			case 0xD: sink << "LBLT ";break;
			case 0xE: sink << "LBGT ";break;
			case 0xF: sink << "LBLE ";break;
		}
		sink << std::dec << rel16;
	}
#line 39950 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 39954 "hcs12x.cc"
OpLbr::execute(
#line 63 "hcs12x.isa"
CPU *
#line 39958 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 39961 "hcs12x.cc"
)
{
#line 156 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		bool branch = false;

		switch (sel) {
			case 0x0: // LBRA: branch always
			branch = true;
			break;
			case 0x1: // LBRN: branch never
			// Nothing to do
			break;
			case 0x2: // LBHI: branch if higher (C+Z=0)
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 0) branch = true;
			break;
			case 0x3: // LBLS: branch if lower or same
			if ((cpu->ccr->getC() | cpu->ccr->getZ()) == 1) branch = true;
			break;
			case 0x4: // LBCC: branch if carel8y clear or LBHS: branch if higher or same
			if (cpu->ccr->getC() == 0) branch = true;
			break;
			case 0x5: // LBCS: branch if carel8y set or LBLO: branch if lower
			if (cpu->ccr->getC() == 1) branch = true;
			break;
			case 0x6: // LBNE: branch if not equal
			if (cpu->ccr->getZ() == 0) branch = true;
			break;
			case 0x7: // LBEQ: branch if equal
			if (cpu->ccr->getZ() == 1) branch = true;
			break;
			case 0x8: // LBVC: branch if overflow clear
			if (cpu->ccr->getV() == 0) branch = true;
			break;
			case 0x9: // LBVS: branch if overflow set
			if (cpu->ccr->getV() == 1) branch = true;
			break;
			case 0xA: // LBPL: branch if plus
			if (cpu->ccr->getN() == 0) branch = true;
			break;
			case 0xB: // LBMI: branch if minus
			if (cpu->ccr->getN() == 1) branch = true;
			break;
			case 0xC: // LBGE: branch if greater than or equal
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 0) branch = true;
			break;
			case 0xD: // LBLT: branch if less than
			if ((cpu->ccr->getN() ^ cpu->ccr->getV()) == 1) branch = true;
			break;
			case 0xE: // LBGT: branch if greater than
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 0) branch = true;
			break;
			case 0xF: // LBLE: branch if less than or equal
			if ((cpu->ccr->getZ() | (cpu->ccr->getN() ^ cpu->ccr->getV())) == 1) branch = true;
			break;
		}

		if (branch) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel16);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 40025 "hcs12x.cc"
}

static Operation *DecodeOpLbr(CodeType const& code, uint16_t addr)
{
	return new OpLbr(code, addr);
}

/* ******** Bit Condition Branch instructions *********** */
// if (b==1) BRCLR_instruction else BRSET_instruction;
#line 69 "hcs12x.isa"
void
#line 40037 "hcs12x.cc"
OpBr_clr_set_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40041 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40044 "hcs12x.cc"
)
{
#line 223 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		if (b==1) {
			sink << "BRCLR $";
			} else {
			sink << "BRSET $";
		}

		sink << std::hex << opr8a << ", $" << std::hex << msk8 << ", " << std::dec << rel8;
	}
#line 40057 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40061 "hcs12x.cc"
OpBr_clr_set_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40065 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40068 "hcs12x.cc"
)
{
#line 233 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		uint8_t opr8aVal = cpu->memRead8(addr);

		if (b==0) {
			opr8aVal = ~opr8aVal;
		}

		if ((opr8aVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 40086 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_dir(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40096 "hcs12x.cc"
OpBr_clr_set_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40100 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40103 "hcs12x.cc"
)
{
#line 250 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		if (b==1) {
			sink << "BRCLR $";
			} else {
			sink << "BRSET $";
		}

		sink << std::hex << opr16a << ", $" << std::hex << msk8 << ", " << std::dec << rel8;
	}
#line 40116 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40120 "hcs12x.cc"
OpBr_clr_set_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40124 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40127 "hcs12x.cc"
)
{
#line 260 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(opr16a, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t opr16aVal = cpu->memRead8(addr);

		if (b==0) {
			opr16aVal = ~opr16aVal;
		}

		if ((opr16aVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 40145 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_ext(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40155 "hcs12x.cc"
OpBr_clr_set_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40159 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40162 "hcs12x.cc"
)
{
#line 277 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		if (b==1) {
			sink << "BRCLR ";
			} else {
			sink << "BRSET ";
		}

		xb->disasm(sink);
		sink << ", $" << std::hex << msk8 << ", " << std::dec << rel8;
	}
#line 40176 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40180 "hcs12x.cc"
OpBr_clr_set_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40184 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40187 "hcs12x.cc"
)
{
#line 288 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		uint8_t xbVal = cpu->memRead8(addr);

		if (b==0) {
			xbVal = ~xbVal;
		}

		if ((xbVal & msk8) == 0) {
			cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

			// TODO: Refill the instruction queue with three program words from the new address
		}
	}
#line 40205 "hcs12x.cc"
}

static Operation *DecodeOpBr_clr_set_idx(CodeType const& code, uint16_t addr)
{
	return new OpBr_clr_set_idx(code, addr);
}

/* ********** Jump and subroutine instructions ******** */
// BSR: Branch to subroutine
#line 69 "hcs12x.isa"
void
#line 40217 "hcs12x.cc"
OpBsr::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40221 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40224 "hcs12x.cc"
)
{
#line 308 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "BSR " << std::dec << rel8;
	}
#line 40231 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40235 "hcs12x.cc"
OpBsr::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40239 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40242 "hcs12x.cc"
)
{
#line 312 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* Subroutine address fi PC
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC((int16_t) cpu->getRegPC() + rel8);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40266 "hcs12x.cc"
}

static Operation *DecodeOpBsr(CodeType const& code, uint16_t addr)
{
	return new OpBsr(code, addr);
}

// CALL: Call subroutine in Expanded Memory
#line 69 "hcs12x.isa"
void
#line 40277 "hcs12x.cc"
OpCall_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40281 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40284 "hcs12x.cc"
)
{
#line 336 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "CALL $" << std::hex << opr16a << ", $" << std::hex << page;
	}
#line 40291 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40295 "hcs12x.cc"
OpCall_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40299 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40302 "hcs12x.cc"
)
{
#line 340 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		cpu->mmc->setPpage(page);
		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 40336 "hcs12x.cc"
}

static Operation *DecodeOpCall_ext(CodeType const& code, uint16_t addr)
{
	return new OpCall_ext(code, addr);
}

// I have to decode indexed-indirect addressing here,
// because in the case of indexed-indirect the value of PPAGE is stored in memory after the subroutine address
// XB decoder return only one address
#line 69 "hcs12x.isa"
void
#line 40349 "hcs12x.cc"
OpCall_16offset_idx_ind::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40353 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40356 "hcs12x.cc"
)
{
#line 377 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		sink << "CALL ";
		sink << "[" << std::dec << n16 << "," << CPU::xb_getAddrRegLabel(rr) << "]";
	}
#line 40365 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40369 "hcs12x.cc"
OpCall_16offset_idx_ind::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40373 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40376 "hcs12x.cc"
)
{
#line 383 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		physical_address_t idxAddr = cpu->mmc->getPhysicalAddress(cpu->xb_getAddrRegValue(rr) + n16, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		address_t subAddr = cpu->memRead16(idxAddr);
		uint8_t   ppageVal = cpu->memRead16(idxAddr+2);

		cpu->mmc->setPpage(ppageVal);
		cpu->setRegPC(subAddr);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 40413 "hcs12x.cc"
}

static Operation *DecodeOpCall_16offset_idx_ind(CodeType const& code, uint16_t addr)
{
	return new OpCall_16offset_idx_ind(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40423 "hcs12x.cc"
OpCall_accD_offset_idx_ind::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40427 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40430 "hcs12x.cc"
)
{
#line 419 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{

		sink << "CALL ";
		sink << "[D," << CPU::xb_getAddrRegLabel(rr) << "]";
	}
#line 40439 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40443 "hcs12x.cc"
OpCall_accD_offset_idx_ind::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40447 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40450 "hcs12x.cc"
)
{
#line 425 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* (SP)-1 => SP
		* (PPAGE) => M[SP]
		* page => PPAGE
		* Subroutine address => PC
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegSP(cpu->getRegSP()-1);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, cpu->mmc->getPpage());

		physical_address_t idxAddr = cpu->mmc->getPhysicalAddress(cpu->getRegD() + cpu->xb_getAddrRegValue(rr), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		address_t subAddr = cpu->memRead16(idxAddr);
		uint8_t   ppageVal = cpu->memRead16(idxAddr+2);

		cpu->mmc->setPpage(ppageVal);
		cpu->setRegPC(subAddr);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 40487 "hcs12x.cc"
}

static Operation *DecodeOpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr)
{
	return new OpCall_accD_offset_idx_ind(code, addr);
}

// JMP: JUMP
#line 69 "hcs12x.isa"
void
#line 40498 "hcs12x.cc"
OpJmp_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40502 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40505 "hcs12x.cc"
)
{
#line 498 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "JMP $" << std::hex << opr16a;
	}
#line 40512 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40516 "hcs12x.cc"
OpJmp_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40520 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40523 "hcs12x.cc"
)
{
#line 502 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40532 "hcs12x.cc"
}

static Operation *DecodeOpJmp_ext(CodeType const& code, uint16_t addr)
{
	return new OpJmp_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40542 "hcs12x.cc"
OpJmp_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40546 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40549 "hcs12x.cc"
)
{
#line 510 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "JMP ";
		xb->disasm(sink);
	}
#line 40557 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40561 "hcs12x.cc"
OpJmp_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40565 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40568 "hcs12x.cc"
)
{
#line 515 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		cpu->setRegPC(xb->getEAddr(cpu));

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40577 "hcs12x.cc"
}

static Operation *DecodeOpJmp_idx(CodeType const& code, uint16_t addr)
{
	return new OpJmp_idx(code, addr);
}

// JSR: Jump to subroutine
#line 69 "hcs12x.isa"
void
#line 40588 "hcs12x.cc"
OpJsr_dir::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40592 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40595 "hcs12x.cc"
)
{
#line 524 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "JSR $" << std::hex << opr8a;
	}
#line 40602 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40606 "hcs12x.cc"
OpJsr_dir::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40610 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40613 "hcs12x.cc"
)
{
#line 528 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (SP)-2 => SP
		* RTNh:RTNl => M[SP]:M[SP+1]
		* subroutine address => PC
		*/
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		addr = cpu->mmc->getPhysicalAddress(opr8a, MEMORY::DIRECT, WO_GLOBAL_ADDRESS);
		cpu->setRegPC((address_t) addr);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40636 "hcs12x.cc"
}

static Operation *DecodeOpJsr_dir(CodeType const& code, uint16_t addr)
{
	return new OpJsr_dir(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40646 "hcs12x.cc"
OpJsr_ext::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40650 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40653 "hcs12x.cc"
)
{
#line 550 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "JSR $" << std::hex << opr16a;
	}
#line 40660 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40664 "hcs12x.cc"
OpJsr_ext::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40668 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40671 "hcs12x.cc"
)
{
#line 554 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC(opr16a);

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40688 "hcs12x.cc"
}

static Operation *DecodeOpJsr_ext(CodeType const& code, uint16_t addr)
{
	return new OpJsr_ext(code, addr);
}

#line 69 "hcs12x.isa"
void
#line 40698 "hcs12x.cc"
OpJsr_idx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40702 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40705 "hcs12x.cc"
)
{
#line 570 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "JSR ";
		xb->disasm(sink);
	}
#line 40713 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40717 "hcs12x.cc"
OpJsr_idx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40721 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40724 "hcs12x.cc"
)
{
#line 575 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		physical_address_t addr;

		cpu->setRegSP(cpu->getRegSP()-2);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() >> 8));
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->memWrite8(addr, (uint8_t) (cpu->getRegPC() & 0x00FF));

		cpu->setRegPC(xb->getEAddr(cpu));

		// TODO: Refill the instruction queue with three program words from the new address
	}
#line 40741 "hcs12x.cc"
}

static Operation *DecodeOpJsr_idx(CodeType const& code, uint16_t addr)
{
	return new OpJsr_idx(code, addr);
}

// RTC: Return from call
#line 69 "hcs12x.isa"
void
#line 40752 "hcs12x.cc"
OpRtc::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40756 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40759 "hcs12x.cc"
)
{
#line 592 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "RTC";
	}
#line 40766 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40770 "hcs12x.cc"
OpRtc::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40774 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40777 "hcs12x.cc"
)
{
#line 596 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		* (M[SP]) => PPage
		* (SP)+1 => SP
		* (M[SP]):(M[SP+1]) => PCh:PCl
		* (SP)+2 => SP
		* TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
		*/

		uint8_t hByte, lByte;
		physical_address_t addr;

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		cpu->mmc->setPpage(cpu->memRead8(addr));
		cpu->setRegSP(cpu->getRegSP() + 1);

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		hByte = cpu->memRead8(addr);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		lByte = cpu->memRead8(addr);
		cpu->setRegPC(((uint16_t) hByte << 8) | (0x00FF & lByte));

		cpu->setRegSP(cpu->getRegSP() + 2);

		// TODO: Refill the instruction queue with three program words from the new address (PPAGE:PC)
	}
#line 40807 "hcs12x.cc"
}

static Operation *DecodeOpRtc(CodeType const& code, uint16_t addr)
{
	return new OpRtc(code, addr);
}

// RTS: Return from subroutine
#line 69 "hcs12x.isa"
void
#line 40818 "hcs12x.cc"
OpRts::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40822 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40825 "hcs12x.cc"
)
{
#line 626 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		sink << "RTS";
	}
#line 40832 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40836 "hcs12x.cc"
OpRts::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40840 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40843 "hcs12x.cc"
)
{
#line 630 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		uint8_t hByte, lByte;
		physical_address_t addr;

		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		hByte = cpu->memRead8(addr);
		addr = cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);
		lByte = cpu->memRead8(addr);
		cpu->setRegPC(((uint16_t) hByte << 8) | (0x00FF & lByte));

		cpu->setRegSP(cpu->getRegSP() + 2);
	}
#line 40859 "hcs12x.cc"
}

static Operation *DecodeOpRts(CodeType const& code, uint16_t addr)
{
	return new OpRts(code, addr);
}

/* ************ Loop Primitive ********* */
#line 69 "hcs12x.isa"
void
#line 40870 "hcs12x.cc"
OpLoop::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 40874 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 40877 "hcs12x.cc"
)
{
#line 648 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		/*
		Encoding for lb is summarized in the following table.
		Bit 3 is not used (don’t care),
		Bit 5 selects branch on zero (DBEQ – 0) or not zero (DBNE – 1) versions,
		and bit 4 is the sign bit of the 9-bit relative offset.
		Bits 7 and 6 would be 0:0 for DBNE.
		*/
		uint8_t abdxys = (b765 << 5) | (b4 << 4) | (b3 << 3) | b210;

		switch (b765) {
			case 0x00: sink << "DBEQ "; break;
			case 0x01: sink << "DBNE "; break;
			case 0x02: sink << "TBEQ "; break;
			case 0x03: sink << "TBNE "; break;
			case 0x04: sink << "IBEQ "; break;
			case 0x05: sink << "IBNE "; break;
			default: sink << "??? ";
		}

		sink << EBLB::getRegName(b210) << " , " << std::dec << rel9;
	}
#line 40903 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 40907 "hcs12x.cc"
OpLoop::execute(
#line 63 "hcs12x.isa"
CPU *
#line 40911 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 40914 "hcs12x.cc"
)
{
#line 671 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./branch.isa"
	{
		address_t branchAddr;
		bool		isBranch = false;

		branchAddr = cpu->getRegPC() + rel9;

		switch (b765) {
			case 0x00: /*DBEQ*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					if (val != 0) { val = val - 1;}
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					if (val != 0) { val = val - 1;}
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val == 0);
			} break;
			case 0x01: /*DBNE*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					if (val != 0) { val = val - 1;}
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					if (val != 0) { val = val - 1;}
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val != 0);

			} break;
			case 0x02: /*TBEQ*/{
				isBranch = (cpu->eblb->getter<uint8_t>(b210) == 0);
			} break;
			case 0x03: /*TBNE*/{
				isBranch = (cpu->eblb->getter<uint8_t>(b210) != 0);
			} break;
			case 0x04: /*IBEQ*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					if (val != 0) { val = val + 1;}
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					if (val != 0) { val = val + 1;}
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val == 0);

			} break;
			case 0x05: /*IBNE*/{
				uint16_t val;
				if (b210 < 0x4) {
					val = cpu->eblb->getter<uint8_t>(b210);
					if (val != 0) { val = val + 1;}
					cpu->eblb->setter<uint8_t>(b210, val);
					} else {
					val = cpu->eblb->getter<uint16_t>(b210);
					if (val != 0) { val = val + 1;}
					cpu->eblb->setter<uint16_t>(b210, val);
				}
				isBranch = (val != 0);

			} break;
			default: /*???*/;
		}

		if (isBranch) {
			cpu->setRegPC(branchAddr);

			// TODO: Refill the instruction queue with three program words from the new address
		}

	}
#line 40996 "hcs12x.cc"
}

static Operation *DecodeOpLoop(CodeType const& code, uint16_t addr)
{
	return new OpLoop(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
/* ********** Stack Pointer instructions ******** */
// CPS: Compare SP to memory
// is emulated in compare_test.isa
// DES: Decrement Sp
// is emulated in decrement_increment.isa
// INS: Increment SP
// is emulated in decrement_increment.isa
// LDS: load SP
// is emulated in load_store.isa
// LEAS: load effective address into SP
// is emulated in load_store.isa
// STS: store SP
// is emulated in load_store.isa
// TSX: transfer SP to X
// is emulated in transfer_exchange.isa
// TSY: transfer SP to Y
// is emulated in transfer_exchange.isa
// TXS: transfer X to SP
// is emulated in transfer_exchange.isa
// TYS: transfer Y to Sp
// is emulated in transfer_exchange.isa
/* ********** stack Operation instructions ********** */
// PSHA: Push A
#line 69 "hcs12x.isa"
void
#line 41062 "hcs12x.cc"
OpPsha::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41066 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41069 "hcs12x.cc"
)
{
#line 75 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHA";
	}
#line 41076 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41080 "hcs12x.cc"
OpPsha::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41084 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41087 "hcs12x.cc"
)
{
#line 79 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{

		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());
	}
#line 41096 "hcs12x.cc"
}

static Operation *DecodeOpPsha(CodeType const& code, uint16_t addr)
{
	return new OpPsha(code, addr);
}

// PSHB: Push B
#line 69 "hcs12x.isa"
void
#line 41107 "hcs12x.cc"
OpPshb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41111 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41114 "hcs12x.cc"
)
{
#line 89 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHB";
	}
#line 41121 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41125 "hcs12x.cc"
OpPshb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41129 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41132 "hcs12x.cc"
)
{
#line 93 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
	}
#line 41140 "hcs12x.cc"
}

static Operation *DecodeOpPshb(CodeType const& code, uint16_t addr)
{
	return new OpPshb(code, addr);
}

// PSHC: Push CCR (8 lower bits)
#line 69 "hcs12x.isa"
void
#line 41151 "hcs12x.cc"
OpPshc::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41155 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41158 "hcs12x.cc"
)
{
#line 102 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHC";
	}
#line 41165 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41169 "hcs12x.cc"
OpPshc::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41173 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41176 "hcs12x.cc"
)
{
#line 106 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-1);
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCRLow());
	}
#line 41184 "hcs12x.cc"
}

static Operation *DecodeOpPshc(CodeType const& code, uint16_t addr)
{
	return new OpPshc(code, addr);
}

// PSHCW: Push CCR word (16 bits)
#line 69 "hcs12x.isa"
void
#line 41195 "hcs12x.cc"
OpPshcw::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41199 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41202 "hcs12x.cc"
)
{
#line 115 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHCW";
	}
#line 41209 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41213 "hcs12x.cc"
OpPshcw::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41217 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41220 "hcs12x.cc"
)
{
#line 119 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());
	}
#line 41228 "hcs12x.cc"
}

static Operation *DecodeOpPshcw(CodeType const& code, uint16_t addr)
{
	return new OpPshcw(code, addr);
}

// PSHD: Push D
#line 69 "hcs12x.isa"
void
#line 41239 "hcs12x.cc"
OpPshd::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41243 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41246 "hcs12x.cc"
)
{
#line 128 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHD";
	}
#line 41253 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41257 "hcs12x.cc"
OpPshd::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41261 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41264 "hcs12x.cc"
)
{
#line 132 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegD());
	}
#line 41272 "hcs12x.cc"
}

static Operation *DecodeOpPshd(CodeType const& code, uint16_t addr)
{
	return new OpPshd(code, addr);
}

// PSHX: Push X
#line 69 "hcs12x.isa"
void
#line 41283 "hcs12x.cc"
OpPshx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41287 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41290 "hcs12x.cc"
)
{
#line 141 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHX";
	}
#line 41297 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41301 "hcs12x.cc"
OpPshx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41305 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41308 "hcs12x.cc"
)
{
#line 145 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());
	}
#line 41316 "hcs12x.cc"
}

static Operation *DecodeOpPshx(CodeType const& code, uint16_t addr)
{
	return new OpPshx(code, addr);
}

// PSHY: Push Y
#line 69 "hcs12x.isa"
void
#line 41327 "hcs12x.cc"
OpPshy::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41331 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41334 "hcs12x.cc"
)
{
#line 154 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PSHY";
	}
#line 41341 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41345 "hcs12x.cc"
OpPshy::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41349 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41352 "hcs12x.cc"
)
{
#line 158 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());
	}
#line 41360 "hcs12x.cc"
}

static Operation *DecodeOpPshy(CodeType const& code, uint16_t addr)
{
	return new OpPshy(code, addr);
}

// PULA: Pull A
#line 69 "hcs12x.isa"
void
#line 41371 "hcs12x.cc"
OpPula::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41375 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41378 "hcs12x.cc"
)
{
#line 167 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULA";
	}
#line 41385 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41389 "hcs12x.cc"
OpPula::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41393 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41396 "hcs12x.cc"
)
{
#line 171 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegA(cpu->memRead8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 41404 "hcs12x.cc"
}

static Operation *DecodeOpPula(CodeType const& code, uint16_t addr)
{
	return new OpPula(code, addr);
}

// PULB: Pull B
#line 69 "hcs12x.isa"
void
#line 41415 "hcs12x.cc"
OpPulb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41419 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41422 "hcs12x.cc"
)
{
#line 180 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULB";
	}
#line 41429 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41433 "hcs12x.cc"
OpPulb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41437 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41440 "hcs12x.cc"
)
{
#line 184 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegB(cpu->memRead8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 41448 "hcs12x.cc"
}

static Operation *DecodeOpPulb(CodeType const& code, uint16_t addr)
{
	return new OpPulb(code, addr);
}

// PULC: Pull CCR (16 lower bits)
#line 69 "hcs12x.isa"
void
#line 41459 "hcs12x.cc"
OpPulc::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41463 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41466 "hcs12x.cc"
)
{
#line 193 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULC";
	}
#line 41473 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41477 "hcs12x.cc"
OpPulc::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41481 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41484 "hcs12x.cc"
)
{
#line 197 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->ccr->setCCRLow(cpu->memRead8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+1);
	}
#line 41492 "hcs12x.cc"
}

static Operation *DecodeOpPulc(CodeType const& code, uint16_t addr)
{
	return new OpPulc(code, addr);
}

// PULCW: Pull CCR word
#line 69 "hcs12x.isa"
void
#line 41503 "hcs12x.cc"
OpPulcw::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41507 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41510 "hcs12x.cc"
)
{
#line 206 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULCW";
	}
#line 41517 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41521 "hcs12x.cc"
OpPulcw::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41525 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41528 "hcs12x.cc"
)
{
#line 210 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->ccr->setCCR(cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 41536 "hcs12x.cc"
}

static Operation *DecodeOpPulcw(CodeType const& code, uint16_t addr)
{
	return new OpPulcw(code, addr);
}

// PULD: Pull D
#line 69 "hcs12x.isa"
void
#line 41547 "hcs12x.cc"
OpPuld::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41551 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41554 "hcs12x.cc"
)
{
#line 219 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULD";
	}
#line 41561 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41565 "hcs12x.cc"
OpPuld::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41569 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41572 "hcs12x.cc"
)
{
#line 223 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegD(cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 41580 "hcs12x.cc"
}

static Operation *DecodeOpPuld(CodeType const& code, uint16_t addr)
{
	return new OpPuld(code, addr);
}

// PULX: Pull X
#line 69 "hcs12x.isa"
void
#line 41591 "hcs12x.cc"
OpPulx::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41595 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41598 "hcs12x.cc"
)
{
#line 232 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULX";
	}
#line 41605 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41609 "hcs12x.cc"
OpPulx::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41613 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41616 "hcs12x.cc"
)
{
#line 236 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegX(cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 41624 "hcs12x.cc"
}

static Operation *DecodeOpPulx(CodeType const& code, uint16_t addr)
{
	return new OpPulx(code, addr);
}

// PULY: Pull Y
#line 69 "hcs12x.isa"
void
#line 41635 "hcs12x.cc"
OpPuly::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41639 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41642 "hcs12x.cc"
)
{
#line 245 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		sink << "PULY";
	}
#line 41649 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41653 "hcs12x.cc"
OpPuly::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41657 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41660 "hcs12x.cc"
)
{
#line 249 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./stacking.isa"
	{
		cpu->setRegY(cpu->memRead16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(cpu->getRegSP()+2);
	}
#line 41668 "hcs12x.cc"
}

static Operation *DecodeOpPuly(CodeType const& code, uint16_t addr)
{
	return new OpPuly(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// MEM: Membership function
#line 69 "hcs12x.isa"
void
#line 41712 "hcs12x.cc"
OpMem::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41716 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41719 "hcs12x.cc"
)
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "MEM";
	}
#line 41726 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 41730 "hcs12x.cc"
OpMem::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41734 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41737 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		// The final state of CCR flags is not defined

		/*

		Operation
		---------
		Grade of Membership ⇒ M(Y)
		(Y) + $0001 ⇒ Y
		(X) + $0004 ⇒ X

		Description
		-----------
		Before executing MEM, initialize A, X, and Y. Load A with the current crisp value of a system input
		variable. Load Y with the fuzzy input RAM location where the grade of membership is to be stored.
		Load X with the first address of a 4-byte data structure that describes a trapezoidal membership
	function. The data structure consists of:
		Point_1 — The x-axis starting point for the leading side (at MX)
		Point_2 — The x-axis position of the rightmost point (at MX+1)
		Slope_1 — The slope of the leading side (at MX+2)
		Slope_2—The slope of the trailing side (atMX+3); the right side slopes up and to the left from
		Point_2
		A Slope_1 or Slope_2 value of $00 is a special case in which the membership function either starts
		with a grade of $FF at input = Point_1, or ends with a grade of $FF at input = Point_2 (infinite slope).
		During execution, the value of A remains unchanged. X is incremented by four and Y is incremented
		by one.

		*/

		// Grade of Membership (gm) ⇒ M(Y)
		uint8_t gm;
		uint8_t p1, p2;

		uint8_t aVal = cpu->getRegA();
		address_t xVal = cpu->getRegX();
		address_t yVal = cpu->getRegY();

		p1 = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		p2 = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));

		if ((aVal < p1) or (aVal > p2)) {
			gm = 0;
			} else {
			uint8_t s1, s2, min1, min2;


			s1 = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal+2, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
			s2 = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal+3, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));

			min1 = (aVal - p1) * s1;
			min2 = (p2 - aVal) * s2;
			if (min1 < min2) {
				cpu->memWrite8(cpu->mmc->getPhysicalAddress(yVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), min1);
				} else {
				cpu->memWrite8(cpu->mmc->getPhysicalAddress(yVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), min2);
			}
		}

		// (Y) + $0001 ⇒ Y
		cpu->setRegY(yVal + 1);

		// (X) + $0004 ⇒ X
		cpu->setRegX(xVal + 4);

	}
#line 41806 "hcs12x.cc"
}

static Operation *DecodeOpMem(CodeType const& code, uint16_t addr)
{
	return new OpMem(code, addr);
}

// REV: (8bits) MIN-MAX rule evaluation
// this instruction can be interrupted.
#line 69 "hcs12x.isa"
void
#line 41818 "hcs12x.cc"
OpRev::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41822 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41825 "hcs12x.cc"
)
{
#line 113 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "REV";
	}
#line 41832 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 63 "hcs12x.isa"
void
#line 41837 "hcs12x.cc"
OpRev::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41841 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41844 "hcs12x.cc"
)
{
#line 118 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The V flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		uint8_t aVal, ccrV, memX, memYX;
		address_t  xVal, yVal;

		xVal = cpu->getRegX();
		yVal = cpu->getRegY();

		memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		while (memX != 0xFF) {

			ccrV = 0;
			aVal = 0xFF;
			while ((memX != 0xFE) && (memX != 0xFF)) {
				memYX = cpu->memRead8(cpu->mmc->getPhysicalAddress(yVal+memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				if (memYX < aVal) {
					aVal = memYX;
				}
				xVal++;
				memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
			}

			if (memX != 0xFF) {

				ccrV = 1;
				xVal++;
				memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				while ((memX != 0xFE) && (memX != 0xFF)) {
					memYX = cpu->memRead8(cpu->mmc->getPhysicalAddress(yVal+memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
					if (aVal > memYX) {
						cpu->memWrite8(cpu->mmc->getPhysicalAddress(yVal+memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), aVal);
					}
					xVal++;
					memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				}

				if (memX != 0xFF) {
					xVal++;
					memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				}
			}
		}

		xVal++;

		cpu->setRegA(aVal);
		cpu->setRegX(xVal);
		cpu->setRegY(yVal);
		if (ccrV) { cpu->ccr->setV();} else { cpu->ccr->clrV();}
	}
#line 41901 "hcs12x.cc"
}

static Operation *DecodeOpRev(CodeType const& code, uint16_t addr)
{
	return new OpRev(code, addr);
}

// REVW: (16bits) MIN-MAX rule evaluation
// this instruction can be interrupted.
#line 69 "hcs12x.isa"
void
#line 41913 "hcs12x.cc"
OpRevw::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 41917 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 41920 "hcs12x.cc"
)
{
#line 176 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "REVW";
	}
#line 41927 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 63 "hcs12x.isa"
void
#line 41932 "hcs12x.cc"
OpRevw::execute(
#line 63 "hcs12x.isa"
CPU *
#line 41936 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 41939 "hcs12x.cc"
)
{
#line 181 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The V flag is affected by operation.
		* The C flag is used for special purpose.
		* The final state for the others CCR flags is not defined.
		*/

		uint8_t aVal, ccrV, ccrC, memOfMemX, memY;
		address_t memX, xVal, yVal;

		xVal = cpu->getRegX();
		yVal = cpu->getRegY(); cpu->setRegTMP(1, yVal);  // (Y) weight pointer kept in TMP2
		ccrC = cpu->ccr->getC();

		memX = cpu->memRead16(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
		while (memX != 0xFFFF) {

			ccrV = 0;
			aVal = 0xFF;
			while ((memX != 0xFFFE) && (memX != 0xFFFF)) {
				memOfMemX = cpu->memRead8(cpu->mmc->getPhysicalAddress(memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				if (memOfMemX < aVal) {
					aVal = memOfMemX;
				}
				xVal++;
				memX = cpu->memRead16(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
			}

			if (memX != 0xFFFF) {
				// *** Apply weight	***
				if (ccrC == 1) {
					memY = cpu->memRead8(cpu->mmc->getPhysicalAddress(yVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
					aVal = (uint8_t) ((uint16_t) aVal * (memY+1)) >> 8;  // cpu->setRegA(aVal);
					yVal++;  cpu->setRegTMP(1, yVal); // cpu->setRegY(yVal);
				}

				ccrV = 1;
				xVal++;
				memX = cpu->memRead16(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				while ((memX != 0xFFFE) && (memX != 0xFFFF)) {
					memOfMemX = cpu->memRead16(cpu->mmc->getPhysicalAddress(memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
					if (aVal > memOfMemX) {
						cpu->memWrite8(cpu->mmc->getPhysicalAddress(memX, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), aVal);
					}
					xVal++;
					memX = cpu->memRead16(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				}

				if (memX != 0xFFFF) {
					xVal++;
					memX = cpu->memRead16(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
				}
			}
		}

		xVal++;

		cpu->setRegA(aVal);
		cpu->setRegX(xVal);
		cpu->setRegY(yVal);
		if (ccrV) { cpu->ccr->setV();} else { cpu->ccr->clrV();}

	}
#line 42005 "hcs12x.cc"
}

static Operation *DecodeOpRevw(CodeType const& code, uint16_t addr)
{
	return new OpRevw(code, addr);
}

// WAV: Weighted Average Calculation
/*
This instruction can be interrupted.
New WAV instructions can be started and interrupted while a previous WAV instruction is interrupted
*/
#line 69 "hcs12x.isa"
void
#line 42020 "hcs12x.cc"
OpWav::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42024 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42027 "hcs12x.cc"
)
{
#line 252 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "WAV";
	}
#line 42034 "hcs12x.cc"
}
// *** INTERRUPTIBLE ***
#line 63 "hcs12x.isa"
void
#line 42039 "hcs12x.cc"
OpWav::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42043 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42046 "hcs12x.cc"
)
{
#line 257 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The Z flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		/*
		* Do until B = 0, leave SOP in Y : D, SOW in X
		*   Partial Product = (M pointed to by X) × (M pointed to by Y)
		*   Sum-of-Products (24-bit SOP) = Previous SOP + Partial Product
		*   Sum-of-Weights (16-bit SOW) = Previous SOW + (M pointed to by Y)
		*   (X) + $0001 ⇒ X; (Y) + $0001 ⇒ Y
		*   (B) – $01 ⇒ B
		**/

		uint8_t bVal, memX, memY;
		address_t xVal, yVal;
		uint32_t sop;
		uint16_t pp, sow;

		bVal = cpu->getRegB();
		xVal = cpu->getRegX();
		yVal = cpu->getRegY();
		sop = 0;
		sow = 0;
		cpu->setRegTMP(0, 0x0000);
		cpu->setRegTMP(1, 0x0000);
		cpu->setRegTMP(2, 0x0000);

		while (bVal > 0) {

			/** TODO: WAV is interruptible only at this point and not after.
			* if (InterruptPending)
			* {
				*   Write word @ -2,SP (stack TMP3); SP = SP - 2;
				*   Write word @ -2,SP (stack TMP2); SP = SP - 2;
				*   Write word @ -2,SP (stack TMP1); SP = SP - 2;
				*   Adjust PC to point at $3C wavr pseudo-opcode
				* }
			**/

			memY = cpu->memRead8(cpu->mmc->getPhysicalAddress(yVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));
			memX = cpu->memRead8(cpu->mmc->getPhysicalAddress(xVal, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS));

			pp = memX * memY;
			sop += pp;
			cpu->setRegTMP(2, (uint16_t) (sop >> 16));
			cpu->setRegTMP(1, (uint16_t) sop);

			sow += memY;
			cpu->setRegTMP(0, sow);

			xVal++;
			yVal++;
			bVal--;

		}

		cpu->setRegB(bVal);
		cpu->setRegY(cpu->getRegTMP(2));
		cpu->setRegD(cpu->getRegTMP(1));
		cpu->setRegX(cpu->getRegTMP(0));

		cpu->ccr->setZ();
	}
#line 42114 "hcs12x.cc"
}

static Operation *DecodeOpWav(CodeType const& code, uint16_t addr)
{
	return new OpWav(code, addr);
}

// WAVR pseudo instruction: Resume execution of interrupted WAV instruction
#line 69 "hcs12x.isa"
void
#line 42125 "hcs12x.cc"
OpWavr::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42129 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42132 "hcs12x.cc"
)
{
#line 325 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "WAVR";
	}
#line 42139 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42143 "hcs12x.cc"
OpWavr::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42147 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42150 "hcs12x.cc"
)
{
#line 329 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/* The Z flag is affected by operation.
		* The final state for the others CCR flags is not defined.
		*/

		address_t sp = cpu->getRegSP();
		cpu->setRegTMP(0, cpu->memRead16(cpu->mmc->getPhysicalAddress(sp, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegTMP(1, cpu->memRead16(cpu->mmc->getPhysicalAddress(sp+2, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegTMP(2, cpu->memRead16(cpu->mmc->getPhysicalAddress(sp+4, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegSP(sp+6);

		if ((cpu->getRegTMP(0) == 0) ||
		(cpu->getRegTMP(1) == 0) ||
		(cpu->getRegTMP(2) == 0))
		{
			cpu->ccr->setZ();
			} else {
			cpu->ccr->clrZ();
		}
	}
#line 42174 "hcs12x.cc"
}

static Operation *DecodeOpWavr(CodeType const& code, uint16_t addr)
{
	return new OpWavr(code, addr);
}

/* ********  TABLE INTERPOLATION Instructions ********* */
// TBL: 8-bit Table lookup and Interpolate
#line 69 "hcs12x.isa"
void
#line 42186 "hcs12x.cc"
OpTbl::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42190 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42193 "hcs12x.cc"
)
{
#line 355 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "TBL ";
		xb->disasm(sink);
	}
#line 42201 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42205 "hcs12x.cc"
OpTbl::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42209 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42212 "hcs12x.cc"
)
{
#line 360 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/*
		Operation: (M) + [(B) * ((M+1) - (M))] => A
		The intermediate value [(B) * (Y2 - Y1)] produces a 16-bit result
		with the radix point between bits 7 and 8.

		N: Set if MSB of result is set; cleared otherwise
		Z: Set if result is $00; cleared otherwise
		C: Set if result can be rounded up; cleared otherwise
		*/

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t bVal = cpu->getRegB();
		uint8_t mVal = cpu->memRead8(addr);
		uint8_t m1Val = cpu->memRead8(addr+1);

		uint16_t result = (uint16_t) mVal + (bVal * (m1Val - mVal));
		uint8_t msBits = (uint8_t) (result >> 8);
		uint8_t lowBits = (uint8_t) result;

		cpu->setRegA(msBits);
		if ((msBits & 0x80) == 0x80) { cpu->ccr->setN(); } else { cpu->ccr->clrN();}
		if (msBits == 0x00) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ();}
		if (lowBits > 0x7F) { cpu->ccr->setC(); } else { cpu->ccr->clrC();}
	}
#line 42242 "hcs12x.cc"
}

static Operation *DecodeOpTbl(CodeType const& code, uint16_t addr)
{
	return new OpTbl(code, addr);
}

// ETBL: 16-bit Table lookup and Interpolate
#line 69 "hcs12x.isa"
void
#line 42253 "hcs12x.cc"
OpEtlb::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42257 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42260 "hcs12x.cc"
)
{
#line 391 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		sink << "ETLB ";
		xb->disasm(sink);
	}
#line 42268 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42272 "hcs12x.cc"
OpEtlb::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42276 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42279 "hcs12x.cc"
)
{
#line 396 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./fuzzy-logic.isa"
	{
		/*
		Operation: D = M + [(B) * ((M+2) - (M))]
		The intermediate value [(B) * ((M+2) - (M))] produces a 24-bit result
		with the radix point between bits 7 and 8.
		*/

		physical_address_t addr = cpu->mmc->getPhysicalAddress(xb->getEAddr(cpu), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS);

		uint8_t bVal = cpu->getRegB();
		uint16_t mVal = cpu->memRead16(addr);
		uint16_t m1Val = cpu->memRead16(addr+2);

		uint32_t result = (uint32_t) mVal + (bVal * (m1Val - mVal));
		uint16_t msBits = (uint16_t) (result >> 8);
		uint8_t lowBits = (uint8_t) result;

		cpu->setRegD(msBits);
		if ((msBits & 0x8000) == 0x8000) { cpu->ccr->setN(); } else { cpu->ccr->clrN();}
		if (result == 0x0000) { cpu->ccr->setZ(); } else { cpu->ccr->clrZ();}
		if (lowBits > 0x7F) { cpu->ccr->setC(); } else { cpu->ccr->clrC();}
	}
#line 42305 "hcs12x.cc"
}

static Operation *DecodeOpEtlb(CodeType const& code, uint16_t addr)
{
	return new OpEtlb(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
*/
// NOP:
#line 69 "hcs12x.isa"
void
#line 42349 "hcs12x.cc"
OpNop::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42353 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42356 "hcs12x.cc"
)
{
#line 39 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "NOP";
	}
#line 42363 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42367 "hcs12x.cc"
OpNop::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42371 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42374 "hcs12x.cc"
)
{
#line 43 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		// This single-byte instruction increments the PC and does nothing else.
	}
#line 42381 "hcs12x.cc"
}

static Operation *DecodeOpNop(CodeType const& code, uint16_t addr)
{
	return new OpNop(code, addr);
}

// STOP:
#line 69 "hcs12x.isa"
void
#line 42392 "hcs12x.cc"
OpStop::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42396 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42399 "hcs12x.cc"
)
{
#line 50 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "STOP";
	}
#line 42406 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42410 "hcs12x.cc"
OpStop::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42414 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42417 "hcs12x.cc"
)
{
#line 54 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		if (cpu->ccr->getS() == 1) {
			/*
			* if S control bit = 1, the STOP instruction is disabled and acts like two-cycle NOP
			*/
			// TODO: consume two cycles
			} else {
			/*
			* (SP) – $0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; YH : YL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; XH : XL => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; B : A => (M(SP) : M(SP+1))
			* (SP) – $0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
			* Stop All Clocks and puts the device in standby mode
			*/

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegPC());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
			cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());

			cpu->setRegSP(cpu->getRegSP()-2);
			cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());

		/* TODO:
			* Stop All Clocks and puts the device in standby mode.
			* Asserting the RESET, XIRQ, or IRQ signals ends standby mode.
			*/

			cpu->Sleep();

		/* TODO:
			* If XIRQ is asserted while the X mask bit = 0 (XIRQ interrupts enabled),
			* execution resumes with a vector fetch for the XIRQ interrupt.
			* While the X mask bit = 1 (XIRQ interrupts disabled),
			* a 2-cycle recovery sequence is used to adjust the instruction queue and the stack pointer,
			* and execution continues with the next instruction after STOP.
			*/
		}
	}
#line 42470 "hcs12x.cc"
}

static Operation *DecodeOpStop(CodeType const& code, uint16_t addr)
{
	return new OpStop(code, addr);
}

// WAIT
#line 69 "hcs12x.isa"
void
#line 42481 "hcs12x.cc"
OpWait::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42485 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42488 "hcs12x.cc"
)
{
#line 107 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "WAI";
	}
#line 42495 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42499 "hcs12x.cc"
OpWait::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42503 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42506 "hcs12x.cc"
)
{
#line 111 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		/*
		* (SP) – $0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; B : A => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* The CPU12 then enters a wait state for an integer number of bus clock cycles.
		* During the wait state, CPU12 clocks are stopped, but otherMCUclocks can continue to run.
		* WAIT for not masked interrupt
		*/

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegPC());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(cpu->getRegSP()+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());

		cpu->setRegSP(cpu->getRegSP()-2);
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(cpu->getRegSP(), MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());

	/* TODO:
		* Enter a wait state for an integer number of bus clock cycle
		* Only CPU12 clocks are stopped
		* Wait for not masked interrupt
		*/

		cpu->Wait();

		/*
		* If XIRQ is asserted while the X mask bit = 0 (XIRQ interrupts enabled),
		* execution resumes with a vector fetch for the XIRQ interrupt.
		* While the X mask bit = 1 (XIRQ interrupts disabled),
		* a 2-cycle recovery sequence is used to adjust the instruction queue and the stack pointer,
		* and execution continues with the next instruction after WAI.
		*/
	}
#line 42555 "hcs12x.cc"
}

static Operation *DecodeOpWait(CodeType const& code, uint16_t addr)
{
	return new OpWait(code, addr);
}

// BGND: Enter Background debug mode
#line 69 "hcs12x.isa"
void
#line 42566 "hcs12x.cc"
OpBgnd::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42570 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42573 "hcs12x.cc"
)
{
#line 161 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "BGND";
	}
#line 42580 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42584 "hcs12x.cc"
OpBgnd::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42588 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42591 "hcs12x.cc"
)
{
#line 165 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		// TODO
	}
#line 42598 "hcs12x.cc"
}

static Operation *DecodeOpBgnd(CodeType const& code, uint16_t addr)
{
	return new OpBgnd(code, addr);
}

/* ********** Interrupt instructions ******** */
// RTI: Return from interrupt
#line 69 "hcs12x.isa"
void
#line 42610 "hcs12x.cc"
OpRti::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42614 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42617 "hcs12x.cc"
)
{
#line 175 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "RTI";
	}
#line 42624 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42628 "hcs12x.cc"
OpRti::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42632 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42635 "hcs12x.cc"
)
{
#line 179 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		/*
		* (M(SP) : M(SP+1)) => CCRH : CCRL; (SP) + $0002 => SP
		* (M(SP) : M(SP+1)) => B : A; (SP) + $0002 => SP
		* (M(SP) : M(SP+1)) => XH : XL; (SP) + $0004 => SP
		* (M(SP) : M(SP+1)) => PCH : PCL; (SP) – $0002 => SP
		* (M(SP) : M(SP+1)) => YH : YL; (SP) + $0004 => SP
		* */

		address_t addr = cpu->getRegSP();

		/* Leave bit X unchanged.
		* X bit can be set only by a reset or by recognition of an (!XIRQ) interrupt
		*/
		cpu->ccr->setCCR((cpu->memRead16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)) & 0xFFBF) | (cpu->ccr->getCCR() & 0x0040));

		addr = addr + 2;
		cpu->setRegB(cpu->memRead8(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));
		cpu->setRegA(cpu->memRead8(cpu->mmc->getPhysicalAddress(addr+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));

		addr = addr + 2;
		cpu->setRegX(cpu->memRead16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));

		addr = addr + 2;
		cpu->setRegY(cpu->memRead16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));

		addr = addr + 2;
		cpu->setRegPC(cpu->memRead16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS)));

		addr = addr + 2;
		cpu->setRegSP(addr);
	}
#line 42671 "hcs12x.cc"
}

static Operation *DecodeOpRti(CodeType const& code, uint16_t addr)
{
	return new OpRti(code, addr);
}

// SWI: Software Interrupt
#line 69 "hcs12x.isa"
void
#line 42682 "hcs12x.cc"
OpSwi::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42686 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42689 "hcs12x.cc"
)
{
#line 216 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "SWI";
	}
#line 42696 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42700 "hcs12x.cc"
OpSwi::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42704 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42707 "hcs12x.cc"
)
{
#line 220 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		/* (SP) – $0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; B : A=> (M(SP) : M(SP+1))
		* In case of CPU12
		* (SP) – $0001 => SP; CCR => (M(SP) )
		* In case of CPU12X
		* (SP) – $0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* 1 => I; 0 => U
		* (SWI Vector) => PC
		*/

		address_t addr = cpu->getRegSP();

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegPC());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());

		addr = addr - 2;
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());

		cpu->ccr->setI();
		cpu->ccr->setCCRHigh(cpu->ccr->getCCRHigh() & 0x7F);

		// TODO: (SWI Vector) => PC
	}
#line 42747 "hcs12x.cc"
}

static Operation *DecodeOpSwi(CodeType const& code, uint16_t addr)
{
	return new OpSwi(code, addr);
}

// SYS: System Call Interrupt
// System call interrupt vector is $FF12:$FF13
#line 69 "hcs12x.isa"
void
#line 42759 "hcs12x.cc"
OpSys::disasm(
#line 69 "hcs12x.isa"
ostream&
#line 42763 "hcs12x.cc"
#line 69 "hcs12x.isa"
sink
#line 42766 "hcs12x.cc"
)
{
#line 314 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{
		sink << "SYS";
	}
#line 42773 "hcs12x.cc"
}
#line 63 "hcs12x.isa"
void
#line 42777 "hcs12x.cc"
OpSys::execute(
#line 63 "hcs12x.isa"
CPU *
#line 42781 "hcs12x.cc"
#line 63 "hcs12x.isa"
cpu
#line 42784 "hcs12x.cc"
)
{
#line 318 "/export/is010125/rnouacer/unisim/unisim_lib/unisim/component/cxx/processor/hcs12x/./others.isa"
	{

		/*
		* (SP) – $0002 => SP; RTNH : RTNL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; YH : YL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; XH : XL => (M(SP) : M(SP+1))
		* (SP) – $0002 => SP; B : A => (M(SP) : M(SP+1))
		* In case of CPU12
		* (SP) – $0001 => SP; CCR => (M(SP) )
		* In case of CPU12X
		* (SP) – $0002 => SP; CCRH : CCRL => (M(SP) : M(SP+1))
		* 1 => I; 0 => U
		* (Trap Vector) => PC
		*/

		address_t addr = cpu->getRegSP();

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegPC());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegY());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegX());

		addr = addr - 2;
		cpu->memWrite8(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegB());
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr+1, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->getRegA());

		addr = addr - 2;
		cpu->memWrite16(cpu->mmc->getPhysicalAddress(addr, MEMORY::EXTENDED, WO_GLOBAL_ADDRESS), cpu->ccr->getCCR());

		// 1 => I; 0 => U
		cpu->ccr->setI();
		cpu->ccr->setCCRHigh(cpu->ccr->getCCRHigh() & 0x7F);

		// (Sys Vector) => PC
		cpu->setRegPC(cpu->memRead16(CONFIG::SYS_VECTOR_ADDRESS));
	}
#line 42828 "hcs12x.cc"
}

static Operation *DecodeOpSys(CodeType const& code, uint16_t addr)
{
	return new OpSys(code, addr);
}

OpCall_idx::OpCall_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		page = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpCall_idx::~OpCall_idx()
{
	delete xb;
}

OpTrap::OpTrap(CodeType const& code, uint16_t addr) : Operation(code, addr, "trap")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		trapnum = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_imm::OpLdaab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_dir::OpLdaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_ext::OpLdaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLdaab_idx::OpLdaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ldaab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLdaab_idx::~OpLdaab_idx()
{
	delete xb;
}

OpLd_dyxs_imm::OpLd_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_dir::OpLd_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		dd = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_ext::OpLd_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_idx::OpLd_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ld_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLd_dyxs_idx::~OpLd_dyxs_idx()
{
	delete xb;
}

OpLeay::OpLeay(CodeType const& code, uint16_t addr) : Operation(code, addr, "leay")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeay::~OpLeay()
{
	delete xb;
}

OpLeax::OpLeax(CodeType const& code, uint16_t addr) : Operation(code, addr, "leax")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeax::~OpLeax()
{
	delete xb;
}

OpLeas::OpLeas(CodeType const& code, uint16_t addr) : Operation(code, addr, "leas")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLeas::~OpLeas()
{
	delete xb;
}

OpStaab_dir::OpStaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 8) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpStaab_ext::OpStaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpStaab_idx::OpStaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "staab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpStaab_idx::~OpStaab_idx()
{
	delete xb;
}

OpSt_dyxs_dir::OpSt_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_ext::OpSt_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_idx::OpSt_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "st_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSt_dyxs_idx::~OpSt_dyxs_idx()
{
	delete xb;
}

OpGldaab_dir::OpGldaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGldaab_ext::OpGldaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGldaab_idx::OpGldaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gldaab_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGldaab_idx::~OpGldaab_idx()
{
	delete xb;
}

OpGld_dyxs_dir::OpGld_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		dd = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_ext::OpGld_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_idx::OpGld_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gld_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGld_dyxs_idx::~OpGld_dyxs_idx()
{
	delete xb;
}

OpGstaab_dir::OpGstaab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 8) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGstaab_ext::OpGstaab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGstaab_idx::OpGstaab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gstaab_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGstaab_idx::~OpGstaab_idx()
{
	delete xb;
}

OpGst_dyxs_dir::OpGst_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_ext::OpGst_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_idx::OpGst_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "gst_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpGst_dyxs_idx::~OpGst_dyxs_idx()
{
	delete xb;
}

OpT_ab_ba::OpT_ab_ba(CodeType const& code, uint16_t addr) : Operation(code, addr, "t_ab_ba")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpExg_hcs12::OpExg_hcs12(CodeType const& code, uint16_t addr) : Operation(code, addr, "exg_hcs12")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTfr_hcs12::OpTfr_hcs12(CodeType const& code, uint16_t addr) : Operation(code, addr, "tfr_hcs12")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		hls = ((_subword_ >> 3) & 0x1ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpExg_hcs12x::OpExg_hcs12x(CodeType const& code, uint16_t addr) : Operation(code, addr, "exg_hcs12x")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTfr_hcs12x::OpTfr_hcs12x(CodeType const& code, uint16_t addr) : Operation(code, addr, "tfr_hcs12x")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		lms = ((_subword_ >> 4) & 0x7ULL);
		lls = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMovb_0B::OpMovb_0B(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0B")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_08::OpMovb_08(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_08")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMovb_08::~OpMovb_08()
{
	delete xb;
}

OpMovb_0C::OpMovb_0C(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0C")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16asrc = ((_subword_ >> 16) & 0xffffULL);
		opr16adst = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpMovb_09::OpMovb_09(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_09")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16asrc = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_09::~OpMovb_09()
{
	delete xb;
}

OpMovb_0D::OpMovb_0D(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0D")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovb_0D::~OpMovb_0D()
{
	delete xb;
}

OpMovb_0A::OpMovb_0A(CodeType const& code, uint16_t addr) : Operation(code, addr, "movb_0A")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xbsrc = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbsrc->GetEncoding().size );
	xbdst = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbdst->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMovb_0A::~OpMovb_0A()
{
	delete xbsrc;
	delete xbdst;
}

OpMovw_03::OpMovw_03(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_03")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_04::OpMovw_04(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_04")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16asrc = ((_subword_ >> 16) & 0xffffULL);
		opr16adst = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpMovw_00::OpMovw_00(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_00")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_00::~OpMovw_00()
{
	delete xb;
}

OpMovw_01::OpMovw_01(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_01")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16asrc = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_01::~OpMovw_01()
{
	delete xb;
}

OpMovw_05::OpMovw_05(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_05")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMovw_05::~OpMovw_05()
{
	delete xb;
}

OpMovw_02::OpMovw_02(CodeType const& code, uint16_t addr) : Operation(code, addr, "movw_02")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xbsrc = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbsrc->GetEncoding().size );
	xbdst = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xbdst->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMovw_02::~OpMovw_02()
{
	delete xbsrc;
	delete xbdst;
}

OpAba::OpAba(CodeType const& code, uint16_t addr) : Operation(code, addr, "aba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAbx::OpAbx(CodeType const& code, uint16_t addr) : Operation(code, addr, "abx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAby::OpAby(CodeType const& code, uint16_t addr) : Operation(code, addr, "aby")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_imm::OpAdc_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_dir::OpAdc_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_ext::OpAdc_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_idx::OpAdc_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "adc_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdc_ab_idx::~OpAdc_ab_idx()
{
	delete xb;
}

OpAdd_ab_imm::OpAdd_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_dir::OpAdd_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_ext::OpAdd_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_idx::OpAdd_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_ab_idx::~OpAdd_ab_idx()
{
	delete xb;
}

OpAded_imm::OpAded_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAded_dir::OpAded_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAded_ext::OpAded_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAded_idx::OpAded_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "aded_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAded_idx::~OpAded_idx()
{
	delete xb;
}

OpAde_xy_imm::OpAde_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_dir::OpAde_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_ext::OpAde_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAde_xy_idx::OpAde_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ade_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAde_xy_idx::~OpAde_xy_idx()
{
	delete xb;
}

OpAdd_xy_imm::OpAdd_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_dir::OpAdd_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_ext::OpAdd_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_idx::OpAdd_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_xy_idx::~OpAdd_xy_idx()
{
	delete xb;
}

OpAdd_sub_d_imm::OpAdd_sub_d_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_dir::OpAdd_sub_d_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_ext::OpAdd_sub_d_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_idx::OpAdd_sub_d_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "add_sub_d_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAdd_sub_d_idx::~OpAdd_sub_d_idx()
{
	delete xb;
}

OpSba::OpSba(CodeType const& code, uint16_t addr) : Operation(code, addr, "sba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_imm::OpSbc_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_dir::OpSbc_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_ext::OpSbc_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_idx::OpSbc_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbc_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbc_ab_idx::~OpSbc_ab_idx()
{
	delete xb;
}

OpSbed_imm::OpSbed_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbed_dir::OpSbed_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbed_ext::OpSbed_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbed_idx::OpSbed_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbed_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbed_idx::~OpSbed_idx()
{
	delete xb;
}

OpSbe_xy_imm::OpSbe_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_dir::OpSbe_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_ext::OpSbe_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_idx::OpSbe_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbe_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSbe_xy_idx::~OpSbe_xy_idx()
{
	delete xb;
}

OpSub_ab_imm::OpSub_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_dir::OpSub_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_ext::OpSub_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_ab_idx::OpSub_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSub_ab_idx::~OpSub_ab_idx()
{
	delete xb;
}

OpSub_xy_imm::OpSub_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_dir::OpSub_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_ext::OpSub_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpSub_xy_idx::OpSub_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "sub_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpSub_xy_idx::~OpSub_xy_idx()
{
	delete xb;
}

OpDaa::OpDaa(CodeType const& code, uint16_t addr) : Operation(code, addr, "daa")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDec_ext::OpDec_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDec_idx::OpDec_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpDec_idx::~OpDec_idx()
{
	delete xb;
}

OpDec_ab::OpDec_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpDecw_ext::OpDecw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "decw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpDecw_idx::OpDecw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "decw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpDecw_idx::~OpDecw_idx()
{
	delete xb;
}

OpDec_xy::OpDec_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "dec_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDes::OpDes(CodeType const& code, uint16_t addr) : Operation(code, addr, "des")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpDex::OpDex(CodeType const& code, uint16_t addr) : Operation(code, addr, "dex")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpDey::OpDey(CodeType const& code, uint16_t addr) : Operation(code, addr, "dey")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpInc_ext::OpInc_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpInc_idx::OpInc_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpInc_idx::~OpInc_idx()
{
	delete xb;
}

OpInc_ab::OpInc_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpIncw_ext::OpIncw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "incw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpIncw_idx::OpIncw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "incw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpIncw_idx::~OpIncw_idx()
{
	delete xb;
}

OpInc_xy::OpInc_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "inc_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIns::OpIns(CodeType const& code, uint16_t addr) : Operation(code, addr, "ins")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpInx::OpInx(CodeType const& code, uint16_t addr) : Operation(code, addr, "inx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpIny::OpIny(CodeType const& code, uint16_t addr) : Operation(code, addr, "iny")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpCba::OpCba(CodeType const& code, uint16_t addr) : Operation(code, addr, "cba")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_imm::OpCmp_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_dir::OpCmp_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_ext::OpCmp_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_idx::OpCmp_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cmp_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCmp_ab_idx::~OpCmp_ab_idx()
{
	delete xb;
}

OpCp_dyxs_imm::OpCp_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_dir::OpCp_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_ext::OpCp_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_idx::OpCp_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cp_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCp_dyxs_idx::~OpCp_dyxs_idx()
{
	delete xb;
}

OpCpe_dyxs_imm::OpCpe_dyxs_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_dir::OpCpe_dyxs_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 8) & 0x3ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_ext::OpCpe_dyxs_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_idx::OpCpe_dyxs_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "cpe_dyxs_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dyxs = ((_subword_ >> 0) & 0x3ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCpe_dyxs_idx::~OpCpe_dyxs_idx()
{
	delete xb;
}

OpTst_ext::OpTst_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpTst_idx::OpTst_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTst_idx::~OpTst_idx()
{
	delete xb;
}

OpTst_ab::OpTst_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTstw_ext::OpTstw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "tstw_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpTstw_idx::OpTstw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "tstw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTstw_idx::~OpTstw_idx()
{
	delete xb;
}

OpTst_xy::OpTst_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "tst_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEmind::OpEmind(CodeType const& code, uint16_t addr) : Operation(code, addr, "emind")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmind::~OpEmind()
{
	delete xb;
}

OpEminm::OpEminm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eminm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEminm::~OpEminm()
{
	delete xb;
}

OpMina::OpMina(CodeType const& code, uint16_t addr) : Operation(code, addr, "mina")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMina::~OpMina()
{
	delete xb;
}

OpMinm::OpMinm(CodeType const& code, uint16_t addr) : Operation(code, addr, "minm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMinm::~OpMinm()
{
	delete xb;
}

OpEmaxd::OpEmaxd(CodeType const& code, uint16_t addr) : Operation(code, addr, "emaxd")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmaxd::~OpEmaxd()
{
	delete xb;
}

OpEmaxm::OpEmaxm(CodeType const& code, uint16_t addr) : Operation(code, addr, "emaxm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEmaxm::~OpEmaxm()
{
	delete xb;
}

OpMaxa::OpMaxa(CodeType const& code, uint16_t addr) : Operation(code, addr, "maxa")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMaxa::~OpMaxa()
{
	delete xb;
}

OpMaxm::OpMaxm(CodeType const& code, uint16_t addr) : Operation(code, addr, "maxm")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpMaxm::~OpMaxm()
{
	delete xb;
}

OpAnd_ab_imm::OpAnd_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_dir::OpAnd_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_ext::OpAnd_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_idx::OpAnd_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAnd_ab_idx::~OpAnd_ab_idx()
{
	delete xb;
}

OpAndcc_imm::OpAndcc_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "andcc_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_imm::OpAnd_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_dir::OpAnd_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_ext::OpAnd_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_idx::OpAnd_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "and_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAnd_xy_idx::~OpAnd_xy_idx()
{
	delete xb;
}

OpOra_ab_imm::OpOra_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_dir::OpOra_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_ext::OpOra_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOra_ab_idx::OpOra_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ora_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpOra_ab_idx::~OpOra_ab_idx()
{
	delete xb;
}

OpOrcc_imm::OpOrcc_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "orcc_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_imm::OpOr_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_dir::OpOr_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_ext::OpOr_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpOr_xy_idx::OpOr_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "or_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpOr_xy_idx::~OpOr_xy_idx()
{
	delete xb;
}

OpEor_ab_imm::OpEor_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8i = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_dir::OpEor_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_ext::OpEor_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEor_ab_idx::OpEor_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEor_ab_idx::~OpEor_ab_idx()
{
	delete xb;
}

OpEor_xy_imm::OpEor_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_dir::OpEor_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_ext::OpEor_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpEor_xy_idx::OpEor_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "eor_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEor_xy_idx::~OpEor_xy_idx()
{
	delete xb;
}

OpClc::OpClc(CodeType const& code, uint16_t addr) : Operation(code, addr, "clc")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCli::OpCli(CodeType const& code, uint16_t addr) : Operation(code, addr, "cli")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClv::OpClv(CodeType const& code, uint16_t addr) : Operation(code, addr, "clv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClr_ext::OpClr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClr_idx::OpClr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpClr_idx::~OpClr_idx()
{
	delete xb;
}

OpClrw_ext::OpClrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "clrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpClrw_idx::OpClrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "clrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpClrw_idx::~OpClrw_idx()
{
	delete xb;
}

OpClr_ab::OpClr_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpClr_xy::OpClr_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "clr_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCom_ext::OpCom_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCom_idx::OpCom_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpCom_idx::~OpCom_idx()
{
	delete xb;
}

OpCom_ab::OpCom_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpComw_ext::OpComw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "comw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpComw_idx::OpComw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "comw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpComw_idx::~OpComw_idx()
{
	delete xb;
}

OpCom_xy::OpCom_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "com_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNeg_ext::OpNeg_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNeg_idx::OpNeg_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpNeg_idx::~OpNeg_idx()
{
	delete xb;
}

OpNeg_ab::OpNeg_ab(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_ab")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpNegw_ext::OpNegw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "negw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpNegw_idx::OpNegw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "negw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpNegw_idx::~OpNegw_idx()
{
	delete xb;
}

OpNeg_xy::OpNeg_xy(CodeType const& code, uint16_t addr) : Operation(code, addr, "neg_xy")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 4) & 0x1ULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBclr_dir::OpBclr_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dd = ((_subword_ >> 8) & 0xffULL);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBclr_ext::OpBclr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBclr_idx::OpBclr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bclr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBclr_idx::~OpBclr_idx()
{
	delete xb;
}

OpBit_ab_imm::OpBit_ab_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_imm")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		ii = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_dir::OpBit_ab_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_ext::OpBit_ab_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_ab_idx::OpBit_ab_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_ab_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpBit_ab_idx::~OpBit_ab_idx()
{
	delete xb;
}

OpBit_xy_imm::OpBit_xy_imm(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_imm")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 22) & 0x1ULL);
		opr16i = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_dir::OpBit_xy_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 14) & 0x1ULL);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_ext::OpBit_xy_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_ext")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBit_xy_idx::OpBit_xy_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bit_xy_idx")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b = ((_subword_ >> 6) & 0x1ULL);
	}
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpBit_xy_idx::~OpBit_xy_idx()
{
	delete xb;
}

OpBset_dir::OpBset_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_dir")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		dd = ((_subword_ >> 8) & 0xffULL);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBset_ext::OpBset_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBset_idx::OpBset_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "bset_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		mm = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBset_idx::~OpBset_idx()
{
	delete xb;
}

OpLsl_ext::OpLsl_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsl_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsl_idx::OpLsl_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsl_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsl_idx::~OpLsl_idx()
{
	delete xb;
}

OpLsla::OpLsla(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsla")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLslb::OpLslb(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsld::OpLsld(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsld")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLslw_ext::OpLslw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLslw_idx::OpLslw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLslw_idx::~OpLslw_idx()
{
	delete xb;
}

OpLslx::OpLslx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lslx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsly::OpLsly(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsly")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRol_ext::OpRol_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rol_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRol_idx::OpRol_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rol_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRol_idx::~OpRol_idx()
{
	delete xb;
}

OpRola::OpRola(CodeType const& code, uint16_t addr) : Operation(code, addr, "rola")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRolb::OpRolb(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRolw_ext::OpRolw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRolw_idx::OpRolw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRolw_idx::~OpRolw_idx()
{
	delete xb;
}

OpRolx::OpRolx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rolx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRoly::OpRoly(CodeType const& code, uint16_t addr) : Operation(code, addr, "roly")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsr_ext::OpLsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsr_idx::OpLsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsr_idx::~OpLsr_idx()
{
	delete xb;
}

OpLsra::OpLsra(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsra")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrb::OpLsrb(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrd::OpLsrd(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLsrw_ext::OpLsrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsrw_idx::OpLsrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpLsrw_idx::~OpLsrw_idx()
{
	delete xb;
}

OpLsrx::OpLsrx(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsrx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLsry::OpLsry(CodeType const& code, uint16_t addr) : Operation(code, addr, "lsry")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRor_ext::OpRor_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "ror_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRor_idx::OpRor_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "ror_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRor_idx::~OpRor_idx()
{
	delete xb;
}

OpRora::OpRora(CodeType const& code, uint16_t addr) : Operation(code, addr, "rora")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRorb::OpRorb(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRorw_ext::OpRorw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRorw_idx::OpRorw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpRorw_idx::~OpRorw_idx()
{
	delete xb;
}

OpRorx::OpRorx(CodeType const& code, uint16_t addr) : Operation(code, addr, "rorx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRory::OpRory(CodeType const& code, uint16_t addr) : Operation(code, addr, "rory")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsr_ext::OpAsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "asr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsr_idx::OpAsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAsr_idx::~OpAsr_idx()
{
	delete xb;
}

OpAsra::OpAsra(CodeType const& code, uint16_t addr) : Operation(code, addr, "asra")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAsrb::OpAsrb(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpAsrw_ext::OpAsrw_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrw_ext")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsrw_idx::OpAsrw_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrw_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpAsrw_idx::~OpAsrw_idx()
{
	delete xb;
}

OpAsrx::OpAsrx(CodeType const& code, uint16_t addr) : Operation(code, addr, "asrx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpAsry::OpAsry(CodeType const& code, uint16_t addr) : Operation(code, addr, "asry")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBtas_dir::OpBtas_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_dir")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr8a = ((_subword_ >> 8) & 0xffULL);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBtas_ext::OpBtas_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 8) & 0xffffULL);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBtas_idx::OpBtas_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "btas_idx")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		msk8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBtas_idx::~OpBtas_idx()
{
	delete xb;
}

OpEmul::OpEmul(CodeType const& code, uint16_t addr) : Operation(code, addr, "emul")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEmuls::OpEmuls(CodeType const& code, uint16_t addr) : Operation(code, addr, "emuls")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpMul::OpMul(CodeType const& code, uint16_t addr) : Operation(code, addr, "mul")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEdiv::OpEdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "ediv")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpEdivs::OpEdivs(CodeType const& code, uint16_t addr) : Operation(code, addr, "edivs")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpFdiv::OpFdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "fdiv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIdiv::OpIdiv(CodeType const& code, uint16_t addr) : Operation(code, addr, "idiv")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpIdivs::OpIdivs(CodeType const& code, uint16_t addr) : Operation(code, addr, "idivs")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpEmacs::OpEmacs(CodeType const& code, uint16_t addr) : Operation(code, addr, "emacs")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpSbr::OpSbr(CodeType const& code, uint16_t addr) : Operation(code, addr, "sbr")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		sel = ((_subword_ >> 8) & 0xfULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpLbr::OpLbr(CodeType const& code, uint16_t addr) : Operation(code, addr, "lbr")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		sel = ((_subword_ >> 16) & 0xfULL);
		rel16 = (((int32_t((_subword_ >> 0) & 0xffffLL)) << 16) >> 16);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_dir::OpBr_clr_set_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_dir")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		b = ((_subword_ >> 24) & 0x1ULL);
		opr8a = ((_subword_ >> 16) & 0xffULL);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_ext::OpBr_clr_set_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_ext")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 16) & 0xffffULL);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_idx::OpBr_clr_set_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "br_clr_set_idx")
{
	CodeType _code_( code );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		b = ((_subword_ >> 0) & 0x1ULL);
	}
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		msk8 = ((_subword_ >> 8) & 0xffULL);
		rel8 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpBr_clr_set_idx::~OpBr_clr_set_idx()
{
	delete xb;
}

OpBsr::OpBsr(CodeType const& code, uint16_t addr) : Operation(code, addr, "bsr")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		rel8 = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCall_ext::OpCall_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_ext")
{
	CodeType _code_( code );
	{
		uint32_t _subword_ = (uint32_t( _code_.str[0] ) << 24) | (uint32_t( _code_.str[1] ) << 16) | (uint32_t( _code_.str[2] ) << 8) | (uint32_t( _code_.str[3] ) << 0);
		opr16a = ((_subword_ >> 8) & 0xffffULL);
		page = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 4 );
	this->encoding.size -= _code_.size;
}

OpCall_16offset_idx_ind::OpCall_16offset_idx_ind(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_16offset_idx_ind")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rr = ((_subword_ >> 3) & 0x3ULL);
	}
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		n16 = (((int32_t((_subword_ >> 0) & 0xffffLL)) << 16) >> 16);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpCall_accD_offset_idx_ind::OpCall_accD_offset_idx_ind(CodeType const& code, uint16_t addr) : Operation(code, addr, "call_accD_offset_idx_ind")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rr = ((_subword_ >> 3) & 0x3ULL);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpJmp_ext::OpJmp_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "jmp_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJmp_idx::OpJmp_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "jmp_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpJmp_idx::~OpJmp_idx()
{
	delete xb;
}

OpJsr_dir::OpJsr_dir(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_dir")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr8a = ((_subword_ >> 0) & 0xffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJsr_ext::OpJsr_ext(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_ext")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		opr16a = ((_subword_ >> 0) & 0xffffULL);
	}
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpJsr_idx::OpJsr_idx(CodeType const& code, uint16_t addr) : Operation(code, addr, "jsr_idx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpJsr_idx::~OpJsr_idx()
{
	delete xb;
}

OpRtc::OpRtc(CodeType const& code, uint16_t addr) : Operation(code, addr, "rtc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRts::OpRts(CodeType const& code, uint16_t addr) : Operation(code, addr, "rts")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpLoop::OpLoop(CodeType const& code, uint16_t addr) : Operation(code, addr, "loop")
{
	CodeType _code_( code );
	{
		uint16_t _subword_ = (uint16_t( _code_.str[0] ) << 8) | (uint16_t( _code_.str[1] ) << 0);
		b765 = ((_subword_ >> 5) & 0x7ULL);
		b4 = ((_subword_ >> 4) & 0x1ULL);
		b3 = ((_subword_ >> 3) & 0x1ULL);
		b210 = ((_subword_ >> 0) & 0x7ULL);
	}
	_code_.pop( 2 );
	{
		uint8_t _subword_ = (uint8_t( _code_.str[0] ) << 0);
		rel9 = (((int32_t((_subword_ >> 0) & 0xffLL)) << 24) >> 24);
	}
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPsha::OpPsha(CodeType const& code, uint16_t addr) : Operation(code, addr, "psha")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshb::OpPshb(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshc::OpPshc(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshcw::OpPshcw(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshcw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpPshd::OpPshd(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshx::OpPshx(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPshy::OpPshy(CodeType const& code, uint16_t addr) : Operation(code, addr, "pshy")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPula::OpPula(CodeType const& code, uint16_t addr) : Operation(code, addr, "pula")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulb::OpPulb(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulb")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulc::OpPulc(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulc")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulcw::OpPulcw(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulcw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpPuld::OpPuld(CodeType const& code, uint16_t addr) : Operation(code, addr, "puld")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPulx::OpPulx(CodeType const& code, uint16_t addr) : Operation(code, addr, "pulx")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpPuly::OpPuly(CodeType const& code, uint16_t addr) : Operation(code, addr, "puly")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpMem::OpMem(CodeType const& code, uint16_t addr) : Operation(code, addr, "mem")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRev::OpRev(CodeType const& code, uint16_t addr) : Operation(code, addr, "rev")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpRevw::OpRevw(CodeType const& code, uint16_t addr) : Operation(code, addr, "revw")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWav::OpWav(CodeType const& code, uint16_t addr) : Operation(code, addr, "wav")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWavr::OpWavr(CodeType const& code, uint16_t addr) : Operation(code, addr, "wavr")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpTbl::OpTbl(CodeType const& code, uint16_t addr) : Operation(code, addr, "tbl")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpTbl::~OpTbl()
{
	delete xb;
}

OpEtlb::OpEtlb(CodeType const& code, uint16_t addr) : Operation(code, addr, "etlb")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	xb = unisim::component::cxx::processor::hcs12x::XB::sub_decode( addr, unisim::component::cxx::processor::hcs12x::XB::CodeType( _code_.str, _code_.size ) );
	_code_.pop( xb->GetEncoding().size );
	this->encoding.size -= _code_.size;
}

OpEtlb::~OpEtlb()
{
	delete xb;
}

OpNop::OpNop(CodeType const& code, uint16_t addr) : Operation(code, addr, "nop")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpStop::OpStop(CodeType const& code, uint16_t addr) : Operation(code, addr, "stop")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

OpWait::OpWait(CodeType const& code, uint16_t addr) : Operation(code, addr, "wait")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpBgnd::OpBgnd(CodeType const& code, uint16_t addr) : Operation(code, addr, "bgnd")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpRti::OpRti(CodeType const& code, uint16_t addr) : Operation(code, addr, "rti")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpSwi::OpSwi(CodeType const& code, uint16_t addr) : Operation(code, addr, "swi")
{
	CodeType _code_( code );
	_code_.pop( 1 );
	this->encoding.size -= _code_.size;
}

OpSys::OpSys(CodeType const& code, uint16_t addr) : Operation(code, addr, "sys")
{
	CodeType _code_( code );
	_code_.pop( 2 );
	this->encoding.size -= _code_.size;
}

DecodeMapPage::DecodeMapPage(uint16_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

DecodeMapPage::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

DecodeTableEntry::DecodeTableEntry(CodeType const& opcode, CodeType const& opcode_mask, Operation *(*decode)(CodeType const&, uint16_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

Decoder::Decoder()
{
	little_endian = false;
	mru_page = 0;
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSys));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3f" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpSwi));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRti));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x00" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBgnd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3e" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpWait));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3e" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpStop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEtlb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTbl));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpWavr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpWav));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRevw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x3a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRev));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x01" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpMem));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x31" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPuly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x30" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPuld));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x38" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpPulcw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x38" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x33" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPulb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x32" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPula));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x35" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x34" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x39" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpPshcw));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x39" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x37" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPshb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x36" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpPsha));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x04" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLoop));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x3d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRts));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRtc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x15" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x16" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x17" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJsr_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x05" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJmp_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x06" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpJmp_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b\xe7" ), 2 ), CodeType( (uint8_t*)( "\xff\xe7" ), 2 ), DecodeOpCall_accD_offset_idx_ind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b\xe3" ), 2 ), CodeType( (uint8_t*)( "\xff\xe7" ), 2 ), DecodeOpCall_16offset_idx_ind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCall_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x07" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBsr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4e" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpBr_clr_set_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x20" ), 2 ), CodeType( (uint8_t*)( "\xff\xf0" ), 2 ), DecodeOpLbr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x20" ), 1 ), CodeType( (uint8_t*)( "\xf0" ), 1 ), DecodeOpSbr));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x12" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmacs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x15" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIdivs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x10" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x11" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpFdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x14" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEdivs));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x11" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpEdiv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x12" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpMul));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x13" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmuls));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x13" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpEmul));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x37" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x36" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x35" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpBtas_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x57" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsry));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x47" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x67" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x77" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAsrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x57" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsrb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x47" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsra));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x67" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x77" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x56" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRory));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x46" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x66" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x76" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRorw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x56" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRorb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x46" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRora));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x66" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRor_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x76" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRor_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x54" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsry));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x44" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x64" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x74" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x49" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsrd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x54" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsrb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x44" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsra));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x64" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x74" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x55" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRoly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x45" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x65" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x75" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpRolw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x55" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRolb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x45" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRola));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x65" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRol_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x75" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpRol_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x58" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLsly));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x48" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x68" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x78" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpLslw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x59" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsld));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x58" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLslb));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x48" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsla));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x68" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsl_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x78" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLsl_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4c" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBset_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa5" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb5" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x95" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x85" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpBit_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa5" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb5" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x95" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x85" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpBit_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x0d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4d" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpBclr_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x40" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpNeg_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x60" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpNegw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x70" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpNegw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x40" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpNeg_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x60" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNeg_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x70" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpNeg_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x41" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpCom_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x61" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpComw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x71" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpComw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x41" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpCom_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x61" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCom_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x71" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCom_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x87" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpClr_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x87" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpClr_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x69" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClrw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x79" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClrw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x69" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpClr_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x79" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpClr_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xfd" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClv));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xef" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpCli));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10\xfe" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpClc));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa8" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb8" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x98" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x88" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpEor_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa8" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb8" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x98" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x88" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpEor_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xaa" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xba" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9a" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8a" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpOr_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x14" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpOrcc_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xaa" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xba" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9a" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8a" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpOra_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa4" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb4" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x94" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x84" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAnd_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x10" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpAndcc_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa4" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb4" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x94" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x84" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAnd_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMaxm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x18" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMaxa));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1e" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmaxm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmaxd));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMinm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x19" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMina));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEminm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x1b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpEmind));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x97" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpTst_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xe7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTstw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xf7" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpTstw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x97" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpTst_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xe7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTst_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xf7" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTst_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xac" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xbc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpCpe_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xac" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xbc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpCp_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa1" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb1" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x91" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x81" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpCmp_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x17" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpCba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x02" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpIny));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x08" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b\x81" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIns));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x42" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpInc_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x62" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIncw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x72" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpIncw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x42" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpInc_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x62" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInc_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x72" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpInc_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x03" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDey));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x09" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDex));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b\x9f" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDes));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x43" ), 2 ), CodeType( (uint8_t*)( "\xff\xef" ), 2 ), DecodeOpDec_xy));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x63" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDecw_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x73" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDecw_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x43" ), 1 ), CodeType( (uint8_t*)( "\xef" ), 1 ), DecodeOpDec_ab));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x63" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDec_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x73" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpDec_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x07" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpDaa));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa0" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb0" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x90" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x80" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSub_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa0" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb0" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x90" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x80" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSub_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa2" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb2" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x92" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x82" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpSbe_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x93" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x83" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSbed_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa2" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb2" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x92" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x82" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpSbc_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x16" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpSba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa3" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb3" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x93" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x83" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_sub_d_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xab" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xbb" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x9b" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x8b" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAdd_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa9" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb9" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x99" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x89" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpAde_xy_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xe3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xf3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xd3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xc3" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAded_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xab" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xbb" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x9b" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x8b" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdd_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa9" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb9" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x99" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x89" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpAdc_ab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x19\xed" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAby));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1a\xe5" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAbx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x06" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpAba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x02" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_02));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x05" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_05));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x01" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_01));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x00" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_00));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x04" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_04));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x03" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovw_03));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0a" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0A));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0d" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0D));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x09" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_09));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0c" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0C));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x08" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_08));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0b" ), 2 ), CodeType( (uint8_t*)( "\xff\xff" ), 2 ), DecodeOpMovb_0B));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x08" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpTfr_hcs12x));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x88" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpExg_hcs12x));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x00" ), 2 ), CodeType( (uint8_t*)( "\xff\x80" ), 2 ), DecodeOpTfr_hcs12));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb7\x80" ), 2 ), CodeType( (uint8_t*)( "\xff\x88" ), 2 ), DecodeOpExg_hcs12));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x0e" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpT_ab_ba));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x6c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x7c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x5c" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGst_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x6a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x7a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x5a" ), 2 ), CodeType( (uint8_t*)( "\xff\xfe" ), 2 ), DecodeOpGstaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xec" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xfc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xdc" ), 2 ), CodeType( (uint8_t*)( "\xff\xfc" ), 2 ), DecodeOpGld_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xa6" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\xb6" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18\x96" ), 2 ), CodeType( (uint8_t*)( "\xff\xbf" ), 2 ), DecodeOpGldaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x6c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x7c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x5c" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpSt_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x6a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x7a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x5a" ), 1 ), CodeType( (uint8_t*)( "\xfe" ), 1 ), DecodeOpStaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeas));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x1a" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeax));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x19" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpLeay));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xec" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xfc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xdc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xcc" ), 1 ), CodeType( (uint8_t*)( "\xfc" ), 1 ), DecodeOpLd_dyxs_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xa6" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_idx));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\xb6" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_ext));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x96" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_dir));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x86" ), 1 ), CodeType( (uint8_t*)( "\xbf" ), 1 ), DecodeOpLdaab_imm));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x18" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpTrap));
	decode_table.push_back(DecodeTableEntry(CodeType( (uint8_t*)( "\x4b" ), 1 ), CodeType( (uint8_t*)( "\xff" ), 1 ), DecodeOpCall_idx));
}

Decoder::~Decoder()
{
	InvalidateDecodingCache();
}

void Decoder::Fetch( CodeType&, uint16_t )
{
	assert( ! "Calling unimplemented virtual method Fetch" );
}

Operation *Decoder::NCDecode(uint16_t addr)
{
	Operation *operation;
	CodeType code;
	Fetch( code, addr );
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if( code.match( decode_table[idx].opcode, decode_table[idx].opcode_mask) )
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation(code, addr, "???");
	return operation;
}

Operation *Decoder::NCDecode(uint16_t addr, CodeType const& code)
{
	Operation *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if( code.match( decode_table[idx].opcode, decode_table[idx].opcode_mask) )
		{
			operation = decode_table[idx].decode(code, addr);
			return operation;
		}
	}
	operation = new Operation(code, addr, "???");
	return operation;
}

void Decoder::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

void Decoder::InvalidateDecodingCacheEntry(uint16_t addr)
{
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

inline DecodeMapPage *Decoder::FindPage(uint16_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

Operation *Decoder::Decode(uint16_t addr)
{
	Operation *operation;
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage(page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		return operation;
	}
	operation = NCDecode(addr);
	page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

Operation *Decoder::Decode(uint16_t addr, CodeType const& insn)
{
	Operation *operation;
	uint16_t page_key = addr / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(insn.match( operation->GetEncoding() ) && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

void Decoder::SetLittleEndian()
{
	little_endian = true;
}

void Decoder::SetBigEndian()
{
	little_endian = false;
}

} } } } }
