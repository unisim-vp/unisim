#include "isa_arm32.hh"
#include <cassert>
#line 75 "isa/arm32/arm32.isa"

#include "unisim/util/arithmetic/arithmetic.hh"
#include "unisim/component/cxx/processor/arm/exception.hh"
#include "unisim/kernel/logger/logger.hh"

using unisim::component::cxx::processor::arm::UndefinedInstructionException;
using unisim::kernel::logger::DebugInfo;
using unisim::kernel::logger::DebugWarning;
using unisim::kernel::logger::DebugError;
using unisim::kernel::logger::EndDebugInfo;
using unisim::kernel::logger::EndDebugWarning;
using unisim::kernel::logger::EndDebugError;
using unisim::util::arithmetic::Add32;
#line 18 "isa_arm32.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace arm { namespace isa { namespace arm32 {
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31 "isa_arm32.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
noperands(
#line 77 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
0
#line 37 "isa_arm32.tcc"
),
unit(
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
NO_UNIT_T
#line 42 "isa_arm32.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61 "isa_arm32.tcc"
>::~Operation()
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72 "isa_arm32.tcc"
>
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
void
#line 76 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80 "isa_arm32.tcc"
>::profile(
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
map<uint64_t, uint32_t> &
#line 84 "isa_arm32.tcc"
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
prof
#line 87 "isa_arm32.tcc"
)
{
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
	{
		uint64_t val = GetEncoding();
		map<uint64_t, uint32_t>::iterator it = prof.find(val);
		if(it != prof.end()) {
			it->second = it->second + 1;
			} else {
			prof[val] = 1;
		}
	}
#line 100 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 108 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 115 "isa_arm32.tcc"
>::initialize_dependency_write_reglist()
{
#line 97 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 120 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 128 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 135 "isa_arm32.tcc"
>::initialize_dependency_write_rdlo()
{
#line 96 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 148 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 155 "isa_arm32.tcc"
>::initialize_dependency_write_rdhi()
{
#line 95 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 160 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 168 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 175 "isa_arm32.tcc"
>::initialize_dependency_write_rd()
{
#line 94 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 180 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 188 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 195 "isa_arm32.tcc"
>::initialize_dependency_write_rn()
{
#line 93 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 200 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 208 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 215 "isa_arm32.tcc"
>::initialize_dependency_read_crn()
{
#line 91 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 220 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 228 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 235 "isa_arm32.tcc"
>::initialize_dependency_read_crm()
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 240 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 248 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 255 "isa_arm32.tcc"
>::initialize_dependency_read_reglist()
{
#line 89 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 260 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 268 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 275 "isa_arm32.tcc"
>::initialize_dependency_read_rs()
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 280 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 288 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 295 "isa_arm32.tcc"
>::initialize_dependency_read_rn()
{
#line 87 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 300 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 308 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 315 "isa_arm32.tcc"
>::initialize_dependency_read_rm()
{
#line 86 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 328 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 332 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 336 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 340 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 343 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 347 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 350 "isa_arm32.tcc"
)
{
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		buffer << "Unknown instruction";
	}
#line 357 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 365 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 369 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 373 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 377 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 380 "isa_arm32.tcc"
)
{
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		throw UndefinedInstructionException<CONFIG>();
	}
#line 387 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 395 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 402 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 72 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdp1_init = 0;
	}
#line 409 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 417 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 424 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 68 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdlo_init = 0;
	}
#line 431 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 439 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 446 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 64 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdhi_init = 0;
	}
#line 453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 461 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 468 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 60 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rs_init = 0;
	}
#line 475 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 483 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 490 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rd_init = 0;
	}
#line 497 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 505 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 512 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rm_init = 0;
	}
#line 519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 527 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 534 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 48 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rn_init = 0;
	}
#line 541 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 549 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 556 "isa_arm32.tcc"
>::initialize_condition()
{
#line 45 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
	}
#line 562 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 570 "isa_arm32.tcc"
>
class OpB_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 575 "isa_arm32.tcc"
>
{
public:
	OpB_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 661 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 665 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 668 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 672 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 675 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 713 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 717 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 720 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 731 "isa_arm32.tcc"
>
class OpB_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 736 "isa_arm32.tcc"
>
{
public:
	OpB_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 822 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 829 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 833 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 836 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 874 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 878 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 881 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 892 "isa_arm32.tcc"
>
class OpB_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 897 "isa_arm32.tcc"
>
{
public:
	OpB_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 983 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 987 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 990 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 994 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 997 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1035 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1039 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1042 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1053 "isa_arm32.tcc"
>
class OpB_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1058 "isa_arm32.tcc"
>
{
public:
	OpB_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1143 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1147 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1150 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1154 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1157 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1195 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1199 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1202 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1213 "isa_arm32.tcc"
>
class OpBl_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1218 "isa_arm32.tcc"
>
{
public:
	OpBl_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1304 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1308 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1311 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1315 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1318 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1356 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1360 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1363 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1374 "isa_arm32.tcc"
>
class OpBl_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1379 "isa_arm32.tcc"
>
{
public:
	OpBl_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1465 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1469 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1472 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1476 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1479 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1517 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1521 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1524 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1535 "isa_arm32.tcc"
>
class OpBl_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1540 "isa_arm32.tcc"
>
{
public:
	OpBl_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1626 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1630 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1633 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1637 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1640 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1678 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1682 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1685 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1696 "isa_arm32.tcc"
>
class OpBl_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1701 "isa_arm32.tcc"
>
{
public:
	OpBl_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1786 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1790 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1793 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1797 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1800 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1838 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1842 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1845 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1856 "isa_arm32.tcc"
>
class OpBx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1861 "isa_arm32.tcc"
>
{
public:
	OpBx(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1874 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1878 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1881 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1885 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1888 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1926 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1930 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1933 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1947 "isa_arm32.tcc"
>
class OpBlx_1 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1952 "isa_arm32.tcc"
>
{
public:
	OpBlx_1(CodeType code, typename CONFIG::address_t addr);
	uint32_t h;
	int32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1962 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1966 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1969 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1973 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1976 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2014 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2018 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2021 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2032 "isa_arm32.tcc"
>
class OpBlx_2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2037 "isa_arm32.tcc"
>
{
public:
	OpBlx_2(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2050 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2054 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2057 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2061 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2064 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2102 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2106 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2109 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2123 "isa_arm32.tcc"
>
class OpAnd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2128 "isa_arm32.tcc"
>
{
public:
	OpAnd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2141 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2145 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2148 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2152 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2155 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2193 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2197 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2200 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2214 "isa_arm32.tcc"
>
class OpAnd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2219 "isa_arm32.tcc"
>
{
public:
	OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2233 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2237 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2240 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2244 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2247 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2285 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2289 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2292 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2309 "isa_arm32.tcc"
>
class OpAnd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2314 "isa_arm32.tcc"
>
{
public:
	OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2328 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2332 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2335 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2339 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2342 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2380 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2384 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2387 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2407 "isa_arm32.tcc"
>
class OpAnds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2412 "isa_arm32.tcc"
>
{
public:
	OpAnds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2425 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2429 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2432 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2436 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2439 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2477 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2481 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2484 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2498 "isa_arm32.tcc"
>
class OpAnds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2503 "isa_arm32.tcc"
>
{
public:
	OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2517 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2521 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2524 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2528 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2531 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2569 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2573 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2576 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2593 "isa_arm32.tcc"
>
class OpAnds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2598 "isa_arm32.tcc"
>
{
public:
	OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2612 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2616 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2619 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2623 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2626 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2664 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2668 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2671 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2691 "isa_arm32.tcc"
>
class OpEor_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2696 "isa_arm32.tcc"
>
{
public:
	OpEor_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2709 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2713 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2716 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2720 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2723 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2761 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2765 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2768 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2782 "isa_arm32.tcc"
>
class OpEor_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2787 "isa_arm32.tcc"
>
{
public:
	OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2801 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2805 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2808 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2812 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2815 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2853 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2857 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2860 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2877 "isa_arm32.tcc"
>
class OpEor_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2882 "isa_arm32.tcc"
>
{
public:
	OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2896 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2900 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2903 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2907 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2910 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2948 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2952 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2955 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2975 "isa_arm32.tcc"
>
class OpEors_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2980 "isa_arm32.tcc"
>
{
public:
	OpEors_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2993 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2997 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3000 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3004 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3007 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3045 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3049 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3052 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3066 "isa_arm32.tcc"
>
class OpEors_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3071 "isa_arm32.tcc"
>
{
public:
	OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3085 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3089 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3092 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3096 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3099 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3137 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3141 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3144 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3161 "isa_arm32.tcc"
>
class OpEors_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3166 "isa_arm32.tcc"
>
{
public:
	OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3180 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3184 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3187 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3191 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3194 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3232 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3236 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3239 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3259 "isa_arm32.tcc"
>
class OpSub_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3264 "isa_arm32.tcc"
>
{
public:
	OpSub_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3277 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3281 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3284 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3288 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3291 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3329 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3333 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3336 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3350 "isa_arm32.tcc"
>
class OpSub_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3355 "isa_arm32.tcc"
>
{
public:
	OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3369 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3376 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3380 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3383 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3421 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3425 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3428 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3445 "isa_arm32.tcc"
>
class OpSub_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3450 "isa_arm32.tcc"
>
{
public:
	OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3464 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3468 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3471 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3475 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3478 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3516 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3520 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3523 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3540 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3543 "isa_arm32.tcc"
>
class OpSubs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3548 "isa_arm32.tcc"
>
{
public:
	OpSubs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3561 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3565 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3568 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3572 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3575 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3613 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3617 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3620 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3634 "isa_arm32.tcc"
>
class OpSubs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3639 "isa_arm32.tcc"
>
{
public:
	OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3653 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3657 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3660 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3664 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3667 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3705 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3709 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3712 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3729 "isa_arm32.tcc"
>
class OpSubs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3734 "isa_arm32.tcc"
>
{
public:
	OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3748 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3752 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3755 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3759 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3762 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3800 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3804 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3807 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3827 "isa_arm32.tcc"
>
class OpRsb_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3832 "isa_arm32.tcc"
>
{
public:
	OpRsb_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3845 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3849 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3852 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3856 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3897 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3901 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3904 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3915 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3918 "isa_arm32.tcc"
>
class OpRsb_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3923 "isa_arm32.tcc"
>
{
public:
	OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3937 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3941 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3944 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3948 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3951 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3989 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3993 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3996 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4013 "isa_arm32.tcc"
>
class OpRsb_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4018 "isa_arm32.tcc"
>
{
public:
	OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4032 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4036 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4039 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4043 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4046 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4084 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4088 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4091 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4108 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4111 "isa_arm32.tcc"
>
class OpRsbs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4116 "isa_arm32.tcc"
>
{
public:
	OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4129 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4133 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4136 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4140 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4143 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4181 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4185 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4188 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4202 "isa_arm32.tcc"
>
class OpRsbs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4207 "isa_arm32.tcc"
>
{
public:
	OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4221 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4225 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4228 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4232 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4235 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4273 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4277 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4280 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4294 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4297 "isa_arm32.tcc"
>
class OpRsbs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4302 "isa_arm32.tcc"
>
{
public:
	OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4316 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4320 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4323 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4327 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4330 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4368 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4372 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4375 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4395 "isa_arm32.tcc"
>
class OpAdd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4400 "isa_arm32.tcc"
>
{
public:
	OpAdd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4413 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4417 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4420 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4424 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4427 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4465 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4469 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4472 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4486 "isa_arm32.tcc"
>
class OpAdd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4491 "isa_arm32.tcc"
>
{
public:
	OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4505 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4509 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4512 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4516 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4519 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4557 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4561 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4564 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4581 "isa_arm32.tcc"
>
class OpAdd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4586 "isa_arm32.tcc"
>
{
public:
	OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4600 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4607 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4614 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4652 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4656 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4659 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4679 "isa_arm32.tcc"
>
class OpAdds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4684 "isa_arm32.tcc"
>
{
public:
	OpAdds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4697 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4701 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4704 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4708 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4711 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4749 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4753 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4756 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4770 "isa_arm32.tcc"
>
class OpAdds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4775 "isa_arm32.tcc"
>
{
public:
	OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4789 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4793 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4796 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4800 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4803 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4841 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4845 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4848 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4865 "isa_arm32.tcc"
>
class OpAdds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4870 "isa_arm32.tcc"
>
{
public:
	OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4884 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4888 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4891 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4895 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4898 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4936 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4940 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4943 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4963 "isa_arm32.tcc"
>
class OpAdc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4968 "isa_arm32.tcc"
>
{
public:
	OpAdc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4981 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4985 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4988 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4992 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4995 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5033 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5037 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5040 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5054 "isa_arm32.tcc"
>
class OpAdc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5059 "isa_arm32.tcc"
>
{
public:
	OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5073 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5077 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5080 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5084 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5087 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5125 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5129 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5132 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5149 "isa_arm32.tcc"
>
class OpAdc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5154 "isa_arm32.tcc"
>
{
public:
	OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5168 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5172 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5175 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5179 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5182 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5220 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5224 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5227 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5247 "isa_arm32.tcc"
>
class OpAdcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5252 "isa_arm32.tcc"
>
{
public:
	OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5265 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5272 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5317 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5321 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5324 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5338 "isa_arm32.tcc"
>
class OpAdcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5343 "isa_arm32.tcc"
>
{
public:
	OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5357 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5361 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5364 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5368 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5371 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5409 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5413 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5416 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5430 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5433 "isa_arm32.tcc"
>
class OpAdcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5438 "isa_arm32.tcc"
>
{
public:
	OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5452 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5456 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5459 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5463 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5466 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5504 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5508 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5511 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5531 "isa_arm32.tcc"
>
class OpSbc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5536 "isa_arm32.tcc"
>
{
public:
	OpSbc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5549 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5553 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5556 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5560 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5563 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5601 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5605 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5608 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5622 "isa_arm32.tcc"
>
class OpSbc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5627 "isa_arm32.tcc"
>
{
public:
	OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5641 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5645 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5648 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5652 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5655 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5693 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5697 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5700 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5717 "isa_arm32.tcc"
>
class OpSbc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5722 "isa_arm32.tcc"
>
{
public:
	OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5736 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5740 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5743 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5747 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5750 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5788 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5792 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5795 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5815 "isa_arm32.tcc"
>
class OpSbcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5820 "isa_arm32.tcc"
>
{
public:
	OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5833 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5837 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5840 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5844 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5847 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5885 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5889 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5892 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5903 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5906 "isa_arm32.tcc"
>
class OpSbcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5911 "isa_arm32.tcc"
>
{
public:
	OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5925 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5929 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5932 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5939 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5977 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5981 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5984 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6001 "isa_arm32.tcc"
>
class OpSbcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6006 "isa_arm32.tcc"
>
{
public:
	OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6020 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6024 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6027 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6031 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6034 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6072 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6076 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6079 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6099 "isa_arm32.tcc"
>
class OpRsc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6104 "isa_arm32.tcc"
>
{
public:
	OpRsc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6117 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6121 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6124 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6128 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6131 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6169 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6173 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6176 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6187 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6190 "isa_arm32.tcc"
>
class OpRsc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6195 "isa_arm32.tcc"
>
{
public:
	OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6209 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6213 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6216 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6220 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6223 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6261 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6265 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6268 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6285 "isa_arm32.tcc"
>
class OpRsc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6290 "isa_arm32.tcc"
>
{
public:
	OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6304 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6308 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6311 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6315 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6318 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6356 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6360 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6363 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6380 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6383 "isa_arm32.tcc"
>
class OpRscs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6388 "isa_arm32.tcc"
>
{
public:
	OpRscs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6401 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6405 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6408 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6412 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6415 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6453 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6457 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6460 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6474 "isa_arm32.tcc"
>
class OpRscs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6479 "isa_arm32.tcc"
>
{
public:
	OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6493 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6497 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6500 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6504 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6507 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6545 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6549 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6552 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6569 "isa_arm32.tcc"
>
class OpRscs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6574 "isa_arm32.tcc"
>
{
public:
	OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6588 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6592 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6595 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6599 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6602 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6640 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6644 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6647 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6667 "isa_arm32.tcc"
>
class OpTst_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6672 "isa_arm32.tcc"
>
{
public:
	OpTst_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6685 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6689 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6692 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6696 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6699 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6737 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6741 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6744 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6758 "isa_arm32.tcc"
>
class OpTst_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6763 "isa_arm32.tcc"
>
{
public:
	OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6777 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6781 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6784 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6788 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6791 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6829 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6833 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6836 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6853 "isa_arm32.tcc"
>
class OpTst_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6858 "isa_arm32.tcc"
>
{
public:
	OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6872 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6876 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6879 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6883 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6886 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6924 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6928 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6931 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6951 "isa_arm32.tcc"
>
class OpTeq_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6956 "isa_arm32.tcc"
>
{
public:
	OpTeq_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6969 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6973 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6976 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6980 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6983 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7021 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7025 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7028 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7042 "isa_arm32.tcc"
>
class OpTeq_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7047 "isa_arm32.tcc"
>
{
public:
	OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7061 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7065 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7068 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7072 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7075 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7113 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7117 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7120 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7137 "isa_arm32.tcc"
>
class OpTeq_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7142 "isa_arm32.tcc"
>
{
public:
	OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7156 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7160 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7163 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7167 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7170 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7208 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7212 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7215 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7235 "isa_arm32.tcc"
>
class OpCmp_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7240 "isa_arm32.tcc"
>
{
public:
	OpCmp_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7253 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7257 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7260 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7264 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7267 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7305 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7309 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7312 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7326 "isa_arm32.tcc"
>
class OpCmp_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7331 "isa_arm32.tcc"
>
{
public:
	OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7345 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7349 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7352 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7356 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7359 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7397 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7401 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7404 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7421 "isa_arm32.tcc"
>
class OpCmp_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7426 "isa_arm32.tcc"
>
{
public:
	OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7440 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7444 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7447 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7451 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7454 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7492 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7496 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7499 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7519 "isa_arm32.tcc"
>
class OpCmn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7524 "isa_arm32.tcc"
>
{
public:
	OpCmn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7537 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7541 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7544 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7548 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7551 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7589 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7593 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7596 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7610 "isa_arm32.tcc"
>
class OpCmn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7615 "isa_arm32.tcc"
>
{
public:
	OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7629 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7633 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7636 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7640 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7643 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7681 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7685 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7688 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7705 "isa_arm32.tcc"
>
class OpCmn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7710 "isa_arm32.tcc"
>
{
public:
	OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7724 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7728 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7731 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7735 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7738 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7776 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7780 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7783 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7803 "isa_arm32.tcc"
>
class OpOrr_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7808 "isa_arm32.tcc"
>
{
public:
	OpOrr_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7821 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7825 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7828 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7832 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7835 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7873 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7877 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7880 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7894 "isa_arm32.tcc"
>
class OpOrr_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7899 "isa_arm32.tcc"
>
{
public:
	OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7913 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7917 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7920 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7924 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7927 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7965 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7969 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7972 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7989 "isa_arm32.tcc"
>
class OpOrr_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7994 "isa_arm32.tcc"
>
{
public:
	OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8008 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8012 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8015 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8019 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8022 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8060 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8064 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8067 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8087 "isa_arm32.tcc"
>
class OpOrrs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8092 "isa_arm32.tcc"
>
{
public:
	OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8105 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8112 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8116 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8119 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8157 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8161 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8164 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8178 "isa_arm32.tcc"
>
class OpOrrs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8183 "isa_arm32.tcc"
>
{
public:
	OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8197 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8201 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8204 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8208 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8211 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8249 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8253 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8256 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8273 "isa_arm32.tcc"
>
class OpOrrs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8278 "isa_arm32.tcc"
>
{
public:
	OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8292 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8296 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8299 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8303 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8306 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8344 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8348 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8351 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8371 "isa_arm32.tcc"
>
class OpMov_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8376 "isa_arm32.tcc"
>
{
public:
	OpMov_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8389 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8393 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8396 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8400 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8403 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8441 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8445 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8448 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8459 "isa_arm32.tcc"
>
class OpMov_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8464 "isa_arm32.tcc"
>
{
public:
	OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8478 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8482 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8485 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8489 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8492 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8530 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8534 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8537 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8551 "isa_arm32.tcc"
>
class OpMov_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8556 "isa_arm32.tcc"
>
{
public:
	OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8570 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8574 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8577 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8581 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8584 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8622 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8626 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8629 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8646 "isa_arm32.tcc"
>
class OpMovs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8651 "isa_arm32.tcc"
>
{
public:
	OpMovs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8664 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8668 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8671 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8675 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8678 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8716 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8720 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8723 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8734 "isa_arm32.tcc"
>
class OpMovs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8739 "isa_arm32.tcc"
>
{
public:
	OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8753 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8757 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8760 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8764 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8767 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8805 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8809 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8812 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8826 "isa_arm32.tcc"
>
class OpMovs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8831 "isa_arm32.tcc"
>
{
public:
	OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8845 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8849 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8852 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8856 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8897 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8901 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8904 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8921 "isa_arm32.tcc"
>
class OpBic_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8926 "isa_arm32.tcc"
>
{
public:
	OpBic_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8939 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8946 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8950 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8953 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8991 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8995 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8998 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9012 "isa_arm32.tcc"
>
class OpBic_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9017 "isa_arm32.tcc"
>
{
public:
	OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9031 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9035 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9038 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9042 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9045 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9083 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9087 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9090 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9107 "isa_arm32.tcc"
>
class OpBic_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9112 "isa_arm32.tcc"
>
{
public:
	OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9126 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9130 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9133 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9137 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9140 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9178 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9182 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9185 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9205 "isa_arm32.tcc"
>
class OpBics_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9210 "isa_arm32.tcc"
>
{
public:
	OpBics_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9223 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9227 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9230 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9234 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9237 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9275 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9279 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9282 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9293 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9296 "isa_arm32.tcc"
>
class OpBics_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9301 "isa_arm32.tcc"
>
{
public:
	OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9315 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9319 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9322 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9326 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9329 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9367 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9371 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9374 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9391 "isa_arm32.tcc"
>
class OpBics_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9396 "isa_arm32.tcc"
>
{
public:
	OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9410 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9414 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9417 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9421 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9424 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9462 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9466 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9469 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9489 "isa_arm32.tcc"
>
class OpMvn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9494 "isa_arm32.tcc"
>
{
public:
	OpMvn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9507 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9511 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9514 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9518 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9521 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9559 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9563 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9566 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9577 "isa_arm32.tcc"
>
class OpMvn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9582 "isa_arm32.tcc"
>
{
public:
	OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9596 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9603 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9648 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9652 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9655 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9669 "isa_arm32.tcc"
>
class OpMvn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9674 "isa_arm32.tcc"
>
{
public:
	OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9688 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9692 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9695 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9699 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9702 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9740 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9744 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9747 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9764 "isa_arm32.tcc"
>
class OpMvns_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9769 "isa_arm32.tcc"
>
{
public:
	OpMvns_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9782 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9786 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9789 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9793 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9796 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9834 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9838 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9841 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9852 "isa_arm32.tcc"
>
class OpMvns_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9857 "isa_arm32.tcc"
>
{
public:
	OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9871 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9875 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9878 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9882 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9885 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9923 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9927 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9930 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9944 "isa_arm32.tcc"
>
class OpMvns_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9949 "isa_arm32.tcc"
>
{
public:
	OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9963 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9970 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9977 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10015 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10019 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10022 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10039 "isa_arm32.tcc"
>
class OpQadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10044 "isa_arm32.tcc"
>
{
public:
	OpQadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10057 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10061 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10064 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10068 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10071 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10109 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10113 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10116 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10127 "isa_arm32.tcc"
>
class OpQsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10132 "isa_arm32.tcc"
>
{
public:
	OpQsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10145 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10149 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10152 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10156 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10159 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10197 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10201 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10204 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10215 "isa_arm32.tcc"
>
class OpQdadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10220 "isa_arm32.tcc"
>
{
public:
	OpQdadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10233 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10237 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10240 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10244 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10247 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10285 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10289 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10292 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10303 "isa_arm32.tcc"
>
class OpQdsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10308 "isa_arm32.tcc"
>
{
public:
	OpQdsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10321 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10325 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10328 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10332 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10335 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10373 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10377 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10380 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10391 "isa_arm32.tcc"
>
class OpMla : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10396 "isa_arm32.tcc"
>
{
public:
	OpMla(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10410 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10414 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10417 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10421 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10424 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10462 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10466 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10469 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10489 "isa_arm32.tcc"
>
class OpMul : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10494 "isa_arm32.tcc"
>
{
public:
	OpMul(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10508 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10512 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10515 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10519 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10522 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10560 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10564 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10567 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10584 "isa_arm32.tcc"
>
class OpSmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10589 "isa_arm32.tcc"
>
{
public:
	OpSmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10603 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10610 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10614 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10617 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10655 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10659 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10662 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10685 "isa_arm32.tcc"
>
class OpSmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10690 "isa_arm32.tcc"
>
{
public:
	OpSmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10704 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10708 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10711 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10715 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10718 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10756 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10760 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10763 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10777 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10780 "isa_arm32.tcc"
>
class OpUmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10785 "isa_arm32.tcc"
>
{
public:
	OpUmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10799 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10803 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10806 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10810 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10813 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10851 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10855 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10858 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10881 "isa_arm32.tcc"
>
class OpUmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10886 "isa_arm32.tcc"
>
{
public:
	OpUmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10900 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10904 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10907 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10911 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10914 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10952 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10956 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10959 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10976 "isa_arm32.tcc"
>
class OpSmlaxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10981 "isa_arm32.tcc"
>
{
public:
	OpSmlaxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10996 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11000 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11003 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11007 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11010 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11048 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11052 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11055 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11066 "isa_arm32.tcc"
>
class OpSmlalxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11071 "isa_arm32.tcc"
>
{
public:
	OpSmlalxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11086 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11090 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11093 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11097 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11100 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11138 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11142 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11145 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11156 "isa_arm32.tcc"
>
class OpSmlawy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11161 "isa_arm32.tcc"
>
{
public:
	OpSmlawy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11175 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11179 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11182 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11186 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11189 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11227 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11231 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11234 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11242 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11245 "isa_arm32.tcc"
>
class OpSmulxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11250 "isa_arm32.tcc"
>
{
public:
	OpSmulxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11265 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11272 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11317 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11321 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11324 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11335 "isa_arm32.tcc"
>
class OpSmulwy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11340 "isa_arm32.tcc"
>
{
public:
	OpSmulwy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11354 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11358 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11361 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11365 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11368 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11406 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11410 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11413 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11424 "isa_arm32.tcc"
>
class OpMrs : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11429 "isa_arm32.tcc"
>
{
public:
	OpMrs(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t rd;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11440 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11444 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11447 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11451 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11454 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11492 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11496 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11499 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11510 "isa_arm32.tcc"
>
class OpMsr_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11515 "isa_arm32.tcc"
>
{
public:
	OpMsr_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11528 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11532 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11535 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11539 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11542 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11580 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11584 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11587 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11598 "isa_arm32.tcc"
>
class OpMsr_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11603 "isa_arm32.tcc"
>
{
public:
	OpMsr_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11615 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11619 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11622 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11626 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11629 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11667 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11671 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11674 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11685 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11688 "isa_arm32.tcc"
>
class OpLdr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11693 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11706 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11710 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11713 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11717 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11720 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11758 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11762 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11765 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11779 "isa_arm32.tcc"
>
class OpLdr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11784 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11797 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11801 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11804 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11808 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11811 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11849 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11853 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11856 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11867 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11870 "isa_arm32.tcc"
>
class OpLdr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11875 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11888 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11892 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11895 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11899 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11902 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11940 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11944 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11947 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11958 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11961 "isa_arm32.tcc"
>
class OpLdr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11966 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11981 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11985 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11988 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11992 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11995 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12033 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12037 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12040 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12060 "isa_arm32.tcc"
>
class OpLdr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12065 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12080 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12084 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12087 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12094 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12132 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12136 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12139 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12159 "isa_arm32.tcc"
>
class OpLdr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12164 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12179 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12183 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12186 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12190 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12193 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12231 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12235 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12238 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12258 "isa_arm32.tcc"
>
class OpLdrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12263 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12276 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12280 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12283 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12287 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12290 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12328 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12332 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12335 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12349 "isa_arm32.tcc"
>
class OpLdrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12354 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12367 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12371 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12374 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12381 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12419 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12423 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12426 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12440 "isa_arm32.tcc"
>
class OpLdrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12445 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12458 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12462 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12465 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12469 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12472 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12510 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12514 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12517 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12531 "isa_arm32.tcc"
>
class OpLdrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12536 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12551 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12555 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12558 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12562 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12565 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12603 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12607 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12610 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12630 "isa_arm32.tcc"
>
class OpLdrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12635 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12650 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12654 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12657 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12661 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12664 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12702 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12706 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12709 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12729 "isa_arm32.tcc"
>
class OpLdrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12734 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12749 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12753 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12756 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12760 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12763 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12801 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12805 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12808 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12828 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12833 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12845 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12849 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12852 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12856 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12897 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12901 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12904 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12915 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12920 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12932 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12939 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12984 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12991 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13005 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13010 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13022 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13026 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13029 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13033 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13036 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13074 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13078 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13081 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13092 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13097 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13111 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13115 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13118 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13122 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13125 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13163 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13167 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13170 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13181 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13186 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13200 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13204 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13207 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13211 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13214 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13252 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13256 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13259 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13276 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13281 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13295 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13299 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13302 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13306 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13309 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13347 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13351 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13354 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13365 "isa_arm32.tcc"
>
class OpLdrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13370 "isa_arm32.tcc"
>
{
public:
	OpLdrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13383 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13387 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13390 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13394 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13397 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13435 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13439 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13442 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13456 "isa_arm32.tcc"
>
class OpLdrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13461 "isa_arm32.tcc"
>
{
public:
	OpLdrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13476 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13480 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13483 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13487 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13490 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13528 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13532 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13535 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13552 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13555 "isa_arm32.tcc"
>
class OpLdrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13560 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13573 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13577 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13580 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13584 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13587 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13625 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13629 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13632 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13646 "isa_arm32.tcc"
>
class OpLdrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13651 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13666 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13670 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13673 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13677 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13680 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13718 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13722 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13725 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13745 "isa_arm32.tcc"
>
class OpStr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13750 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13763 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13767 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13770 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13774 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13777 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13815 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13819 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13822 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13836 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13839 "isa_arm32.tcc"
>
class OpStr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13844 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13857 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13861 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13864 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13868 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13871 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13909 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13913 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13916 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13933 "isa_arm32.tcc"
>
class OpStr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13938 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13951 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13955 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13958 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13962 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13965 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14003 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14007 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14010 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14027 "isa_arm32.tcc"
>
class OpStr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14032 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14047 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14051 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14054 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14058 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14061 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14099 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14103 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14106 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14123 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14126 "isa_arm32.tcc"
>
class OpStr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14131 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14146 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14150 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14153 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14157 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14160 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14198 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14202 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14205 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14225 "isa_arm32.tcc"
>
class OpStr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14230 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14245 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14249 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14252 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14256 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14259 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14297 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14301 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14304 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14324 "isa_arm32.tcc"
>
class OpStrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14329 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14342 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14346 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14349 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14353 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14356 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14394 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14398 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14401 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14418 "isa_arm32.tcc"
>
class OpStrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14423 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14436 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14440 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14443 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14447 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14450 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14488 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14492 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14495 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14509 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14512 "isa_arm32.tcc"
>
class OpStrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14517 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14530 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14534 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14537 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14541 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14544 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14582 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14586 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14589 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14606 "isa_arm32.tcc"
>
class OpStrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14611 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14626 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14630 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14633 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14637 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14640 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14678 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14682 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14685 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14705 "isa_arm32.tcc"
>
class OpStrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14710 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14725 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14732 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14736 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14739 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14777 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14781 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14784 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14804 "isa_arm32.tcc"
>
class OpStrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14809 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14824 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14828 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14831 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14835 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14838 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14876 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14880 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14883 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14903 "isa_arm32.tcc"
>
class OpStrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14908 "isa_arm32.tcc"
>
{
public:
	OpStrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14921 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14928 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14932 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14935 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14973 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14977 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14980 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14997 "isa_arm32.tcc"
>
class OpStrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15002 "isa_arm32.tcc"
>
{
public:
	OpStrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15017 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15021 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15024 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15028 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15031 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15069 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15073 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15076 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15096 "isa_arm32.tcc"
>
class OpStrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15101 "isa_arm32.tcc"
>
{
public:
	OpStrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15114 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15118 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15121 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15125 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15128 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15166 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15170 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15173 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15187 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15190 "isa_arm32.tcc"
>
class OpStrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15195 "isa_arm32.tcc"
>
{
public:
	OpStrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15210 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15214 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15217 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15221 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15224 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15262 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15266 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15269 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15289 "isa_arm32.tcc"
>
class OpLdrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15294 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15308 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15312 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15315 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15319 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15322 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15360 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15364 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15367 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15381 "isa_arm32.tcc"
>
class OpLdrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15386 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15400 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15404 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15407 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15411 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15414 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15452 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15456 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15459 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15473 "isa_arm32.tcc"
>
class OpLdrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15478 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15492 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15496 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15499 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15503 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15506 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15544 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15548 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15551 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15565 "isa_arm32.tcc"
>
class OpLdrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15570 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15584 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15588 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15591 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15595 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15598 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15636 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15640 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15643 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15663 "isa_arm32.tcc"
>
class OpLdrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15668 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15682 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15686 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15689 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15693 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15696 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15734 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15738 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15741 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15761 "isa_arm32.tcc"
>
class OpLdrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15766 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15780 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15784 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15787 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15791 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15794 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15832 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15836 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15839 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15859 "isa_arm32.tcc"
>
class OpLdrsh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15864 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15878 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15882 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15885 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15889 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15892 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15930 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15934 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15937 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15951 "isa_arm32.tcc"
>
class OpLdrsh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15956 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15970 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15974 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15977 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15981 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15984 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16022 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16026 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16029 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16043 "isa_arm32.tcc"
>
class OpLdrsh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16048 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16062 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16066 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16069 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16073 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16076 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16114 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16118 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16121 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16135 "isa_arm32.tcc"
>
class OpLdrsh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16140 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16154 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16158 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16161 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16165 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16168 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16206 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16210 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16213 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16233 "isa_arm32.tcc"
>
class OpLdrsh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16238 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16252 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16256 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16259 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16263 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16266 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16304 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16308 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16311 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16331 "isa_arm32.tcc"
>
class OpLdrsh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16336 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16350 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16354 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16357 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16361 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16364 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16402 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16406 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16409 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16429 "isa_arm32.tcc"
>
class OpLdrsb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16434 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16448 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16452 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16455 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16459 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16462 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16500 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16504 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16507 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16521 "isa_arm32.tcc"
>
class OpLdrsb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16526 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16540 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16544 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16547 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16551 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16554 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16592 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16596 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16599 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16613 "isa_arm32.tcc"
>
class OpLdrsb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16618 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16632 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16636 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16639 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16646 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16684 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16688 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16691 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16705 "isa_arm32.tcc"
>
class OpLdrsb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16710 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16724 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16728 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16731 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16735 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16738 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16776 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16780 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16783 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16803 "isa_arm32.tcc"
>
class OpLdrsb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16808 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16822 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16829 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16833 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16836 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16874 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16878 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16881 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16901 "isa_arm32.tcc"
>
class OpLdrsb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16906 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16920 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16924 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16927 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16931 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16934 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16972 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16976 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16979 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16999 "isa_arm32.tcc"
>
class OpStrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17004 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17018 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17022 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17025 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17029 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17032 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17070 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17074 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17077 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17088 "isa_arm32.tcc"
>
class OpStrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17093 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17107 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17114 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17118 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17121 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17159 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17163 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17166 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17177 "isa_arm32.tcc"
>
class OpStrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17182 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17196 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17200 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17203 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17207 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17210 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17248 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17252 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17255 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17263 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17266 "isa_arm32.tcc"
>
class OpStrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17271 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17285 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17289 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17292 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17296 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17299 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17337 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17341 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17344 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17355 "isa_arm32.tcc"
>
class OpStrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17360 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17374 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17381 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17385 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17388 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17426 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17430 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17433 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17444 "isa_arm32.tcc"
>
class OpStrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17449 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17463 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17467 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17470 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17474 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17477 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17515 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17519 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17522 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17533 "isa_arm32.tcc"
>
class OpLdrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17538 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17552 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17556 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17559 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17563 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17566 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17604 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17608 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17611 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17625 "isa_arm32.tcc"
>
class OpLdrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17630 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17644 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17648 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17651 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17655 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17658 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17696 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17700 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17703 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17717 "isa_arm32.tcc"
>
class OpLdrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17722 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17736 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17740 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17743 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17747 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17750 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17788 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17792 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17795 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17809 "isa_arm32.tcc"
>
class OpLdrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17814 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17828 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17832 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17835 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17839 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17842 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17880 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17884 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17887 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17907 "isa_arm32.tcc"
>
class OpLdrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17912 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17926 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17930 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17933 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17940 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17978 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17982 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17985 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18005 "isa_arm32.tcc"
>
class OpLdrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18010 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18024 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18028 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18031 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18035 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18038 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18076 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18080 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18083 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18100 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18103 "isa_arm32.tcc"
>
class OpStrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18108 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18122 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18129 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18133 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18136 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18174 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18178 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18181 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18201 "isa_arm32.tcc"
>
class OpStrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18206 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18220 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18224 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18227 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18231 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18234 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18272 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18276 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18279 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18299 "isa_arm32.tcc"
>
class OpStrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18304 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18318 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18322 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18325 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18329 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18332 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18370 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18374 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18377 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18397 "isa_arm32.tcc"
>
class OpStrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18402 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18416 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18420 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18423 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18427 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18430 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18468 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18472 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18475 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18498 "isa_arm32.tcc"
>
class OpStrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18503 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18517 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18521 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18524 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18528 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18531 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18569 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18573 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18576 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18599 "isa_arm32.tcc"
>
class OpStrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18604 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18618 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18622 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18625 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18629 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18632 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18670 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18674 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18677 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18700 "isa_arm32.tcc"
>
class OpLdm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18705 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18717 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18721 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18724 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18728 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18731 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18769 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18773 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18776 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18790 "isa_arm32.tcc"
>
class OpLdm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18795 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18807 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18814 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18821 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18859 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18863 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18866 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18880 "isa_arm32.tcc"
>
class OpLdm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18885 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18897 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18901 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18904 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18908 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18911 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18949 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18953 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18956 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18970 "isa_arm32.tcc"
>
class OpLdm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18975 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18987 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18991 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18994 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18998 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19001 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19039 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19043 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19046 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19060 "isa_arm32.tcc"
>
class OpLdm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19065 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19076 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19080 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19083 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19087 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19090 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19128 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19132 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19135 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19149 "isa_arm32.tcc"
>
class OpLdm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19154 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19165 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19169 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19172 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19176 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19179 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19217 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19221 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19224 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19238 "isa_arm32.tcc"
>
class OpLdm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19243 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19254 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19258 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19261 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19265 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19268 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19306 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19310 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19313 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19327 "isa_arm32.tcc"
>
class OpLdm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19332 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19343 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19347 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19350 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19354 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19357 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19395 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19399 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19402 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19416 "isa_arm32.tcc"
>
class OpLdm_3_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19421 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19433 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19437 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19440 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19444 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19447 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19485 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19489 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19492 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19506 "isa_arm32.tcc"
>
class OpLdm_3_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19511 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19523 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19527 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19530 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19534 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19537 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19575 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19579 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19582 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19596 "isa_arm32.tcc"
>
class OpLdm_3_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19601 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19613 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19617 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19620 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19624 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19627 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19665 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19669 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19672 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19686 "isa_arm32.tcc"
>
class OpLdm_3_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19691 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19703 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19707 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19710 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19714 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19717 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19755 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19759 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19762 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19776 "isa_arm32.tcc"
>
class OpStm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19781 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19793 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19797 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19800 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19804 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19807 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19845 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19849 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19852 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19866 "isa_arm32.tcc"
>
class OpStm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19871 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19883 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19887 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19890 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19894 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19897 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19935 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19939 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19942 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19956 "isa_arm32.tcc"
>
class OpStm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19961 "isa_arm32.tcc"
>
{
public:
	OpStm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19973 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19977 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19980 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19984 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19987 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20025 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20029 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20032 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20046 "isa_arm32.tcc"
>
class OpStm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20051 "isa_arm32.tcc"
>
{
public:
	OpStm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20063 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20067 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20070 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20074 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20077 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20115 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20119 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20122 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20136 "isa_arm32.tcc"
>
class OpStm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20141 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20152 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20156 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20159 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20163 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20166 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20204 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20208 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20211 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20225 "isa_arm32.tcc"
>
class OpStm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20230 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20241 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20245 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20248 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20252 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20255 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20293 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20297 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20300 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20314 "isa_arm32.tcc"
>
class OpStm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20319 "isa_arm32.tcc"
>
{
public:
	OpStm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20330 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20334 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20337 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20344 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20382 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20386 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20389 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20400 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20403 "isa_arm32.tcc"
>
class OpStm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20408 "isa_arm32.tcc"
>
{
public:
	OpStm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20419 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20423 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20426 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20430 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20433 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20471 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20475 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20478 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20492 "isa_arm32.tcc"
>
class OpSwp : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20497 "isa_arm32.tcc"
>
{
public:
	OpSwp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20509 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20513 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20516 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20520 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20523 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20561 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20565 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20568 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20579 "isa_arm32.tcc"
>
class OpSwpb : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20584 "isa_arm32.tcc"
>
{
public:
	OpSwpb(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20596 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20603 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20648 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20652 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20655 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20666 "isa_arm32.tcc"
>
class OpSwi : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20671 "isa_arm32.tcc"
>
{
public:
	OpSwi(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t immed;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20681 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20685 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20688 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20692 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20695 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20733 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20737 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20740 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20751 "isa_arm32.tcc"
>
class OpBkpt : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20756 "isa_arm32.tcc"
>
{
public:
	OpBkpt(CodeType code, typename CONFIG::address_t addr);
	uint32_t himmed;
	uint32_t limmed;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20766 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20770 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20773 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20777 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20780 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20818 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20822 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20825 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20836 "isa_arm32.tcc"
>
class OpCdp_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20841 "isa_arm32.tcc"
>
{
public:
	OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20932 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20939 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20984 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20991 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21002 "isa_arm32.tcc"
>
class OpCdp_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21007 "isa_arm32.tcc"
>
{
public:
	OpCdp_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21098 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21105 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21112 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21150 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21154 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21157 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21168 "isa_arm32.tcc"
>
class OpCdp_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21173 "isa_arm32.tcc"
>
{
public:
	OpCdp_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21264 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21268 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21271 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21275 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21278 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21316 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21320 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21323 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21334 "isa_arm32.tcc"
>
class OpCdp_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21339 "isa_arm32.tcc"
>
{
public:
	OpCdp_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21429 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21433 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21436 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21440 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21443 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21481 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21485 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21488 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21499 "isa_arm32.tcc"
>
class OpLdc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21504 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21595 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21599 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21602 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21606 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21609 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21647 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21651 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21654 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21668 "isa_arm32.tcc"
>
class OpLdc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21673 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21764 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21771 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21775 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21816 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21820 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21823 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21837 "isa_arm32.tcc"
>
class OpLdc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21842 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21933 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21940 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21985 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21989 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21992 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22006 "isa_arm32.tcc"
>
class OpLdc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22011 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22101 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22105 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22108 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22112 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22115 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22153 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22157 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22160 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22174 "isa_arm32.tcc"
>
class OpLdc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22179 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22270 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22274 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22277 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22281 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22284 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22322 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22326 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22329 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22340 "isa_arm32.tcc"
>
class OpLdc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22345 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22436 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22440 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22443 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22447 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22450 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22488 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22492 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22495 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22506 "isa_arm32.tcc"
>
class OpLdc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22511 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22602 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22606 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22609 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22613 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22616 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22654 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22658 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22661 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22672 "isa_arm32.tcc"
>
class OpLdc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22677 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22767 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22771 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22774 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22778 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22781 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22819 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22823 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22826 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22837 "isa_arm32.tcc"
>
class OpLdc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22842 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22933 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22937 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22940 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22944 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22985 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22989 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22992 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23003 "isa_arm32.tcc"
>
class OpLdc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23008 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23099 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23103 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23106 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23151 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23155 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23158 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23169 "isa_arm32.tcc"
>
class OpLdc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23174 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23265 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23272 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23317 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23321 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23324 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23335 "isa_arm32.tcc"
>
class OpLdc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23340 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23430 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23434 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23437 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23441 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23444 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23482 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23486 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23489 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23500 "isa_arm32.tcc"
>
class OpLdc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23505 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23595 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23599 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23602 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23606 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23609 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23647 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23651 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23654 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23668 "isa_arm32.tcc"
>
class OpLdc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23673 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23763 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23767 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23770 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23774 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23777 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23815 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23819 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23822 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23836 "isa_arm32.tcc"
>
class OpLdc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23841 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23931 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23935 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23938 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23942 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23983 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23987 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23990 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24004 "isa_arm32.tcc"
>
class OpLdc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24009 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24098 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24105 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24112 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24150 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24154 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24157 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24171 "isa_arm32.tcc"
>
class OpMcr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24176 "isa_arm32.tcc"
>
{
public:
	OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24267 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24271 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24274 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24278 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24281 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24319 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24323 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24326 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24337 "isa_arm32.tcc"
>
class OpMcr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24342 "isa_arm32.tcc"
>
{
public:
	OpMcr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24433 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24437 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24440 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24444 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24447 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24485 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24489 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24492 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24503 "isa_arm32.tcc"
>
class OpMcr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24508 "isa_arm32.tcc"
>
{
public:
	OpMcr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24599 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24603 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24606 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24610 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24613 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24651 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24655 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24658 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24669 "isa_arm32.tcc"
>
class OpMcr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24674 "isa_arm32.tcc"
>
{
public:
	OpMcr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24764 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24768 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24771 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24775 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24816 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24820 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24823 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24834 "isa_arm32.tcc"
>
class OpMrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24839 "isa_arm32.tcc"
>
{
public:
	OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24930 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24934 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24937 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24941 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24944 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24982 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24986 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24989 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25000 "isa_arm32.tcc"
>
class OpMrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25005 "isa_arm32.tcc"
>
{
public:
	OpMrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25096 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25100 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25103 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25107 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25110 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25148 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25152 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25155 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25166 "isa_arm32.tcc"
>
class OpMrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25171 "isa_arm32.tcc"
>
{
public:
	OpMrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25262 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25266 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25269 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25273 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25276 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25314 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25318 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25321 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25332 "isa_arm32.tcc"
>
class OpMrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25337 "isa_arm32.tcc"
>
{
public:
	OpMrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25427 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25431 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25434 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25438 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25441 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25479 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25483 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25486 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25497 "isa_arm32.tcc"
>
class OpStc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25502 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25593 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25597 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25600 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25607 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25645 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25649 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25652 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25666 "isa_arm32.tcc"
>
class OpStc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25671 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25762 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25766 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25769 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25773 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25776 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25814 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25818 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25821 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25835 "isa_arm32.tcc"
>
class OpStc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25840 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25931 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25935 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25938 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25942 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25983 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25987 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25990 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26004 "isa_arm32.tcc"
>
class OpStc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26009 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26099 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26103 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26106 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26151 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26155 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26158 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26172 "isa_arm32.tcc"
>
class OpStc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26177 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26268 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26272 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26275 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26279 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26282 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26320 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26324 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26327 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26338 "isa_arm32.tcc"
>
class OpStc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26343 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26434 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26438 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26441 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26445 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26448 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26486 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26490 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26493 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26504 "isa_arm32.tcc"
>
class OpStc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26509 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26600 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26607 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26614 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26652 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26656 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26659 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26670 "isa_arm32.tcc"
>
class OpStc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26675 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26765 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26769 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26772 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26776 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26779 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26817 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26821 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26824 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26835 "isa_arm32.tcc"
>
class OpStc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26840 "isa_arm32.tcc"
>
{
public:
	OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26931 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26935 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26938 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26942 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26983 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26987 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26990 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27001 "isa_arm32.tcc"
>
class OpStc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27006 "isa_arm32.tcc"
>
{
public:
	OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27097 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27101 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27104 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27108 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27111 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27149 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27153 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27156 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27167 "isa_arm32.tcc"
>
class OpStc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27172 "isa_arm32.tcc"
>
{
public:
	OpStc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27263 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27267 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27270 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27274 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27277 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27315 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27319 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27322 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27333 "isa_arm32.tcc"
>
class OpStc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27338 "isa_arm32.tcc"
>
{
public:
	OpStc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27428 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27432 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27435 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27439 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27442 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27480 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27484 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27487 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27498 "isa_arm32.tcc"
>
class OpStc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27503 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27593 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27597 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27600 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27607 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27645 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27649 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27652 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27666 "isa_arm32.tcc"
>
class OpStc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27671 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27761 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27765 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27768 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27772 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27775 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27813 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27817 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27820 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27834 "isa_arm32.tcc"
>
class OpStc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27839 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27929 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27933 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27936 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27940 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27943 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27981 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27985 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27988 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28002 "isa_arm32.tcc"
>
class OpStc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28007 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28096 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28100 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28103 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28107 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28110 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28148 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28152 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28155 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28169 "isa_arm32.tcc"
>
class OpCdp2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28174 "isa_arm32.tcc"
>
{
public:
	OpCdp2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28188 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28192 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28195 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28199 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28202 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28240 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28244 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28247 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28258 "isa_arm32.tcc"
>
class OpLdc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28263 "isa_arm32.tcc"
>
{
public:
	OpLdc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28277 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28281 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28284 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28288 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28291 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28329 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28333 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28336 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28350 "isa_arm32.tcc"
>
class OpLdc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28355 "isa_arm32.tcc"
>
{
public:
	OpLdc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28369 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28376 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28380 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28383 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28421 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28425 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28428 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28439 "isa_arm32.tcc"
>
class OpLdc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28444 "isa_arm32.tcc"
>
{
public:
	OpLdc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28458 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28462 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28465 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28469 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28472 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28510 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28514 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28517 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28528 "isa_arm32.tcc"
>
class OpLdc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28533 "isa_arm32.tcc"
>
{
public:
	OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28547 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28551 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28554 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28558 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28561 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28599 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28603 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28606 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28620 "isa_arm32.tcc"
>
class OpMcr2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28625 "isa_arm32.tcc"
>
{
public:
	OpMcr2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28639 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28646 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28650 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28653 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28691 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28695 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28698 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28709 "isa_arm32.tcc"
>
class OpMrc2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28714 "isa_arm32.tcc"
>
{
public:
	OpMrc2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28728 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28732 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28735 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28739 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28742 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28780 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28784 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28787 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28798 "isa_arm32.tcc"
>
class OpStc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28803 "isa_arm32.tcc"
>
{
public:
	OpStc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28817 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28821 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28824 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28828 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28831 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28869 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28873 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28876 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28890 "isa_arm32.tcc"
>
class OpStc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28895 "isa_arm32.tcc"
>
{
public:
	OpStc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28909 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28913 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28916 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28920 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28923 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28961 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28965 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28968 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28979 "isa_arm32.tcc"
>
class OpStc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28984 "isa_arm32.tcc"
>
{
public:
	OpStc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28998 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29002 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29005 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29009 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29012 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29050 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29054 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29057 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29068 "isa_arm32.tcc"
>
class OpStc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29073 "isa_arm32.tcc"
>
{
public:
	OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29087 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29094 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29098 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29101 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29139 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29143 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29146 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29160 "isa_arm32.tcc"
>
class OpMcrr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29165 "isa_arm32.tcc"
>
{
public:
	OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29255 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29259 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29262 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29266 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29269 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29307 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29311 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29314 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29325 "isa_arm32.tcc"
>
class OpMcrr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29330 "isa_arm32.tcc"
>
{
public:
	OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29420 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29424 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29427 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29431 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29434 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29472 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29476 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29479 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29490 "isa_arm32.tcc"
>
class OpMcrr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29495 "isa_arm32.tcc"
>
{
public:
	OpMcrr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29585 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29589 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29592 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29596 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29599 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29637 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29641 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29644 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29652 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29655 "isa_arm32.tcc"
>
class OpMcrr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29660 "isa_arm32.tcc"
>
{
public:
	OpMcrr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29749 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29753 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29756 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29760 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29763 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29801 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29805 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29808 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29819 "isa_arm32.tcc"
>
class OpMrrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29824 "isa_arm32.tcc"
>
{
public:
	OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29914 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29918 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29921 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29928 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29966 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29970 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29973 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29984 "isa_arm32.tcc"
>
class OpMrrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29989 "isa_arm32.tcc"
>
{
public:
	OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30079 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30083 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30086 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30090 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30093 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30131 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30135 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30138 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30149 "isa_arm32.tcc"
>
class OpMrrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30154 "isa_arm32.tcc"
>
{
public:
	OpMrrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30244 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30248 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30251 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30255 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30258 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30296 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30300 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30303 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30314 "isa_arm32.tcc"
>
class OpMrrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30319 "isa_arm32.tcc"
>
{
public:
	OpMrrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30408 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30412 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30415 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30419 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30422 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30460 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30464 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30467 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30475 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30478 "isa_arm32.tcc"
>
class OpClz : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30483 "isa_arm32.tcc"
>
{
public:
	OpClz(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t rd;
	uint32_t sbo2;
	uint32_t rm;
	virtual
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30496 "isa_arm32.tcc"
	disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30500 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30503 "isa_arm32.tcc"
	,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30507 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30510 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30548 "isa_arm32.tcc"
	execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30552 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30555 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

BRANCH INSTRUCTIONS

**********************************************/
/*******************************************************************
* b (branch) instruction
* op b(cond[4]:0b1010[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30611 "isa_arm32.tcc"
>

void
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30618 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 30627 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30635 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30639 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30643 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30647 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30650 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30654 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30657 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30668 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30676 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30680 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30684 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30688 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30691 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30708 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30717 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30722 "isa_arm32.tcc"
> *DecodeOpB_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30728 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30738 "isa_arm32.tcc"
>

void
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30745 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 30754 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30762 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30766 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30770 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30774 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30777 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30781 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30784 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30795 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30803 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30807 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30811 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30815 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30818 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30835 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30844 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30849 "isa_arm32.tcc"
> *DecodeOpB_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30855 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30865 "isa_arm32.tcc"
>

void
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30872 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 30881 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30889 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30893 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30897 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30901 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30904 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30908 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30911 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30930 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30934 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30938 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30942 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30945 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30962 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30971 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30976 "isa_arm32.tcc"
> *DecodeOpB_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30982 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30992 "isa_arm32.tcc"
>

void
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30999 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31016 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31020 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31024 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31028 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31031 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31035 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31038 "isa_arm32.tcc"
)
{
#line 77 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 31049 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31057 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31061 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31065 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31069 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31072 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31089 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31098 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31103 "isa_arm32.tcc"
> *DecodeOpB_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31109 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of b (branch) instruction
*******************************************************************/
/*******************************************************************
* bl (branch & link) instruction
* op bl(cond[4]:0b1011[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31123 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31126 "isa_arm32.tcc"
>

void
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31133 "isa_arm32.tcc"
>::initialize_condition()
{
#line 113 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 31142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31150 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31154 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31158 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31162 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31165 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31169 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31172 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31183 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31191 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31195 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31199 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31203 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31206 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31225 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31234 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31239 "isa_arm32.tcc"
> *DecodeOpBl_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31245 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31255 "isa_arm32.tcc"
>

void
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31262 "isa_arm32.tcc"
>::initialize_condition()
{
#line 119 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 31271 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31279 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31283 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31287 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31291 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31294 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31298 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31301 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31312 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31320 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31324 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31328 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31332 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31335 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31354 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31363 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31368 "isa_arm32.tcc"
> *DecodeOpBl_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31374 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31384 "isa_arm32.tcc"
>

void
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31391 "isa_arm32.tcc"
>::initialize_condition()
{
#line 125 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 31400 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31408 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31412 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31416 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31420 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31423 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31427 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31430 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31441 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31449 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31453 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31457 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31461 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31464 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31483 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31492 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31497 "isa_arm32.tcc"
> *DecodeOpBl_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31503 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31513 "isa_arm32.tcc"
>

void
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31520 "isa_arm32.tcc"
>::initialize_condition()
{
#line 131 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31529 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31537 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31541 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31545 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31549 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31552 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31556 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31559 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31570 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31578 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31582 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31586 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31590 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31593 "isa_arm32.tcc"
)
{
#line 147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31612 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31621 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31626 "isa_arm32.tcc"
> *DecodeOpBl_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31632 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bl (branch & link) instruction
*******************************************************************/
/*******************************************************************
* bx (branch and exchange) instruction
* this instruction is only availabe for the following architectures
* 	CONFIG::ARMV4T,
*  CONFIG::ARMV4TXM,
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31654 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31657 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31661 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31665 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31669 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31672 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31676 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31679 "isa_arm32.tcc"
)
{
#line 183 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "bx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31688 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31696 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31700 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31704 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31708 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31711 "isa_arm32.tcc"
)
{
#line 189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31730 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31738 "isa_arm32.tcc"
>

void
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31745 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 205 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 31755 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31764 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31769 "isa_arm32.tcc"
> *DecodeOpBx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31775 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bx (branch and exchange) instruction
*******************************************************************/
/*******************************************************************
* blx (1) (branch with link and exchange version 1) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31798 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31802 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31806 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31810 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31813 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31817 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31820 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8 << dec;
	}
#line 31827 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31835 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31839 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31843 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31847 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31850 "isa_arm32.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typename CONFIG::reg_t new_PC;

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T(true);
		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31862 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31871 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31876 "isa_arm32.tcc"
> *DecodeOpBlx_1(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31882 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (1) (branch with link and exchange version 1) instruction
*******************************************************************/
/*******************************************************************
* blx (2) (branch with link and exchange version 2) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31905 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31909 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31913 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31917 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31920 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31924 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31927 "isa_arm32.tcc"
)
{
#line 262 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31936 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31944 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31948 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31952 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31956 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31959 "isa_arm32.tcc"
)
{
#line 268 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31979 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31984 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31987 "isa_arm32.tcc"
>

void
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31994 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 285 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32004 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32013 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32018 "isa_arm32.tcc"
> *DecodeOpBlx_2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32024 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (2) (branch with link and exchange version 2) instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* and instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32078 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32082 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32086 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32090 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32093 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32097 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32100 "isa_arm32.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32114 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32122 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32126 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32130 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32134 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32137 "isa_arm32.tcc"
)
{
#line 118 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32157 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32168 "isa_arm32.tcc"
>

void
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32175 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32185 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32194 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32199 "isa_arm32.tcc"
> *DecodeOpAnd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32205 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32215 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32219 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32223 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32227 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32230 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32234 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32237 "isa_arm32.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32251 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32259 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32263 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32267 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32271 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32274 "isa_arm32.tcc"
)
{
#line 135 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32295 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32306 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32313 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32323 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32331 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32338 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32348 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32354 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32357 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32362 "isa_arm32.tcc"
> *DecodeOpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32368 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32375 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32378 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32382 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32386 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32390 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32393 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32397 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32400 "isa_arm32.tcc"
)
{
#line 74 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32414 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32422 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32426 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32430 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32434 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32437 "isa_arm32.tcc"
)
{
#line 153 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32459 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32470 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32477 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32487 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32495 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32502 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32512 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32520 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32527 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 32537 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32546 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32551 "isa_arm32.tcc"
> *DecodeOpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32557 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32567 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32571 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32575 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32579 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32582 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32586 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32589 "isa_arm32.tcc"
)
{
#line 85 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32603 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32611 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32615 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32619 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32623 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32626 "isa_arm32.tcc"
)
{
#line 172 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32656 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32667 "isa_arm32.tcc"
>

void
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32674 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32684 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32693 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32698 "isa_arm32.tcc"
> *DecodeOpAnds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32704 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32714 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32718 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32722 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32726 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32729 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32733 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32736 "isa_arm32.tcc"
)
{
#line 96 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32750 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32758 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32762 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32766 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32770 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32773 "isa_arm32.tcc"
)
{
#line 199 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32804 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32815 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32822 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32832 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32840 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32847 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32857 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32866 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32871 "isa_arm32.tcc"
> *DecodeOpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32877 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32887 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32891 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32895 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32899 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32902 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32906 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32909 "isa_arm32.tcc"
)
{
#line 107 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32923 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32931 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32935 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32939 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32943 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32946 "isa_arm32.tcc"
)
{
#line 227 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32978 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32989 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32996 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33006 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33014 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33021 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33031 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33039 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33046 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33056 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33065 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33070 "isa_arm32.tcc"
> *DecodeOpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33076 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of and instruction
*******************************************************************/
/*******************************************************************
* eor instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33092 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33096 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33100 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33104 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33107 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33114 "isa_arm32.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33128 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33136 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33140 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33144 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33148 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33151 "isa_arm32.tcc"
)
{
#line 337 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33171 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33182 "isa_arm32.tcc"
>

void
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33189 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33199 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33208 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33213 "isa_arm32.tcc"
> *DecodeOpEor_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33219 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33229 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33233 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33237 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33241 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33244 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33248 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33251 "isa_arm32.tcc"
)
{
#line 282 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33265 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33273 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33277 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33281 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33285 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33288 "isa_arm32.tcc"
)
{
#line 354 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33309 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33320 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33327 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33337 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33345 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33352 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33362 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33371 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33376 "isa_arm32.tcc"
> *DecodeOpEor_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33382 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33392 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33396 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33400 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33404 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33407 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33411 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33414 "isa_arm32.tcc"
)
{
#line 293 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33428 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33433 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33436 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33440 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33444 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33448 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33451 "isa_arm32.tcc"
)
{
#line 372 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33473 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33484 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33491 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33501 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33509 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33516 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33534 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33541 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33551 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33557 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33560 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33565 "isa_arm32.tcc"
> *DecodeOpEor_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33571 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33581 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33585 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33589 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33593 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33596 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33600 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33603 "isa_arm32.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33617 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33625 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33629 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33633 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33637 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33640 "isa_arm32.tcc"
)
{
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33670 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33678 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33681 "isa_arm32.tcc"
>

void
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33688 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33698 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33707 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33712 "isa_arm32.tcc"
> *DecodeOpEors_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33718 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33725 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33728 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33732 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33736 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33740 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33743 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33747 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33750 "isa_arm32.tcc"
)
{
#line 315 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33764 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33772 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33776 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33780 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33784 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33787 "isa_arm32.tcc"
)
{
#line 418 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33818 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33829 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33836 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33846 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33854 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33861 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33871 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33880 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33885 "isa_arm32.tcc"
> *DecodeOpEors_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33891 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33901 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33905 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33909 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33913 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33916 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33920 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33923 "isa_arm32.tcc"
)
{
#line 326 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33937 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33945 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33949 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33953 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33957 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33960 "isa_arm32.tcc"
)
{
#line 446 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33992 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34003 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34010 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34020 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34028 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34035 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34045 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34053 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34060 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34070 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34079 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34084 "isa_arm32.tcc"
> *DecodeOpEors_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34090 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of eor instruction
*******************************************************************/
/*******************************************************************
* sub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34106 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34110 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34114 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34118 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34121 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34125 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34128 "isa_arm32.tcc"
)
{
#line 490 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34150 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34154 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34158 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34162 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34165 "isa_arm32.tcc"
)
{
#line 556 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34185 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34196 "isa_arm32.tcc"
>

void
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34203 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34213 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34222 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34227 "isa_arm32.tcc"
> *DecodeOpSub_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34233 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34243 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34247 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34251 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34255 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34258 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34262 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34265 "isa_arm32.tcc"
)
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34279 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34287 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34291 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34295 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34299 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34302 "isa_arm32.tcc"
)
{
#line 573 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34323 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34334 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34341 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34351 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34359 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34366 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34376 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34385 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34390 "isa_arm32.tcc"
> *DecodeOpSub_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34396 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34403 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34406 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34410 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34414 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34418 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34421 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34425 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34428 "isa_arm32.tcc"
)
{
#line 512 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34442 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34450 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34454 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34458 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34462 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34465 "isa_arm32.tcc"
)
{
#line 591 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34487 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34498 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34505 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34515 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34523 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34530 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34548 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34555 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34565 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34574 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34579 "isa_arm32.tcc"
> *DecodeOpSub_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34585 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34595 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34599 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34603 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34607 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34610 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34614 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34617 "isa_arm32.tcc"
)
{
#line 523 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34631 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34636 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34639 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34643 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34647 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34651 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34654 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34683 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34694 "isa_arm32.tcc"
>

void
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34701 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34711 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34720 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34725 "isa_arm32.tcc"
> *DecodeOpSubs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34731 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34738 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34741 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34745 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34749 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34753 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34756 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34760 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34763 "isa_arm32.tcc"
)
{
#line 534 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34777 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34785 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34789 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34793 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34797 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34800 "isa_arm32.tcc"
)
{
#line 636 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34830 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34841 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34848 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34858 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34866 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34873 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34883 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34892 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34897 "isa_arm32.tcc"
> *DecodeOpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34903 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34910 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34913 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34917 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34921 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34925 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34928 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34932 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34935 "isa_arm32.tcc"
)
{
#line 545 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34949 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34957 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34961 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34965 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34969 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34972 "isa_arm32.tcc"
)
{
#line 663 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 35003 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35014 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35021 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35031 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35039 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35046 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35056 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35061 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35064 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35071 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35081 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35090 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35095 "isa_arm32.tcc"
> *DecodeOpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35101 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sub instruction
*******************************************************************/
/*******************************************************************
* rsb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35117 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35121 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35125 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35129 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35132 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35136 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35139 "isa_arm32.tcc"
)
{
#line 706 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35153 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35161 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35165 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35169 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35173 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35176 "isa_arm32.tcc"
)
{
#line 772 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35196 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35207 "isa_arm32.tcc"
>

void
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35214 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35224 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35233 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35238 "isa_arm32.tcc"
> *DecodeOpRsb_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35244 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35254 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35258 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35262 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35266 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35269 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35273 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35276 "isa_arm32.tcc"
)
{
#line 717 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35290 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35298 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35302 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35306 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35310 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35313 "isa_arm32.tcc"
)
{
#line 789 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35334 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35345 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35352 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35362 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35370 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35377 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35387 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35396 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35401 "isa_arm32.tcc"
> *DecodeOpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35407 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35417 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35421 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35425 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35429 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35432 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35436 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35439 "isa_arm32.tcc"
)
{
#line 728 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35461 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35465 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35469 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35473 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35476 "isa_arm32.tcc"
)
{
#line 807 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35498 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35509 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35516 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35534 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35541 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35551 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35559 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35566 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35576 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35585 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35590 "isa_arm32.tcc"
> *DecodeOpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35596 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35606 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35610 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35614 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35618 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35621 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35625 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35628 "isa_arm32.tcc"
)
{
#line 739 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35642 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35647 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35650 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35654 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35658 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35662 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35665 "isa_arm32.tcc"
)
{
#line 826 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35694 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35705 "isa_arm32.tcc"
>

void
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35712 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35722 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35731 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35736 "isa_arm32.tcc"
> *DecodeOpRsbs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35742 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35752 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35756 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35760 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35764 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35767 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35771 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35774 "isa_arm32.tcc"
)
{
#line 750 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35788 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35796 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35800 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35804 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35808 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35811 "isa_arm32.tcc"
)
{
#line 852 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35841 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35852 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35859 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35869 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35877 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35884 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35894 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35903 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35908 "isa_arm32.tcc"
> *DecodeOpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35914 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35924 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35928 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35932 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35939 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35946 "isa_arm32.tcc"
)
{
#line 761 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35960 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35968 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35972 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35976 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35980 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35983 "isa_arm32.tcc"
)
{
#line 879 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 36014 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36022 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36025 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36032 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36042 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36050 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36057 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36067 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36075 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36082 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36092 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36101 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36106 "isa_arm32.tcc"
> *DecodeOpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36112 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsb instruction
*******************************************************************/
/*******************************************************************
* add instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36128 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36132 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36136 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36140 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36143 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36147 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36150 "isa_arm32.tcc"
)
{
#line 922 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36164 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36172 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36176 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36180 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36184 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36187 "isa_arm32.tcc"
)
{
#line 988 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36207 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36215 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36218 "isa_arm32.tcc"
>

void
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36225 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36235 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36244 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36249 "isa_arm32.tcc"
> *DecodeOpAdd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36255 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36265 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36269 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36273 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36280 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36284 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36287 "isa_arm32.tcc"
)
{
#line 933 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36301 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36309 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36313 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36317 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36321 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36324 "isa_arm32.tcc"
)
{
#line 1005 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36345 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36356 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36363 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36373 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36381 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36388 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36398 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36407 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36412 "isa_arm32.tcc"
> *DecodeOpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36418 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36425 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36428 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36432 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36436 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36440 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36443 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36447 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36450 "isa_arm32.tcc"
)
{
#line 944 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36464 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36472 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36476 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36480 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36484 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36487 "isa_arm32.tcc"
)
{
#line 1023 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36509 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36520 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36527 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36537 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36545 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36552 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36562 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36570 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36577 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36587 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36596 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36601 "isa_arm32.tcc"
> *DecodeOpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36607 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36617 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36621 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36625 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36629 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36632 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36636 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36639 "isa_arm32.tcc"
)
{
#line 955 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36653 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36661 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36665 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36669 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36673 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36676 "isa_arm32.tcc"
)
{
#line 1042 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36708 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36719 "isa_arm32.tcc"
>

void
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36726 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36736 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36745 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36750 "isa_arm32.tcc"
> *DecodeOpAdds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36756 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36766 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36770 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36774 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36778 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36781 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36785 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36788 "isa_arm32.tcc"
)
{
#line 966 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36802 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36810 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36814 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36818 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36822 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36825 "isa_arm32.tcc"
)
{
#line 1071 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36858 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36869 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36876 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36886 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36894 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36901 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36911 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36920 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36925 "isa_arm32.tcc"
> *DecodeOpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36931 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36941 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36945 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36949 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36953 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36956 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36960 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36963 "isa_arm32.tcc"
)
{
#line 977 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36977 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36985 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36989 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36993 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36997 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37000 "isa_arm32.tcc"
)
{
#line 1101 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		Add32(res, carry_out, overflow_out,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37034 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37042 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37045 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37052 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37062 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37067 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37070 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37077 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37087 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37095 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37102 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37112 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37121 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37126 "isa_arm32.tcc"
> *DecodeOpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37132 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of add instruction
*******************************************************************/
/*******************************************************************
* adc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37148 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37152 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37156 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37160 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37163 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37167 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37170 "isa_arm32.tcc"
)
{
#line 1147 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37184 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37189 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37192 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37196 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37200 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37204 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37207 "isa_arm32.tcc"
)
{
#line 1213 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37229 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37240 "isa_arm32.tcc"
>

void
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37247 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37257 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37263 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37266 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37271 "isa_arm32.tcc"
> *DecodeOpAdc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37277 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37287 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37291 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37295 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37299 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37302 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37306 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37309 "isa_arm32.tcc"
)
{
#line 1158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37323 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37331 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37335 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37339 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37343 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37346 "isa_arm32.tcc"
)
{
#line 1232 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37369 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37380 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37387 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37397 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37402 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37405 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37412 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37422 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37428 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37431 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37436 "isa_arm32.tcc"
> *DecodeOpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37442 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37449 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37452 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37456 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37460 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37464 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37467 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37471 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37474 "isa_arm32.tcc"
)
{
#line 1169 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 37488 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37496 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37500 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37504 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37508 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37511 "isa_arm32.tcc"
)
{
#line 1252 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37535 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37546 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37553 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37563 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37571 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37578 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37588 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37596 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37603 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37613 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37622 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37627 "isa_arm32.tcc"
> *DecodeOpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37633 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37643 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37647 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37651 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37655 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37658 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37662 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37665 "isa_arm32.tcc"
)
{
#line 1180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37679 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37684 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37687 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37691 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37695 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37699 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37702 "isa_arm32.tcc"
)
{
#line 1273 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37736 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37747 "isa_arm32.tcc"
>

void
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37754 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37764 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37770 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37773 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37778 "isa_arm32.tcc"
> *DecodeOpAdcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37784 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37791 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37794 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37798 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37802 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37806 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37809 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37813 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37816 "isa_arm32.tcc"
)
{
#line 1191 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37830 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37838 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37842 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37846 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37850 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37853 "isa_arm32.tcc"
)
{
#line 1304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37888 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37896 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37899 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37906 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37916 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37924 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37931 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37941 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37950 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37955 "isa_arm32.tcc"
> *DecodeOpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37961 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37971 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37975 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37979 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37983 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37986 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37990 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37993 "isa_arm32.tcc"
)
{
#line 1202 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38007 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38012 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38015 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38019 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38023 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38027 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38030 "isa_arm32.tcc"
)
{
#line 1336 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 38066 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38077 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38084 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38094 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38102 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38109 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38119 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38127 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38134 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38144 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38153 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38158 "isa_arm32.tcc"
> *DecodeOpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38164 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of adc instruction
*******************************************************************/
/*******************************************************************
* sbc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38180 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38184 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38188 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38192 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38195 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38199 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38202 "isa_arm32.tcc"
)
{
#line 1384 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38216 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38224 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38228 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38232 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38236 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38239 "isa_arm32.tcc"
)
{
#line 1450 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38261 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38269 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38272 "isa_arm32.tcc"
>

void
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38279 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38289 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38298 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38303 "isa_arm32.tcc"
> *DecodeOpSbc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38309 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38316 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38319 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38323 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38327 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38331 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38334 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38338 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38341 "isa_arm32.tcc"
)
{
#line 1395 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38355 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38363 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38367 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38371 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38375 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38378 "isa_arm32.tcc"
)
{
#line 1469 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38401 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38409 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38412 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38419 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38429 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38437 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38444 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38454 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38460 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38463 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38468 "isa_arm32.tcc"
> *DecodeOpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38474 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38484 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38488 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38492 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38496 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38499 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38503 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38506 "isa_arm32.tcc"
)
{
#line 1406 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38520 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38528 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38532 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38536 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38540 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38543 "isa_arm32.tcc"
)
{
#line 1489 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38567 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38578 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38585 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38595 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38603 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38610 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38620 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38625 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38628 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38635 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38645 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38651 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38654 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38659 "isa_arm32.tcc"
> *DecodeOpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38665 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38675 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38679 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38683 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38687 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38690 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38694 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38697 "isa_arm32.tcc"
)
{
#line 1417 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38711 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38719 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38723 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38727 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38731 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38734 "isa_arm32.tcc"
)
{
#line 1510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38765 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38776 "isa_arm32.tcc"
>

void
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38783 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38793 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38802 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38807 "isa_arm32.tcc"
> *DecodeOpSbcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38813 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38823 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38827 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38831 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38835 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38838 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38842 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38845 "isa_arm32.tcc"
)
{
#line 1428 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38859 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38867 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38871 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38875 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38879 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38882 "isa_arm32.tcc"
)
{
#line 1538 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38914 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38922 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38925 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38932 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38950 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38957 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38967 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38976 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38981 "isa_arm32.tcc"
> *DecodeOpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38987 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38997 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39001 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39005 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39009 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39012 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39016 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39019 "isa_arm32.tcc"
)
{
#line 1439 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39041 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39045 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39049 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39053 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39056 "isa_arm32.tcc"
)
{
#line 1567 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 39089 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39100 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39107 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39117 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39125 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39132 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39150 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39157 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39167 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39176 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39181 "isa_arm32.tcc"
> *DecodeOpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39187 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sbc instruction
*******************************************************************/
/*******************************************************************
* rsc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39203 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39207 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39211 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39215 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39218 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39222 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39225 "isa_arm32.tcc"
)
{
#line 1612 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39239 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39247 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39251 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39255 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39259 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39262 "isa_arm32.tcc"
)
{
#line 1678 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39284 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39292 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39295 "isa_arm32.tcc"
>

void
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39302 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39312 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39318 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39321 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39326 "isa_arm32.tcc"
> *DecodeOpRsc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39332 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39339 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39342 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39346 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39350 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39354 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39357 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39361 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39364 "isa_arm32.tcc"
)
{
#line 1623 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39378 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39386 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39390 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39394 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39398 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39401 "isa_arm32.tcc"
)
{
#line 1697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39424 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39435 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39442 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39452 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39460 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39467 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39477 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39486 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39491 "isa_arm32.tcc"
> *DecodeOpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39497 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39507 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39511 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39515 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39519 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39522 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39526 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39529 "isa_arm32.tcc"
)
{
#line 1634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39543 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39551 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39555 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39559 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39563 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39566 "isa_arm32.tcc"
)
{
#line 1717 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39590 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39598 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39601 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39608 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39618 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39626 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39633 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39643 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39651 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39658 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39668 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39674 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39677 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39682 "isa_arm32.tcc"
> *DecodeOpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39688 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39695 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39698 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39702 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39706 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39710 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39713 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39717 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39720 "isa_arm32.tcc"
)
{
#line 1645 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39734 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39739 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39742 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39746 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39750 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39754 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39757 "isa_arm32.tcc"
)
{
#line 1738 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39788 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39799 "isa_arm32.tcc"
>

void
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39806 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39816 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39822 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39825 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39830 "isa_arm32.tcc"
> *DecodeOpRscs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39836 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39843 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39846 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39850 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39854 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39858 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39861 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39865 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39868 "isa_arm32.tcc"
)
{
#line 1656 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39882 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39890 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39894 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39898 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39902 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39905 "isa_arm32.tcc"
)
{
#line 1766 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39937 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39948 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39955 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39965 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39970 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39973 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39980 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39990 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39999 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40004 "isa_arm32.tcc"
> *DecodeOpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40010 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40020 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40024 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40028 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40032 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40035 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40039 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40042 "isa_arm32.tcc"
)
{
#line 1667 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40056 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40061 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40064 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40068 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40072 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40076 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40079 "isa_arm32.tcc"
)
{
#line 1795 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 40112 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40123 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40130 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40148 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40155 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40165 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40173 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40180 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40190 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40196 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40199 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40204 "isa_arm32.tcc"
> *DecodeOpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40210 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsc instruction
*******************************************************************/
/*******************************************************************
* tst instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40223 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40226 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40230 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40234 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40238 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40241 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40245 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40248 "isa_arm32.tcc"
)
{
#line 1837 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40260 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40268 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40272 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40276 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40280 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40283 "isa_arm32.tcc"
)
{
#line 1864 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40308 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40316 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40319 "isa_arm32.tcc"
>

void
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40326 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40336 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40345 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40350 "isa_arm32.tcc"
> *DecodeOpTst_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40356 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40366 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40370 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40374 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40381 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40385 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40388 "isa_arm32.tcc"
)
{
#line 1846 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40400 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40408 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40412 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40416 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40420 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40423 "isa_arm32.tcc"
)
{
#line 1886 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40449 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40460 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40467 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40477 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40485 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40492 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40502 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40511 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40516 "isa_arm32.tcc"
> *DecodeOpTst_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40522 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40532 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40536 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40540 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40544 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40547 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40551 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40554 "isa_arm32.tcc"
)
{
#line 1855 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40566 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40574 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40578 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40582 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40586 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40589 "isa_arm32.tcc"
)
{
#line 1909 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40616 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40627 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40634 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40644 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40652 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40659 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40669 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40674 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40677 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40684 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40694 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40703 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40708 "isa_arm32.tcc"
> *DecodeOpTst_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40714 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of tst instruction
*******************************************************************/
/*******************************************************************
* teq instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40730 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40734 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40738 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40742 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40745 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40749 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40752 "isa_arm32.tcc"
)
{
#line 1945 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40764 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40772 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40776 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40780 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40784 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40787 "isa_arm32.tcc"
)
{
#line 1972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40812 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40823 "isa_arm32.tcc"
>

void
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40830 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40840 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40849 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40854 "isa_arm32.tcc"
> *DecodeOpTeq_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40860 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40867 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40870 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40874 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40878 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40882 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40885 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40889 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40892 "isa_arm32.tcc"
)
{
#line 1954 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40904 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40909 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40912 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40916 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40920 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40924 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40927 "isa_arm32.tcc"
)
{
#line 1994 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40953 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40964 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40971 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40981 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40989 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40996 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41006 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41012 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41015 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41020 "isa_arm32.tcc"
> *DecodeOpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41026 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41036 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41040 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41044 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41048 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41051 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41055 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41058 "isa_arm32.tcc"
)
{
#line 1963 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41078 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41082 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41086 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41090 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41093 "isa_arm32.tcc"
)
{
#line 2017 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 41120 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41131 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41138 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41156 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41163 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41173 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41181 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41188 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41198 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41207 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41212 "isa_arm32.tcc"
> *DecodeOpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41218 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of teq instruction
*******************************************************************/
/*******************************************************************
* cmp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41234 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41238 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41242 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41246 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41249 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41253 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41256 "isa_arm32.tcc"
)
{
#line 2053 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41268 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41276 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41280 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41284 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41288 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41291 "isa_arm32.tcc"
)
{
#line 2081 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41316 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41327 "isa_arm32.tcc"
>

void
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41334 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41344 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41353 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41358 "isa_arm32.tcc"
> *DecodeOpCmp_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41364 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41374 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41378 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41382 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41386 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41389 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41393 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41396 "isa_arm32.tcc"
)
{
#line 2062 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41408 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41416 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41420 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41424 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41428 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41431 "isa_arm32.tcc"
)
{
#line 2103 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N((res & 0x80000000) != 0);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41457 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41468 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41475 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41485 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41493 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41500 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41510 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41519 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41524 "isa_arm32.tcc"
> *DecodeOpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41530 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41540 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41544 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41548 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41552 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41555 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41559 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41562 "isa_arm32.tcc"
)
{
#line 2072 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41574 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41582 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41586 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41590 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41594 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41597 "isa_arm32.tcc"
)
{
#line 2126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41624 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41635 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41642 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41652 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41660 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41667 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41677 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41685 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41692 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41702 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41711 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41716 "isa_arm32.tcc"
> *DecodeOpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41722 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmp instruction
*******************************************************************/
/*******************************************************************
* cmn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41738 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41742 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41746 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41750 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41753 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41757 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41760 "isa_arm32.tcc"
)
{
#line 2162 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41772 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41777 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41780 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41784 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41788 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41792 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41795 "isa_arm32.tcc"
)
{
#line 2189 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41820 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41831 "isa_arm32.tcc"
>

void
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41838 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41848 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41857 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41862 "isa_arm32.tcc"
> *DecodeOpCmn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41868 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41875 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41878 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41882 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41886 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41890 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41893 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41897 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41900 "isa_arm32.tcc"
)
{
#line 2171 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41912 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41920 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41924 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41928 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41932 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41935 "isa_arm32.tcc"
)
{
#line 2211 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41961 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41972 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41979 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41989 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41997 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42004 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42014 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42023 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42028 "isa_arm32.tcc"
> *DecodeOpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42034 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42041 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42044 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42048 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42052 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42056 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42059 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42063 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42066 "isa_arm32.tcc"
)
{
#line 2180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42078 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42086 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42090 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42094 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42098 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42101 "isa_arm32.tcc"
)
{
#line 2234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 42128 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42136 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42139 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42146 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42156 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42164 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42171 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42181 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42186 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42189 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42196 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42206 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42215 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42220 "isa_arm32.tcc"
> *DecodeOpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42226 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmn instruction
*******************************************************************/
/*******************************************************************
* orr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42239 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42242 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42246 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42250 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42254 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42257 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42261 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42264 "isa_arm32.tcc"
)
{
#line 2273 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42278 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42286 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42290 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42294 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42298 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42301 "isa_arm32.tcc"
)
{
#line 2339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42321 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42332 "isa_arm32.tcc"
>

void
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42339 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42349 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42355 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42358 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42363 "isa_arm32.tcc"
> *DecodeOpOrr_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42369 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42376 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42379 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42383 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42387 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42391 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42394 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42398 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42401 "isa_arm32.tcc"
)
{
#line 2284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42423 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42427 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42431 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42435 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42438 "isa_arm32.tcc"
)
{
#line 2356 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42459 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42470 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42477 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42487 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42495 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42502 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42512 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42521 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42526 "isa_arm32.tcc"
> *DecodeOpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42532 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42542 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42546 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42550 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42554 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42557 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42561 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42564 "isa_arm32.tcc"
)
{
#line 2295 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42578 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42583 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42586 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42590 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42594 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42598 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42601 "isa_arm32.tcc"
)
{
#line 2374 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42623 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42634 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42641 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42651 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42659 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42666 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42676 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42681 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42684 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42691 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42701 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42707 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42710 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42715 "isa_arm32.tcc"
> *DecodeOpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42721 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42731 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42735 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42739 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42743 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42746 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42750 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42753 "isa_arm32.tcc"
)
{
#line 2306 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42767 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42775 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42779 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42783 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42787 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42790 "isa_arm32.tcc"
)
{
#line 2393 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42820 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42831 "isa_arm32.tcc"
>

void
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42838 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42848 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42857 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42862 "isa_arm32.tcc"
> *DecodeOpOrrs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42868 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42875 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42878 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42882 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42886 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42890 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42893 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42897 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42900 "isa_arm32.tcc"
)
{
#line 2317 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42914 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42922 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42926 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42930 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42934 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42937 "isa_arm32.tcc"
)
{
#line 2420 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42968 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42979 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42986 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42996 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43004 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43011 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43021 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43030 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43035 "isa_arm32.tcc"
> *DecodeOpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43041 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43051 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43055 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43059 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43063 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43066 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43070 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43073 "isa_arm32.tcc"
)
{
#line 2328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43087 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43095 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43099 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43103 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43107 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43110 "isa_arm32.tcc"
)
{
#line 2448 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43142 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43153 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43160 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43170 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43178 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43185 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43195 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43203 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43210 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43220 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43229 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43234 "isa_arm32.tcc"
> *DecodeOpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43240 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of orr instruction
*******************************************************************/
/*******************************************************************
* mov instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43256 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43260 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43264 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43268 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43271 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43275 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43278 "isa_arm32.tcc"
)
{
#line 2495 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43290 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43298 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43302 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43306 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43310 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43313 "isa_arm32.tcc"
)
{
#line 2549 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43329 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43338 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43343 "isa_arm32.tcc"
> *DecodeOpMov_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43349 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43359 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43363 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43367 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43371 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43374 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43381 "isa_arm32.tcc"
)
{
#line 2504 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43393 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43401 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43405 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43409 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43413 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43416 "isa_arm32.tcc"
)
{
#line 2562 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43435 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43443 "isa_arm32.tcc"
>

void
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43450 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43460 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43469 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43474 "isa_arm32.tcc"
> *DecodeOpMov_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43480 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43490 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43494 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43498 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43502 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43505 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43509 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43512 "isa_arm32.tcc"
)
{
#line 2513 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43524 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43532 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43536 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43540 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43544 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43547 "isa_arm32.tcc"
)
{
#line 2578 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43567 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43575 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43582 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43592 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43600 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43607 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43617 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43626 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43631 "isa_arm32.tcc"
> *DecodeOpMov_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43637 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43647 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43651 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43655 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43659 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43662 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43666 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43669 "isa_arm32.tcc"
)
{
#line 2522 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43681 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43686 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43689 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43693 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43697 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43701 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43704 "isa_arm32.tcc"
)
{
#line 2595 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43730 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43739 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43744 "isa_arm32.tcc"
> *DecodeOpMovs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43750 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43760 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43764 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43768 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43772 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43775 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43779 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43782 "isa_arm32.tcc"
)
{
#line 2531 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43794 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43802 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43806 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43810 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43814 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43817 "isa_arm32.tcc"
)
{
#line 2618 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43846 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43854 "isa_arm32.tcc"
>

void
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43861 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43871 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43880 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43885 "isa_arm32.tcc"
> *DecodeOpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43891 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43901 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43905 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43909 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43913 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43916 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43920 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43923 "isa_arm32.tcc"
)
{
#line 2540 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43935 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43943 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43947 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43951 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43955 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43958 "isa_arm32.tcc"
)
{
#line 2644 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43988 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43996 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44003 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44013 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44021 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44028 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44038 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44047 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44052 "isa_arm32.tcc"
> *DecodeOpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44058 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mov instruction
*******************************************************************/
/*******************************************************************
* bic instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44074 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44078 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44082 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44086 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44089 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44093 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44096 "isa_arm32.tcc"
)
{
#line 2686 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44110 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44115 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44118 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44122 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44126 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44130 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44133 "isa_arm32.tcc"
)
{
#line 2752 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44153 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44164 "isa_arm32.tcc"
>

void
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44171 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44181 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44187 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44190 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44195 "isa_arm32.tcc"
> *DecodeOpBic_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44201 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44211 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44215 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44219 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44223 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44226 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44230 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44233 "isa_arm32.tcc"
)
{
#line 2697 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44247 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44255 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44259 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44263 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44267 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44270 "isa_arm32.tcc"
)
{
#line 2769 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44291 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44302 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44309 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44319 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44327 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44334 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44344 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44353 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44358 "isa_arm32.tcc"
> *DecodeOpBic_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44364 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44374 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44378 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44382 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44386 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44389 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44393 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44396 "isa_arm32.tcc"
)
{
#line 2708 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44410 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44418 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44422 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44426 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44430 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44433 "isa_arm32.tcc"
)
{
#line 2787 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44455 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44466 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44473 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44483 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44491 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44498 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44508 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44516 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44523 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44533 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44542 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44547 "isa_arm32.tcc"
> *DecodeOpBic_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44553 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44563 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44567 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44571 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44575 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44578 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44582 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44585 "isa_arm32.tcc"
)
{
#line 2719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44599 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44607 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44611 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44615 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44619 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44622 "isa_arm32.tcc"
)
{
#line 2806 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44652 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44663 "isa_arm32.tcc"
>

void
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44670 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44680 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44686 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44689 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44694 "isa_arm32.tcc"
> *DecodeOpBics_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44700 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44707 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44710 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44714 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44718 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44722 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44725 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44729 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44732 "isa_arm32.tcc"
)
{
#line 2730 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44746 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44754 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44758 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44762 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44766 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44769 "isa_arm32.tcc"
)
{
#line 2833 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44800 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44811 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44818 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44828 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44836 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44843 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44853 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44859 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44862 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44867 "isa_arm32.tcc"
> *DecodeOpBics_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44873 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44880 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44883 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44887 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44891 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44895 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44898 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44902 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44905 "isa_arm32.tcc"
)
{
#line 2741 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44919 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44924 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44927 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44931 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44935 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44939 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44942 "isa_arm32.tcc"
)
{
#line 2861 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44974 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44985 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44992 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3109 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 45002 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45010 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45017 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45027 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45032 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45035 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45042 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45052 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45058 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45061 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45066 "isa_arm32.tcc"
> *DecodeOpBics_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45072 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bic instruction
*******************************************************************/
/*******************************************************************
* mvn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45088 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45092 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45096 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45100 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45103 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45107 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45110 "isa_arm32.tcc"
)
{
#line 2905 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45122 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45130 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45134 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45138 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45142 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45145 "isa_arm32.tcc"
)
{
#line 2959 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45161 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45170 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45175 "isa_arm32.tcc"
> *DecodeOpMvn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45181 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45191 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45195 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45199 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45203 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45206 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45210 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45213 "isa_arm32.tcc"
)
{
#line 2914 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45225 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45233 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45237 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45241 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45245 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45248 "isa_arm32.tcc"
)
{
#line 2972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45267 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45275 "isa_arm32.tcc"
>

void
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45282 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45292 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45301 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45306 "isa_arm32.tcc"
> *DecodeOpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45312 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45322 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45326 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45330 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45334 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45337 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45344 "isa_arm32.tcc"
)
{
#line 2923 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45356 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45364 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45368 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45372 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45376 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45379 "isa_arm32.tcc"
)
{
#line 2988 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45399 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45407 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45414 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45424 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45429 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45432 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45439 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45449 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45455 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45458 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45463 "isa_arm32.tcc"
> *DecodeOpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45469 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45476 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45479 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45483 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45487 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45491 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45494 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45498 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45501 "isa_arm32.tcc"
)
{
#line 2932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45513 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45521 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45525 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45529 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45533 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45536 "isa_arm32.tcc"
)
{
#line 3005 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45562 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45571 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45576 "isa_arm32.tcc"
> *DecodeOpMvns_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45582 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45592 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45596 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45600 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45604 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45607 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45611 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45614 "isa_arm32.tcc"
)
{
#line 2941 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45626 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45634 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45638 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45642 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45646 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45649 "isa_arm32.tcc"
)
{
#line 3028 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45678 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45686 "isa_arm32.tcc"
>

void
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45693 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45703 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45712 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45717 "isa_arm32.tcc"
> *DecodeOpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45723 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45733 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45737 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45741 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45745 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45748 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45752 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45755 "isa_arm32.tcc"
)
{
#line 2950 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45767 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45775 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45779 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45783 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45787 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45790 "isa_arm32.tcc"
)
{
#line 3054 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45820 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45828 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45835 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45845 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45853 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45860 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45870 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45879 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45884 "isa_arm32.tcc"
> *DecodeOpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45890 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* qadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45941 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45945 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45949 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45953 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45956 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45960 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45963 "isa_arm32.tcc"
)
{
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 45974 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45982 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45986 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45990 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45994 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45997 "isa_arm32.tcc"
)
{
#line 64 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat, cpu.GetGPR(rn) , cpu.GetGPR(rm));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46018 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46027 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46032 "isa_arm32.tcc"
> *DecodeOpQadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46038 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qadd instruction
*******************************************************************/
/*******************************************************************
* qsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46054 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46058 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46062 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46066 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46069 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46073 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46076 "isa_arm32.tcc"
)
{
#line 93 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46087 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46095 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46099 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46103 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46107 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46110 "isa_arm32.tcc"
)
{
#line 101 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , cpu.GetGPR(rn));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46131 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46137 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46140 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46145 "isa_arm32.tcc"
> *DecodeOpQsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46151 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qsub instruction
*******************************************************************/
/*******************************************************************
* qdadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46167 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46171 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46175 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46179 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46182 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46186 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46189 "isa_arm32.tcc"
)
{
#line 130 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46200 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46208 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46212 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46216 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46220 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46223 "isa_arm32.tcc"
)
{
#line 138 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatAdd32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 || does_sat_tmp == 1? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46245 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46254 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46259 "isa_arm32.tcc"
> *DecodeOpQdadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46265 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdadd instruction
*******************************************************************/
/*******************************************************************
* qdsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46281 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46285 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46289 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46293 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46296 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46300 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46303 "isa_arm32.tcc"
)
{
#line 168 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46314 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46322 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46326 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46330 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46334 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46337 "isa_arm32.tcc"
)
{
#line 176 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46359 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46365 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46368 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46373 "isa_arm32.tcc"
> *DecodeOpQdsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46379 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdsub instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MULTIPLY INSTRUCTIONS

**********************************************/
/* TODO: implement missing instructions:for E variants of version 5 and above
*  - smulxy
*  - smulwy
*  - smlaxy
*  - smlawy
*  - smlalxy
*/
/*******************************************************************
* mla instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46440 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46444 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46448 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46452 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46455 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46459 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46462 "isa_arm32.tcc"
)
{
#line 55 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mla";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << ", "
		<< "r" << rn << "";
	}
#line 46475 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46483 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46487 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46491 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46495 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46498 "isa_arm32.tcc"
)
{
#line 65 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		res += rn_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46523 "isa_arm32.tcc"
}
/*
* end of umull instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46534 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46541 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 333 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 46551 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46559 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46566 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46584 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46591 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46601 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46610 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46615 "isa_arm32.tcc"
> *DecodeOpMla(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46621 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mla instruction
*******************************************************************/
/*******************************************************************
* mul instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46634 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46637 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46641 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46645 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46649 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46652 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46656 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46659 "isa_arm32.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mul";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46671 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46679 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46683 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46687 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46691 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46694 "isa_arm32.tcc"
)
{
#line 106 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46717 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46725 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46732 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46742 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46750 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46757 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46767 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46776 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46781 "isa_arm32.tcc"
> *DecodeOpMul(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46787 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mul instruction
*******************************************************************/
/*******************************************************************
* smlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46804 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46807 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46811 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46815 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46819 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46822 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46826 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46829 "isa_arm32.tcc"
)
{
#line 141 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46842 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46847 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46850 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46854 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46858 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46862 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46865 "isa_arm32.tcc"
)
{
#line 151 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 46895 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46903 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46910 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46920 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46925 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46928 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46935 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46945 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46950 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46953 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46960 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 46970 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46978 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46985 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 46995 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47004 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47009 "isa_arm32.tcc"
> *DecodeOpSmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47015 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlal instruction
*******************************************************************/
/*******************************************************************
* smull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47032 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47035 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47039 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47043 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47047 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47050 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47054 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47057 "isa_arm32.tcc"
)
{
#line 193 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47078 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47082 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47086 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47090 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47093 "isa_arm32.tcc"
)
{
#line 203 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47120 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47128 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47135 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47145 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47153 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47160 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47170 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47179 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47184 "isa_arm32.tcc"
> *DecodeOpSmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47190 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smull instruction
*******************************************************************/
/*******************************************************************
* umlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47210 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47214 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47218 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47222 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47225 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47229 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47232 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47245 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47253 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47257 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47261 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47265 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47268 "isa_arm32.tcc"
)
{
#line 252 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47298 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47306 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47313 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47323 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47331 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47338 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47348 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47356 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47363 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 47373 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47381 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47388 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47398 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47407 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47412 "isa_arm32.tcc"
> *DecodeOpUmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47418 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of umlal instruction
*******************************************************************/
/*******************************************************************
* umull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47438 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47442 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47446 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47450 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47453 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47457 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47460 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47473 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47481 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47485 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47489 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47493 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47496 "isa_arm32.tcc"
)
{
#line 304 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47523 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47531 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47538 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47548 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47556 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47563 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47573 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47582 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47587 "isa_arm32.tcc"
> *DecodeOpUmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47593 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E MULTIPLY INSTRUCTIONS

**********************************************/
/*****************************************************************************
* TODO:
* op smla()
* op smlal()
* op smlaw()
* op smul()
* op smulw()
*/
/*******************************************************************
* smlaxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47652 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47656 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47660 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47664 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47667 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47671 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47674 "isa_arm32.tcc"
)
{
#line 57 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smla";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47690 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47695 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47698 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47702 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47706 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47710 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47713 "isa_arm32.tcc"
)
{
#line 70 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = op1 + val_rn;
		if(op1 > 0 && (val_rd & (typename CONFIG::reg_t)0x80000000ULL) != 0) {
			cpu.SetCPSR_Q(true);
			} else {
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);
	}
#line 47767 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47776 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47781 "isa_arm32.tcc"
> *DecodeOpSmlaxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47787 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlaxy instruction
*******************************************************************/
/*******************************************************************
* smlalxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47803 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47807 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47811 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47815 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47818 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47822 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47825 "isa_arm32.tcc"
)
{
#line 132 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlal";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rdlo;
		buffer << ", r" << rdhi;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 47841 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47849 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47853 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47857 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47861 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47864 "isa_arm32.tcc"
)
{
#line 145 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rdhi;
		typename CONFIG::reg_t val_rdlo, val_rdlo_init;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rdhi == cpu.PC_reg || rdlo == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rdhi = cpu.GetGPR(rdhi);
		val_rdlo_init = cpu.GetGPR(rdlo);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rdlo = val_rdlo_init + op1;
		if(op1 < 0) rdhi = rdhi + (typename CONFIG::reg_t)0xffffffffULL;
		else {
			if(cpu.CarryFrom(val_rdlo, val_rdlo_init, (typename CONFIG::reg_t)op1))
			rdhi++;
		}
		cpu.SetGPR(rdlo, val_rdlo);
		cpu.SetGPR(rdhi, val_rdhi);
	}
#line 47920 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47929 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47934 "isa_arm32.tcc"
> *DecodeOpSmlalxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47940 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlalxy instruction
*******************************************************************/
/*******************************************************************
* smlawy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47956 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47960 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47964 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47968 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47971 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47975 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47978 "isa_arm32.tcc"
)
{
#line 209 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlaw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47992 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48000 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48004 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48008 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48012 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48015 "isa_arm32.tcc"
)
{
#line 220 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op = (typename CONFIG::sreg_t)val_rs;
		}

		int64_t op64;
		op64 = (typename CONFIG::sreg_t)val_rm;
		op64 = op64 * op;
		op64 = op64 >> 16;
		op64 = op64 & (uint64_t)0xffffffffULL;
		typename CONFIG::sreg_t sval_rd;
		typename CONFIG::reg_t op_tmp = op64;
		sval_rd = (typename CONFIG::sreg_t)op_tmp;
		val_rd = (typename CONFIG::reg_t)(sval_rd + (typename CONFIG::sreg_t)val_rn);
		if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
		val_rn & (typename CONFIG::reg_t)0x80000000ULL) {
			cpu.SetCPSR_Q(false);
			} else {
			if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
			val_rd & (typename CONFIG::reg_t)0x80000000ULL) {
				cpu.SetCPSR_Q(true);
			} else
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);

	}
#line 48071 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48080 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48085 "isa_arm32.tcc"
> *DecodeOpSmlawy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48091 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlawy instruction
*******************************************************************/
/*******************************************************************
* smulxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48107 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48111 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48115 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48119 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48122 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48129 "isa_arm32.tcc"
)
{
#line 284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smul";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48144 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48149 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48152 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48156 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48160 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48164 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48167 "isa_arm32.tcc"
)
{
#line 296 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = (typename CONFIG::reg_t)op1;
		cpu.SetGPR(rd, val_rd);
	}
#line 48214 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48220 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48223 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48228 "isa_arm32.tcc"
> *DecodeOpSmulxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48234 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulxy instruction
*******************************************************************/
/*******************************************************************
* smulwy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48250 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48254 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48258 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48262 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48265 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48269 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48272 "isa_arm32.tcc"
)
{
#line 351 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smulw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48285 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48293 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48297 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48301 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48305 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48308 "isa_arm32.tcc"
)
{
#line 361 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = (typename CONFIG::sreg_t)val_rm;
		int64_t op64 = (int64_t)op1 * (int64_t)op2;
		val_rd = (typename CONFIG::reg_t)((uint64_t)(op64 >> 16) & (uint64_t)0xffffffffULL);
		cpu.SetGPR(rd, val_rd);
	}
#line 48346 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48355 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48360 "isa_arm32.tcc"
> *DecodeOpSmulwy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48366 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulwy instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/
/*******************************************************************
* mrs instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48417 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48420 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48424 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48428 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48432 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48435 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48439 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48442 "isa_arm32.tcc"
)
{
#line 46 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "mrs";
		cpu.DisasmCondition(cond, buffer);
		buffer << "r" << rd << ", ";
		if(r) buffer << "spsr";
		else buffer << "cpsr";
	}
#line 48453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48461 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48465 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48469 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48473 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48476 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		/* if rd is the pc register the behavior is unpredictable,
		*   we just return */
		if(rd == cpu.PC_reg) {
			return;
		}

		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning("
				<< __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str() << endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			cpu.SetGPR(rd, cpu.GetSPSR());
			} else {
			cpu.SetGPR(rd, cpu.GetCPSR());
		}
	}
#line 48531 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48540 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48545 "isa_arm32.tcc"
> *DecodeOpMrs(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48551 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrs instruction
*******************************************************************/
/*******************************************************************
* msr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48567 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48571 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48575 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48579 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48582 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48586 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48589 "isa_arm32.tcc"
)
{
#line 116 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 48603 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48611 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48615 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48619 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48623 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48626 "isa_arm32.tcc"
)
{
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = cpu.ShiftOperand32imm(rotate_imm,
		imm);
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			*   unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << Endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48734 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48740 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48743 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48748 "isa_arm32.tcc"
> *DecodeOpMsr_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48754 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48764 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48768 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48772 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48776 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48779 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48783 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48786 "isa_arm32.tcc"
)
{
#line 234 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", r" << rm;
	}
#line 48799 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48804 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48807 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48811 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48815 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48819 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48822 "isa_arm32.tcc"
)
{
#line 244 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = rm_value;
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			* 	 unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48933 "isa_arm32.tcc"
}
/*
* end of msr instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48944 "isa_arm32.tcc"
>

void
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48951 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 357 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 48961 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48970 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48975 "isa_arm32.tcc"
> *DecodeOpMsr_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48981 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49067 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49070 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49074 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49078 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49082 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49085 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49089 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49092 "isa_arm32.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 49103 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49108 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49111 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49115 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49119 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49123 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49126 "isa_arm32.tcc"
)
{
#line 104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t new_rn_value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		new_rn_value = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.SetGPR(rn, new_rn_value); // update rn

		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49151 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49162 "isa_arm32.tcc"
>

void
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49169 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49179 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49188 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49193 "isa_arm32.tcc"
> *DecodeOpLdr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49199 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49209 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49213 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49217 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49221 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49224 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49231 "isa_arm32.tcc"
)
{
#line 67 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 49242 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49250 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49254 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49258 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49262 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49265 "isa_arm32.tcc"
)
{
#line 126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49286 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49294 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49297 "isa_arm32.tcc"
>

void
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49304 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49314 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49323 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49328 "isa_arm32.tcc"
> *DecodeOpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49334 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49344 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49348 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49352 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49356 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49359 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49363 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49366 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 49377 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49385 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49389 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49393 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49397 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49400 "isa_arm32.tcc"
)
{
#line 144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49422 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49430 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49433 "isa_arm32.tcc"
>

void
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49440 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49450 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49459 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49464 "isa_arm32.tcc"
> *DecodeOpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49470 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49477 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49480 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49484 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49488 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49492 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49495 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49499 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49502 "isa_arm32.tcc"
)
{
#line 83 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49512 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49520 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49524 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49528 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49532 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49535 "isa_arm32.tcc"
)
{
#line 163 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49559 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49570 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49577 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49587 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49595 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49602 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49612 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49620 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49627 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49637 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49646 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49651 "isa_arm32.tcc"
> *DecodeOpLdr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49657 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49667 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49671 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49675 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49679 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49682 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49686 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49689 "isa_arm32.tcc"
)
{
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49699 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49707 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49711 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49715 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49719 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49722 "isa_arm32.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49745 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49756 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49763 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49781 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49788 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49798 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49806 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49813 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49823 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49832 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49837 "isa_arm32.tcc"
> *DecodeOpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49843 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49853 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49857 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49861 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49865 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49868 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49872 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49875 "isa_arm32.tcc"
)
{
#line 97 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49885 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49893 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49897 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49901 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49905 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49908 "isa_arm32.tcc"
)
{
#line 204 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49932 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49943 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49950 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49960 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49968 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49975 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49985 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49993 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50000 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50010 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50016 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50019 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50024 "isa_arm32.tcc"
> *DecodeOpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50030 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldr instruction
*******************************************************************/
/*******************************************************************
* ldrb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50046 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50050 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50054 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50058 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50061 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50065 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50068 "isa_arm32.tcc"
)
{
#line 240 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 50079 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50087 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50091 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50095 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50099 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50102 "isa_arm32.tcc"
)
{
#line 285 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		cpu.Read8toGPR(address, rd);
	}
#line 50120 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50131 "isa_arm32.tcc"
>

void
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50138 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50148 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50157 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50162 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50168 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50178 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50182 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50186 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50190 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50193 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50197 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50200 "isa_arm32.tcc"
)
{
#line 248 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 50211 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50216 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50219 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50223 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50227 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50231 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50234 "isa_arm32.tcc"
)
{
#line 300 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.Read8toGPR(address, rd);
	}
#line 50251 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50262 "isa_arm32.tcc"
>

void
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50269 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50279 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50288 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50293 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50299 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50309 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50313 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50317 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50321 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50324 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50328 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50331 "isa_arm32.tcc"
)
{
#line 256 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 50342 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50350 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50354 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50358 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50362 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50365 "isa_arm32.tcc"
)
{
#line 314 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read8toGPR(address, rd);
	}
#line 50383 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50394 "isa_arm32.tcc"
>

void
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50401 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50411 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50417 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50420 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50425 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50431 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50441 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50445 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50449 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50453 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50456 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50460 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50463 "isa_arm32.tcc"
)
{
#line 264 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50473 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50481 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50485 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50489 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50493 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50496 "isa_arm32.tcc"
)
{
#line 329 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 50516 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50527 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50534 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50544 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50552 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50559 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50577 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50584 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50594 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50603 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50608 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50614 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50621 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50624 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50628 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50632 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50636 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50639 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50646 "isa_arm32.tcc"
)
{
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50656 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50661 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50664 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50668 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50672 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50676 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50679 "isa_arm32.tcc"
)
{
#line 346 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.Read8toGPR(address, rd);
	}
#line 50698 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50709 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50716 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50726 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50734 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50741 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50751 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50759 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50766 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50776 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50785 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50790 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50796 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50806 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50810 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50814 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50821 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50825 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50828 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50838 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50843 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50846 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50850 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50854 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50858 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50861 "isa_arm32.tcc"
)
{
#line 362 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		cpu.Read8toGPR(address, rd);
	}
#line 50881 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50892 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50899 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50909 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50914 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50917 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50924 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50934 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50939 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50942 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50949 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50959 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50968 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50973 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50979 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrb_rd15 instruction
* this is the specialization of the instruction ldrb when rd = 15
* for most of the arm architectures this is an undefined behavior instruction (do nothing is our action)
* however for the armv5e architectures some of the combinations correspond to a pld instruction if
* it is a imm_offset or reg_offset type and cond == 0b1111
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50999 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51003 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51007 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51011 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51014 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51018 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51021 "isa_arm32.tcc"
)
{
#line 398 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51028 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51036 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51040 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51044 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51048 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51051 "isa_arm32.tcc"
)
{
#line 430 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51060 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51069 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51074 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51080 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51090 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51094 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51098 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51105 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51109 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51112 "isa_arm32.tcc"
)
{
#line 402 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld";
			cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51123 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51131 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51135 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51139 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51143 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51146 "isa_arm32.tcc"
)
{
#line 436 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBImmOffset(u, rn_value, offset);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51167 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51178 "isa_arm32.tcc"
>

void
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51185 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51195 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51201 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51204 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51209 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51215 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51225 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51229 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51233 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51237 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51240 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51244 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51247 "isa_arm32.tcc"
)
{
#line 410 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51254 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51262 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51266 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51270 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51274 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51277 "isa_arm32.tcc"
)
{
#line 454 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51286 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51292 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51295 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51300 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51306 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51316 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51320 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51324 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51328 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51331 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51335 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51338 "isa_arm32.tcc"
)
{
#line 414 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51345 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51353 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51357 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51361 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51365 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51368 "isa_arm32.tcc"
)
{
#line 460 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51377 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51386 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51391 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51397 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51407 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51411 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51415 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51419 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51422 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51426 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51429 "isa_arm32.tcc"
)
{
#line 418 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld ";
			cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51440 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51448 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51452 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51456 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51460 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51463 "isa_arm32.tcc"
)
{
#line 466 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
			typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBReg(u, rn_value, 15, shift_imm, shift, rm_value);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51485 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51496 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51503 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51513 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51521 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51528 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51538 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51547 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51552 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51558 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51568 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51572 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51576 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51580 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51583 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51590 "isa_arm32.tcc"
)
{
#line 426 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51597 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51602 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51605 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51609 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51613 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51617 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51620 "isa_arm32.tcc"
)
{
#line 485 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51629 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51635 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51638 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51643 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51649 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51666 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51670 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51674 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51678 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51681 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51685 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51688 "isa_arm32.tcc"
)
{
#line 503 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 51698 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51706 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51710 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51714 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51718 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51721 "isa_arm32.tcc"
)
{
#line 517 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read32toGPR(address, rd);
	}
#line 51739 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51750 "isa_arm32.tcc"
>

void
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51757 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51767 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51776 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51781 "isa_arm32.tcc"
> *DecodeOpLdrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51787 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51794 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51797 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51801 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51805 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51809 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51812 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51816 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51819 "isa_arm32.tcc"
)
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 51829 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51837 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51841 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51845 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51849 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51852 "isa_arm32.tcc"
)
{
#line 532 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
	}
#line 51869 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51880 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51887 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51905 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51912 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51930 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51937 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 51947 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51956 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51961 "isa_arm32.tcc"
> *DecodeOpLdrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51967 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrt instruction
*******************************************************************/
/*******************************************************************
* ldrbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51984 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51988 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51992 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51996 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51999 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52003 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52006 "isa_arm32.tcc"
)
{
#line 558 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52016 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52021 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52024 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52028 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52032 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52036 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52039 "isa_arm32.tcc"
)
{
#line 572 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read8toGPR(address, rd);
	}
#line 52057 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52068 "isa_arm32.tcc"
>

void
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52075 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52085 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52094 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52099 "isa_arm32.tcc"
> *DecodeOpLdrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52105 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52115 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52119 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52123 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52127 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52130 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52134 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52137 "isa_arm32.tcc"
)
{
#line 565 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52147 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52155 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52159 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52163 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52167 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52170 "isa_arm32.tcc"
)
{
#line 587 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 52190 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52201 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52208 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52218 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52223 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52226 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52233 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52243 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52251 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52258 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52268 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52277 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52282 "isa_arm32.tcc"
> *DecodeOpLdrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52288 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrbt instruction
*******************************************************************/
/*******************************************************************
* str instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52304 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52308 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52312 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52316 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52319 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52323 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52326 "isa_arm32.tcc"
)
{
#line 619 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52336 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52344 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52348 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52352 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52356 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52359 "isa_arm32.tcc"
)
{
#line 661 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52381 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52392 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52399 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52409 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52417 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52424 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52434 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52443 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52448 "isa_arm32.tcc"
> *DecodeOpStr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52454 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52464 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52468 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52472 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52476 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52479 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52483 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52486 "isa_arm32.tcc"
)
{
#line 626 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 52496 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52504 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52508 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52512 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52516 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52519 "isa_arm32.tcc"
)
{
#line 680 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;

		cpu.Write32(address, value);
	}
#line 52541 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52552 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52559 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52577 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52584 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52594 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52603 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52608 "isa_arm32.tcc"
> *DecodeOpStr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52614 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52621 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52624 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52628 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52632 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52636 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52639 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52643 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52646 "isa_arm32.tcc"
)
{
#line 633 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 52656 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52661 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52664 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52668 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52672 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52676 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52679 "isa_arm32.tcc"
)
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52701 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52712 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52719 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52729 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52737 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52744 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52754 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52760 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52763 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52768 "isa_arm32.tcc"
> *DecodeOpStr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52774 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52781 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52784 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52788 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52792 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52796 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52799 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52803 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52806 "isa_arm32.tcc"
)
{
#line 640 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52816 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52821 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52824 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52828 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52832 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52836 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52839 "isa_arm32.tcc"
)
{
#line 718 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52862 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52873 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52880 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52890 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52898 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52905 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52915 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52923 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52930 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52940 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52949 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52954 "isa_arm32.tcc"
> *DecodeOpStr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52960 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52970 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52974 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52978 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52982 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52985 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52989 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52992 "isa_arm32.tcc"
)
{
#line 647 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53002 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53010 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53014 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53018 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53022 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53025 "isa_arm32.tcc"
)
{
#line 738 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53047 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53058 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53065 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53075 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53083 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53090 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53100 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53108 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53115 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53125 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53134 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53139 "isa_arm32.tcc"
> *DecodeOpStr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53145 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53155 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53159 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53163 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53167 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53170 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53174 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53177 "isa_arm32.tcc"
)
{
#line 654 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53187 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53195 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53199 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53203 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53207 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53210 "isa_arm32.tcc"
)
{
#line 757 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address);
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53233 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53244 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53251 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53261 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53269 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53276 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53286 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53291 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53294 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53301 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53311 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53320 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53325 "isa_arm32.tcc"
> *DecodeOpStr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53331 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of str instruction
*******************************************************************/
/*******************************************************************
* strb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53347 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53351 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53355 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53359 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53362 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53366 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53369 "isa_arm32.tcc"
)
{
#line 792 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 53380 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53388 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53392 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53396 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53400 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53403 "isa_arm32.tcc"
)
{
#line 837 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53424 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53435 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53442 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53452 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53460 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53467 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53477 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53486 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53491 "isa_arm32.tcc"
> *DecodeOpStrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53497 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53507 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53511 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53515 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53519 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53522 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53526 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53529 "isa_arm32.tcc"
)
{
#line 800 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 53540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53548 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53552 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53556 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53560 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53563 "isa_arm32.tcc"
)
{
#line 855 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53583 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53594 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53601 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53611 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53616 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53619 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53626 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53636 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53645 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53650 "isa_arm32.tcc"
> *DecodeOpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53656 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53666 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53670 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53674 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53678 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53681 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53685 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53688 "isa_arm32.tcc"
)
{
#line 808 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 53699 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53707 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53711 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53715 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53719 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53722 "isa_arm32.tcc"
)
{
#line 872 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53743 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53754 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53761 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53771 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53779 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53786 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53796 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53805 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53810 "isa_arm32.tcc"
> *DecodeOpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53816 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53826 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53830 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53834 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53838 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53841 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53845 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53848 "isa_arm32.tcc"
)
{
#line 816 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53858 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53866 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53870 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53874 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53878 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53881 "isa_arm32.tcc"
)
{
#line 890 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53903 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53911 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53914 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53921 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53931 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53936 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53939 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53946 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53956 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53964 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53971 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53981 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53990 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53995 "isa_arm32.tcc"
> *DecodeOpStrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54001 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54008 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54011 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54015 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54019 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54023 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54026 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54030 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54033 "isa_arm32.tcc"
)
{
#line 823 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54043 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54051 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54055 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54059 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54063 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54066 "isa_arm32.tcc"
)
{
#line 909 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54087 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54098 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54105 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54115 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54123 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54130 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54148 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54155 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54165 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54174 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54179 "isa_arm32.tcc"
> *DecodeOpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54185 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54195 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54199 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54203 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54207 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54210 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54214 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54217 "isa_arm32.tcc"
)
{
#line 830 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54227 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54235 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54239 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54243 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54247 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54250 "isa_arm32.tcc"
)
{
#line 927 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54272 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54283 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54290 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54300 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54308 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54315 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54325 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54333 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54340 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54350 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54359 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54364 "isa_arm32.tcc"
> *DecodeOpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54370 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strb instruction
*******************************************************************/
/*******************************************************************
* strt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54387 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54391 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54395 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54399 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54402 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54406 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54409 "isa_arm32.tcc"
)
{
#line 958 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54419 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54427 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54431 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54435 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54439 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54442 "isa_arm32.tcc"
)
{
#line 972 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54464 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54475 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54482 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54492 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54500 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54507 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54517 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54526 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54531 "isa_arm32.tcc"
> *DecodeOpStrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54537 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54547 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54551 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54555 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54559 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54562 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54566 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54569 "isa_arm32.tcc"
)
{
#line 965 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54579 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54584 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54587 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54591 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54595 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54599 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54602 "isa_arm32.tcc"
)
{
#line 991 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54625 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54636 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54643 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54653 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54661 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54668 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54678 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54686 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54693 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54703 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54712 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54717 "isa_arm32.tcc"
> *DecodeOpStrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54723 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strt instruction
*******************************************************************/
/*******************************************************************
* strbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54740 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54744 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54748 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54752 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54755 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54759 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54762 "isa_arm32.tcc"
)
{
#line 1023 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54781 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54785 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54789 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54793 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54796 "isa_arm32.tcc"
)
{
#line 1038 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typename CONFIG::address_t address;
		uint8_t value;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, cpu.GetGPR(rn), offset)); // update rn
		value = cpu.GetGPR(rd) & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54813 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54821 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54824 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54831 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54841 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54849 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54856 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54866 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54875 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54880 "isa_arm32.tcc"
> *DecodeOpStrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54886 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54896 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54900 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54904 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54908 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54911 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54915 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54918 "isa_arm32.tcc"
)
{
#line 1031 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54936 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54940 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54944 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54948 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54951 "isa_arm32.tcc"
)
{
#line 1052 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54973 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54984 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54991 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55001 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55009 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55016 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55026 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55031 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55034 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55041 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55051 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55060 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55065 "isa_arm32.tcc"
> *DecodeOpStrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55071 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldrh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55125 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55129 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55133 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55137 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55140 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55144 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55147 "isa_arm32.tcc"
)
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 55158 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55166 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55170 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55174 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55178 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55181 "isa_arm32.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55200 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55211 "isa_arm32.tcc"
>

void
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55218 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55228 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55237 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55242 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55248 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55258 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55262 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55266 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55270 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55273 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55280 "isa_arm32.tcc"
)
{
#line 71 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 55291 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55299 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55303 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55307 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55311 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55314 "isa_arm32.tcc"
)
{
#line 124 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55332 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55340 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55343 "isa_arm32.tcc"
>

void
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55350 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55360 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55366 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55369 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55374 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55380 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55387 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55390 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55394 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55398 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55402 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55405 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55409 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55412 "isa_arm32.tcc"
)
{
#line 79 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 55423 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55428 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55431 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55435 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55439 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55443 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55446 "isa_arm32.tcc"
)
{
#line 139 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55465 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55476 "isa_arm32.tcc"
>

void
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55483 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55493 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55502 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55507 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55513 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55523 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55527 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55531 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55535 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55538 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55542 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55545 "isa_arm32.tcc"
)
{
#line 87 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 55555 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55563 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55567 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55571 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55575 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55578 "isa_arm32.tcc"
)
{
#line 155 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55599 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55610 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55617 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55627 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55635 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55642 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55652 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55660 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55667 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55677 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55686 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55691 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55697 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55707 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55711 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55715 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55719 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55722 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55726 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55729 "isa_arm32.tcc"
)
{
#line 94 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 55739 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55747 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55751 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55755 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55759 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55762 "isa_arm32.tcc"
)
{
#line 173 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55782 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55790 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55793 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55800 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55810 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55818 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55825 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55835 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55843 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55850 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55860 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55869 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55874 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55880 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55890 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55894 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55898 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55902 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55905 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55909 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55912 "isa_arm32.tcc"
)
{
#line 101 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 55922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55930 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55934 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55938 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55942 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55945 "isa_arm32.tcc"
)
{
#line 190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55966 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55977 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55984 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55994 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56002 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56009 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56019 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56027 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56034 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56044 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56053 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56058 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56064 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrh instruction
*******************************************************************/
/*******************************************************************
* ldrsh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56083 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56087 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56091 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56095 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56098 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56102 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56105 "isa_arm32.tcc"
)
{
#line 229 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 56116 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56124 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56128 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56132 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56136 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56139 "isa_arm32.tcc"
)
{
#line 274 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56158 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56169 "isa_arm32.tcc"
>

void
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56176 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56186 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56195 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56200 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56206 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56216 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56220 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56224 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56231 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56238 "isa_arm32.tcc"
)
{
#line 237 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 56249 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56257 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56261 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56265 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56269 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56272 "isa_arm32.tcc"
)
{
#line 290 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56290 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56301 "isa_arm32.tcc"
>

void
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56308 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56318 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56327 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56332 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56338 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56345 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56348 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56352 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56356 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56360 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56363 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56367 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56370 "isa_arm32.tcc"
)
{
#line 245 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 56381 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56386 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56389 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56393 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56397 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56401 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56404 "isa_arm32.tcc"
)
{
#line 305 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56423 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56434 "isa_arm32.tcc"
>

void
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56441 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56451 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56457 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56460 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56465 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56471 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56481 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56485 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56489 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56493 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56496 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56500 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56503 "isa_arm32.tcc"
)
{
#line 253 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 56513 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56521 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56525 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56529 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56533 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56536 "isa_arm32.tcc"
)
{
#line 321 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56557 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56568 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56575 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56585 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56593 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56600 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56610 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56618 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56625 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56635 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56641 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56644 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56649 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56655 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56665 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56669 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56673 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56677 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56680 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56684 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56687 "isa_arm32.tcc"
)
{
#line 260 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 56697 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56705 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56709 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56713 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56717 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56720 "isa_arm32.tcc"
)
{
#line 339 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		//	address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56741 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56752 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56759 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56769 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56777 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56784 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56794 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56802 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56809 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56819 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56828 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56833 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56839 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56849 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56853 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56857 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56861 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56864 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56868 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56871 "isa_arm32.tcc"
)
{
#line 267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 56881 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56889 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56893 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56897 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56901 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56904 "isa_arm32.tcc"
)
{
#line 357 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56925 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56936 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56943 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56953 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56958 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56961 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56968 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56978 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56986 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56993 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57003 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57012 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57017 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57023 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsh instruction
*******************************************************************/
/*******************************************************************
* ldrsb instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57042 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57046 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57050 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57054 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57057 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57061 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57064 "isa_arm32.tcc"
)
{
#line 396 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 57075 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57083 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57087 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57091 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57095 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57098 "isa_arm32.tcc"
)
{
#line 441 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS8toGPR(address, rd);
	}
#line 57116 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57127 "isa_arm32.tcc"
>

void
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57134 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57144 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57153 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57158 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57164 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57174 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57178 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57182 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57186 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57189 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57193 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57196 "isa_arm32.tcc"
)
{
#line 404 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 57207 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57215 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57219 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57223 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57227 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57230 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57247 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57258 "isa_arm32.tcc"
>

void
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57265 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57275 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57284 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57289 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57295 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57305 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57309 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57313 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57317 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57320 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57324 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57327 "isa_arm32.tcc"
)
{
#line 412 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 57338 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57343 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57346 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57350 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57354 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57358 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57361 "isa_arm32.tcc"
)
{
#line 470 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS8toGPR(address, rd);
	}
#line 57379 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57387 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57390 "isa_arm32.tcc"
>

void
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57397 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57407 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57416 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57421 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57427 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57437 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57441 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57445 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57449 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57452 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57456 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57459 "isa_arm32.tcc"
)
{
#line 420 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 57469 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57474 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57477 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57481 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57485 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57489 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57492 "isa_arm32.tcc"
)
{
#line 485 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS8toGPR(address, rd);
	}
#line 57512 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57523 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57530 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57548 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57555 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57565 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57573 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57580 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57590 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57599 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57604 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57610 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57620 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57624 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57628 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57632 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57635 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57639 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57642 "isa_arm32.tcc"
)
{
#line 427 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 57652 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57660 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57664 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57668 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57672 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57675 "isa_arm32.tcc"
)
{
#line 502 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57694 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57705 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57712 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57722 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57727 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57730 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57737 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57747 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57752 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57755 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57762 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57772 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57781 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57786 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57792 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57802 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57806 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57810 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57814 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57817 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57821 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57824 "isa_arm32.tcc"
)
{
#line 434 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 57834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57842 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57846 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57850 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57854 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57857 "isa_arm32.tcc"
)
{
#line 518 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.SetGPR(rn, address);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57877 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57885 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57888 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57895 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57905 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57910 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57913 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57920 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57930 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57935 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57938 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57945 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57955 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57964 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57969 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57975 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsb instruction
*******************************************************************/
/*******************************************************************
* strh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57991 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57994 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57998 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58002 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58006 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58009 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58013 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58016 "isa_arm32.tcc"
)
{
#line 556 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58027 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58032 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58035 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58039 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58043 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58047 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58050 "isa_arm32.tcc"
)
{
#line 601 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL)); // update rn
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58068 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58077 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58082 "isa_arm32.tcc"
> *DecodeOpStrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58088 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58098 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58102 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58106 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58110 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58113 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58117 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58120 "isa_arm32.tcc"
)
{
#line 564 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58131 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58136 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58139 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58143 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58147 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58151 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58154 "isa_arm32.tcc"
)
{
#line 616 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58171 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58180 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58185 "isa_arm32.tcc"
> *DecodeOpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58191 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58201 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58205 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58209 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58213 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58216 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58220 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58223 "isa_arm32.tcc"
)
{
#line 572 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 58234 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58239 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58242 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58246 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58250 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58254 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58257 "isa_arm32.tcc"
)
{
#line 630 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58275 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58284 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58289 "isa_arm32.tcc"
> *DecodeOpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58295 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58305 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58309 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58313 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58317 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58320 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58324 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58327 "isa_arm32.tcc"
)
{
#line 580 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 58337 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58345 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58349 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58353 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58357 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58360 "isa_arm32.tcc"
)
{
#line 645 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm)));
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58378 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58387 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58392 "isa_arm32.tcc"
> *DecodeOpStrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58398 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58408 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58412 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58416 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58420 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58423 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58427 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58430 "isa_arm32.tcc"
)
{
#line 587 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 58440 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58448 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58452 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58456 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58460 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58463 "isa_arm32.tcc"
)
{
#line 660 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58480 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58489 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58494 "isa_arm32.tcc"
> *DecodeOpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58500 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58510 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58514 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58518 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58522 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58525 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58529 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58532 "isa_arm32.tcc"
)
{
#line 594 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 58542 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58550 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58554 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58558 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58562 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58565 "isa_arm32.tcc"
)
{
#line 674 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58583 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58592 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58597 "isa_arm32.tcc"
> *DecodeOpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58603 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS
(specific for arm version 5e)

**********************************************/
/*******************************************************************
* ldrd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58658 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58662 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58666 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58670 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58673 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58677 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58680 "isa_arm32.tcc"
)
{
#line 59 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58691 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58696 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58699 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58703 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58707 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58711 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58714 "isa_arm32.tcc"
)
{
#line 107 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58741 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58762 "isa_arm32.tcc"
>

void
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58769 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58779 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58788 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58793 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58799 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58812 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58816 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58820 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58824 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58827 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58831 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58834 "isa_arm32.tcc"
)
{
#line 67 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58845 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58853 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58857 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58861 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58865 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58868 "isa_arm32.tcc"
)
{
#line 131 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58894 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58915 "isa_arm32.tcc"
>

void
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58922 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58932 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58941 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58946 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58952 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58962 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58965 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58969 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58973 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58977 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58980 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58984 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58987 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 58998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59006 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59010 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59014 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59018 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59021 "isa_arm32.tcc"
)
{
#line 154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59048 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59069 "isa_arm32.tcc"
>

void
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59076 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59086 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59095 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59100 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59106 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59116 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59119 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59123 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59127 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59131 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59134 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59138 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59141 "isa_arm32.tcc"
)
{
#line 83 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 59152 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59160 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59164 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59168 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59172 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59175 "isa_arm32.tcc"
)
{
#line 178 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59204 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59225 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59232 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59242 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59250 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59257 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59267 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59275 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59282 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59292 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59301 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59306 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59312 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59325 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59329 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59333 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59337 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59340 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59344 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59347 "isa_arm32.tcc"
)
{
#line 91 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 59358 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59366 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59370 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59374 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59378 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59381 "isa_arm32.tcc"
)
{
#line 204 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59409 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59427 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59430 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59437 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59447 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59455 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59462 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59472 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59477 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59480 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59487 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59497 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59506 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59511 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59517 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59527 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59530 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59534 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59538 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59542 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59545 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59549 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59552 "isa_arm32.tcc"
)
{
#line 99 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 59563 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59571 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59575 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59579 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59583 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59586 "isa_arm32.tcc"
)
{
#line 229 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59615 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59636 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59643 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59653 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59661 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59668 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59678 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59686 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59693 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59703 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59712 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59717 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59723 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrd instruction
*******************************************************************/
/*******************************************************************
* strd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59739 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59742 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59746 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59750 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59754 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59757 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59761 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59764 "isa_arm32.tcc"
)
{
#line 276 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 59775 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59783 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59787 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59791 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59795 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59798 "isa_arm32.tcc"
)
{
#line 324 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 59827 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59848 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59855 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59873 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59880 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59890 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59898 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59905 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 59915 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59924 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59929 "isa_arm32.tcc"
> *DecodeOpStrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59935 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59948 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59952 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59956 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59960 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59963 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59967 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59970 "isa_arm32.tcc"
)
{
#line 284 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 59981 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59989 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59993 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59997 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60001 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60004 "isa_arm32.tcc"
)
{
#line 350 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60032 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60053 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60060 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60078 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60085 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60095 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60100 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60103 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60110 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60120 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60129 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60134 "isa_arm32.tcc"
> *DecodeOpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60140 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60153 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60157 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60161 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60165 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60168 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60172 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60175 "isa_arm32.tcc"
)
{
#line 292 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 60186 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60194 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60198 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60202 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60206 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60209 "isa_arm32.tcc"
)
{
#line 375 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60238 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60259 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60266 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60276 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60284 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60291 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60301 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60309 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60316 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60326 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60335 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60340 "isa_arm32.tcc"
> *DecodeOpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60346 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60359 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60363 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60367 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60371 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60374 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60378 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60381 "isa_arm32.tcc"
)
{
#line 300 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 60392 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60397 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60400 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60404 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60408 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60412 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60415 "isa_arm32.tcc"
)
{
#line 401 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60445 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60466 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60473 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60483 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60491 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60498 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60508 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60516 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60523 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60533 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60541 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60548 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60558 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60567 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60572 "isa_arm32.tcc"
> *DecodeOpStrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60578 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60591 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60595 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60599 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60603 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60606 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60610 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60613 "isa_arm32.tcc"
)
{
#line 308 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 60624 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60632 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60636 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60640 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60644 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60647 "isa_arm32.tcc"
)
{
#line 428 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60676 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60694 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60697 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60704 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60714 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60719 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60722 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60729 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60739 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60744 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60747 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60754 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60764 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60772 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60779 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60789 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60798 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60803 "isa_arm32.tcc"
> *DecodeOpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60809 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60819 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60822 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60826 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60830 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60834 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60837 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60841 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60844 "isa_arm32.tcc"
)
{
#line 316 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 60855 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60863 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60867 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60871 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60875 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60878 "isa_arm32.tcc"
)
{
#line 454 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60908 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60929 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60936 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60946 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60954 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60961 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60971 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60979 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60986 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60996 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61004 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61011 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 61021 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61030 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61035 "isa_arm32.tcc"
> *DecodeOpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61041 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE MULTIPLE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61092 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61096 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61100 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61104 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61107 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61111 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61114 "isa_arm32.tcc"
)
{
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61148 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61152 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61156 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61160 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61163 "isa_arm32.tcc"
)
{
#line 144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61206 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61217 "isa_arm32.tcc"
>

void
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61224 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61234 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61243 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61248 "isa_arm32.tcc"
> *DecodeOpLdm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61254 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61264 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61268 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61272 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61276 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61279 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61283 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61286 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61312 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61320 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61324 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61328 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61332 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61335 "isa_arm32.tcc"
)
{
#line 184 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61378 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61386 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61389 "isa_arm32.tcc"
>

void
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61396 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61406 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61415 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61420 "isa_arm32.tcc"
> *DecodeOpLdm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61426 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61433 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61436 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61440 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61444 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61448 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61451 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61455 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61458 "isa_arm32.tcc"
)
{
#line 98 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61484 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61492 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61496 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61500 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61504 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61507 "isa_arm32.tcc"
)
{
#line 224 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61550 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61558 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61561 "isa_arm32.tcc"
>

void
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61568 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61578 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61584 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61587 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61592 "isa_arm32.tcc"
> *DecodeOpLdm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61598 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61605 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61608 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61612 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61616 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61620 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61623 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61627 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61630 "isa_arm32.tcc"
)
{
#line 121 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61656 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61661 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61664 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61668 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61672 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61676 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61679 "isa_arm32.tcc"
)
{
#line 264 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61722 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61733 "isa_arm32.tcc"
>

void
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61740 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61750 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61759 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61764 "isa_arm32.tcc"
> *DecodeOpLdm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61770 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_1 instruction
*******************************************************************/
/*******************************************************************
* ldm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61786 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61790 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61794 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61798 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61801 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61805 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61808 "isa_arm32.tcc"
)
{
#line 319 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 61834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61842 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61846 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61850 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61854 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61857 "isa_arm32.tcc"
)
{
#line 411 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPR(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 61892 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61903 "isa_arm32.tcc"
>

void
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61910 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61920 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61929 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61934 "isa_arm32.tcc"
> *DecodeOpLdm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61940 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61950 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61954 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61958 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61962 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61965 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61969 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61972 "isa_arm32.tcc"
)
{
#line 342 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 61998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62006 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62010 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62014 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62018 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62021 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62056 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62067 "isa_arm32.tcc"
>

void
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62074 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62084 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62093 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62098 "isa_arm32.tcc"
> *DecodeOpLdm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62104 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62111 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62114 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62118 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62122 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62126 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62129 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62133 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62136 "isa_arm32.tcc"
)
{
#line 365 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62162 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62170 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62174 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62178 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62182 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62185 "isa_arm32.tcc"
)
{
#line 475 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62220 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62231 "isa_arm32.tcc"
>

void
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62238 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62248 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62257 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62262 "isa_arm32.tcc"
> *DecodeOpLdm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62268 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62278 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62282 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62286 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62290 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62293 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62297 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62300 "isa_arm32.tcc"
)
{
#line 388 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62326 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62334 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62338 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62342 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62346 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62349 "isa_arm32.tcc"
)
{
#line 507 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62384 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62395 "isa_arm32.tcc"
>

void
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62402 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62412 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62421 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62426 "isa_arm32.tcc"
> *DecodeOpLdm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62432 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_2 instruction
*******************************************************************/
/*******************************************************************
* ldm_3 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62448 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62452 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62456 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62460 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62463 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62467 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62470 "isa_arm32.tcc"
)
{
#line 554 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62496 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62504 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62508 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62512 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62516 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62519 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4); // we need to add 4 bytes for the pc saving

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62562 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62573 "isa_arm32.tcc"
>

void
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62580 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62590 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62599 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62604 "isa_arm32.tcc"
> *DecodeOpLdm_3_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62610 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62620 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62624 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62628 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62632 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62635 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62639 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62642 "isa_arm32.tcc"
)
{
#line 577 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62668 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62676 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62680 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62684 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62688 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62691 "isa_arm32.tcc"
)
{
#line 686 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62734 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62745 "isa_arm32.tcc"
>

void
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62752 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62762 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62771 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62776 "isa_arm32.tcc"
> *DecodeOpLdm_3_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62782 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62792 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62796 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62800 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62804 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62807 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62811 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62814 "isa_arm32.tcc"
)
{
#line 600 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62840 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62848 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62852 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62856 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62860 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62863 "isa_arm32.tcc"
)
{
#line 726 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62906 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62914 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62917 "isa_arm32.tcc"
>

void
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62924 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62934 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62943 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62948 "isa_arm32.tcc"
> *DecodeOpLdm_3_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62954 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62964 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62968 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62972 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62976 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62979 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62983 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62986 "isa_arm32.tcc"
)
{
#line 623 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 63012 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63020 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63024 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63028 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63032 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63035 "isa_arm32.tcc"
)
{
#line 766 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63078 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63086 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63089 "isa_arm32.tcc"
>

void
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63096 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63106 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63115 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63120 "isa_arm32.tcc"
> *DecodeOpLdm_3_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63126 "isa_arm32.tcc"
	>(code, addr);
}

// ldm_3.nextpc = {
	//   if(cond_res) {
		//     /* nothing to do */
		//   } else {
		//     cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		//   }
	// }
/*
* end of ldm_3 instruction
*******************************************************************/
/*******************************************************************
* stm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63149 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63153 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63157 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63161 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63164 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63168 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63171 "isa_arm32.tcc"
)
{
#line 829 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63196 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63201 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63204 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63208 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63212 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63216 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63219 "isa_arm32.tcc"
)
{
#line 917 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63264 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63275 "isa_arm32.tcc"
>

void
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63282 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63292 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63301 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63306 "isa_arm32.tcc"
> *DecodeOpStm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63312 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63322 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63326 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63330 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63334 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63337 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63341 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63344 "isa_arm32.tcc"
)
{
#line 851 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63369 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63377 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63381 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63385 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63389 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63392 "isa_arm32.tcc"
)
{
#line 959 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63437 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63448 "isa_arm32.tcc"
>

void
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63455 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63465 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63474 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63479 "isa_arm32.tcc"
> *DecodeOpStm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63485 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63495 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63499 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63503 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63507 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63510 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63514 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63517 "isa_arm32.tcc"
)
{
#line 873 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63542 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63550 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63554 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63558 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63562 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63565 "isa_arm32.tcc"
)
{
#line 1001 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63610 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63621 "isa_arm32.tcc"
>

void
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63628 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63638 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63647 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63652 "isa_arm32.tcc"
> *DecodeOpStm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63658 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63668 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63672 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63676 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63680 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63683 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63687 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63690 "isa_arm32.tcc"
)
{
#line 895 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63715 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63723 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63727 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63731 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63735 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63738 "isa_arm32.tcc"
)
{
#line 1043 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63783 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63791 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63794 "isa_arm32.tcc"
>

void
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63801 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63811 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63817 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63820 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63825 "isa_arm32.tcc"
> *DecodeOpStm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63831 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of stm_1 instruction
*******************************************************************/
/*******************************************************************
* stm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63844 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63847 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63851 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63855 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63859 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63862 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63866 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63869 "isa_arm32.tcc"
)
{
#line 1100 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 63894 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63902 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63906 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63910 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63914 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63917 "isa_arm32.tcc"
)
{
#line 1188 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63958 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63966 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63969 "isa_arm32.tcc"
>

void
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63976 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63986 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63995 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64000 "isa_arm32.tcc"
> *DecodeOpStm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64006 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64016 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64020 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64024 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64028 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64031 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64035 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64038 "isa_arm32.tcc"
)
{
#line 1122 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64063 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64071 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64075 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64079 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64083 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64086 "isa_arm32.tcc"
)
{
#line 1226 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64127 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64135 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64138 "isa_arm32.tcc"
>

void
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64145 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64155 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64164 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64169 "isa_arm32.tcc"
> *DecodeOpStm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64175 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64185 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64189 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64193 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64197 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64200 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64204 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64207 "isa_arm32.tcc"
)
{
#line 1144 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64232 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64240 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64244 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64248 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64252 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64255 "isa_arm32.tcc"
)
{
#line 1264 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64296 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64307 "isa_arm32.tcc"
>

void
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64314 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64324 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64333 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64338 "isa_arm32.tcc"
> *DecodeOpStm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64344 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64354 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64358 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64362 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64366 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64369 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64373 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64376 "isa_arm32.tcc"
)
{
#line 1166 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64401 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64406 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64409 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64413 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64417 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64421 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64424 "isa_arm32.tcc"
)
{
#line 1302 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64465 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64476 "isa_arm32.tcc"
>

void
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64483 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64493 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64502 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64507 "isa_arm32.tcc"
> *DecodeOpStm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64513 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

SEMAPHORE INSTRUCTIONS

**********************************************/
/* TODO: missing implementation */
/* NOTE: r15 should never be used for rn, rd and/or rm, so no need to
*   initialize them.
*/
/*******************************************************************
* swp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64568 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64572 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64576 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64580 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64583 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64590 "isa_arm32.tcc"
)
{
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64601 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64609 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64613 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64617 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64621 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64624 "isa_arm32.tcc"
)
{
#line 61 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		/* if r15 is used the result is impredictable, so just ignore the case of using r15 */
		if(!cpu.CheckCondition(cond)) return;
	}
#line 64632 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64641 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64646 "isa_arm32.tcc"
> *DecodeOpSwp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64652 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swp instruction
*******************************************************************/
/*******************************************************************
* swpb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64668 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64672 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64676 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64680 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64683 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64687 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64690 "isa_arm32.tcc"
)
{
#line 76 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64701 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64709 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64713 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64717 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64721 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64724 "isa_arm32.tcc"
)
{
#line 84 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		if(!cpu.CheckCondition(cond)) return;
	}
#line 64731 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64740 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64745 "isa_arm32.tcc"
> *DecodeOpSwpb(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64751 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swpb instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/
/*******************************************************************
* swi instruction
* NOTE: this instruction is used to make the system calls
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64806 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64810 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64814 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64818 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64821 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64825 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64828 "isa_arm32.tcc"
)
{
#line 48 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		buffer << "swi";
		cpu.DisasmCondition(cond, buffer);
		buffer << " #" << dec << immed;
	}
#line 64837 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64842 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64845 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64849 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64853 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64857 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64860 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

#ifdef SOCLIB

		throw SoftwareInterruptException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// use linux_os_import
			try {
				cpu.linux_os_import->ExecuteSystemCall(immed);
				} catch(exception &e) {
				cerr << e.what() << endl;
			}
			} else {
			// we are executing on full system mode
			throw SoftwareInterruptException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 64899 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64908 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64913 "isa_arm32.tcc"
> *DecodeOpSwi(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64919 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swi instruction
*******************************************************************/
/*******************************************************************
* bkpt instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64935 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64939 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64943 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64947 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64950 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64954 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64957 "isa_arm32.tcc"
)
{
#line 100 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);
		buffer << "bkpt";
		buffer << " #" << dec << immed;
	}
#line 64968 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64976 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64980 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64984 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64988 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64991 "isa_arm32.tcc"
)
{
#line 108 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

#ifdef SOCLIB

		throw PrefetchAbortException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// what should we do with this kind of call? ignore it
			} else {
			// we are executing on full system mode
			throw PrefetchAbortException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 65026 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65032 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65035 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65040 "isa_arm32.tcc"
> *DecodeOpBkpt(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65046 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bkpt instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* cdp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65100 "isa_arm32.tcc"
>

void
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65107 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65116 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65124 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65128 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65132 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65136 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65139 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65143 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65146 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65162 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65170 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65174 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65178 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65182 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65185 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65198 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65207 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65212 "isa_arm32.tcc"
> *DecodeOpCdp_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65218 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65228 "isa_arm32.tcc"
>

void
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65235 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65244 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65249 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65252 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65256 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65260 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65264 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65267 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65271 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65274 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65290 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65298 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65302 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65306 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65310 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65313 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65326 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65335 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65340 "isa_arm32.tcc"
> *DecodeOpCdp_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65346 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65356 "isa_arm32.tcc"
>

void
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65363 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65372 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65380 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65384 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65388 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65392 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65395 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65399 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65402 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65418 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65423 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65426 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65430 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65434 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65438 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65441 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65454 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65460 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65463 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65468 "isa_arm32.tcc"
> *DecodeOpCdp_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65474 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65484 "isa_arm32.tcc"
>

void
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65491 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 65500 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65505 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65508 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65512 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65516 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65520 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65523 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65527 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65530 "isa_arm32.tcc"
)
{
#line 75 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65546 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65554 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65558 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65562 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65566 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65569 "isa_arm32.tcc"
)
{
#line 88 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65582 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65591 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65596 "isa_arm32.tcc"
> *DecodeOpCdp_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65602 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp instruction
*******************************************************************/
/*******************************************************************
* ldc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65622 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65629 "isa_arm32.tcc"
>::initialize_condition()
{
#line 111 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65638 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65646 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65650 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65654 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65658 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65661 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65665 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65668 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65691 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65695 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65699 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65703 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65706 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65725 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65736 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65743 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65753 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65762 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65767 "isa_arm32.tcc"
> *DecodeOpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65773 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65787 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65794 "isa_arm32.tcc"
>::initialize_condition()
{
#line 117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65803 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65811 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65815 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65819 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65823 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65826 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65830 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65833 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65848 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65856 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65860 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65864 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65868 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65871 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65890 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65901 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65908 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65918 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65924 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65927 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65932 "isa_arm32.tcc"
> *DecodeOpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65938 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65949 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65952 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65959 "isa_arm32.tcc"
>::initialize_condition()
{
#line 123 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65968 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65976 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65980 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65984 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65988 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65991 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65995 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65998 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66013 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66021 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66025 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66029 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66033 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66036 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66055 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66066 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66073 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66083 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66092 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66097 "isa_arm32.tcc"
> *DecodeOpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66103 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66117 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66124 "isa_arm32.tcc"
>::initialize_condition()
{
#line 129 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66133 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66138 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66141 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66145 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66149 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66153 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66156 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66160 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66163 "isa_arm32.tcc"
)
{
#line 230 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66178 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66186 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66190 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66194 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66198 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66201 "isa_arm32.tcc"
)
{
#line 278 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66220 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66231 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66238 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66248 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66257 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66262 "isa_arm32.tcc"
> *DecodeOpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66268 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66282 "isa_arm32.tcc"
>

void
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66289 "isa_arm32.tcc"
>::initialize_condition()
{
#line 142 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66298 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66306 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66310 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66314 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66318 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66321 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66325 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66328 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66343 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66351 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66355 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66359 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66363 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66366 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66386 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66395 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66400 "isa_arm32.tcc"
> *DecodeOpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66406 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66417 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66420 "isa_arm32.tcc"
>

void
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66427 "isa_arm32.tcc"
>::initialize_condition()
{
#line 148 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 66436 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66444 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66448 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66452 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66456 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66459 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66463 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66466 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66481 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66489 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66493 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66497 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66501 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66504 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66524 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66533 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66538 "isa_arm32.tcc"
> *DecodeOpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66544 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66558 "isa_arm32.tcc"
>

void
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66565 "isa_arm32.tcc"
>::initialize_condition()
{
#line 154 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 66574 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66582 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66586 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66590 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66594 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66597 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66601 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66604 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66619 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66627 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66631 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66635 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66639 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66642 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66662 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66671 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66676 "isa_arm32.tcc"
> *DecodeOpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66682 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66696 "isa_arm32.tcc"
>

void
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66703 "isa_arm32.tcc"
>::initialize_condition()
{
#line 160 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66712 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66720 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66724 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66728 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66732 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66735 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66739 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66742 "isa_arm32.tcc"
)
{
#line 242 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66757 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66765 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66769 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66773 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66777 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66780 "isa_arm32.tcc"
)
{
#line 294 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66800 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66809 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66814 "isa_arm32.tcc"
> *DecodeOpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66820 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66834 "isa_arm32.tcc"
>

void
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66841 "isa_arm32.tcc"
>::initialize_condition()
{
#line 173 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66850 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66855 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66858 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66862 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66866 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66870 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66873 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66877 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66880 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 66895 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66903 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66907 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66911 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66915 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66918 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66938 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66947 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66952 "isa_arm32.tcc"
> *DecodeOpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66958 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66972 "isa_arm32.tcc"
>

void
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66979 "isa_arm32.tcc"
>::initialize_condition()
{
#line 179 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 66988 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66996 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67000 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67004 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67008 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67011 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67015 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67018 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67041 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67045 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67049 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67053 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67056 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67076 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67085 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67090 "isa_arm32.tcc"
> *DecodeOpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67096 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67110 "isa_arm32.tcc"
>

void
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67117 "isa_arm32.tcc"
>::initialize_condition()
{
#line 185 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67126 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67134 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67138 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67142 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67146 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67149 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67153 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67156 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67171 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67179 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67183 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67187 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67191 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67194 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67214 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67220 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67223 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67228 "isa_arm32.tcc"
> *DecodeOpLdc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67234 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67248 "isa_arm32.tcc"
>

void
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67255 "isa_arm32.tcc"
>::initialize_condition()
{
#line 191 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67264 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67269 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67272 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67276 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67280 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67284 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67287 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67291 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67294 "isa_arm32.tcc"
)
{
#line 254 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67309 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67314 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67317 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67321 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67325 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67329 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67332 "isa_arm32.tcc"
)
{
#line 311 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67352 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67361 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67366 "isa_arm32.tcc"
> *DecodeOpLdc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67372 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67386 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67393 "isa_arm32.tcc"
>::initialize_condition()
{
#line 204 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 67402 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67407 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67410 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67414 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67418 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67422 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67425 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67429 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67432 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67447 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67455 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67459 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67463 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67467 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67470 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67489 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67500 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67507 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67517 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67526 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67531 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67537 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67551 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67558 "isa_arm32.tcc"
>::initialize_condition()
{
#line 210 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67567 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67572 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67575 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67579 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67583 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67590 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67594 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67597 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67612 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67620 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67624 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67628 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67632 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67635 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67654 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67665 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67672 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67682 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67691 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67696 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67702 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67716 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67723 "isa_arm32.tcc"
>::initialize_condition()
{
#line 216 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67732 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67740 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67744 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67748 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67752 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67755 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67759 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67762 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67777 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67785 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67789 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67793 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67797 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67800 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67819 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67830 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67837 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67847 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67856 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67861 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67867 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67881 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67888 "isa_arm32.tcc"
>::initialize_condition()
{
#line 222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67905 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67909 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67913 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67917 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67920 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67924 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67927 "isa_arm32.tcc"
)
{
#line 266 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67942 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67950 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67954 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67958 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67962 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67965 "isa_arm32.tcc"
)
{
#line 328 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67984 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67995 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68002 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 68012 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68021 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68026 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68032 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc instruction
*******************************************************************/
/*******************************************************************
* mcr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68048 "isa_arm32.tcc"
>

void
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68055 "isa_arm32.tcc"
>::initialize_condition()
{
#line 358 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68064 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68072 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68076 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68080 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68084 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68087 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68091 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68094 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68110 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68115 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68118 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68122 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68126 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68130 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68133 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68146 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68155 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68160 "isa_arm32.tcc"
> *DecodeOpMcr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68166 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68176 "isa_arm32.tcc"
>

void
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68183 "isa_arm32.tcc"
>::initialize_condition()
{
#line 364 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68192 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68197 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68200 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68204 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68208 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68212 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68215 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68219 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68222 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68238 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68246 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68250 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68254 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68258 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68261 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68274 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68283 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68288 "isa_arm32.tcc"
> *DecodeOpMcr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68294 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68304 "isa_arm32.tcc"
>

void
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68311 "isa_arm32.tcc"
>::initialize_condition()
{
#line 370 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68328 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68332 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68336 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68340 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68343 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68347 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68350 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68366 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68374 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68378 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68382 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68386 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68389 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68402 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68408 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68411 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68416 "isa_arm32.tcc"
> *DecodeOpMcr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68422 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68429 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68432 "isa_arm32.tcc"
>

void
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68439 "isa_arm32.tcc"
>::initialize_condition()
{
#line 376 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68448 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68456 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68460 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68464 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68468 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68471 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68475 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68478 "isa_arm32.tcc"
)
{
#line 382 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68494 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68502 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68506 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68510 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68514 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68517 "isa_arm32.tcc"
)
{
#line 395 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68530 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68536 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68539 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68544 "isa_arm32.tcc"
> *DecodeOpMcr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68550 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr instruction
*******************************************************************/
/*******************************************************************
* mrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68566 "isa_arm32.tcc"
>

void
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68573 "isa_arm32.tcc"
>::initialize_condition()
{
#line 419 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68582 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68587 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68590 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68594 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68598 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68602 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68605 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68609 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68612 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68628 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68636 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68640 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68644 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68648 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68651 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68664 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68673 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68678 "isa_arm32.tcc"
> *DecodeOpMrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68684 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68694 "isa_arm32.tcc"
>

void
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68701 "isa_arm32.tcc"
>::initialize_condition()
{
#line 425 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68710 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68718 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68722 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68726 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68730 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68733 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68737 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68740 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68756 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68764 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68768 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68772 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68776 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68779 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68792 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68798 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68801 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68806 "isa_arm32.tcc"
> *DecodeOpMrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68812 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68819 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68822 "isa_arm32.tcc"
>

void
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68829 "isa_arm32.tcc"
>::initialize_condition()
{
#line 431 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68838 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68843 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68846 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68850 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68854 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68858 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68861 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68865 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68868 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68884 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68892 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68896 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68900 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68904 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68907 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68920 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68929 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68934 "isa_arm32.tcc"
> *DecodeOpMrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68940 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68950 "isa_arm32.tcc"
>

void
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68957 "isa_arm32.tcc"
>::initialize_condition()
{
#line 437 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68966 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68974 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68978 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68982 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68986 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68989 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68993 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68996 "isa_arm32.tcc"
)
{
#line 443 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 69012 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69020 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69024 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69028 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69032 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69035 "isa_arm32.tcc"
)
{
#line 456 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 69048 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69057 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69062 "isa_arm32.tcc"
> *DecodeOpMrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69068 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc instruction
*******************************************************************/
/*******************************************************************
* stc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69088 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69095 "isa_arm32.tcc"
>::initialize_condition()
{
#line 479 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69104 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69112 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69116 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69120 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69124 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69127 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69131 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69134 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69149 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69157 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69161 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69165 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69169 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69172 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69191 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69202 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69209 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69219 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69228 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69233 "isa_arm32.tcc"
> *DecodeOpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69239 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69253 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69260 "isa_arm32.tcc"
>::initialize_condition()
{
#line 485 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69269 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69277 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69281 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69285 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69289 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69292 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69296 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69299 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69314 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69322 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69326 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69330 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69334 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69337 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69356 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69364 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69367 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69374 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69384 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69393 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69398 "isa_arm32.tcc"
> *DecodeOpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69404 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69418 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69425 "isa_arm32.tcc"
>::initialize_condition()
{
#line 491 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 69434 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69442 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69446 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69450 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69454 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69457 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69461 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69464 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69487 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69491 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69495 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69499 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69502 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69521 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69532 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69539 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69549 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69558 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69563 "isa_arm32.tcc"
> *DecodeOpStc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69569 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69580 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69583 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69590 "isa_arm32.tcc"
>::initialize_condition()
{
#line 497 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 69599 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69607 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69611 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69615 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69619 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69622 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69626 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69629 "isa_arm32.tcc"
)
{
#line 598 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69644 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69652 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69656 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69660 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69664 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69667 "isa_arm32.tcc"
)
{
#line 646 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69686 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69694 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69697 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69704 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69714 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69723 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69728 "isa_arm32.tcc"
> *DecodeOpStc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69734 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69748 "isa_arm32.tcc"
>

void
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69755 "isa_arm32.tcc"
>::initialize_condition()
{
#line 510 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69764 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69772 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69776 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69780 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69784 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69787 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69791 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69794 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69809 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69814 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69817 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69821 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69825 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69829 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69832 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69852 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69858 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69861 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69866 "isa_arm32.tcc"
> *DecodeOpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69872 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69886 "isa_arm32.tcc"
>

void
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69893 "isa_arm32.tcc"
>::initialize_condition()
{
#line 516 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69902 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69907 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69910 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69914 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69918 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69922 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69925 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69929 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69932 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69947 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69955 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69959 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69963 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69967 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69970 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69990 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69999 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70004 "isa_arm32.tcc"
> *DecodeOpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70010 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70021 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70024 "isa_arm32.tcc"
>

void
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70031 "isa_arm32.tcc"
>::initialize_condition()
{
#line 522 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70040 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70048 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70052 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70056 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70060 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70063 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70067 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70070 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70085 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70093 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70097 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70101 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70105 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70108 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70128 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70137 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70142 "isa_arm32.tcc"
> *DecodeOpStc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70148 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70162 "isa_arm32.tcc"
>

void
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70169 "isa_arm32.tcc"
>::initialize_condition()
{
#line 528 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70178 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70186 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70190 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70194 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70198 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70201 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70205 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70208 "isa_arm32.tcc"
)
{
#line 610 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70223 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70231 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70235 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70239 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70243 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70246 "isa_arm32.tcc"
)
{
#line 662 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70266 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70275 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70280 "isa_arm32.tcc"
> *DecodeOpStc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70286 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70297 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70300 "isa_arm32.tcc"
>

void
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70307 "isa_arm32.tcc"
>::initialize_condition()
{
#line 541 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70316 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70324 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70328 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70332 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70336 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70339 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70343 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70346 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70361 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70366 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70369 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70373 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70377 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70381 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70384 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70404 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70413 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70418 "isa_arm32.tcc"
> *DecodeOpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70424 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70438 "isa_arm32.tcc"
>

void
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70445 "isa_arm32.tcc"
>::initialize_condition()
{
#line 547 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 70454 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70462 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70466 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70470 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70474 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70477 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70481 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70484 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70499 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70504 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70507 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70511 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70515 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70519 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70522 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70542 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70551 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70556 "isa_arm32.tcc"
> *DecodeOpStc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70562 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70573 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70576 "isa_arm32.tcc"
>

void
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70583 "isa_arm32.tcc"
>::initialize_condition()
{
#line 553 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70592 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70600 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70604 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70608 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70612 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70615 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70619 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70622 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70637 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70642 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70645 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70649 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70653 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70657 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70660 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70680 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70686 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70689 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70694 "isa_arm32.tcc"
> *DecodeOpStc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70700 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70714 "isa_arm32.tcc"
>

void
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70721 "isa_arm32.tcc"
>::initialize_condition()
{
#line 559 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70730 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70738 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70742 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70746 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70750 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70753 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70757 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70760 "isa_arm32.tcc"
)
{
#line 622 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70775 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70783 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70787 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70791 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70795 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70798 "isa_arm32.tcc"
)
{
#line 679 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70818 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70827 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70832 "isa_arm32.tcc"
> *DecodeOpStc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70838 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70852 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70859 "isa_arm32.tcc"
>::initialize_condition()
{
#line 572 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70868 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70876 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70880 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70884 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70888 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70891 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70895 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70898 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 70913 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70921 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70925 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70929 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70933 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70936 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 70955 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70966 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70973 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 70983 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70992 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70997 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71003 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71017 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71024 "isa_arm32.tcc"
>::initialize_condition()
{
#line 578 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 71033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71041 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71045 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71049 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71053 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71056 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71060 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71063 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71078 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71086 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71090 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71094 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71098 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71101 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71120 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71131 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71138 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71148 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71157 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71162 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71168 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71182 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71189 "isa_arm32.tcc"
>::initialize_condition()
{
#line 584 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 71198 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71206 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71210 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71214 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71218 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71221 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71225 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71228 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71243 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71248 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71251 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71255 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71259 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71263 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71266 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71285 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71293 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71296 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71303 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71313 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71322 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71327 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71333 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71347 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71354 "isa_arm32.tcc"
>::initialize_condition()
{
#line 590 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 71363 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71371 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71375 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71379 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71383 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71386 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71390 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71393 "isa_arm32.tcc"
)
{
#line 634 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71408 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71416 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71420 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71424 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71428 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71431 "isa_arm32.tcc"
)
{
#line 696 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71450 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71461 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71468 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71478 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71487 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71492 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71498 "isa_arm32.tcc"
	>(code, addr);
}

/*******************************************************************
* cdp2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71508 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71511 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71515 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71519 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71523 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71526 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71530 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71533 "isa_arm32.tcc"
)
{
#line 734 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "cdp2";
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 71546 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71554 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71558 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71562 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71566 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71569 "isa_arm32.tcc"
)
{
#line 744 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 71578 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71584 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71587 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71592 "isa_arm32.tcc"
> *DecodeOpCdp2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71598 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp2 instruction
*******************************************************************/
/*******************************************************************
* ldc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71618 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71622 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71626 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71630 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71633 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71637 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71640 "isa_arm32.tcc"
)
{
#line 767 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 71652 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71660 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71664 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71668 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71672 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71675 "isa_arm32.tcc"
)
{
#line 806 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71692 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71703 "isa_arm32.tcc"
>

void
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71710 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71720 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71729 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71734 "isa_arm32.tcc"
> *DecodeOpLdc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71740 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71751 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71754 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71758 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71762 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71766 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71769 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71773 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71776 "isa_arm32.tcc"
)
{
#line 776 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 71788 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71796 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71800 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71804 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71808 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71811 "isa_arm32.tcc"
)
{
#line 820 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71829 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71838 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71843 "isa_arm32.tcc"
> *DecodeOpLdc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71849 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71863 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71867 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71871 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71875 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71878 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71882 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71885 "isa_arm32.tcc"
)
{
#line 785 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 71897 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71905 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71909 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71913 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71917 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71920 "isa_arm32.tcc"
)
{
#line 835 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71938 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71947 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71952 "isa_arm32.tcc"
> *DecodeOpLdc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71958 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71969 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71972 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71976 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71980 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71984 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71987 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71991 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71994 "isa_arm32.tcc"
)
{
#line 794 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72009 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72017 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72021 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72025 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72029 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72032 "isa_arm32.tcc"
)
{
#line 850 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72049 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72060 "isa_arm32.tcc"
>

void
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72067 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72077 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72086 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72091 "isa_arm32.tcc"
> *DecodeOpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72097 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc2 instruction
*******************************************************************/
/*******************************************************************
* mcr2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72113 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72117 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72121 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72125 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72128 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72132 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72135 "isa_arm32.tcc"
)
{
#line 875 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mcr2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72156 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72160 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72164 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72168 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72171 "isa_arm32.tcc"
)
{
#line 885 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72180 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72186 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72189 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72194 "isa_arm32.tcc"
> *DecodeOpMcr2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72200 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr2 instruction
*******************************************************************/
/*******************************************************************
* mrc2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72216 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72220 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72224 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72228 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72231 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72235 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72238 "isa_arm32.tcc"
)
{
#line 902 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mrc2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72251 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72259 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72263 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72267 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72271 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72274 "isa_arm32.tcc"
)
{
#line 912 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72283 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72289 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72292 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72297 "isa_arm32.tcc"
> *DecodeOpMrc2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72303 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc2 instruction
*******************************************************************/
/*******************************************************************
* stc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72323 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72327 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72331 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72335 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72338 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72342 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72345 "isa_arm32.tcc"
)
{
#line 935 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 72357 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72365 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72369 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72373 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72377 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72380 "isa_arm32.tcc"
)
{
#line 971 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72397 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72408 "isa_arm32.tcc"
>

void
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72415 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72425 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72434 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72439 "isa_arm32.tcc"
> *DecodeOpStc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72445 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72459 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72463 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72467 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72471 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72474 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72478 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72481 "isa_arm32.tcc"
)
{
#line 944 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 72493 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72501 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72505 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72509 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72513 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72516 "isa_arm32.tcc"
)
{
#line 985 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72534 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72540 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72543 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72548 "isa_arm32.tcc"
> *DecodeOpStc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72554 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72565 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72568 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72572 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72576 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72580 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72583 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72587 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72590 "isa_arm32.tcc"
)
{
#line 953 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 72602 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72610 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72614 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72618 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72622 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72625 "isa_arm32.tcc"
)
{
#line 1000 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72643 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72652 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72657 "isa_arm32.tcc"
> *DecodeOpStc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72663 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72674 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72677 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72681 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72685 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72689 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72692 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72696 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72699 "isa_arm32.tcc"
)
{
#line 962 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72711 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72719 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72723 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72727 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72731 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72734 "isa_arm32.tcc"
)
{
#line 1015 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72751 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72762 "isa_arm32.tcc"
>

void
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72769 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72779 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72785 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72788 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72793 "isa_arm32.tcc"
> *DecodeOpStc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72799 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* mcrr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72847 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72850 "isa_arm32.tcc"
>

void
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72857 "isa_arm32.tcc"
>::initialize_condition()
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 72866 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72871 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72874 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72878 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72882 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72886 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72889 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72893 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72896 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 72911 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72919 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72923 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72927 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72931 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72934 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 72948 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72957 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72962 "isa_arm32.tcc"
> *DecodeOpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72968 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72978 "isa_arm32.tcc"
>

void
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72985 "isa_arm32.tcc"
>::initialize_condition()
{
#line 60 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 72994 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73002 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73006 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73010 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73014 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73017 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73021 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73024 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73047 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73051 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73055 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73059 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73062 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73076 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73085 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73090 "isa_arm32.tcc"
> *DecodeOpMcrr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73096 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73106 "isa_arm32.tcc"
>

void
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73113 "isa_arm32.tcc"
>::initialize_condition()
{
#line 66 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73122 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73130 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73134 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73138 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73142 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73145 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73149 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73152 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73167 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73175 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73179 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73183 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73187 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73190 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73204 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73213 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73218 "isa_arm32.tcc"
> *DecodeOpMcrr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73224 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73234 "isa_arm32.tcc"
>

void
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73241 "isa_arm32.tcc"
>::initialize_condition()
{
#line 72 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73250 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73258 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73262 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73266 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73270 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73273 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73277 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73280 "isa_arm32.tcc"
)
{
#line 80 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73295 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73303 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73307 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73311 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73315 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73318 "isa_arm32.tcc"
)
{
#line 92 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73332 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73341 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73346 "isa_arm32.tcc"
> *DecodeOpMcrr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73352 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcrr instruction
*******************************************************************/
/*******************************************************************
* mrrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73365 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73368 "isa_arm32.tcc"
>

void
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73375 "isa_arm32.tcc"
>::initialize_condition()
{
#line 120 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 73384 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73392 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73396 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73400 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73404 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73407 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73411 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73414 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73429 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73437 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73441 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73445 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73449 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73452 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73466 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73475 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73480 "isa_arm32.tcc"
> *DecodeOpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73486 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73496 "isa_arm32.tcc"
>

void
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73503 "isa_arm32.tcc"
>::initialize_condition()
{
#line 126 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73512 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73520 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73524 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73528 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73532 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73535 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73539 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73542 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73557 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73565 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73569 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73573 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73577 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73580 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73594 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73603 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73608 "isa_arm32.tcc"
> *DecodeOpMrrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73614 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73621 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73624 "isa_arm32.tcc"
>

void
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73631 "isa_arm32.tcc"
>::initialize_condition()
{
#line 132 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73640 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73648 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73652 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73656 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73660 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73663 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73667 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73670 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73685 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73693 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73697 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73701 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73705 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73708 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73722 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73731 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73736 "isa_arm32.tcc"
> *DecodeOpMrrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73742 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73752 "isa_arm32.tcc"
>

void
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73759 "isa_arm32.tcc"
>::initialize_condition()
{
#line 138 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73768 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73776 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73780 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73784 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73788 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73791 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73795 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73798 "isa_arm32.tcc"
)
{
#line 146 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73813 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73818 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73821 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73825 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73829 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73833 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73836 "isa_arm32.tcc"
)
{
#line 158 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73850 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73859 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73864 "isa_arm32.tcc"
> *DecodeOpMrrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73870 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrrc instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MISCELLANEOUS ARITHMETIC INSTRUCTIONS

**********************************************/
/*******************************************************************
* clz instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73924 "isa_arm32.tcc"
>
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73928 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73932 "isa_arm32.tcc"
>::disasm(
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73936 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73939 "isa_arm32.tcc"
,
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73943 "isa_arm32.tcc"
#line 39 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73946 "isa_arm32.tcc"
)
{
#line 48 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		buffer << "clz";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", r" << rm;
	}
#line 73955 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73963 "isa_arm32.tcc"
>
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73967 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73971 "isa_arm32.tcc"
>::execute(
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73975 "isa_arm32.tcc"
#line 35 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73978 "isa_arm32.tcc"
)
{
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t src;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		src = rm_value;
		if(src == 0) {
			res = 32;
			} else {
			res = 0;
			while((src & 0x80000000) == 0) {
				res++;
				src = src << 1;
			}
			//    res = 31 - res;
		}

		cpu.SetGPR(rd, res);
	}
#line 74005 "isa_arm32.tcc"
}
/*
* end of clz instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74016 "isa_arm32.tcc"
>

void
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74023 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 83 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == CPU<CONFIG>::PC_reg) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 74033 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74042 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74047 "isa_arm32.tcc"
> *DecodeOpClz(CodeType code, typename CONFIG::address_t addr)
{
	return new OpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 74053 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74060 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74063 "isa_arm32.tcc"
>
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74068 "isa_arm32.tcc"
>::OpB_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74072 "isa_arm32.tcc"
>(code, addr, "b_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74085 "isa_arm32.tcc"
>
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74090 "isa_arm32.tcc"
>::OpB_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74094 "isa_arm32.tcc"
>(code, addr, "b_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74107 "isa_arm32.tcc"
>
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74112 "isa_arm32.tcc"
>::OpB_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74116 "isa_arm32.tcc"
>(code, addr, "b_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74129 "isa_arm32.tcc"
>
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74134 "isa_arm32.tcc"
>::OpB_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74138 "isa_arm32.tcc"
>(code, addr, "b_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74150 "isa_arm32.tcc"
>
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74155 "isa_arm32.tcc"
>::OpBl_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74159 "isa_arm32.tcc"
>(code, addr, "bl_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74172 "isa_arm32.tcc"
>
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74177 "isa_arm32.tcc"
>::OpBl_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74181 "isa_arm32.tcc"
>(code, addr, "bl_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74194 "isa_arm32.tcc"
>
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74199 "isa_arm32.tcc"
>::OpBl_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74203 "isa_arm32.tcc"
>(code, addr, "bl_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74216 "isa_arm32.tcc"
>
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74221 "isa_arm32.tcc"
>::OpBl_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74225 "isa_arm32.tcc"
>(code, addr, "bl_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74237 "isa_arm32.tcc"
>
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74242 "isa_arm32.tcc"
>::OpBx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74246 "isa_arm32.tcc"
>(code, addr, "bx")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74262 "isa_arm32.tcc"
>
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74267 "isa_arm32.tcc"
>::OpBlx_1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74271 "isa_arm32.tcc"
>(code, addr, "blx_1")
{
	h = ((code >> 24) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74284 "isa_arm32.tcc"
>
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74289 "isa_arm32.tcc"
>::OpBlx_2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74293 "isa_arm32.tcc"
>(code, addr, "blx_2")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74309 "isa_arm32.tcc"
>
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74314 "isa_arm32.tcc"
>::OpAnd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74318 "isa_arm32.tcc"
>(code, addr, "and_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74334 "isa_arm32.tcc"
>
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74339 "isa_arm32.tcc"
>::OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74343 "isa_arm32.tcc"
>(code, addr, "and_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74360 "isa_arm32.tcc"
>
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74365 "isa_arm32.tcc"
>::OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74369 "isa_arm32.tcc"
>(code, addr, "and_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74386 "isa_arm32.tcc"
>
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74391 "isa_arm32.tcc"
>::OpAnds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74395 "isa_arm32.tcc"
>(code, addr, "ands_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74408 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74411 "isa_arm32.tcc"
>
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74416 "isa_arm32.tcc"
>::OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74420 "isa_arm32.tcc"
>(code, addr, "ands_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74437 "isa_arm32.tcc"
>
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74442 "isa_arm32.tcc"
>::OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74446 "isa_arm32.tcc"
>(code, addr, "ands_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74460 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74463 "isa_arm32.tcc"
>
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74468 "isa_arm32.tcc"
>::OpEor_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74472 "isa_arm32.tcc"
>(code, addr, "eor_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74485 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74488 "isa_arm32.tcc"
>
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74493 "isa_arm32.tcc"
>::OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74497 "isa_arm32.tcc"
>(code, addr, "eor_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74514 "isa_arm32.tcc"
>
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74519 "isa_arm32.tcc"
>::OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74523 "isa_arm32.tcc"
>(code, addr, "eor_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74540 "isa_arm32.tcc"
>
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74545 "isa_arm32.tcc"
>::OpEors_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74549 "isa_arm32.tcc"
>(code, addr, "eors_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74565 "isa_arm32.tcc"
>
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74570 "isa_arm32.tcc"
>::OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74574 "isa_arm32.tcc"
>(code, addr, "eors_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74591 "isa_arm32.tcc"
>
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74596 "isa_arm32.tcc"
>::OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74600 "isa_arm32.tcc"
>(code, addr, "eors_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74617 "isa_arm32.tcc"
>
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74622 "isa_arm32.tcc"
>::OpSub_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74626 "isa_arm32.tcc"
>(code, addr, "sub_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74639 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74642 "isa_arm32.tcc"
>
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74647 "isa_arm32.tcc"
>::OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74651 "isa_arm32.tcc"
>(code, addr, "sub_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74668 "isa_arm32.tcc"
>
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74673 "isa_arm32.tcc"
>::OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74677 "isa_arm32.tcc"
>(code, addr, "sub_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74694 "isa_arm32.tcc"
>
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74699 "isa_arm32.tcc"
>::OpSubs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74703 "isa_arm32.tcc"
>(code, addr, "subs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74719 "isa_arm32.tcc"
>
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74724 "isa_arm32.tcc"
>::OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74728 "isa_arm32.tcc"
>(code, addr, "subs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74745 "isa_arm32.tcc"
>
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74750 "isa_arm32.tcc"
>::OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74754 "isa_arm32.tcc"
>(code, addr, "subs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74768 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74771 "isa_arm32.tcc"
>
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74776 "isa_arm32.tcc"
>::OpRsb_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74780 "isa_arm32.tcc"
>(code, addr, "rsb_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74796 "isa_arm32.tcc"
>
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74801 "isa_arm32.tcc"
>::OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74805 "isa_arm32.tcc"
>(code, addr, "rsb_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74819 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74822 "isa_arm32.tcc"
>
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74827 "isa_arm32.tcc"
>::OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74831 "isa_arm32.tcc"
>(code, addr, "rsb_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74848 "isa_arm32.tcc"
>
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74853 "isa_arm32.tcc"
>::OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74857 "isa_arm32.tcc"
>(code, addr, "rsbs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74873 "isa_arm32.tcc"
>
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74878 "isa_arm32.tcc"
>::OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74882 "isa_arm32.tcc"
>(code, addr, "rsbs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74896 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74899 "isa_arm32.tcc"
>
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74904 "isa_arm32.tcc"
>::OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74908 "isa_arm32.tcc"
>(code, addr, "rsbs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74922 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74925 "isa_arm32.tcc"
>
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74930 "isa_arm32.tcc"
>::OpAdd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74934 "isa_arm32.tcc"
>(code, addr, "add_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74950 "isa_arm32.tcc"
>
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74955 "isa_arm32.tcc"
>::OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74959 "isa_arm32.tcc"
>(code, addr, "add_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74976 "isa_arm32.tcc"
>
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74981 "isa_arm32.tcc"
>::OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74985 "isa_arm32.tcc"
>(code, addr, "add_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75002 "isa_arm32.tcc"
>
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75007 "isa_arm32.tcc"
>::OpAdds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75011 "isa_arm32.tcc"
>(code, addr, "adds_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75027 "isa_arm32.tcc"
>
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75032 "isa_arm32.tcc"
>::OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75036 "isa_arm32.tcc"
>(code, addr, "adds_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75053 "isa_arm32.tcc"
>
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75058 "isa_arm32.tcc"
>::OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75062 "isa_arm32.tcc"
>(code, addr, "adds_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75079 "isa_arm32.tcc"
>
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75084 "isa_arm32.tcc"
>::OpAdc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75088 "isa_arm32.tcc"
>(code, addr, "adc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75104 "isa_arm32.tcc"
>
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75109 "isa_arm32.tcc"
>::OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75113 "isa_arm32.tcc"
>(code, addr, "adc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75130 "isa_arm32.tcc"
>
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75135 "isa_arm32.tcc"
>::OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75139 "isa_arm32.tcc"
>(code, addr, "adc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75156 "isa_arm32.tcc"
>
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75161 "isa_arm32.tcc"
>::OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75165 "isa_arm32.tcc"
>(code, addr, "adcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75181 "isa_arm32.tcc"
>
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75186 "isa_arm32.tcc"
>::OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75190 "isa_arm32.tcc"
>(code, addr, "adcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75207 "isa_arm32.tcc"
>
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75212 "isa_arm32.tcc"
>::OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75216 "isa_arm32.tcc"
>(code, addr, "adcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75233 "isa_arm32.tcc"
>
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75238 "isa_arm32.tcc"
>::OpSbc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75242 "isa_arm32.tcc"
>(code, addr, "sbc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75258 "isa_arm32.tcc"
>
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75263 "isa_arm32.tcc"
>::OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75267 "isa_arm32.tcc"
>(code, addr, "sbc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75284 "isa_arm32.tcc"
>
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75289 "isa_arm32.tcc"
>::OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75293 "isa_arm32.tcc"
>(code, addr, "sbc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75310 "isa_arm32.tcc"
>
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75315 "isa_arm32.tcc"
>::OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75319 "isa_arm32.tcc"
>(code, addr, "sbcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75335 "isa_arm32.tcc"
>
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75340 "isa_arm32.tcc"
>::OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75344 "isa_arm32.tcc"
>(code, addr, "sbcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75361 "isa_arm32.tcc"
>
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75366 "isa_arm32.tcc"
>::OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75370 "isa_arm32.tcc"
>(code, addr, "sbcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75387 "isa_arm32.tcc"
>
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75392 "isa_arm32.tcc"
>::OpRsc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75396 "isa_arm32.tcc"
>(code, addr, "rsc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75409 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75412 "isa_arm32.tcc"
>
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75417 "isa_arm32.tcc"
>::OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75421 "isa_arm32.tcc"
>(code, addr, "rsc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75438 "isa_arm32.tcc"
>
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75443 "isa_arm32.tcc"
>::OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75447 "isa_arm32.tcc"
>(code, addr, "rsc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75464 "isa_arm32.tcc"
>
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75469 "isa_arm32.tcc"
>::OpRscs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75473 "isa_arm32.tcc"
>(code, addr, "rscs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75489 "isa_arm32.tcc"
>
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75494 "isa_arm32.tcc"
>::OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75498 "isa_arm32.tcc"
>(code, addr, "rscs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75515 "isa_arm32.tcc"
>
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75520 "isa_arm32.tcc"
>::OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75524 "isa_arm32.tcc"
>(code, addr, "rscs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75541 "isa_arm32.tcc"
>
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75546 "isa_arm32.tcc"
>::OpTst_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75550 "isa_arm32.tcc"
>(code, addr, "tst_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75563 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75566 "isa_arm32.tcc"
>
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75571 "isa_arm32.tcc"
>::OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75575 "isa_arm32.tcc"
>(code, addr, "tst_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75592 "isa_arm32.tcc"
>
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75597 "isa_arm32.tcc"
>::OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75601 "isa_arm32.tcc"
>(code, addr, "tst_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75615 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75618 "isa_arm32.tcc"
>
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75623 "isa_arm32.tcc"
>::OpTeq_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75627 "isa_arm32.tcc"
>(code, addr, "teq_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75643 "isa_arm32.tcc"
>
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75648 "isa_arm32.tcc"
>::OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75652 "isa_arm32.tcc"
>(code, addr, "teq_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75669 "isa_arm32.tcc"
>
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75674 "isa_arm32.tcc"
>::OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75678 "isa_arm32.tcc"
>(code, addr, "teq_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75695 "isa_arm32.tcc"
>
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75700 "isa_arm32.tcc"
>::OpCmp_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75704 "isa_arm32.tcc"
>(code, addr, "cmp_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75720 "isa_arm32.tcc"
>
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75725 "isa_arm32.tcc"
>::OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75729 "isa_arm32.tcc"
>(code, addr, "cmp_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75746 "isa_arm32.tcc"
>
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75751 "isa_arm32.tcc"
>::OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75755 "isa_arm32.tcc"
>(code, addr, "cmp_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75772 "isa_arm32.tcc"
>
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75777 "isa_arm32.tcc"
>::OpCmn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75781 "isa_arm32.tcc"
>(code, addr, "cmn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75794 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75797 "isa_arm32.tcc"
>
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75802 "isa_arm32.tcc"
>::OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75806 "isa_arm32.tcc"
>(code, addr, "cmn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75820 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75823 "isa_arm32.tcc"
>
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75828 "isa_arm32.tcc"
>::OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75832 "isa_arm32.tcc"
>(code, addr, "cmn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75849 "isa_arm32.tcc"
>
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75854 "isa_arm32.tcc"
>::OpOrr_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75858 "isa_arm32.tcc"
>(code, addr, "orr_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75871 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75874 "isa_arm32.tcc"
>
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75879 "isa_arm32.tcc"
>::OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75883 "isa_arm32.tcc"
>(code, addr, "orr_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75897 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75900 "isa_arm32.tcc"
>
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75905 "isa_arm32.tcc"
>::OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75909 "isa_arm32.tcc"
>(code, addr, "orr_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75926 "isa_arm32.tcc"
>
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75931 "isa_arm32.tcc"
>::OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75935 "isa_arm32.tcc"
>(code, addr, "orrs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75951 "isa_arm32.tcc"
>
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75956 "isa_arm32.tcc"
>::OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75960 "isa_arm32.tcc"
>(code, addr, "orrs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75977 "isa_arm32.tcc"
>
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75982 "isa_arm32.tcc"
>::OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75986 "isa_arm32.tcc"
>(code, addr, "orrs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76003 "isa_arm32.tcc"
>
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76008 "isa_arm32.tcc"
>::OpMov_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76012 "isa_arm32.tcc"
>(code, addr, "mov_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76028 "isa_arm32.tcc"
>
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76033 "isa_arm32.tcc"
>::OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76037 "isa_arm32.tcc"
>(code, addr, "mov_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76054 "isa_arm32.tcc"
>
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76059 "isa_arm32.tcc"
>::OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76063 "isa_arm32.tcc"
>(code, addr, "mov_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76080 "isa_arm32.tcc"
>
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76085 "isa_arm32.tcc"
>::OpMovs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76089 "isa_arm32.tcc"
>(code, addr, "movs_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76102 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76105 "isa_arm32.tcc"
>
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76110 "isa_arm32.tcc"
>::OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76114 "isa_arm32.tcc"
>(code, addr, "movs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76131 "isa_arm32.tcc"
>
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76136 "isa_arm32.tcc"
>::OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76140 "isa_arm32.tcc"
>(code, addr, "movs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76157 "isa_arm32.tcc"
>
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76162 "isa_arm32.tcc"
>::OpBic_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76166 "isa_arm32.tcc"
>(code, addr, "bic_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76182 "isa_arm32.tcc"
>
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76187 "isa_arm32.tcc"
>::OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76191 "isa_arm32.tcc"
>(code, addr, "bic_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76208 "isa_arm32.tcc"
>
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76213 "isa_arm32.tcc"
>::OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76217 "isa_arm32.tcc"
>(code, addr, "bic_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76234 "isa_arm32.tcc"
>
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76239 "isa_arm32.tcc"
>::OpBics_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76243 "isa_arm32.tcc"
>(code, addr, "bics_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76259 "isa_arm32.tcc"
>
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76264 "isa_arm32.tcc"
>::OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76268 "isa_arm32.tcc"
>(code, addr, "bics_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76285 "isa_arm32.tcc"
>
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76290 "isa_arm32.tcc"
>::OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76294 "isa_arm32.tcc"
>(code, addr, "bics_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76311 "isa_arm32.tcc"
>
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76316 "isa_arm32.tcc"
>::OpMvn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76320 "isa_arm32.tcc"
>(code, addr, "mvn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76336 "isa_arm32.tcc"
>
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76341 "isa_arm32.tcc"
>::OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76345 "isa_arm32.tcc"
>(code, addr, "mvn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76362 "isa_arm32.tcc"
>
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76367 "isa_arm32.tcc"
>::OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76371 "isa_arm32.tcc"
>(code, addr, "mvn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76388 "isa_arm32.tcc"
>
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76393 "isa_arm32.tcc"
>::OpMvns_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76397 "isa_arm32.tcc"
>(code, addr, "mvns_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76413 "isa_arm32.tcc"
>
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76418 "isa_arm32.tcc"
>::OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76422 "isa_arm32.tcc"
>(code, addr, "mvns_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76439 "isa_arm32.tcc"
>
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76444 "isa_arm32.tcc"
>::OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76448 "isa_arm32.tcc"
>(code, addr, "mvns_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76465 "isa_arm32.tcc"
>
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76470 "isa_arm32.tcc"
>::OpQadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76474 "isa_arm32.tcc"
>(code, addr, "qadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76490 "isa_arm32.tcc"
>
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76495 "isa_arm32.tcc"
>::OpQsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76499 "isa_arm32.tcc"
>(code, addr, "qsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76515 "isa_arm32.tcc"
>
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76520 "isa_arm32.tcc"
>::OpQdadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76524 "isa_arm32.tcc"
>(code, addr, "qdadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76540 "isa_arm32.tcc"
>
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76545 "isa_arm32.tcc"
>::OpQdsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76549 "isa_arm32.tcc"
>(code, addr, "qdsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76565 "isa_arm32.tcc"
>
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76570 "isa_arm32.tcc"
>::OpMla(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76574 "isa_arm32.tcc"
>(code, addr, "mla")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76588 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76591 "isa_arm32.tcc"
>
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76596 "isa_arm32.tcc"
>::OpMul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76600 "isa_arm32.tcc"
>(code, addr, "mul")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76617 "isa_arm32.tcc"
>
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76622 "isa_arm32.tcc"
>::OpSmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76626 "isa_arm32.tcc"
>(code, addr, "smlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76643 "isa_arm32.tcc"
>
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76648 "isa_arm32.tcc"
>::OpSmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76652 "isa_arm32.tcc"
>(code, addr, "smull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76669 "isa_arm32.tcc"
>
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76674 "isa_arm32.tcc"
>::OpUmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76678 "isa_arm32.tcc"
>(code, addr, "umlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76695 "isa_arm32.tcc"
>
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76700 "isa_arm32.tcc"
>::OpUmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76704 "isa_arm32.tcc"
>(code, addr, "umull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76721 "isa_arm32.tcc"
>
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76726 "isa_arm32.tcc"
>::OpSmlaxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76730 "isa_arm32.tcc"
>(code, addr, "smlaxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76748 "isa_arm32.tcc"
>
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76753 "isa_arm32.tcc"
>::OpSmlalxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76757 "isa_arm32.tcc"
>(code, addr, "smlalxy")
{
	cond = ((code >> 28) & 0xf);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76775 "isa_arm32.tcc"
>
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76780 "isa_arm32.tcc"
>::OpSmlawy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76784 "isa_arm32.tcc"
>(code, addr, "smlawy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76798 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76801 "isa_arm32.tcc"
>
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76806 "isa_arm32.tcc"
>::OpSmulxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76810 "isa_arm32.tcc"
>(code, addr, "smulxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76828 "isa_arm32.tcc"
>
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76833 "isa_arm32.tcc"
>::OpSmulwy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76837 "isa_arm32.tcc"
>(code, addr, "smulwy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76854 "isa_arm32.tcc"
>
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76859 "isa_arm32.tcc"
>::OpMrs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76863 "isa_arm32.tcc"
>(code, addr, "mrs")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	rd = ((code >> 12) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76877 "isa_arm32.tcc"
>
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76882 "isa_arm32.tcc"
>::OpMsr_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76886 "isa_arm32.tcc"
>(code, addr, "msr_imm")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76902 "isa_arm32.tcc"
>
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76907 "isa_arm32.tcc"
>::OpMsr_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76911 "isa_arm32.tcc"
>(code, addr, "msr_reg")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76926 "isa_arm32.tcc"
>
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76931 "isa_arm32.tcc"
>::OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76935 "isa_arm32.tcc"
>(code, addr, "ldr_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76951 "isa_arm32.tcc"
>
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76956 "isa_arm32.tcc"
>::OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76960 "isa_arm32.tcc"
>(code, addr, "ldr_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76976 "isa_arm32.tcc"
>
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76981 "isa_arm32.tcc"
>::OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76985 "isa_arm32.tcc"
>(code, addr, "ldr_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77001 "isa_arm32.tcc"
>
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77006 "isa_arm32.tcc"
>::OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77010 "isa_arm32.tcc"
>(code, addr, "ldr_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77028 "isa_arm32.tcc"
>
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77033 "isa_arm32.tcc"
>::OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77037 "isa_arm32.tcc"
>(code, addr, "ldr_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77052 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77055 "isa_arm32.tcc"
>
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77060 "isa_arm32.tcc"
>::OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77064 "isa_arm32.tcc"
>(code, addr, "ldr_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77079 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77082 "isa_arm32.tcc"
>
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77087 "isa_arm32.tcc"
>::OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77091 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77107 "isa_arm32.tcc"
>
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77112 "isa_arm32.tcc"
>::OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77116 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77132 "isa_arm32.tcc"
>
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77137 "isa_arm32.tcc"
>::OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77141 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77157 "isa_arm32.tcc"
>
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77162 "isa_arm32.tcc"
>::OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77166 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77184 "isa_arm32.tcc"
>
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77189 "isa_arm32.tcc"
>::OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77193 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77211 "isa_arm32.tcc"
>
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77216 "isa_arm32.tcc"
>::OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77220 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77238 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77243 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77247 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77262 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77267 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77271 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77283 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77286 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77291 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77295 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77310 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77315 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77319 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77336 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77341 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77345 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77362 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77367 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77371 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77385 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77388 "isa_arm32.tcc"
>
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77393 "isa_arm32.tcc"
>::OpLdrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77397 "isa_arm32.tcc"
>(code, addr, "ldrt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77413 "isa_arm32.tcc"
>
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77418 "isa_arm32.tcc"
>::OpLdrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77422 "isa_arm32.tcc"
>(code, addr, "ldrt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77440 "isa_arm32.tcc"
>
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77445 "isa_arm32.tcc"
>::OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77449 "isa_arm32.tcc"
>(code, addr, "ldrbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77465 "isa_arm32.tcc"
>
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77470 "isa_arm32.tcc"
>::OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77474 "isa_arm32.tcc"
>(code, addr, "ldrbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77492 "isa_arm32.tcc"
>
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77497 "isa_arm32.tcc"
>::OpStr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77501 "isa_arm32.tcc"
>(code, addr, "str_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77517 "isa_arm32.tcc"
>
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77522 "isa_arm32.tcc"
>::OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77526 "isa_arm32.tcc"
>(code, addr, "str_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77542 "isa_arm32.tcc"
>
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77547 "isa_arm32.tcc"
>::OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77551 "isa_arm32.tcc"
>(code, addr, "str_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77567 "isa_arm32.tcc"
>
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77572 "isa_arm32.tcc"
>::OpStr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77576 "isa_arm32.tcc"
>(code, addr, "str_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77591 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77594 "isa_arm32.tcc"
>
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77599 "isa_arm32.tcc"
>::OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77603 "isa_arm32.tcc"
>(code, addr, "str_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77621 "isa_arm32.tcc"
>
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77626 "isa_arm32.tcc"
>::OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77630 "isa_arm32.tcc"
>(code, addr, "str_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77648 "isa_arm32.tcc"
>
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77653 "isa_arm32.tcc"
>::OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77657 "isa_arm32.tcc"
>(code, addr, "strb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77673 "isa_arm32.tcc"
>
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77678 "isa_arm32.tcc"
>::OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77682 "isa_arm32.tcc"
>(code, addr, "strb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77695 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77698 "isa_arm32.tcc"
>
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77703 "isa_arm32.tcc"
>::OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77707 "isa_arm32.tcc"
>(code, addr, "strb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77723 "isa_arm32.tcc"
>
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77728 "isa_arm32.tcc"
>::OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77732 "isa_arm32.tcc"
>(code, addr, "strb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77750 "isa_arm32.tcc"
>
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77755 "isa_arm32.tcc"
>::OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77759 "isa_arm32.tcc"
>(code, addr, "strb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77777 "isa_arm32.tcc"
>
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77782 "isa_arm32.tcc"
>::OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77786 "isa_arm32.tcc"
>(code, addr, "strb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77804 "isa_arm32.tcc"
>
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77809 "isa_arm32.tcc"
>::OpStrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77813 "isa_arm32.tcc"
>(code, addr, "strt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77829 "isa_arm32.tcc"
>
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77834 "isa_arm32.tcc"
>::OpStrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77838 "isa_arm32.tcc"
>(code, addr, "strt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77856 "isa_arm32.tcc"
>
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77861 "isa_arm32.tcc"
>::OpStrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77865 "isa_arm32.tcc"
>(code, addr, "strbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77881 "isa_arm32.tcc"
>
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77886 "isa_arm32.tcc"
>::OpStrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77890 "isa_arm32.tcc"
>(code, addr, "strbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77908 "isa_arm32.tcc"
>
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77913 "isa_arm32.tcc"
>::OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77917 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77934 "isa_arm32.tcc"
>
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77939 "isa_arm32.tcc"
>::OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77943 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77957 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77960 "isa_arm32.tcc"
>
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77965 "isa_arm32.tcc"
>::OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77969 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77986 "isa_arm32.tcc"
>
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77991 "isa_arm32.tcc"
>::OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77995 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78012 "isa_arm32.tcc"
>
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78017 "isa_arm32.tcc"
>::OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78021 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78035 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78038 "isa_arm32.tcc"
>
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78043 "isa_arm32.tcc"
>::OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78047 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78061 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78064 "isa_arm32.tcc"
>
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78069 "isa_arm32.tcc"
>::OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78073 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78090 "isa_arm32.tcc"
>
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78095 "isa_arm32.tcc"
>::OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78099 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78116 "isa_arm32.tcc"
>
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78121 "isa_arm32.tcc"
>::OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78125 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78142 "isa_arm32.tcc"
>
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78147 "isa_arm32.tcc"
>::OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78151 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78168 "isa_arm32.tcc"
>
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78173 "isa_arm32.tcc"
>::OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78177 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78194 "isa_arm32.tcc"
>
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78199 "isa_arm32.tcc"
>::OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78203 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78217 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78220 "isa_arm32.tcc"
>
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78225 "isa_arm32.tcc"
>::OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78229 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78246 "isa_arm32.tcc"
>
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78251 "isa_arm32.tcc"
>::OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78255 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78269 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78272 "isa_arm32.tcc"
>
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78277 "isa_arm32.tcc"
>::OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78281 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78298 "isa_arm32.tcc"
>
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78303 "isa_arm32.tcc"
>::OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78307 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78324 "isa_arm32.tcc"
>
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78329 "isa_arm32.tcc"
>::OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78333 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78350 "isa_arm32.tcc"
>
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78355 "isa_arm32.tcc"
>::OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78359 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78373 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78376 "isa_arm32.tcc"
>
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78381 "isa_arm32.tcc"
>::OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78385 "isa_arm32.tcc"
>(code, addr, "strh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78399 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78402 "isa_arm32.tcc"
>
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78407 "isa_arm32.tcc"
>::OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78411 "isa_arm32.tcc"
>(code, addr, "strh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78425 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78428 "isa_arm32.tcc"
>
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78433 "isa_arm32.tcc"
>::OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78437 "isa_arm32.tcc"
>(code, addr, "strh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78454 "isa_arm32.tcc"
>
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78459 "isa_arm32.tcc"
>::OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78463 "isa_arm32.tcc"
>(code, addr, "strh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78477 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78480 "isa_arm32.tcc"
>
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78485 "isa_arm32.tcc"
>::OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78489 "isa_arm32.tcc"
>(code, addr, "strh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78506 "isa_arm32.tcc"
>
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78511 "isa_arm32.tcc"
>::OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78515 "isa_arm32.tcc"
>(code, addr, "strh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78532 "isa_arm32.tcc"
>
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78537 "isa_arm32.tcc"
>::OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78541 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78558 "isa_arm32.tcc"
>
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78563 "isa_arm32.tcc"
>::OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78567 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78584 "isa_arm32.tcc"
>
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78589 "isa_arm32.tcc"
>::OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78593 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78610 "isa_arm32.tcc"
>
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78615 "isa_arm32.tcc"
>::OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78619 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78633 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78636 "isa_arm32.tcc"
>
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78641 "isa_arm32.tcc"
>::OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78645 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78659 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78662 "isa_arm32.tcc"
>
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78667 "isa_arm32.tcc"
>::OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78671 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78685 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78688 "isa_arm32.tcc"
>
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78693 "isa_arm32.tcc"
>::OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78697 "isa_arm32.tcc"
>(code, addr, "strd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78714 "isa_arm32.tcc"
>
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78719 "isa_arm32.tcc"
>::OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78723 "isa_arm32.tcc"
>(code, addr, "strd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78740 "isa_arm32.tcc"
>
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78745 "isa_arm32.tcc"
>::OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78749 "isa_arm32.tcc"
>(code, addr, "strd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78766 "isa_arm32.tcc"
>
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78771 "isa_arm32.tcc"
>::OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78775 "isa_arm32.tcc"
>(code, addr, "strd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78792 "isa_arm32.tcc"
>
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78797 "isa_arm32.tcc"
>::OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78801 "isa_arm32.tcc"
>(code, addr, "strd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78818 "isa_arm32.tcc"
>
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78823 "isa_arm32.tcc"
>::OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78827 "isa_arm32.tcc"
>(code, addr, "strd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78844 "isa_arm32.tcc"
>
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78849 "isa_arm32.tcc"
>::OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78853 "isa_arm32.tcc"
>(code, addr, "ldm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78865 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78868 "isa_arm32.tcc"
>
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78873 "isa_arm32.tcc"
>::OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78877 "isa_arm32.tcc"
>(code, addr, "ldm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78892 "isa_arm32.tcc"
>
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78897 "isa_arm32.tcc"
>::OpLdm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78901 "isa_arm32.tcc"
>(code, addr, "ldm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78913 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78916 "isa_arm32.tcc"
>
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78921 "isa_arm32.tcc"
>::OpLdm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78925 "isa_arm32.tcc"
>(code, addr, "ldm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78937 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78940 "isa_arm32.tcc"
>
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78945 "isa_arm32.tcc"
>::OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78949 "isa_arm32.tcc"
>(code, addr, "ldm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78963 "isa_arm32.tcc"
>
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78968 "isa_arm32.tcc"
>::OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78972 "isa_arm32.tcc"
>(code, addr, "ldm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78983 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78986 "isa_arm32.tcc"
>
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78991 "isa_arm32.tcc"
>::OpLdm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78995 "isa_arm32.tcc"
>(code, addr, "ldm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79006 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79009 "isa_arm32.tcc"
>
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79014 "isa_arm32.tcc"
>::OpLdm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79018 "isa_arm32.tcc"
>(code, addr, "ldm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79032 "isa_arm32.tcc"
>
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79037 "isa_arm32.tcc"
>::OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79041 "isa_arm32.tcc"
>(code, addr, "ldm_3_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79053 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79056 "isa_arm32.tcc"
>
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79061 "isa_arm32.tcc"
>::OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79065 "isa_arm32.tcc"
>(code, addr, "ldm_3_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79080 "isa_arm32.tcc"
>
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79085 "isa_arm32.tcc"
>::OpLdm_3_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79089 "isa_arm32.tcc"
>(code, addr, "ldm_3_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79104 "isa_arm32.tcc"
>
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79109 "isa_arm32.tcc"
>::OpLdm_3_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79113 "isa_arm32.tcc"
>(code, addr, "ldm_3_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79128 "isa_arm32.tcc"
>
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79133 "isa_arm32.tcc"
>::OpStm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79137 "isa_arm32.tcc"
>(code, addr, "stm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79149 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79152 "isa_arm32.tcc"
>
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79157 "isa_arm32.tcc"
>::OpStm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79161 "isa_arm32.tcc"
>(code, addr, "stm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79176 "isa_arm32.tcc"
>
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79181 "isa_arm32.tcc"
>::OpStm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79185 "isa_arm32.tcc"
>(code, addr, "stm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79197 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79200 "isa_arm32.tcc"
>
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79205 "isa_arm32.tcc"
>::OpStm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79209 "isa_arm32.tcc"
>(code, addr, "stm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79224 "isa_arm32.tcc"
>
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79229 "isa_arm32.tcc"
>::OpStm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79233 "isa_arm32.tcc"
>(code, addr, "stm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79247 "isa_arm32.tcc"
>
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79252 "isa_arm32.tcc"
>::OpStm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79256 "isa_arm32.tcc"
>(code, addr, "stm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79267 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79270 "isa_arm32.tcc"
>
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79275 "isa_arm32.tcc"
>::OpStm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79279 "isa_arm32.tcc"
>(code, addr, "stm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79290 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79293 "isa_arm32.tcc"
>
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79298 "isa_arm32.tcc"
>::OpStm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79302 "isa_arm32.tcc"
>(code, addr, "stm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79316 "isa_arm32.tcc"
>
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79321 "isa_arm32.tcc"
>::OpSwp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79325 "isa_arm32.tcc"
>(code, addr, "swp")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79340 "isa_arm32.tcc"
>
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79345 "isa_arm32.tcc"
>::OpSwpb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79349 "isa_arm32.tcc"
>(code, addr, "swpb")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79364 "isa_arm32.tcc"
>
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79369 "isa_arm32.tcc"
>::OpSwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79373 "isa_arm32.tcc"
>(code, addr, "swi")
{
	cond = ((code >> 28) & 0xf);
	immed = ((code >> 0) & 0xffffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79386 "isa_arm32.tcc"
>
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79391 "isa_arm32.tcc"
>::OpBkpt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79395 "isa_arm32.tcc"
>(code, addr, "bkpt")
{
	himmed = ((code >> 8) & 0xfff);
	limmed = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79408 "isa_arm32.tcc"
>
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79413 "isa_arm32.tcc"
>::OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79417 "isa_arm32.tcc"
>(code, addr, "cdp_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79432 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79435 "isa_arm32.tcc"
>
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79440 "isa_arm32.tcc"
>::OpCdp_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79444 "isa_arm32.tcc"
>(code, addr, "cdp_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79462 "isa_arm32.tcc"
>
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79467 "isa_arm32.tcc"
>::OpCdp_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79471 "isa_arm32.tcc"
>(code, addr, "cdp_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79489 "isa_arm32.tcc"
>
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79494 "isa_arm32.tcc"
>::OpCdp_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79498 "isa_arm32.tcc"
>(code, addr, "cdp_1110")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79512 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79515 "isa_arm32.tcc"
>
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79520 "isa_arm32.tcc"
>::OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79524 "isa_arm32.tcc"
>(code, addr, "ldc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79539 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79542 "isa_arm32.tcc"
>
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79547 "isa_arm32.tcc"
>::OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79551 "isa_arm32.tcc"
>(code, addr, "ldc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79569 "isa_arm32.tcc"
>
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79574 "isa_arm32.tcc"
>::OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79578 "isa_arm32.tcc"
>(code, addr, "ldc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79596 "isa_arm32.tcc"
>
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79601 "isa_arm32.tcc"
>::OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79605 "isa_arm32.tcc"
>(code, addr, "ldc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79622 "isa_arm32.tcc"
>
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79627 "isa_arm32.tcc"
>::OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79631 "isa_arm32.tcc"
>(code, addr, "ldc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79646 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79649 "isa_arm32.tcc"
>
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79654 "isa_arm32.tcc"
>::OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79658 "isa_arm32.tcc"
>(code, addr, "ldc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79676 "isa_arm32.tcc"
>
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79681 "isa_arm32.tcc"
>::OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79685 "isa_arm32.tcc"
>(code, addr, "ldc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79703 "isa_arm32.tcc"
>
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79708 "isa_arm32.tcc"
>::OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79712 "isa_arm32.tcc"
>(code, addr, "ldc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79729 "isa_arm32.tcc"
>
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79734 "isa_arm32.tcc"
>::OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79738 "isa_arm32.tcc"
>(code, addr, "ldc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79756 "isa_arm32.tcc"
>
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79761 "isa_arm32.tcc"
>::OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79765 "isa_arm32.tcc"
>(code, addr, "ldc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79783 "isa_arm32.tcc"
>
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79788 "isa_arm32.tcc"
>::OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79792 "isa_arm32.tcc"
>(code, addr, "ldc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79807 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79810 "isa_arm32.tcc"
>
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79815 "isa_arm32.tcc"
>::OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79819 "isa_arm32.tcc"
>(code, addr, "ldc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79836 "isa_arm32.tcc"
>
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79841 "isa_arm32.tcc"
>::OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79845 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79859 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79862 "isa_arm32.tcc"
>
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79867 "isa_arm32.tcc"
>::OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79871 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79885 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79888 "isa_arm32.tcc"
>
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79893 "isa_arm32.tcc"
>::OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79897 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79911 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79914 "isa_arm32.tcc"
>
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79919 "isa_arm32.tcc"
>::OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79923 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79936 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79939 "isa_arm32.tcc"
>
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79944 "isa_arm32.tcc"
>::OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79948 "isa_arm32.tcc"
>(code, addr, "mcr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79966 "isa_arm32.tcc"
>
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79971 "isa_arm32.tcc"
>::OpMcr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79975 "isa_arm32.tcc"
>(code, addr, "mcr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79993 "isa_arm32.tcc"
>
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79998 "isa_arm32.tcc"
>::OpMcr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80002 "isa_arm32.tcc"
>(code, addr, "mcr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80020 "isa_arm32.tcc"
>
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80025 "isa_arm32.tcc"
>::OpMcr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80029 "isa_arm32.tcc"
>(code, addr, "mcr_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80046 "isa_arm32.tcc"
>
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80051 "isa_arm32.tcc"
>::OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80055 "isa_arm32.tcc"
>(code, addr, "mrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80073 "isa_arm32.tcc"
>
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80078 "isa_arm32.tcc"
>::OpMrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80082 "isa_arm32.tcc"
>(code, addr, "mrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80100 "isa_arm32.tcc"
>
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80105 "isa_arm32.tcc"
>::OpMrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80109 "isa_arm32.tcc"
>(code, addr, "mrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80127 "isa_arm32.tcc"
>
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80132 "isa_arm32.tcc"
>::OpMrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80136 "isa_arm32.tcc"
>(code, addr, "mrc_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80150 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80153 "isa_arm32.tcc"
>
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80158 "isa_arm32.tcc"
>::OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80162 "isa_arm32.tcc"
>(code, addr, "stc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80180 "isa_arm32.tcc"
>
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80185 "isa_arm32.tcc"
>::OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80189 "isa_arm32.tcc"
>(code, addr, "stc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80207 "isa_arm32.tcc"
>
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80212 "isa_arm32.tcc"
>::OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80216 "isa_arm32.tcc"
>(code, addr, "stc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80234 "isa_arm32.tcc"
>
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80239 "isa_arm32.tcc"
>::OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80243 "isa_arm32.tcc"
>(code, addr, "stc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80260 "isa_arm32.tcc"
>
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80265 "isa_arm32.tcc"
>::OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80269 "isa_arm32.tcc"
>(code, addr, "stc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80287 "isa_arm32.tcc"
>
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80292 "isa_arm32.tcc"
>::OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80296 "isa_arm32.tcc"
>(code, addr, "stc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80314 "isa_arm32.tcc"
>
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80319 "isa_arm32.tcc"
>::OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80323 "isa_arm32.tcc"
>(code, addr, "stc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80341 "isa_arm32.tcc"
>
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80346 "isa_arm32.tcc"
>::OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80350 "isa_arm32.tcc"
>(code, addr, "stc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80364 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80367 "isa_arm32.tcc"
>
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80372 "isa_arm32.tcc"
>::OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80376 "isa_arm32.tcc"
>(code, addr, "stc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80394 "isa_arm32.tcc"
>
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80399 "isa_arm32.tcc"
>::OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80403 "isa_arm32.tcc"
>(code, addr, "stc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80421 "isa_arm32.tcc"
>
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80426 "isa_arm32.tcc"
>::OpStc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80430 "isa_arm32.tcc"
>(code, addr, "stc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80448 "isa_arm32.tcc"
>
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80453 "isa_arm32.tcc"
>::OpStc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80457 "isa_arm32.tcc"
>(code, addr, "stc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80474 "isa_arm32.tcc"
>
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80479 "isa_arm32.tcc"
>::OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80483 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80500 "isa_arm32.tcc"
>
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80505 "isa_arm32.tcc"
>::OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80509 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80526 "isa_arm32.tcc"
>
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80531 "isa_arm32.tcc"
>::OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80535 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80549 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80552 "isa_arm32.tcc"
>
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80557 "isa_arm32.tcc"
>::OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80561 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80577 "isa_arm32.tcc"
>
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80582 "isa_arm32.tcc"
>::OpCdp2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80586 "isa_arm32.tcc"
>(code, addr, "cdp2")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80600 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80603 "isa_arm32.tcc"
>
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80608 "isa_arm32.tcc"
>::OpLdc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80612 "isa_arm32.tcc"
>(code, addr, "ldc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80626 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80629 "isa_arm32.tcc"
>
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80634 "isa_arm32.tcc"
>::OpLdc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80638 "isa_arm32.tcc"
>(code, addr, "ldc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80652 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80655 "isa_arm32.tcc"
>
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80660 "isa_arm32.tcc"
>::OpLdc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80664 "isa_arm32.tcc"
>(code, addr, "ldc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80678 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80681 "isa_arm32.tcc"
>
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80686 "isa_arm32.tcc"
>::OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80690 "isa_arm32.tcc"
>(code, addr, "ldc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80707 "isa_arm32.tcc"
>
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80712 "isa_arm32.tcc"
>::OpMcr2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80716 "isa_arm32.tcc"
>(code, addr, "mcr2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80733 "isa_arm32.tcc"
>
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80738 "isa_arm32.tcc"
>::OpMrc2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80742 "isa_arm32.tcc"
>(code, addr, "mrc2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80759 "isa_arm32.tcc"
>
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80764 "isa_arm32.tcc"
>::OpStc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80768 "isa_arm32.tcc"
>(code, addr, "stc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80785 "isa_arm32.tcc"
>
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80790 "isa_arm32.tcc"
>::OpStc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80794 "isa_arm32.tcc"
>(code, addr, "stc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80811 "isa_arm32.tcc"
>
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80816 "isa_arm32.tcc"
>::OpStc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80820 "isa_arm32.tcc"
>(code, addr, "stc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80837 "isa_arm32.tcc"
>
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80842 "isa_arm32.tcc"
>::OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80846 "isa_arm32.tcc"
>(code, addr, "stc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80863 "isa_arm32.tcc"
>
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80868 "isa_arm32.tcc"
>::OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80872 "isa_arm32.tcc"
>(code, addr, "mcrr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80889 "isa_arm32.tcc"
>
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80894 "isa_arm32.tcc"
>::OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80898 "isa_arm32.tcc"
>(code, addr, "mcrr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80915 "isa_arm32.tcc"
>
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80920 "isa_arm32.tcc"
>::OpMcrr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80924 "isa_arm32.tcc"
>(code, addr, "mcrr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80938 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80941 "isa_arm32.tcc"
>
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80946 "isa_arm32.tcc"
>::OpMcrr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80950 "isa_arm32.tcc"
>(code, addr, "mcrr_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80966 "isa_arm32.tcc"
>
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80971 "isa_arm32.tcc"
>::OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80975 "isa_arm32.tcc"
>(code, addr, "mrrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80992 "isa_arm32.tcc"
>
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80997 "isa_arm32.tcc"
>::OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81001 "isa_arm32.tcc"
>(code, addr, "mrrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81015 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81018 "isa_arm32.tcc"
>
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81023 "isa_arm32.tcc"
>::OpMrrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81027 "isa_arm32.tcc"
>(code, addr, "mrrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81041 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81044 "isa_arm32.tcc"
>
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81049 "isa_arm32.tcc"
>::OpMrrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81053 "isa_arm32.tcc"
>(code, addr, "mrrc_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81069 "isa_arm32.tcc"
>
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81074 "isa_arm32.tcc"
>::OpClz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81078 "isa_arm32.tcc"
>(code, addr, "clz")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbo2 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81094 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81099 "isa_arm32.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81113 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81118 "isa_arm32.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81129 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81132 "isa_arm32.tcc"
>
DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81137 "isa_arm32.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81141 "isa_arm32.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81155 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81160 "isa_arm32.tcc"
>::Decoder()
: is_little_endian( false ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	if(
#line 45 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	CONFIG::HAS_INSN_ARITH_CLZ
#line 81168 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81172 "isa_arm32.tcc"
	>(0x1600010UL, 0xff000f0UL, DecodeOpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81176 "isa_arm32.tcc"
	>));
	if(
#line 117 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81181 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81185 "isa_arm32.tcc"
	>(0xec500000UL, 0xfff00000UL, DecodeOpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81189 "isa_arm32.tcc"
	>));
	if(
#line 115 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81194 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81198 "isa_arm32.tcc"
	>(0xcc500000UL, 0xeff00000UL, DecodeOpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81202 "isa_arm32.tcc"
	>));
	if(
#line 113 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81207 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81211 "isa_arm32.tcc"
	>(0x8c500000UL, 0xcff00000UL, DecodeOpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81215 "isa_arm32.tcc"
	>));
	if(
#line 111 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81220 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81224 "isa_arm32.tcc"
	>(0xc500000UL, 0x8ff00000UL, DecodeOpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81228 "isa_arm32.tcc"
	>));
	if(
#line 51 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81233 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81237 "isa_arm32.tcc"
	>(0xec400000UL, 0xfff00000UL, DecodeOpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81241 "isa_arm32.tcc"
	>));
	if(
#line 49 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81246 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81250 "isa_arm32.tcc"
	>(0xcc400000UL, 0xeff00000UL, DecodeOpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81254 "isa_arm32.tcc"
	>));
	if(
#line 47 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81259 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81263 "isa_arm32.tcc"
	>(0x8c400000UL, 0xcff00000UL, DecodeOpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81267 "isa_arm32.tcc"
	>));
	if(
#line 45 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81272 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81276 "isa_arm32.tcc"
	>(0xc400000UL, 0x8ff00000UL, DecodeOpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81280 "isa_arm32.tcc"
	>));
	if(
#line 932 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81285 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81289 "isa_arm32.tcc"
	>(0xfc000000UL, 0xff300000UL, DecodeOpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81293 "isa_arm32.tcc"
	>));
	if(
#line 930 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81298 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81302 "isa_arm32.tcc"
	>(0xfc200000UL, 0xff300000UL, DecodeOpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81306 "isa_arm32.tcc"
	>));
	if(
#line 928 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81311 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81315 "isa_arm32.tcc"
	>(0xfd200000UL, 0xff300000UL, DecodeOpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81319 "isa_arm32.tcc"
	>));
	if(
#line 926 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81324 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81328 "isa_arm32.tcc"
	>(0xfd000000UL, 0xff300000UL, DecodeOpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81332 "isa_arm32.tcc"
	>));
	if(
#line 899 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81337 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81341 "isa_arm32.tcc"
	>(0xfe100010UL, 0xff100010UL, DecodeOpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81345 "isa_arm32.tcc"
	>));
	if(
#line 872 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81350 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81354 "isa_arm32.tcc"
	>(0xfe000010UL, 0xff100010UL, DecodeOpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81358 "isa_arm32.tcc"
	>));
	if(
#line 764 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81363 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81367 "isa_arm32.tcc"
	>(0xfc100000UL, 0xff300000UL, DecodeOpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81371 "isa_arm32.tcc"
	>));
	if(
#line 762 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81376 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81380 "isa_arm32.tcc"
	>(0xfc300000UL, 0xff300000UL, DecodeOpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81384 "isa_arm32.tcc"
	>));
	if(
#line 760 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81389 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81393 "isa_arm32.tcc"
	>(0xfd300000UL, 0xff300000UL, DecodeOpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81397 "isa_arm32.tcc"
	>));
	if(
#line 758 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81402 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81406 "isa_arm32.tcc"
	>(0xfd100000UL, 0xff300000UL, DecodeOpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81410 "isa_arm32.tcc"
	>));
	if(
#line 731 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_OPS
#line 81415 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81419 "isa_arm32.tcc"
	>(0xfe000000UL, 0xff000010UL, DecodeOpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81423 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81428 "isa_arm32.tcc"
	>(0xec800000UL, 0xffb00000UL, DecodeOpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81432 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81437 "isa_arm32.tcc"
	>(0xcc800000UL, 0xefb00000UL, DecodeOpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81441 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81446 "isa_arm32.tcc"
	>(0x8c800000UL, 0xcfb00000UL, DecodeOpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81450 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81455 "isa_arm32.tcc"
	>(0xc800000UL, 0x8fb00000UL, DecodeOpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81459 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81464 "isa_arm32.tcc"
	>(0xec200000UL, 0xff300000UL, DecodeOpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81468 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81473 "isa_arm32.tcc"
	>(0xcc200000UL, 0xef300000UL, DecodeOpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81477 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81482 "isa_arm32.tcc"
	>(0x8c200000UL, 0xcf300000UL, DecodeOpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81486 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81491 "isa_arm32.tcc"
	>(0xc200000UL, 0x8f300000UL, DecodeOpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81495 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81500 "isa_arm32.tcc"
	>(0xed200000UL, 0xff300000UL, DecodeOpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81504 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81509 "isa_arm32.tcc"
	>(0xcd200000UL, 0xef300000UL, DecodeOpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81513 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81518 "isa_arm32.tcc"
	>(0x8d200000UL, 0xcf300000UL, DecodeOpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81522 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81527 "isa_arm32.tcc"
	>(0xd200000UL, 0x8f300000UL, DecodeOpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81531 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81536 "isa_arm32.tcc"
	>(0xed000000UL, 0xff300000UL, DecodeOpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81540 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81545 "isa_arm32.tcc"
	>(0xcd000000UL, 0xef300000UL, DecodeOpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81549 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81554 "isa_arm32.tcc"
	>(0x8d000000UL, 0xcf300000UL, DecodeOpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81558 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81563 "isa_arm32.tcc"
	>(0xd000000UL, 0x8f300000UL, DecodeOpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81567 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81572 "isa_arm32.tcc"
	>(0xee100010UL, 0xff100010UL, DecodeOpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81576 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81581 "isa_arm32.tcc"
	>(0xce100010UL, 0xef100010UL, DecodeOpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81585 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81590 "isa_arm32.tcc"
	>(0x8e100010UL, 0xcf100010UL, DecodeOpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81594 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81599 "isa_arm32.tcc"
	>(0xe100010UL, 0x8f100010UL, DecodeOpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81603 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81608 "isa_arm32.tcc"
	>(0xee000010UL, 0xff100010UL, DecodeOpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81612 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81617 "isa_arm32.tcc"
	>(0xce000010UL, 0xef100010UL, DecodeOpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81621 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81626 "isa_arm32.tcc"
	>(0x8e000010UL, 0xcf100010UL, DecodeOpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81630 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81635 "isa_arm32.tcc"
	>(0xe000010UL, 0x8f100010UL, DecodeOpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81639 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81644 "isa_arm32.tcc"
	>(0xec900000UL, 0xffb00000UL, DecodeOpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81648 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81653 "isa_arm32.tcc"
	>(0xcc900000UL, 0xefb00000UL, DecodeOpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81657 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81662 "isa_arm32.tcc"
	>(0x8c900000UL, 0xcfb00000UL, DecodeOpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81666 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81671 "isa_arm32.tcc"
	>(0xc900000UL, 0x8fb00000UL, DecodeOpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81675 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81680 "isa_arm32.tcc"
	>(0xec300000UL, 0xff300000UL, DecodeOpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81684 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81689 "isa_arm32.tcc"
	>(0xcc300000UL, 0xef300000UL, DecodeOpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81693 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81698 "isa_arm32.tcc"
	>(0x8c300000UL, 0xcf300000UL, DecodeOpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81702 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81707 "isa_arm32.tcc"
	>(0xc300000UL, 0x8f300000UL, DecodeOpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81711 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81716 "isa_arm32.tcc"
	>(0xed300000UL, 0xff300000UL, DecodeOpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81720 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81725 "isa_arm32.tcc"
	>(0xcd300000UL, 0xef300000UL, DecodeOpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81729 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81734 "isa_arm32.tcc"
	>(0x8d300000UL, 0xcf300000UL, DecodeOpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81738 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81743 "isa_arm32.tcc"
	>(0xd300000UL, 0x8f300000UL, DecodeOpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81747 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81752 "isa_arm32.tcc"
	>(0xed100000UL, 0xff300000UL, DecodeOpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81756 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81761 "isa_arm32.tcc"
	>(0xcd100000UL, 0xef300000UL, DecodeOpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81765 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81770 "isa_arm32.tcc"
	>(0x8d100000UL, 0xcf300000UL, DecodeOpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81774 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81779 "isa_arm32.tcc"
	>(0xd100000UL, 0x8f300000UL, DecodeOpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81783 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81788 "isa_arm32.tcc"
	>(0xee000000UL, 0xff000010UL, DecodeOpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81792 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81797 "isa_arm32.tcc"
	>(0xce000000UL, 0xef000010UL, DecodeOpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81801 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81806 "isa_arm32.tcc"
	>(0x8e000000UL, 0xcf000010UL, DecodeOpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81810 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81815 "isa_arm32.tcc"
	>(0xe000000UL, 0x8f000010UL, DecodeOpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81819 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81824 "isa_arm32.tcc"
	>(0xe1200070UL, 0xfff000f0UL, DecodeOpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81828 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81833 "isa_arm32.tcc"
	>(0xf000000UL, 0xf000000UL, DecodeOpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81837 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81842 "isa_arm32.tcc"
	>(0x1400090UL, 0xff00ff0UL, DecodeOpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81846 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81851 "isa_arm32.tcc"
	>(0x1000090UL, 0xff00ff0UL, DecodeOpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81855 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81860 "isa_arm32.tcc"
	>(0x9400000UL, 0xff00000UL, DecodeOpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81864 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81869 "isa_arm32.tcc"
	>(0x8400000UL, 0xff00000UL, DecodeOpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81873 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81878 "isa_arm32.tcc"
	>(0x9c00000UL, 0xff00000UL, DecodeOpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81882 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81887 "isa_arm32.tcc"
	>(0x8c00000UL, 0xff00000UL, DecodeOpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81891 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81896 "isa_arm32.tcc"
	>(0x9000000UL, 0xfd00000UL, DecodeOpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81900 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81905 "isa_arm32.tcc"
	>(0x8000000UL, 0xfd00000UL, DecodeOpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81909 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81914 "isa_arm32.tcc"
	>(0x9800000UL, 0xfd00000UL, DecodeOpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81918 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81923 "isa_arm32.tcc"
	>(0x8800000UL, 0xfd00000UL, DecodeOpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81927 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81932 "isa_arm32.tcc"
	>(0x9508000UL, 0xfd08000UL, DecodeOpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81936 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81941 "isa_arm32.tcc"
	>(0x8508000UL, 0xfd08000UL, DecodeOpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81945 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81950 "isa_arm32.tcc"
	>(0x9d08000UL, 0xfd08000UL, DecodeOpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81954 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81959 "isa_arm32.tcc"
	>(0x8d08000UL, 0xfd08000UL, DecodeOpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81963 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81968 "isa_arm32.tcc"
	>(0x9500000UL, 0xff08000UL, DecodeOpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81972 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81977 "isa_arm32.tcc"
	>(0x8500000UL, 0xff08000UL, DecodeOpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81981 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81986 "isa_arm32.tcc"
	>(0x9d00000UL, 0xff08000UL, DecodeOpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81990 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81995 "isa_arm32.tcc"
	>(0x8d00000UL, 0xff08000UL, DecodeOpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81999 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82004 "isa_arm32.tcc"
	>(0x9100000UL, 0xfd00000UL, DecodeOpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82008 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82013 "isa_arm32.tcc"
	>(0x8100000UL, 0xfd00000UL, DecodeOpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82017 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82022 "isa_arm32.tcc"
	>(0x9900000UL, 0xfd00000UL, DecodeOpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82026 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82031 "isa_arm32.tcc"
	>(0x8900000UL, 0xfd00000UL, DecodeOpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82035 "isa_arm32.tcc"
	>));
	if(
#line 273 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82040 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82044 "isa_arm32.tcc"
	>(0x12000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82048 "isa_arm32.tcc"
	>));
	if(
#line 271 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82053 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82057 "isa_arm32.tcc"
	>(0x10000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82061 "isa_arm32.tcc"
	>));
	if(
#line 269 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82066 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82070 "isa_arm32.tcc"
	>(0xf0UL, 0xf7000f0UL, DecodeOpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82074 "isa_arm32.tcc"
	>));
	if(
#line 267 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82079 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82083 "isa_arm32.tcc"
	>(0x16000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82087 "isa_arm32.tcc"
	>));
	if(
#line 265 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82092 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82096 "isa_arm32.tcc"
	>(0x14000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82100 "isa_arm32.tcc"
	>));
	if(
#line 263 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82105 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82109 "isa_arm32.tcc"
	>(0x4000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82113 "isa_arm32.tcc"
	>));
	if(
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82118 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82122 "isa_arm32.tcc"
	>(0x12000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82126 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82131 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82135 "isa_arm32.tcc"
	>(0x10000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82139 "isa_arm32.tcc"
	>));
	if(
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82144 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82148 "isa_arm32.tcc"
	>(0xd0UL, 0xf7000f0UL, DecodeOpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82152 "isa_arm32.tcc"
	>));
	if(
#line 50 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82157 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82161 "isa_arm32.tcc"
	>(0x16000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82165 "isa_arm32.tcc"
	>));
	if(
#line 48 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82170 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82174 "isa_arm32.tcc"
	>(0x14000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82178 "isa_arm32.tcc"
	>));
	if(
#line 46 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82183 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82187 "isa_arm32.tcc"
	>(0x4000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82191 "isa_arm32.tcc"
	>));
	if(
#line 553 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82196 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82200 "isa_arm32.tcc"
	>(0x12000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82204 "isa_arm32.tcc"
	>));
	if(
#line 551 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82209 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82213 "isa_arm32.tcc"
	>(0x10000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82217 "isa_arm32.tcc"
	>));
	if(
#line 549 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82222 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82226 "isa_arm32.tcc"
	>(0xb0UL, 0xf7000f0UL, DecodeOpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82230 "isa_arm32.tcc"
	>));
	if(
#line 547 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82235 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82239 "isa_arm32.tcc"
	>(0x16000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82243 "isa_arm32.tcc"
	>));
	if(
#line 545 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82248 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82252 "isa_arm32.tcc"
	>(0x14000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82256 "isa_arm32.tcc"
	>));
	if(
#line 543 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82261 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82265 "isa_arm32.tcc"
	>(0x4000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82269 "isa_arm32.tcc"
	>));
	if(
#line 393 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82274 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82278 "isa_arm32.tcc"
	>(0x13000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82282 "isa_arm32.tcc"
	>));
	if(
#line 391 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82287 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82291 "isa_arm32.tcc"
	>(0x11000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82295 "isa_arm32.tcc"
	>));
	if(
#line 389 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82300 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82304 "isa_arm32.tcc"
	>(0x1000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82308 "isa_arm32.tcc"
	>));
	if(
#line 387 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82313 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82317 "isa_arm32.tcc"
	>(0x17000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82321 "isa_arm32.tcc"
	>));
	if(
#line 385 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82326 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82330 "isa_arm32.tcc"
	>(0x15000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82334 "isa_arm32.tcc"
	>));
	if(
#line 383 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82339 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82343 "isa_arm32.tcc"
	>(0x5000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82347 "isa_arm32.tcc"
	>));
	if(
#line 226 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82352 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82356 "isa_arm32.tcc"
	>(0x13000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82360 "isa_arm32.tcc"
	>));
	if(
#line 224 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82365 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82369 "isa_arm32.tcc"
	>(0x11000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82373 "isa_arm32.tcc"
	>));
	if(
#line 222 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82378 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82382 "isa_arm32.tcc"
	>(0x1000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82386 "isa_arm32.tcc"
	>));
	if(
#line 220 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82391 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82395 "isa_arm32.tcc"
	>(0x17000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82399 "isa_arm32.tcc"
	>));
	if(
#line 218 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82404 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82408 "isa_arm32.tcc"
	>(0x15000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82412 "isa_arm32.tcc"
	>));
	if(
#line 216 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82417 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82421 "isa_arm32.tcc"
	>(0x5000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82425 "isa_arm32.tcc"
	>));
	if(
#line 60 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82430 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82434 "isa_arm32.tcc"
	>(0x13000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82438 "isa_arm32.tcc"
	>));
	if(
#line 58 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82443 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82447 "isa_arm32.tcc"
	>(0x11000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82451 "isa_arm32.tcc"
	>));
	if(
#line 56 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82456 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82460 "isa_arm32.tcc"
	>(0x1000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82464 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82469 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82473 "isa_arm32.tcc"
	>(0x17000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82477 "isa_arm32.tcc"
	>));
	if(
#line 52 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82482 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82486 "isa_arm32.tcc"
	>(0x15000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82490 "isa_arm32.tcc"
	>));
	if(
#line 50 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82495 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82499 "isa_arm32.tcc"
	>(0x5000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82503 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82508 "isa_arm32.tcc"
	>(0x6600000UL, 0xf700010UL, DecodeOpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82512 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82517 "isa_arm32.tcc"
	>(0x4600000UL, 0xf700000UL, DecodeOpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82521 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82526 "isa_arm32.tcc"
	>(0x6200000UL, 0xf700010UL, DecodeOpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82530 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82535 "isa_arm32.tcc"
	>(0x4200000UL, 0xf700000UL, DecodeOpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82539 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82544 "isa_arm32.tcc"
	>(0x7600000UL, 0xf700010UL, DecodeOpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82548 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82553 "isa_arm32.tcc"
	>(0x7400000UL, 0xf700010UL, DecodeOpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82557 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82562 "isa_arm32.tcc"
	>(0x6400000UL, 0xf700010UL, DecodeOpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82566 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82571 "isa_arm32.tcc"
	>(0x5600000UL, 0xf700000UL, DecodeOpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82575 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82580 "isa_arm32.tcc"
	>(0x5400000UL, 0xf700000UL, DecodeOpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82584 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82589 "isa_arm32.tcc"
	>(0x4400000UL, 0xf700000UL, DecodeOpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82593 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82598 "isa_arm32.tcc"
	>(0x7200000UL, 0xf700010UL, DecodeOpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82602 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82607 "isa_arm32.tcc"
	>(0x7000000UL, 0xf700010UL, DecodeOpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82611 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82616 "isa_arm32.tcc"
	>(0x6000000UL, 0xf700010UL, DecodeOpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82620 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82625 "isa_arm32.tcc"
	>(0x5200000UL, 0xf700000UL, DecodeOpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82629 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82634 "isa_arm32.tcc"
	>(0x5000000UL, 0xf700000UL, DecodeOpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82638 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82643 "isa_arm32.tcc"
	>(0x4000000UL, 0xf700000UL, DecodeOpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82647 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82652 "isa_arm32.tcc"
	>(0x6700000UL, 0xf700010UL, DecodeOpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82656 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82661 "isa_arm32.tcc"
	>(0x4700000UL, 0xf700000UL, DecodeOpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82665 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82670 "isa_arm32.tcc"
	>(0x6300000UL, 0xf700010UL, DecodeOpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82674 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82679 "isa_arm32.tcc"
	>(0x4300000UL, 0xf700000UL, DecodeOpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82683 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82688 "isa_arm32.tcc"
	>(0x770f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82692 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82697 "isa_arm32.tcc"
	>(0x750f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82701 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82706 "isa_arm32.tcc"
	>(0x650f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82710 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82715 "isa_arm32.tcc"
	>(0x570f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82719 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82724 "isa_arm32.tcc"
	>(0x550f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82728 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82733 "isa_arm32.tcc"
	>(0x450f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82737 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82742 "isa_arm32.tcc"
	>(0x7700000UL, 0xf700010UL, DecodeOpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82746 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82751 "isa_arm32.tcc"
	>(0x7500000UL, 0xf700010UL, DecodeOpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82755 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82760 "isa_arm32.tcc"
	>(0x6500000UL, 0xf700010UL, DecodeOpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82764 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82769 "isa_arm32.tcc"
	>(0x5700000UL, 0xf700000UL, DecodeOpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82773 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82778 "isa_arm32.tcc"
	>(0x5500000UL, 0xf700000UL, DecodeOpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82782 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82787 "isa_arm32.tcc"
	>(0x4500000UL, 0xf700000UL, DecodeOpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82791 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82796 "isa_arm32.tcc"
	>(0x7300000UL, 0xf700010UL, DecodeOpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82800 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82805 "isa_arm32.tcc"
	>(0x7100000UL, 0xf700010UL, DecodeOpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82809 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82814 "isa_arm32.tcc"
	>(0x6100000UL, 0xf700010UL, DecodeOpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82818 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82823 "isa_arm32.tcc"
	>(0x5300000UL, 0xf700000UL, DecodeOpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82827 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82832 "isa_arm32.tcc"
	>(0x5100000UL, 0xf700000UL, DecodeOpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82836 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82841 "isa_arm32.tcc"
	>(0x4100000UL, 0xf700000UL, DecodeOpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82845 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82850 "isa_arm32.tcc"
	>(0x120f000UL, 0xfb0fff0UL, DecodeOpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82854 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82859 "isa_arm32.tcc"
	>(0x320f000UL, 0xfb0f000UL, DecodeOpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82863 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82868 "isa_arm32.tcc"
	>(0x10f0000UL, 0xfbf0fffUL, DecodeOpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82872 "isa_arm32.tcc"
	>));
	if(
#line 348 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULWY
#line 82877 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82881 "isa_arm32.tcc"
	>(0x12000a0UL, 0xff000b0UL, DecodeOpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82885 "isa_arm32.tcc"
	>));
	if(
#line 281 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULXY
#line 82890 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82894 "isa_arm32.tcc"
	>(0x1600080UL, 0xff00090UL, DecodeOpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82898 "isa_arm32.tcc"
	>));
	if(
#line 206 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAWY
#line 82903 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82907 "isa_arm32.tcc"
	>(0x1200080UL, 0xff000b0UL, DecodeOpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82911 "isa_arm32.tcc"
	>));
	if(
#line 129 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLALXY
#line 82916 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82920 "isa_arm32.tcc"
	>(0x1400080UL, 0xff00090UL, DecodeOpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82924 "isa_arm32.tcc"
	>));
	if(
#line 54 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAXY
#line 82929 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82933 "isa_arm32.tcc"
	>(0x1000080UL, 0xff00090UL, DecodeOpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82937 "isa_arm32.tcc"
	>));
	if(
#line 291 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMULL
#line 82942 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82946 "isa_arm32.tcc"
	>(0x800090UL, 0xfe000f0UL, DecodeOpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82950 "isa_arm32.tcc"
	>));
	if(
#line 239 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMLAL
#line 82955 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82959 "isa_arm32.tcc"
	>(0xa00090UL, 0xfe000f0UL, DecodeOpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82963 "isa_arm32.tcc"
	>));
	if(
#line 190 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULL
#line 82968 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82972 "isa_arm32.tcc"
	>(0xc00090UL, 0xfe000f0UL, DecodeOpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82976 "isa_arm32.tcc"
	>));
	if(
#line 138 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAL
#line 82981 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82985 "isa_arm32.tcc"
	>(0xe00090UL, 0xfe000f0UL, DecodeOpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82989 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82994 "isa_arm32.tcc"
	>(0x90UL, 0xfe000f0UL, DecodeOpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82998 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83003 "isa_arm32.tcc"
	>(0x200090UL, 0xfe000f0UL, DecodeOpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83007 "isa_arm32.tcc"
	>));
	if(
#line 165 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDSUB
#line 83012 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83016 "isa_arm32.tcc"
	>(0x1600050UL, 0xff000f0UL, DecodeOpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83020 "isa_arm32.tcc"
	>));
	if(
#line 127 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDADD
#line 83025 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83029 "isa_arm32.tcc"
	>(0x1400050UL, 0xff000f0UL, DecodeOpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83033 "isa_arm32.tcc"
	>));
	if(
#line 90 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QSUB
#line 83038 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83042 "isa_arm32.tcc"
	>(0x1200050UL, 0xff000f0UL, DecodeOpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83046 "isa_arm32.tcc"
	>));
	if(
#line 53 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QADD
#line 83051 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83055 "isa_arm32.tcc"
	>(0x1000050UL, 0xff000f0UL, DecodeOpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83059 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83064 "isa_arm32.tcc"
	>(0x1f00010UL, 0xff00090UL, DecodeOpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83068 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83073 "isa_arm32.tcc"
	>(0x1f00000UL, 0xff00010UL, DecodeOpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83077 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83082 "isa_arm32.tcc"
	>(0x3f00000UL, 0xff00000UL, DecodeOpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83086 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83091 "isa_arm32.tcc"
	>(0x1e00010UL, 0xff00090UL, DecodeOpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83095 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83100 "isa_arm32.tcc"
	>(0x1e00000UL, 0xff00010UL, DecodeOpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83104 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83109 "isa_arm32.tcc"
	>(0x3e00000UL, 0xff00000UL, DecodeOpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83113 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83118 "isa_arm32.tcc"
	>(0x1d00010UL, 0xff00090UL, DecodeOpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83122 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83127 "isa_arm32.tcc"
	>(0x1d00000UL, 0xff00010UL, DecodeOpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83131 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83136 "isa_arm32.tcc"
	>(0x3d00000UL, 0xff00000UL, DecodeOpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83140 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83145 "isa_arm32.tcc"
	>(0x1c00010UL, 0xff00090UL, DecodeOpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83149 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83154 "isa_arm32.tcc"
	>(0x1c00000UL, 0xff00010UL, DecodeOpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83158 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83163 "isa_arm32.tcc"
	>(0x3c00000UL, 0xff00000UL, DecodeOpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83167 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83172 "isa_arm32.tcc"
	>(0x1b00010UL, 0xff00090UL, DecodeOpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83176 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83181 "isa_arm32.tcc"
	>(0x1b00000UL, 0xff00010UL, DecodeOpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83185 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83190 "isa_arm32.tcc"
	>(0x3b00000UL, 0xff00000UL, DecodeOpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83194 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83199 "isa_arm32.tcc"
	>(0x1a00010UL, 0xff00090UL, DecodeOpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83203 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83208 "isa_arm32.tcc"
	>(0x1a00000UL, 0xff00010UL, DecodeOpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83212 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83217 "isa_arm32.tcc"
	>(0x3a00000UL, 0xff00000UL, DecodeOpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83221 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83226 "isa_arm32.tcc"
	>(0x1900010UL, 0xff00090UL, DecodeOpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83230 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83235 "isa_arm32.tcc"
	>(0x1900000UL, 0xff00010UL, DecodeOpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83239 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83244 "isa_arm32.tcc"
	>(0x3900000UL, 0xff00000UL, DecodeOpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83248 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83253 "isa_arm32.tcc"
	>(0x1800010UL, 0xff00090UL, DecodeOpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83257 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83262 "isa_arm32.tcc"
	>(0x1800000UL, 0xff00010UL, DecodeOpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83266 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83271 "isa_arm32.tcc"
	>(0x3800000UL, 0xff00000UL, DecodeOpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83275 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83280 "isa_arm32.tcc"
	>(0x1700010UL, 0xff00090UL, DecodeOpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83284 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83289 "isa_arm32.tcc"
	>(0x1700000UL, 0xff00010UL, DecodeOpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83293 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83298 "isa_arm32.tcc"
	>(0x3700000UL, 0xff00000UL, DecodeOpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83302 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83307 "isa_arm32.tcc"
	>(0x1500010UL, 0xff00090UL, DecodeOpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83311 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83316 "isa_arm32.tcc"
	>(0x1500000UL, 0xff00010UL, DecodeOpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83320 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83325 "isa_arm32.tcc"
	>(0x3500000UL, 0xff00000UL, DecodeOpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83329 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83334 "isa_arm32.tcc"
	>(0x1300010UL, 0xff00090UL, DecodeOpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83338 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83343 "isa_arm32.tcc"
	>(0x1300000UL, 0xff00010UL, DecodeOpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83347 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83352 "isa_arm32.tcc"
	>(0x3300000UL, 0xff00000UL, DecodeOpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83356 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83361 "isa_arm32.tcc"
	>(0x1100010UL, 0xff00090UL, DecodeOpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83365 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83370 "isa_arm32.tcc"
	>(0x1100000UL, 0xff00010UL, DecodeOpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83374 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83379 "isa_arm32.tcc"
	>(0x3100000UL, 0xff00000UL, DecodeOpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83383 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83388 "isa_arm32.tcc"
	>(0xf00010UL, 0xff00090UL, DecodeOpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83392 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83397 "isa_arm32.tcc"
	>(0xf00000UL, 0xff00010UL, DecodeOpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83401 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83406 "isa_arm32.tcc"
	>(0x2f00000UL, 0xff00000UL, DecodeOpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83410 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83415 "isa_arm32.tcc"
	>(0xe00010UL, 0xff00090UL, DecodeOpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83419 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83424 "isa_arm32.tcc"
	>(0xe00000UL, 0xff00010UL, DecodeOpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83428 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83433 "isa_arm32.tcc"
	>(0x2e00000UL, 0xff00000UL, DecodeOpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83437 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83442 "isa_arm32.tcc"
	>(0xd00010UL, 0xff00090UL, DecodeOpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83446 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83451 "isa_arm32.tcc"
	>(0xd00000UL, 0xff00010UL, DecodeOpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83455 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83460 "isa_arm32.tcc"
	>(0x2d00000UL, 0xff00000UL, DecodeOpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83464 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83469 "isa_arm32.tcc"
	>(0xc00010UL, 0xff00090UL, DecodeOpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83473 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83478 "isa_arm32.tcc"
	>(0xc00000UL, 0xff00010UL, DecodeOpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83482 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83487 "isa_arm32.tcc"
	>(0x2c00000UL, 0xff00000UL, DecodeOpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83491 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83496 "isa_arm32.tcc"
	>(0xb00010UL, 0xff00090UL, DecodeOpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83500 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83505 "isa_arm32.tcc"
	>(0xb00000UL, 0xff00010UL, DecodeOpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83509 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83514 "isa_arm32.tcc"
	>(0x2b00000UL, 0xff00000UL, DecodeOpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83518 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83523 "isa_arm32.tcc"
	>(0xa00010UL, 0xff00090UL, DecodeOpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83527 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83532 "isa_arm32.tcc"
	>(0xa00000UL, 0xff00010UL, DecodeOpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83536 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83541 "isa_arm32.tcc"
	>(0x2a00000UL, 0xff00000UL, DecodeOpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83545 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83550 "isa_arm32.tcc"
	>(0x900010UL, 0xff00090UL, DecodeOpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83554 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83559 "isa_arm32.tcc"
	>(0x900000UL, 0xff00010UL, DecodeOpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83563 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83568 "isa_arm32.tcc"
	>(0x2900000UL, 0xff00000UL, DecodeOpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83572 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83577 "isa_arm32.tcc"
	>(0x800010UL, 0xff00090UL, DecodeOpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83581 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83586 "isa_arm32.tcc"
	>(0x800000UL, 0xff00010UL, DecodeOpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83590 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83595 "isa_arm32.tcc"
	>(0x2800000UL, 0xff00000UL, DecodeOpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83599 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83604 "isa_arm32.tcc"
	>(0x700010UL, 0xff00090UL, DecodeOpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83608 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83613 "isa_arm32.tcc"
	>(0x700000UL, 0xff00010UL, DecodeOpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83617 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83622 "isa_arm32.tcc"
	>(0x2700000UL, 0xff00000UL, DecodeOpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83626 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83631 "isa_arm32.tcc"
	>(0x600010UL, 0xff00090UL, DecodeOpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83635 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83640 "isa_arm32.tcc"
	>(0x600000UL, 0xff00010UL, DecodeOpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83644 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83649 "isa_arm32.tcc"
	>(0x2600000UL, 0xff00000UL, DecodeOpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83653 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83658 "isa_arm32.tcc"
	>(0x500010UL, 0xff00090UL, DecodeOpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83662 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83667 "isa_arm32.tcc"
	>(0x500000UL, 0xff00010UL, DecodeOpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83671 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83676 "isa_arm32.tcc"
	>(0x2500000UL, 0xff00000UL, DecodeOpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83680 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83685 "isa_arm32.tcc"
	>(0x400010UL, 0xff00090UL, DecodeOpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83689 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83694 "isa_arm32.tcc"
	>(0x400000UL, 0xff00010UL, DecodeOpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83698 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83703 "isa_arm32.tcc"
	>(0x2400000UL, 0xff00000UL, DecodeOpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83707 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83712 "isa_arm32.tcc"
	>(0x300010UL, 0xff00090UL, DecodeOpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83716 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83721 "isa_arm32.tcc"
	>(0x300000UL, 0xff00010UL, DecodeOpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83725 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83730 "isa_arm32.tcc"
	>(0x2300000UL, 0xff00000UL, DecodeOpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83734 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83739 "isa_arm32.tcc"
	>(0x200010UL, 0xff00090UL, DecodeOpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83743 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83748 "isa_arm32.tcc"
	>(0x200000UL, 0xff00010UL, DecodeOpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83752 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83757 "isa_arm32.tcc"
	>(0x2200000UL, 0xff00000UL, DecodeOpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83761 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83766 "isa_arm32.tcc"
	>(0x100010UL, 0xff00090UL, DecodeOpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83770 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83775 "isa_arm32.tcc"
	>(0x100000UL, 0xff00010UL, DecodeOpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83779 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83784 "isa_arm32.tcc"
	>(0x2100000UL, 0xff00000UL, DecodeOpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83788 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83793 "isa_arm32.tcc"
	>(0x10UL, 0xff00090UL, DecodeOpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83797 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83802 "isa_arm32.tcc"
	>(0x0UL, 0xff00010UL, DecodeOpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83806 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83811 "isa_arm32.tcc"
	>(0x2000000UL, 0xff00000UL, DecodeOpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83815 "isa_arm32.tcc"
	>));
	if(
#line 259 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83820 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83824 "isa_arm32.tcc"
	>(0x1200030UL, 0xff000f0UL, DecodeOpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83828 "isa_arm32.tcc"
	>));
	if(
#line 227 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83833 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83837 "isa_arm32.tcc"
	>(0xfa000000UL, 0xfe000000UL, DecodeOpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83841 "isa_arm32.tcc"
	>));
	if(
#line 180 "/Users/gracia/Developer/svn/unisim/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BX
#line 83846 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83850 "isa_arm32.tcc"
	>(0x1200010UL, 0xff000f0UL, DecodeOpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83854 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83859 "isa_arm32.tcc"
	>(0xeb000000UL, 0xff000000UL, DecodeOpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83863 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83868 "isa_arm32.tcc"
	>(0xcb000000UL, 0xef000000UL, DecodeOpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83872 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83877 "isa_arm32.tcc"
	>(0x8b000000UL, 0xcf000000UL, DecodeOpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83881 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83886 "isa_arm32.tcc"
	>(0xb000000UL, 0x8f000000UL, DecodeOpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83890 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83895 "isa_arm32.tcc"
	>(0xea000000UL, 0xff000000UL, DecodeOpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83899 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83904 "isa_arm32.tcc"
	>(0xca000000UL, 0xef000000UL, DecodeOpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83908 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83913 "isa_arm32.tcc"
	>(0x8a000000UL, 0xcf000000UL, DecodeOpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83917 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83922 "isa_arm32.tcc"
	>(0xa000000UL, 0x8f000000UL, DecodeOpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83926 "isa_arm32.tcc"
	>));
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83936 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83941 "isa_arm32.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83950 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83953 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83958 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83962 "isa_arm32.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83968 "isa_arm32.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			operation->initialize_dependency_write_reglist();
			operation->initialize_dependency_write_rdlo();
			operation->initialize_dependency_write_rdhi();
			operation->initialize_dependency_write_rd();
			operation->initialize_dependency_write_rn();
			operation->initialize_dependency_read_crn();
			operation->initialize_dependency_read_crm();
			operation->initialize_dependency_read_reglist();
			operation->initialize_dependency_read_rs();
			operation->initialize_dependency_read_rn();
			operation->initialize_dependency_read_rm();
			operation->initialize_rdp1_init();
			operation->initialize_rdlo_init();
			operation->initialize_rdhi_init();
			operation->initialize_rs_init();
			operation->initialize_rd_init();
			operation->initialize_rm_init();
			operation->initialize_rn_init();
			operation->initialize_condition();
			return operation;
		}
	}
	operation = new Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84002 "isa_arm32.tcc"
	>(code, addr, "???");
	operation->initialize_dependency_write_reglist();
	operation->initialize_dependency_write_rdlo();
	operation->initialize_dependency_write_rdhi();
	operation->initialize_dependency_write_rd();
	operation->initialize_dependency_write_rn();
	operation->initialize_dependency_read_crn();
	operation->initialize_dependency_read_crm();
	operation->initialize_dependency_read_reglist();
	operation->initialize_dependency_read_rs();
	operation->initialize_dependency_read_rn();
	operation->initialize_dependency_read_rm();
	operation->initialize_rdp1_init();
	operation->initialize_rdlo_init();
	operation->initialize_rdhi_init();
	operation->initialize_rs_init();
	operation->initialize_rd_init();
	operation->initialize_rm_init();
	operation->initialize_rn_init();
	operation->initialize_condition();
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84032 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84037 "isa_arm32.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84047 "isa_arm32.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84066 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84069 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84074 "isa_arm32.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84083 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84116 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84119 "isa_arm32.tcc"
>
inline DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84124 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84128 "isa_arm32.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84136 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84173 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84178 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84182 "isa_arm32.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84188 "isa_arm32.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84194 "isa_arm32.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84202 "isa_arm32.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84224 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84227 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84232 "isa_arm32.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84244 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84249 "isa_arm32.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
