#include "isa_arm32.hh"
#include <cassert>
#line 75 "isa/arm32/arm32.isa"

#include "unisim/util/arithmetic/arithmetic.hh"
#include "unisim/component/cxx/processor/arm/exception.hh"
#include "unisim/kernel/logger/logger.hh"

using unisim::component::cxx::processor::arm::UndefinedInstructionException;
using unisim::kernel::logger::DebugInfo;
using unisim::kernel::logger::DebugWarning;
using unisim::kernel::logger::DebugError;
using unisim::kernel::logger::EndDebugInfo;
using unisim::kernel::logger::EndDebugWarning;
using unisim::kernel::logger::EndDebugError;
using unisim::util::arithmetic::Add32;
#line 18 "isa_arm32.tcc"
namespace unisim { namespace component { namespace cxx { namespace processor { namespace arm { namespace isa { namespace arm32 {
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31 "isa_arm32.tcc"
>::Operation(CodeType _code, typename CONFIG::address_t _addr, const char *_name)
:
noperands(
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
0
#line 37 "isa_arm32.tcc"
),
unit(
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
NO_UNIT_T
#line 42 "isa_arm32.tcc"
),
encoding(_code),
addr(_addr),
name(_name)
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61 "isa_arm32.tcc"
>::~Operation()
{
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72 "isa_arm32.tcc"
>
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
void
#line 76 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80 "isa_arm32.tcc"
>::profile(
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
map<uint64_t, uint32_t> &
#line 84 "isa_arm32.tcc"
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
prof
#line 87 "isa_arm32.tcc"
)
{
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/profiling.isa"
	{
		uint64_t val = GetEncoding();
		map<uint64_t, uint32_t>::iterator it = prof.find(val);
		if(it != prof.end()) {
			it->second = it->second + 1;
			} else {
			prof[val] = 1;
		}
	}
#line 100 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 108 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 115 "isa_arm32.tcc"
>::initialize_dependency_write_reglist()
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 120 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 128 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 135 "isa_arm32.tcc"
>::initialize_dependency_write_rdlo()
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 148 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 155 "isa_arm32.tcc"
>::initialize_dependency_write_rdhi()
{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 160 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 168 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 175 "isa_arm32.tcc"
>::initialize_dependency_write_rd()
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 180 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 185 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 188 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 195 "isa_arm32.tcc"
>::initialize_dependency_write_rn()
{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 200 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 208 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 215 "isa_arm32.tcc"
>::initialize_dependency_read_crn()
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 220 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 225 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 228 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 235 "isa_arm32.tcc"
>::initialize_dependency_read_crm()
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 240 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 248 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 255 "isa_arm32.tcc"
>::initialize_dependency_read_reglist()
{
#line 89 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 260 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 268 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 275 "isa_arm32.tcc"
>::initialize_dependency_read_rs()
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 280 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 288 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 295 "isa_arm32.tcc"
>::initialize_dependency_read_rn()
{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 300 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 308 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 315 "isa_arm32.tcc"
>::initialize_dependency_read_rm()
{
#line 86 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/dependency.isa"
	{}
#line 320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 328 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 332 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 336 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 340 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 343 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 350 "isa_arm32.tcc"
)
{
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		buffer << "Unknown instruction";
	}
#line 357 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 365 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 369 "isa_arm32.tcc"
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 373 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 377 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 380 "isa_arm32.tcc"
)
{
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	{
		throw UndefinedInstructionException<CONFIG>();
	}
#line 387 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 395 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 402 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdp1_init = 0;
	}
#line 409 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 417 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 424 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 68 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdlo_init = 0;
	}
#line 431 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 439 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 446 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rdhi_init = 0;
	}
#line 453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 461 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 468 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rs_init = 0;
	}
#line 475 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 483 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 490 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rd_init = 0;
	}
#line 497 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 505 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 512 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rm_init = 0;
	}
#line 519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 527 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 534 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
		rn_init = 0;
	}
#line 541 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 549 "isa_arm32.tcc"
>

void
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 556 "isa_arm32.tcc"
>::initialize_condition()
{
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/constructors_dec.isa"
	{
	}
#line 562 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 570 "isa_arm32.tcc"
>
class OpB_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 575 "isa_arm32.tcc"
>
{
public:
	OpB_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 661 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 665 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 668 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 672 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 675 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 713 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 717 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 720 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 731 "isa_arm32.tcc"
>
class OpB_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 736 "isa_arm32.tcc"
>
{
public:
	OpB_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 822 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 826 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 829 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 833 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 836 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 874 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 878 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 881 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 892 "isa_arm32.tcc"
>
class OpB_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 897 "isa_arm32.tcc"
>
{
public:
	OpB_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 983 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 987 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 990 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 994 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 997 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1035 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1039 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1042 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1053 "isa_arm32.tcc"
>
class OpB_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1058 "isa_arm32.tcc"
>
{
public:
	OpB_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1143 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1147 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1150 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1154 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1157 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1195 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1199 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1202 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1213 "isa_arm32.tcc"
>
class OpBl_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1218 "isa_arm32.tcc"
>
{
public:
	OpBl_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1304 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1308 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1311 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1315 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1318 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1356 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1360 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1363 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1374 "isa_arm32.tcc"
>
class OpBl_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1379 "isa_arm32.tcc"
>
{
public:
	OpBl_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1465 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1469 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1472 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1476 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1479 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1517 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1521 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1524 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1532 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1535 "isa_arm32.tcc"
>
class OpBl_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1540 "isa_arm32.tcc"
>
{
public:
	OpBl_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1626 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1630 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1633 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1637 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1640 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1678 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1682 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1685 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1696 "isa_arm32.tcc"
>
class OpBl_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1701 "isa_arm32.tcc"
>
{
public:
	OpBl_1110(CodeType code, typename CONFIG::address_t addr);
	int32_t imm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1786 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1790 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1793 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1797 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1800 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1838 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1842 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1845 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1856 "isa_arm32.tcc"
>
class OpBx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1861 "isa_arm32.tcc"
>
{
public:
	OpBx(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1874 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1878 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1881 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1885 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1888 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1926 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1930 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1933 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 1944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1947 "isa_arm32.tcc"
>
class OpBlx_1 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 1952 "isa_arm32.tcc"
>
{
public:
	OpBlx_1(CodeType code, typename CONFIG::address_t addr);
	uint32_t h;
	int32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 1962 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 1966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 1969 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 1973 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 1976 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2014 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2018 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2021 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2032 "isa_arm32.tcc"
>
class OpBlx_2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2037 "isa_arm32.tcc"
>
{
public:
	OpBlx_2(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t sbo2;
	uint32_t sbo3;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2050 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2054 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2057 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2061 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2064 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2102 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2106 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2109 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2123 "isa_arm32.tcc"
>
class OpAnd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2128 "isa_arm32.tcc"
>
{
public:
	OpAnd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2141 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2145 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2148 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2152 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2155 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2193 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2197 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2200 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2214 "isa_arm32.tcc"
>
class OpAnd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2219 "isa_arm32.tcc"
>
{
public:
	OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2233 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2237 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2240 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2244 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2247 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2285 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2289 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2292 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2309 "isa_arm32.tcc"
>
class OpAnd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2314 "isa_arm32.tcc"
>
{
public:
	OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2328 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2332 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2335 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2339 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2342 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2380 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2384 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2387 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2407 "isa_arm32.tcc"
>
class OpAnds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2412 "isa_arm32.tcc"
>
{
public:
	OpAnds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2425 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2429 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2432 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2436 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2439 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2477 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2481 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2484 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2498 "isa_arm32.tcc"
>
class OpAnds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2503 "isa_arm32.tcc"
>
{
public:
	OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2517 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2521 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2524 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2528 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2531 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2569 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2573 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2576 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2593 "isa_arm32.tcc"
>
class OpAnds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2598 "isa_arm32.tcc"
>
{
public:
	OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2612 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2616 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2619 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2623 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2626 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2664 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2668 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2671 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2691 "isa_arm32.tcc"
>
class OpEor_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2696 "isa_arm32.tcc"
>
{
public:
	OpEor_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2709 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2713 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2716 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2720 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2723 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2761 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2765 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2768 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2782 "isa_arm32.tcc"
>
class OpEor_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2787 "isa_arm32.tcc"
>
{
public:
	OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2801 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2805 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2808 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2812 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2815 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2853 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2857 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2860 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2877 "isa_arm32.tcc"
>
class OpEor_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2882 "isa_arm32.tcc"
>
{
public:
	OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2896 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2900 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2903 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 2907 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 2910 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2948 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2952 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 2955 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 2972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2975 "isa_arm32.tcc"
>
class OpEors_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 2980 "isa_arm32.tcc"
>
{
public:
	OpEors_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 2993 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 2997 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3000 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3004 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3007 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3045 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3049 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3052 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3066 "isa_arm32.tcc"
>
class OpEors_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3071 "isa_arm32.tcc"
>
{
public:
	OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3085 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3089 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3092 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3096 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3099 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3137 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3141 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3144 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3161 "isa_arm32.tcc"
>
class OpEors_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3166 "isa_arm32.tcc"
>
{
public:
	OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3180 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3184 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3187 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3191 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3194 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3232 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3236 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3239 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3259 "isa_arm32.tcc"
>
class OpSub_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3264 "isa_arm32.tcc"
>
{
public:
	OpSub_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3277 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3284 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3288 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3291 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3329 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3333 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3336 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3350 "isa_arm32.tcc"
>
class OpSub_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3355 "isa_arm32.tcc"
>
{
public:
	OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3369 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3373 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3376 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3380 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3383 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3421 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3425 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3428 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3442 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3445 "isa_arm32.tcc"
>
class OpSub_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3450 "isa_arm32.tcc"
>
{
public:
	OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3464 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3468 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3471 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3475 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3478 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3516 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3520 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3523 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3540 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3543 "isa_arm32.tcc"
>
class OpSubs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3548 "isa_arm32.tcc"
>
{
public:
	OpSubs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3561 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3565 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3568 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3572 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3575 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3613 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3617 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3620 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3634 "isa_arm32.tcc"
>
class OpSubs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3639 "isa_arm32.tcc"
>
{
public:
	OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3653 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3657 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3660 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3664 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3667 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3705 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3709 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3712 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3729 "isa_arm32.tcc"
>
class OpSubs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3734 "isa_arm32.tcc"
>
{
public:
	OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3748 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3752 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3755 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3759 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3762 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3800 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3804 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3807 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3827 "isa_arm32.tcc"
>
class OpRsb_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3832 "isa_arm32.tcc"
>
{
public:
	OpRsb_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3845 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3849 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3852 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3856 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3897 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3901 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3904 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 3915 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3918 "isa_arm32.tcc"
>
class OpRsb_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 3923 "isa_arm32.tcc"
>
{
public:
	OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3937 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3941 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3944 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 3948 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 3951 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 3989 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 3993 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 3996 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4013 "isa_arm32.tcc"
>
class OpRsb_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4018 "isa_arm32.tcc"
>
{
public:
	OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4032 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4036 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4039 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4043 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4046 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4084 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4088 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4091 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4108 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4111 "isa_arm32.tcc"
>
class OpRsbs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4116 "isa_arm32.tcc"
>
{
public:
	OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4129 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4133 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4136 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4140 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4143 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4181 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4185 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4188 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4202 "isa_arm32.tcc"
>
class OpRsbs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4207 "isa_arm32.tcc"
>
{
public:
	OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4221 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4225 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4228 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4232 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4235 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4273 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4277 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4280 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4294 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4297 "isa_arm32.tcc"
>
class OpRsbs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4302 "isa_arm32.tcc"
>
{
public:
	OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4316 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4320 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4323 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4327 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4330 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4368 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4372 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4375 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4395 "isa_arm32.tcc"
>
class OpAdd_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4400 "isa_arm32.tcc"
>
{
public:
	OpAdd_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4413 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4417 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4420 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4424 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4427 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4465 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4469 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4472 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4486 "isa_arm32.tcc"
>
class OpAdd_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4491 "isa_arm32.tcc"
>
{
public:
	OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4505 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4509 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4512 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4516 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4519 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4557 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4561 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4564 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4581 "isa_arm32.tcc"
>
class OpAdd_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4586 "isa_arm32.tcc"
>
{
public:
	OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4600 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4604 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4607 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4611 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4614 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4652 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4656 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4659 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4679 "isa_arm32.tcc"
>
class OpAdds_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4684 "isa_arm32.tcc"
>
{
public:
	OpAdds_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4697 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4701 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4704 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4708 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4711 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4749 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4753 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4756 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4770 "isa_arm32.tcc"
>
class OpAdds_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4775 "isa_arm32.tcc"
>
{
public:
	OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4789 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4793 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4796 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4800 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4803 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4841 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4845 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4848 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4865 "isa_arm32.tcc"
>
class OpAdds_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4870 "isa_arm32.tcc"
>
{
public:
	OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4884 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4891 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4898 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4936 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4940 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4943 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 4960 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4963 "isa_arm32.tcc"
>
class OpAdc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 4968 "isa_arm32.tcc"
>
{
public:
	OpAdc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 4981 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 4985 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 4988 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 4992 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 4995 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5033 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5037 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5040 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5054 "isa_arm32.tcc"
>
class OpAdc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5059 "isa_arm32.tcc"
>
{
public:
	OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5073 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5077 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5080 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5084 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5087 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5125 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5129 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5132 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5149 "isa_arm32.tcc"
>
class OpAdc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5154 "isa_arm32.tcc"
>
{
public:
	OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5168 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5172 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5175 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5179 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5182 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5220 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5224 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5227 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5244 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5247 "isa_arm32.tcc"
>
class OpAdcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5252 "isa_arm32.tcc"
>
{
public:
	OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5265 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5269 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5272 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5276 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5317 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5321 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5324 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5338 "isa_arm32.tcc"
>
class OpAdcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5343 "isa_arm32.tcc"
>
{
public:
	OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5357 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5361 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5364 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5368 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5371 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5409 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5413 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5416 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5430 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5433 "isa_arm32.tcc"
>
class OpAdcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5438 "isa_arm32.tcc"
>
{
public:
	OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5452 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5456 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5459 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5463 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5466 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5504 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5508 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5511 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5531 "isa_arm32.tcc"
>
class OpSbc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5536 "isa_arm32.tcc"
>
{
public:
	OpSbc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5549 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5553 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5556 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5560 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5563 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5601 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5605 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5608 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5622 "isa_arm32.tcc"
>
class OpSbc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5627 "isa_arm32.tcc"
>
{
public:
	OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5641 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5645 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5648 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5652 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5655 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5693 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5697 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5700 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5717 "isa_arm32.tcc"
>
class OpSbc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5722 "isa_arm32.tcc"
>
{
public:
	OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5736 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5740 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5743 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5747 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5750 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5788 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5792 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5795 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5815 "isa_arm32.tcc"
>
class OpSbcs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5820 "isa_arm32.tcc"
>
{
public:
	OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5833 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5837 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5840 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5844 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5847 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5885 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5889 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5892 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5903 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5906 "isa_arm32.tcc"
>
class OpSbcs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 5911 "isa_arm32.tcc"
>
{
public:
	OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5925 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5929 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5932 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 5936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 5939 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 5977 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 5981 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 5984 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 5998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6001 "isa_arm32.tcc"
>
class OpSbcs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6006 "isa_arm32.tcc"
>
{
public:
	OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6020 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6024 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6027 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6031 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6034 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6072 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6076 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6079 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6099 "isa_arm32.tcc"
>
class OpRsc_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6104 "isa_arm32.tcc"
>
{
public:
	OpRsc_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6117 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6121 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6124 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6128 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6131 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6169 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6173 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6176 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6187 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6190 "isa_arm32.tcc"
>
class OpRsc_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6195 "isa_arm32.tcc"
>
{
public:
	OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6209 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6213 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6216 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6220 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6223 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6261 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6265 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6268 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6282 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6285 "isa_arm32.tcc"
>
class OpRsc_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6290 "isa_arm32.tcc"
>
{
public:
	OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6304 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6308 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6311 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6315 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6318 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6356 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6360 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6363 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6380 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6383 "isa_arm32.tcc"
>
class OpRscs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6388 "isa_arm32.tcc"
>
{
public:
	OpRscs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6401 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6405 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6408 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6412 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6415 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6453 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6457 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6460 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6474 "isa_arm32.tcc"
>
class OpRscs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6479 "isa_arm32.tcc"
>
{
public:
	OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6493 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6497 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6500 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6504 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6507 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6545 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6549 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6552 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6569 "isa_arm32.tcc"
>
class OpRscs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6574 "isa_arm32.tcc"
>
{
public:
	OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6588 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6592 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6595 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6599 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6602 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6640 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6644 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6647 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6667 "isa_arm32.tcc"
>
class OpTst_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6672 "isa_arm32.tcc"
>
{
public:
	OpTst_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6685 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6689 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6692 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6696 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6699 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6737 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6741 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6744 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6758 "isa_arm32.tcc"
>
class OpTst_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6763 "isa_arm32.tcc"
>
{
public:
	OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6777 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6781 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6784 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6788 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6791 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6829 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6833 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6836 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6853 "isa_arm32.tcc"
>
class OpTst_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6858 "isa_arm32.tcc"
>
{
public:
	OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6872 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6876 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6879 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6883 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6886 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6924 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6928 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6931 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 6948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6951 "isa_arm32.tcc"
>
class OpTeq_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 6956 "isa_arm32.tcc"
>
{
public:
	OpTeq_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 6969 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 6973 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 6976 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 6980 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 6983 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7021 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7025 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7028 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7042 "isa_arm32.tcc"
>
class OpTeq_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7047 "isa_arm32.tcc"
>
{
public:
	OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7061 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7065 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7068 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7072 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7075 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7113 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7117 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7120 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7137 "isa_arm32.tcc"
>
class OpTeq_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7142 "isa_arm32.tcc"
>
{
public:
	OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7156 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7160 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7163 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7167 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7170 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7208 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7212 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7215 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7235 "isa_arm32.tcc"
>
class OpCmp_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7240 "isa_arm32.tcc"
>
{
public:
	OpCmp_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7253 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7257 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7260 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7264 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7267 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7305 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7309 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7312 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7326 "isa_arm32.tcc"
>
class OpCmp_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7331 "isa_arm32.tcc"
>
{
public:
	OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7345 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7349 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7352 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7356 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7359 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7397 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7401 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7404 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7421 "isa_arm32.tcc"
>
class OpCmp_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7426 "isa_arm32.tcc"
>
{
public:
	OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7440 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7447 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7451 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7454 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7492 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7496 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7499 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7519 "isa_arm32.tcc"
>
class OpCmn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7524 "isa_arm32.tcc"
>
{
public:
	OpCmn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7537 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7541 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7544 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7548 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7551 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7589 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7593 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7596 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7607 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7610 "isa_arm32.tcc"
>
class OpCmn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7615 "isa_arm32.tcc"
>
{
public:
	OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7629 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7633 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7636 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7640 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7643 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7681 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7685 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7688 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7705 "isa_arm32.tcc"
>
class OpCmn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7710 "isa_arm32.tcc"
>
{
public:
	OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t sbz;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7724 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7728 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7731 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7735 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7738 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7776 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7780 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7783 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7803 "isa_arm32.tcc"
>
class OpOrr_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7808 "isa_arm32.tcc"
>
{
public:
	OpOrr_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7821 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7825 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7828 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7835 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7873 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7877 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7880 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7894 "isa_arm32.tcc"
>
class OpOrr_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7899 "isa_arm32.tcc"
>
{
public:
	OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7913 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7917 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7920 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 7924 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 7927 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 7965 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 7969 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 7972 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 7986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7989 "isa_arm32.tcc"
>
class OpOrr_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 7994 "isa_arm32.tcc"
>
{
public:
	OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8008 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8012 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8015 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8019 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8022 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8060 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8064 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8067 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8087 "isa_arm32.tcc"
>
class OpOrrs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8092 "isa_arm32.tcc"
>
{
public:
	OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8105 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8112 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8116 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8119 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8157 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8161 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8164 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8175 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8178 "isa_arm32.tcc"
>
class OpOrrs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8183 "isa_arm32.tcc"
>
{
public:
	OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8197 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8201 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8204 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8208 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8211 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8249 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8253 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8256 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8273 "isa_arm32.tcc"
>
class OpOrrs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8278 "isa_arm32.tcc"
>
{
public:
	OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8292 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8296 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8299 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8303 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8306 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8344 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8348 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8351 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8371 "isa_arm32.tcc"
>
class OpMov_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8376 "isa_arm32.tcc"
>
{
public:
	OpMov_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8389 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8393 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8396 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8400 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8403 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8441 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8445 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8448 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8456 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8459 "isa_arm32.tcc"
>
class OpMov_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8464 "isa_arm32.tcc"
>
{
public:
	OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8478 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8482 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8485 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8489 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8492 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8530 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8534 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8537 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8548 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8551 "isa_arm32.tcc"
>
class OpMov_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8556 "isa_arm32.tcc"
>
{
public:
	OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8570 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8574 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8577 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8581 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8584 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8622 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8626 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8629 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8646 "isa_arm32.tcc"
>
class OpMovs_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8651 "isa_arm32.tcc"
>
{
public:
	OpMovs_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8664 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8668 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8671 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8675 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8678 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8716 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8720 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8723 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8731 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8734 "isa_arm32.tcc"
>
class OpMovs_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8739 "isa_arm32.tcc"
>
{
public:
	OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8753 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8757 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8760 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8764 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8767 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8805 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8809 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8812 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8826 "isa_arm32.tcc"
>
class OpMovs_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8831 "isa_arm32.tcc"
>
{
public:
	OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbz;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8845 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8849 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8852 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8856 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8897 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8901 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8904 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 8918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8921 "isa_arm32.tcc"
>
class OpBic_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 8926 "isa_arm32.tcc"
>
{
public:
	OpBic_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8939 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8946 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 8950 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 8953 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 8991 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 8995 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 8998 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9012 "isa_arm32.tcc"
>
class OpBic_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9017 "isa_arm32.tcc"
>
{
public:
	OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9031 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9035 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9038 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9042 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9045 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9083 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9087 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9090 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9104 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9107 "isa_arm32.tcc"
>
class OpBic_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9112 "isa_arm32.tcc"
>
{
public:
	OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9126 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9130 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9133 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9137 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9140 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9178 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9182 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9185 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9205 "isa_arm32.tcc"
>
class OpBics_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9210 "isa_arm32.tcc"
>
{
public:
	OpBics_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9223 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9227 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9230 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9234 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9237 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9275 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9279 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9282 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9293 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9296 "isa_arm32.tcc"
>
class OpBics_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9301 "isa_arm32.tcc"
>
{
public:
	OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9315 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9319 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9322 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9326 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9329 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9367 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9371 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9374 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9391 "isa_arm32.tcc"
>
class OpBics_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9396 "isa_arm32.tcc"
>
{
public:
	OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9410 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9414 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9417 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9421 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9424 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9462 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9466 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9469 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9489 "isa_arm32.tcc"
>
class OpMvn_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9494 "isa_arm32.tcc"
>
{
public:
	OpMvn_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9507 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9511 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9514 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9518 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9521 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9559 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9563 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9566 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9577 "isa_arm32.tcc"
>
class OpMvn_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9582 "isa_arm32.tcc"
>
{
public:
	OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9596 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9600 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9603 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9648 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9652 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9655 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9669 "isa_arm32.tcc"
>
class OpMvn_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9674 "isa_arm32.tcc"
>
{
public:
	OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9688 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9692 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9695 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9699 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9702 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9740 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9744 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9747 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9764 "isa_arm32.tcc"
>
class OpMvns_32imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9769 "isa_arm32.tcc"
>
{
public:
	OpMvns_32imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9782 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9786 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9789 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9793 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9796 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9834 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9838 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9841 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9852 "isa_arm32.tcc"
>
class OpMvns_imm_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9857 "isa_arm32.tcc"
>
{
public:
	OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9871 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9875 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9878 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9882 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9885 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9923 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9927 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9930 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 9941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9944 "isa_arm32.tcc"
>
class OpMvns_reg_shift : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 9949 "isa_arm32.tcc"
>
{
public:
	OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rs;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 9963 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 9967 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 9970 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 9974 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 9977 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10015 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10019 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10022 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10039 "isa_arm32.tcc"
>
class OpQadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10044 "isa_arm32.tcc"
>
{
public:
	OpQadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10057 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10061 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10064 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10068 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10071 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10109 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10113 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10116 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10124 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10127 "isa_arm32.tcc"
>
class OpQsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10132 "isa_arm32.tcc"
>
{
public:
	OpQsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10145 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10149 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10152 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10156 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10159 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10197 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10201 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10204 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10215 "isa_arm32.tcc"
>
class OpQdadd : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10220 "isa_arm32.tcc"
>
{
public:
	OpQdadd(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10233 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10237 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10240 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10244 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10247 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10285 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10289 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10292 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10303 "isa_arm32.tcc"
>
class OpQdsub : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10308 "isa_arm32.tcc"
>
{
public:
	OpQdsub(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10321 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10325 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10328 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10332 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10335 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10373 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10377 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10380 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10391 "isa_arm32.tcc"
>
class OpMla : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10396 "isa_arm32.tcc"
>
{
public:
	OpMla(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10410 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10414 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10417 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10421 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10424 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10462 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10466 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10469 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10489 "isa_arm32.tcc"
>
class OpMul : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10494 "isa_arm32.tcc"
>
{
public:
	OpMul(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10508 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10512 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10515 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10519 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10522 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10560 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10564 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10567 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10584 "isa_arm32.tcc"
>
class OpSmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10589 "isa_arm32.tcc"
>
{
public:
	OpSmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10603 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10610 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10617 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10655 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10659 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10662 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10685 "isa_arm32.tcc"
>
class OpSmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10690 "isa_arm32.tcc"
>
{
public:
	OpSmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10704 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10708 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10711 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10715 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10718 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10756 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10760 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10763 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10777 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10780 "isa_arm32.tcc"
>
class OpUmlal : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10785 "isa_arm32.tcc"
>
{
public:
	OpUmlal(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10799 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10803 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10806 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10810 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10813 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10851 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10855 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10858 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
	virtual
	void
	initialize_rdhi_init();
	virtual
	void
	initialize_rdlo_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10881 "isa_arm32.tcc"
>
class OpUmull : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10886 "isa_arm32.tcc"
>
{
public:
	OpUmull(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t s;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10900 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10904 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10907 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 10911 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 10914 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10952 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 10956 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 10959 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rs_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 10973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10976 "isa_arm32.tcc"
>
class OpSmlaxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 10981 "isa_arm32.tcc"
>
{
public:
	OpSmlaxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 10996 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11000 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11003 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11007 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11010 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11048 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11052 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11055 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11066 "isa_arm32.tcc"
>
class OpSmlalxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11071 "isa_arm32.tcc"
>
{
public:
	OpSmlalxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rdhi;
	uint32_t rdlo;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11086 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11093 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11097 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11100 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11138 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11142 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11145 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11156 "isa_arm32.tcc"
>
class OpSmlawy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11161 "isa_arm32.tcc"
>
{
public:
	OpSmlawy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t rn;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11175 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11179 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11182 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11186 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11189 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11227 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11231 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11234 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11242 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11245 "isa_arm32.tcc"
>
class OpSmulxy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11250 "isa_arm32.tcc"
>
{
public:
	OpSmulxy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t x;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11265 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11269 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11272 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11276 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11317 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11321 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11324 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11335 "isa_arm32.tcc"
>
class OpSmulwy : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11340 "isa_arm32.tcc"
>
{
public:
	OpSmulwy(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rs;
	uint32_t y;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11354 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11358 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11361 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11365 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11368 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11406 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11410 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11413 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11424 "isa_arm32.tcc"
>
class OpMrs : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11429 "isa_arm32.tcc"
>
{
public:
	OpMrs(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t rd;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11440 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11447 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11451 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11454 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11492 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11496 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11499 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11510 "isa_arm32.tcc"
>
class OpMsr_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11515 "isa_arm32.tcc"
>
{
public:
	OpMsr_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rotate_imm;
	uint32_t imm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11528 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11532 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11535 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11539 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11542 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11580 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11584 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11587 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11598 "isa_arm32.tcc"
>
class OpMsr_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11603 "isa_arm32.tcc"
>
{
public:
	OpMsr_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t r;
	uint32_t mask;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11615 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11619 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11622 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11626 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11629 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11667 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11671 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11674 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11685 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11688 "isa_arm32.tcc"
>
class OpLdr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11693 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11706 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11710 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11713 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11717 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11720 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11758 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11762 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11765 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11776 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11779 "isa_arm32.tcc"
>
class OpLdr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11784 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11797 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11801 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11804 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11808 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11811 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11849 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11853 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11856 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11867 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11870 "isa_arm32.tcc"
>
class OpLdr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11875 "isa_arm32.tcc"
>
{
public:
	OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11888 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11892 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11895 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11899 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11902 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11940 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11944 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11947 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 11958 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11961 "isa_arm32.tcc"
>
class OpLdr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 11966 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 11981 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 11985 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 11988 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 11992 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 11995 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12033 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12037 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12040 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12060 "isa_arm32.tcc"
>
class OpLdr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12065 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12080 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12084 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12087 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12091 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12094 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12132 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12136 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12139 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12159 "isa_arm32.tcc"
>
class OpLdr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12164 "isa_arm32.tcc"
>
{
public:
	OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12179 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12183 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12186 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12190 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12193 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12231 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12235 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12238 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12258 "isa_arm32.tcc"
>
class OpLdrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12263 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12276 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12280 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12283 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12287 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12290 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12328 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12332 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12335 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12349 "isa_arm32.tcc"
>
class OpLdrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12354 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12367 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12371 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12374 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12378 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12381 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12419 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12423 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12426 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12440 "isa_arm32.tcc"
>
class OpLdrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12445 "isa_arm32.tcc"
>
{
public:
	OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12458 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12462 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12465 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12469 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12472 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12510 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12514 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12517 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12531 "isa_arm32.tcc"
>
class OpLdrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12536 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12551 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12555 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12558 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12562 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12565 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12603 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12607 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12610 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12630 "isa_arm32.tcc"
>
class OpLdrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12635 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12650 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12654 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12657 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12661 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12664 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12702 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12706 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12709 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12729 "isa_arm32.tcc"
>
class OpLdrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12734 "isa_arm32.tcc"
>
{
public:
	OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12749 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12756 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12760 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12763 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12801 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12805 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12808 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12828 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12833 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12845 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12849 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12852 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12856 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12859 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12897 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12901 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12904 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 12912 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12915 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 12920 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12932 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12939 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 12943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 12946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 12984 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 12988 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 12991 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13005 "isa_arm32.tcc"
>
class OpLdrb_rd15_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13010 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13022 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13026 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13029 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13033 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13036 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13074 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13078 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13081 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13092 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13097 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13111 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13115 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13118 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13122 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13125 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13163 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13167 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13170 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13178 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13181 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13186 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13200 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13204 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13207 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13211 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13214 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13252 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13256 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13259 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13276 "isa_arm32.tcc"
>
class OpLdrb_rd15_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13281 "isa_arm32.tcc"
>
{
public:
	OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13295 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13299 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13302 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13306 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13309 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13347 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13351 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13354 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13365 "isa_arm32.tcc"
>
class OpLdrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13370 "isa_arm32.tcc"
>
{
public:
	OpLdrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13383 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13387 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13390 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13394 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13397 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13435 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13439 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13442 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13456 "isa_arm32.tcc"
>
class OpLdrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13461 "isa_arm32.tcc"
>
{
public:
	OpLdrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13476 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13480 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13483 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13487 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13490 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13528 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13532 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13535 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13552 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13555 "isa_arm32.tcc"
>
class OpLdrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13560 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13573 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13577 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13580 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13584 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13587 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13625 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13629 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13632 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13646 "isa_arm32.tcc"
>
class OpLdrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13651 "isa_arm32.tcc"
>
{
public:
	OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13666 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13673 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13677 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13680 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13718 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13722 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13725 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13745 "isa_arm32.tcc"
>
class OpStr_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13750 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13763 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13767 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13770 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13774 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13777 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13815 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13819 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13822 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13836 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13839 "isa_arm32.tcc"
>
class OpStr_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13844 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13857 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13861 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13864 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13868 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13871 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13909 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13913 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13916 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 13930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13933 "isa_arm32.tcc"
>
class OpStr_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 13938 "isa_arm32.tcc"
>
{
public:
	OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 13951 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 13955 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 13958 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 13962 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 13965 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14003 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14007 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14010 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14027 "isa_arm32.tcc"
>
class OpStr_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14032 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14047 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14051 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14054 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14058 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14061 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14099 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14103 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14106 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14123 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14126 "isa_arm32.tcc"
>
class OpStr_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14131 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14146 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14150 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14153 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14157 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14160 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14198 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14202 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14205 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14225 "isa_arm32.tcc"
>
class OpStr_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14230 "isa_arm32.tcc"
>
{
public:
	OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14245 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14249 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14252 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14256 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14259 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14297 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14301 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14304 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14321 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14324 "isa_arm32.tcc"
>
class OpStrb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14329 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14342 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14346 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14349 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14353 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14356 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14394 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14398 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14401 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14418 "isa_arm32.tcc"
>
class OpStrb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14423 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14436 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14440 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14443 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14447 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14450 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14488 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14492 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14495 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14509 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14512 "isa_arm32.tcc"
>
class OpStrb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14517 "isa_arm32.tcc"
>
{
public:
	OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14530 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14534 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14537 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14541 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14544 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14582 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14586 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14589 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14606 "isa_arm32.tcc"
>
class OpStrb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14611 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14626 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14630 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14633 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14637 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14640 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14678 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14682 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14685 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14705 "isa_arm32.tcc"
>
class OpStrb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14710 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14725 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14729 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14732 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14736 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14739 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14777 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14781 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14784 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14804 "isa_arm32.tcc"
>
class OpStrb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14809 "isa_arm32.tcc"
>
{
public:
	OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14824 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14828 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14831 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14835 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14838 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14876 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14880 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14883 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14903 "isa_arm32.tcc"
>
class OpStrt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14908 "isa_arm32.tcc"
>
{
public:
	OpStrt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14921 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14925 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14928 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 14932 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 14935 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 14973 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 14977 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 14980 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 14994 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 14997 "isa_arm32.tcc"
>
class OpStrt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15002 "isa_arm32.tcc"
>
{
public:
	OpStrt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15017 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15021 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15024 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15028 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15031 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15069 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15073 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15076 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15096 "isa_arm32.tcc"
>
class OpStrbt_imm : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15101 "isa_arm32.tcc"
>
{
public:
	OpStrbt_imm(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15114 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15118 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15121 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15125 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15128 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15166 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15170 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15173 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15187 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15190 "isa_arm32.tcc"
>
class OpStrbt_reg : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15195 "isa_arm32.tcc"
>
{
public:
	OpStrbt_reg(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t shift_imm;
	uint32_t shift;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15210 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15214 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15217 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15221 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15224 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15262 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15266 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15269 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15289 "isa_arm32.tcc"
>
class OpLdrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15294 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15308 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15312 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15315 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15319 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15322 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15360 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15364 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15367 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15381 "isa_arm32.tcc"
>
class OpLdrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15386 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15400 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15404 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15407 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15411 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15414 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15452 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15456 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15459 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15470 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15473 "isa_arm32.tcc"
>
class OpLdrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15478 "isa_arm32.tcc"
>
{
public:
	OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15492 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15496 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15499 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15503 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15506 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15544 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15548 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15551 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15565 "isa_arm32.tcc"
>
class OpLdrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15570 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15584 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15588 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15591 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15595 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15598 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15636 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15640 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15643 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15660 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15663 "isa_arm32.tcc"
>
class OpLdrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15668 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15682 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15686 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15689 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15693 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15696 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15734 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15738 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15741 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15761 "isa_arm32.tcc"
>
class OpLdrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15766 "isa_arm32.tcc"
>
{
public:
	OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15780 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15784 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15787 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15791 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15794 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15832 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15836 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15839 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15859 "isa_arm32.tcc"
>
class OpLdrsh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15864 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15878 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15882 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15885 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15889 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15892 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15930 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15934 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15937 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 15948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15951 "isa_arm32.tcc"
>
class OpLdrsh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 15956 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 15970 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 15974 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 15977 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 15981 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 15984 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16022 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16026 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16029 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16040 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16043 "isa_arm32.tcc"
>
class OpLdrsh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16048 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16062 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16066 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16069 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16073 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16076 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16114 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16118 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16121 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16135 "isa_arm32.tcc"
>
class OpLdrsh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16140 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16154 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16158 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16161 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16165 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16168 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16206 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16210 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16213 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16233 "isa_arm32.tcc"
>
class OpLdrsh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16238 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16252 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16256 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16259 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16263 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16266 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16304 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16308 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16311 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16331 "isa_arm32.tcc"
>
class OpLdrsh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16336 "isa_arm32.tcc"
>
{
public:
	OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16350 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16354 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16357 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16361 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16364 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16402 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16406 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16409 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16429 "isa_arm32.tcc"
>
class OpLdrsb_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16434 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16448 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16452 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16455 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16459 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16462 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16500 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16504 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16507 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16518 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16521 "isa_arm32.tcc"
>
class OpLdrsb_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16526 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16540 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16544 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16547 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16551 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16554 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16592 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16596 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16599 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16613 "isa_arm32.tcc"
>
class OpLdrsb_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16618 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16632 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16636 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16639 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16643 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16646 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16684 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16688 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16691 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16705 "isa_arm32.tcc"
>
class OpLdrsb_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16710 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16724 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16728 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16731 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16735 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16738 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16776 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16780 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16783 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16803 "isa_arm32.tcc"
>
class OpLdrsb_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16808 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16822 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16826 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16829 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16833 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16836 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16874 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16878 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16881 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16901 "isa_arm32.tcc"
>
class OpLdrsb_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16906 "isa_arm32.tcc"
>
{
public:
	OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16920 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16924 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16927 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 16931 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 16934 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 16972 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 16976 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 16979 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 16996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 16999 "isa_arm32.tcc"
>
class OpStrh_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17004 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17018 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17022 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17025 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17029 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17032 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17070 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17074 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17077 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17085 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17088 "isa_arm32.tcc"
>
class OpStrh_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17093 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17107 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17111 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17114 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17118 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17121 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17159 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17163 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17166 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17174 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17177 "isa_arm32.tcc"
>
class OpStrh_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17182 "isa_arm32.tcc"
>
{
public:
	OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17196 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17200 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17203 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17207 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17210 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17248 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17252 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17255 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17263 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17266 "isa_arm32.tcc"
>
class OpStrh_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17271 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17285 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17289 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17292 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17296 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17299 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17337 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17341 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17344 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17352 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17355 "isa_arm32.tcc"
>
class OpStrh_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17360 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17374 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17378 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17381 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17385 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17388 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17426 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17430 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17433 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17444 "isa_arm32.tcc"
>
class OpStrh_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17449 "isa_arm32.tcc"
>
{
public:
	OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17463 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17467 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17470 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17474 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17477 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17515 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17519 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17522 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17533 "isa_arm32.tcc"
>
class OpLdrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17538 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17552 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17556 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17559 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17563 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17566 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17604 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17608 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17611 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17625 "isa_arm32.tcc"
>
class OpLdrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17630 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17644 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17648 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17651 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17655 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17658 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17696 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17700 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17703 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17717 "isa_arm32.tcc"
>
class OpLdrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17722 "isa_arm32.tcc"
>
{
public:
	OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17736 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17740 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17743 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17747 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17750 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17788 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17792 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17795 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17809 "isa_arm32.tcc"
>
class OpLdrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17814 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17828 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17835 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17839 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17842 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17880 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17884 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17887 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 17904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17907 "isa_arm32.tcc"
>
class OpLdrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 17912 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17926 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17930 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17933 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 17937 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 17940 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 17978 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 17982 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 17985 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18005 "isa_arm32.tcc"
>
class OpLdrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18010 "isa_arm32.tcc"
>
{
public:
	OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18024 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18028 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18031 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18035 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18038 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18076 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18080 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18083 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18100 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18103 "isa_arm32.tcc"
>
class OpStrd_imm_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18108 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18122 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18126 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18129 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18133 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18136 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18174 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18178 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18181 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18201 "isa_arm32.tcc"
>
class OpStrd_imm_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18206 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18220 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18224 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18227 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18231 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18234 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18272 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18276 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18279 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18299 "isa_arm32.tcc"
>
class OpStrd_imm_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18304 "isa_arm32.tcc"
>
{
public:
	OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t immedH;
	uint32_t immedL;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18318 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18322 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18325 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18329 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18332 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18370 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18374 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18377 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18397 "isa_arm32.tcc"
>
class OpStrd_reg_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18402 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18416 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18420 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18423 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18427 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18430 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18468 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18472 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18475 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18498 "isa_arm32.tcc"
>
class OpStrd_reg_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18503 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18517 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18521 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18524 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18528 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18531 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18569 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18573 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18576 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18599 "isa_arm32.tcc"
>
class OpStrd_reg_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18604 "isa_arm32.tcc"
>
{
public:
	OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t u;
	uint32_t rn;
	uint32_t rd;
	uint32_t sbz;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18618 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18622 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18625 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18629 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18632 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18670 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18674 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18677 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
	virtual
	void
	initialize_rm_init();
	virtual
	void
	initialize_rd_init();
	virtual
	void
	initialize_rdp1_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18697 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18700 "isa_arm32.tcc"
>
class OpLdm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18705 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18717 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18721 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18724 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18728 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18731 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18769 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18773 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18776 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18790 "isa_arm32.tcc"
>
class OpLdm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18795 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18807 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18811 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18814 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18818 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18821 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18859 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18863 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18866 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18880 "isa_arm32.tcc"
>
class OpLdm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18885 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18897 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18901 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18904 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18908 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 18911 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18949 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18953 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18956 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 18967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18970 "isa_arm32.tcc"
>
class OpLdm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 18975 "isa_arm32.tcc"
>
{
public:
	OpLdm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 18987 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 18991 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 18994 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 18998 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19001 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19039 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19043 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19046 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19060 "isa_arm32.tcc"
>
class OpLdm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19065 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19076 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19080 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19083 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19087 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19090 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19128 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19132 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19135 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19149 "isa_arm32.tcc"
>
class OpLdm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19154 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19165 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19169 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19172 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19176 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19179 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19217 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19221 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19224 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19238 "isa_arm32.tcc"
>
class OpLdm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19243 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19254 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19258 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19261 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19265 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19268 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19306 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19310 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19313 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19327 "isa_arm32.tcc"
>
class OpLdm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19332 "isa_arm32.tcc"
>
{
public:
	OpLdm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19343 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19350 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19354 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19357 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19395 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19399 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19402 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19416 "isa_arm32.tcc"
>
class OpLdm_3_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19421 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19433 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19437 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19440 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19447 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19485 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19489 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19492 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19506 "isa_arm32.tcc"
>
class OpLdm_3_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19511 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19523 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19527 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19530 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19534 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19537 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19575 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19579 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19582 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19596 "isa_arm32.tcc"
>
class OpLdm_3_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19601 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19613 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19620 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19624 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19627 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19665 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19669 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19672 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19683 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19686 "isa_arm32.tcc"
>
class OpLdm_3_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19691 "isa_arm32.tcc"
>
{
public:
	OpLdm_3_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19703 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19707 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19710 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19714 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19717 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19755 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19759 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19762 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19776 "isa_arm32.tcc"
>
class OpStm_1_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19781 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19793 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19797 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19800 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19804 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19807 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19845 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19849 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19852 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19866 "isa_arm32.tcc"
>
class OpStm_1_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19871 "isa_arm32.tcc"
>
{
public:
	OpStm_1_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19883 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19887 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19890 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19894 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19897 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19935 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19939 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19942 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 19953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19956 "isa_arm32.tcc"
>
class OpStm_1_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 19961 "isa_arm32.tcc"
>
{
public:
	OpStm_1_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 19973 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 19977 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 19980 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 19984 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 19987 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20025 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20029 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20032 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20046 "isa_arm32.tcc"
>
class OpStm_1_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20051 "isa_arm32.tcc"
>
{
public:
	OpStm_1_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t w;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20063 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20067 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20070 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20074 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20077 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20115 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20119 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20122 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20136 "isa_arm32.tcc"
>
class OpStm_2_ia : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20141 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ia(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20152 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20156 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20159 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20163 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20166 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20204 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20208 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20211 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20225 "isa_arm32.tcc"
>
class OpStm_2_ib : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20230 "isa_arm32.tcc"
>
{
public:
	OpStm_2_ib(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20241 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20245 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20248 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20252 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20255 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20293 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20297 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20300 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20314 "isa_arm32.tcc"
>
class OpStm_2_da : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20319 "isa_arm32.tcc"
>
{
public:
	OpStm_2_da(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20330 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20334 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20337 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20341 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20344 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20382 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20386 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20389 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20400 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20403 "isa_arm32.tcc"
>
class OpStm_2_db : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20408 "isa_arm32.tcc"
>
{
public:
	OpStm_2_db(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t reg_list;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20419 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20423 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20426 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20430 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20433 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20471 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20475 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20478 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20492 "isa_arm32.tcc"
>
class OpSwp : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20497 "isa_arm32.tcc"
>
{
public:
	OpSwp(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20509 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20513 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20516 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20520 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20523 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20561 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20565 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20568 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20579 "isa_arm32.tcc"
>
class OpSwpb : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20584 "isa_arm32.tcc"
>
{
public:
	OpSwpb(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20596 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20600 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20603 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20610 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20648 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20652 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20655 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20666 "isa_arm32.tcc"
>
class OpSwi : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20671 "isa_arm32.tcc"
>
{
public:
	OpSwi(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t immed;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20681 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20685 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20688 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20692 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20695 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20733 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20737 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20740 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20751 "isa_arm32.tcc"
>
class OpBkpt : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20756 "isa_arm32.tcc"
>
{
public:
	OpBkpt(CodeType code, typename CONFIG::address_t addr);
	uint32_t himmed;
	uint32_t limmed;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20766 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20770 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20773 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20777 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20780 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20818 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20822 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20825 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20836 "isa_arm32.tcc"
>
class OpCdp_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 20841 "isa_arm32.tcc"
>
{
public:
	OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20932 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20939 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 20943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 20946 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 20984 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 20988 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 20991 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 20999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21002 "isa_arm32.tcc"
>
class OpCdp_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21007 "isa_arm32.tcc"
>
{
public:
	OpCdp_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21098 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21102 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21105 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21112 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21150 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21154 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21157 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21168 "isa_arm32.tcc"
>
class OpCdp_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21173 "isa_arm32.tcc"
>
{
public:
	OpCdp_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21264 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21268 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21271 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21278 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21316 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21320 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21323 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21334 "isa_arm32.tcc"
>
class OpCdp_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21339 "isa_arm32.tcc"
>
{
public:
	OpCdp_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21429 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21433 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21436 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21440 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21443 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21481 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21485 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21488 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21499 "isa_arm32.tcc"
>
class OpLdc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21504 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21595 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21599 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21602 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21609 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21647 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21651 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21654 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21668 "isa_arm32.tcc"
>
class OpLdc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21673 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21764 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21768 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21771 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21775 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21816 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21820 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21823 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 21834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21837 "isa_arm32.tcc"
>
class OpLdc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 21842 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21933 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21937 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21940 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 21944 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 21947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 21985 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 21989 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 21992 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22006 "isa_arm32.tcc"
>
class OpLdc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22011 "isa_arm32.tcc"
>
{
public:
	OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22101 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22105 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22108 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22112 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22115 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22153 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22157 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22160 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22171 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22174 "isa_arm32.tcc"
>
class OpLdc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22179 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22270 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22274 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22277 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22284 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22322 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22326 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22329 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22340 "isa_arm32.tcc"
>
class OpLdc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22345 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22436 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22440 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22443 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22447 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22450 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22488 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22492 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22495 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22506 "isa_arm32.tcc"
>
class OpLdc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22511 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22602 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22609 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22613 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22616 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22654 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22658 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22661 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22672 "isa_arm32.tcc"
>
class OpLdc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22677 "isa_arm32.tcc"
>
{
public:
	OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22767 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22771 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22774 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22778 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22781 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22819 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22823 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22826 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 22834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22837 "isa_arm32.tcc"
>
class OpLdc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 22842 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22933 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22937 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22940 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 22944 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 22947 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 22985 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 22989 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 22992 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23003 "isa_arm32.tcc"
>
class OpLdc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23008 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23099 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23103 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23106 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23110 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23151 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23155 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23158 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23169 "isa_arm32.tcc"
>
class OpLdc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23174 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23265 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23269 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23272 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23276 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23279 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23317 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23321 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23324 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23332 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23335 "isa_arm32.tcc"
>
class OpLdc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23340 "isa_arm32.tcc"
>
{
public:
	OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23430 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23434 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23437 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23441 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23444 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23482 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23486 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23489 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23497 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23500 "isa_arm32.tcc"
>
class OpLdc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23505 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23595 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23599 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23602 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23606 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23609 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23647 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23651 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23654 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23665 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23668 "isa_arm32.tcc"
>
class OpLdc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23673 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23763 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23767 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23770 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23774 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23777 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23815 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23819 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23822 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 23833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23836 "isa_arm32.tcc"
>
class OpLdc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 23841 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23931 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23935 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23938 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 23942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 23945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 23983 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 23987 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 23990 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24004 "isa_arm32.tcc"
>
class OpLdc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24009 "isa_arm32.tcc"
>
{
public:
	OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24098 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24102 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24105 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24109 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24112 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24150 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24154 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24157 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24171 "isa_arm32.tcc"
>
class OpMcr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24176 "isa_arm32.tcc"
>
{
public:
	OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24267 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24271 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24274 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24278 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24281 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24319 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24323 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24326 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24337 "isa_arm32.tcc"
>
class OpMcr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24342 "isa_arm32.tcc"
>
{
public:
	OpMcr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24433 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24437 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24440 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24444 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24447 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24485 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24489 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24492 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24500 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24503 "isa_arm32.tcc"
>
class OpMcr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24508 "isa_arm32.tcc"
>
{
public:
	OpMcr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24599 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24603 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24606 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24613 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24651 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24655 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24658 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24669 "isa_arm32.tcc"
>
class OpMcr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24674 "isa_arm32.tcc"
>
{
public:
	OpMcr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24764 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24768 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24771 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24775 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24778 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24816 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24820 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24823 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24834 "isa_arm32.tcc"
>
class OpMrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 24839 "isa_arm32.tcc"
>
{
public:
	OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24930 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24934 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24937 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 24941 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 24944 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 24982 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 24986 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 24989 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 24997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25000 "isa_arm32.tcc"
>
class OpMrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25005 "isa_arm32.tcc"
>
{
public:
	OpMrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25096 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25100 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25103 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25107 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25110 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25148 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25152 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25155 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25166 "isa_arm32.tcc"
>
class OpMrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25171 "isa_arm32.tcc"
>
{
public:
	OpMrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25262 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25266 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25269 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25273 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25276 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25314 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25318 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25321 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25329 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25332 "isa_arm32.tcc"
>
class OpMrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25337 "isa_arm32.tcc"
>
{
public:
	OpMrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25427 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25431 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25434 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25441 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25479 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25483 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25486 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25497 "isa_arm32.tcc"
>
class OpStc_offset_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25502 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25593 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25597 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25600 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25604 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25607 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25645 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25649 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25652 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25666 "isa_arm32.tcc"
>
class OpStc_offset_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25671 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25762 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25766 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25769 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25773 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25776 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25814 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25818 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25821 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 25832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25835 "isa_arm32.tcc"
>
class OpStc_offset_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 25840 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25931 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25935 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25938 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 25942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 25945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 25983 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 25987 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 25990 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26004 "isa_arm32.tcc"
>
class OpStc_offset_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26009 "isa_arm32.tcc"
>
{
public:
	OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26099 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26103 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26106 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26110 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26113 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26151 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26155 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26158 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26172 "isa_arm32.tcc"
>
class OpStc_pre_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26177 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26268 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26272 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26275 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26279 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26282 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26320 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26324 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26327 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26338 "isa_arm32.tcc"
>
class OpStc_pre_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26343 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26434 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26441 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26445 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26448 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26486 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26490 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26493 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26504 "isa_arm32.tcc"
>
class OpStc_pre_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26509 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26600 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26604 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26607 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26611 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26614 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26652 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26656 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26659 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26670 "isa_arm32.tcc"
>
class OpStc_pre_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26675 "isa_arm32.tcc"
>
{
public:
	OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26765 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26769 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26772 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26776 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26779 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26817 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26821 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26824 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26835 "isa_arm32.tcc"
>
class OpStc_post_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 26840 "isa_arm32.tcc"
>
{
public:
	OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26931 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26935 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26938 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 26942 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 26945 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 26983 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 26987 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 26990 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 26998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27001 "isa_arm32.tcc"
>
class OpStc_post_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27006 "isa_arm32.tcc"
>
{
public:
	OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27097 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27101 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27104 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27108 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27111 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27149 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27153 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27156 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27167 "isa_arm32.tcc"
>
class OpStc_post_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27172 "isa_arm32.tcc"
>
{
public:
	OpStc_post_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27263 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27267 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27270 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27274 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27277 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27315 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27319 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27322 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27333 "isa_arm32.tcc"
>
class OpStc_post_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27338 "isa_arm32.tcc"
>
{
public:
	OpStc_post_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27428 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27432 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27435 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27439 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27442 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27480 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27484 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27487 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27498 "isa_arm32.tcc"
>
class OpStc_unindexed_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27503 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27593 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27597 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27600 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27604 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27607 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27645 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27649 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27652 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27666 "isa_arm32.tcc"
>
class OpStc_unindexed_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27671 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27761 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27765 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27768 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27772 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27775 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27813 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27817 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27820 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27834 "isa_arm32.tcc"
>
class OpStc_unindexed_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 27839 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27929 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27933 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27936 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 27940 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 27943 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 27981 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 27985 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 27988 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 27999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28002 "isa_arm32.tcc"
>
class OpStc_unindexed_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28007 "isa_arm32.tcc"
>
{
public:
	OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28096 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28100 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28103 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28107 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28110 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28148 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28152 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28155 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28166 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28169 "isa_arm32.tcc"
>
class OpCdp2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28174 "isa_arm32.tcc"
>
{
public:
	OpCdp2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28188 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28195 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28199 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28202 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28240 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28244 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28247 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28258 "isa_arm32.tcc"
>
class OpLdc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28263 "isa_arm32.tcc"
>
{
public:
	OpLdc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28277 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28284 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28288 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28291 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28329 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28333 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28336 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28350 "isa_arm32.tcc"
>
class OpLdc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28355 "isa_arm32.tcc"
>
{
public:
	OpLdc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28369 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28373 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28376 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28380 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28383 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28421 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28425 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28428 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28439 "isa_arm32.tcc"
>
class OpLdc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28444 "isa_arm32.tcc"
>
{
public:
	OpLdc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28458 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28462 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28465 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28469 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28472 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28510 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28514 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28517 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28525 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28528 "isa_arm32.tcc"
>
class OpLdc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28533 "isa_arm32.tcc"
>
{
public:
	OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28547 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28551 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28554 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28558 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28561 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28599 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28603 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28606 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28620 "isa_arm32.tcc"
>
class OpMcr2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28625 "isa_arm32.tcc"
>
{
public:
	OpMcr2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28639 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28643 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28646 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28650 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28653 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28691 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28695 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28698 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28709 "isa_arm32.tcc"
>
class OpMrc2 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28714 "isa_arm32.tcc"
>
{
public:
	OpMrc2(CodeType code, typename CONFIG::address_t addr);
	uint32_t op1;
	uint32_t crn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op2;
	uint32_t crm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28728 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28732 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28735 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28739 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28742 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28780 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28784 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28787 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28798 "isa_arm32.tcc"
>
class OpStc2_offset : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28803 "isa_arm32.tcc"
>
{
public:
	OpStc2_offset(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28817 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28821 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28824 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28828 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28831 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28869 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28873 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28876 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28887 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28890 "isa_arm32.tcc"
>
class OpStc2_pre : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28895 "isa_arm32.tcc"
>
{
public:
	OpStc2_pre(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28909 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28913 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28916 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 28920 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 28923 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28961 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 28965 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 28968 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 28976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28979 "isa_arm32.tcc"
>
class OpStc2_post : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 28984 "isa_arm32.tcc"
>
{
public:
	OpStc2_post(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t offset;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 28998 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29002 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29005 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29009 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29012 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29050 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29054 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29057 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29068 "isa_arm32.tcc"
>
class OpStc2_unindexed : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29073 "isa_arm32.tcc"
>
{
public:
	OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr);
	uint32_t u;
	uint32_t n;
	uint32_t rn;
	uint32_t crd;
	uint32_t cp_num;
	uint32_t option;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29087 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29091 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29094 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29098 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29101 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29139 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29143 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29146 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rn_init();
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29160 "isa_arm32.tcc"
>
class OpMcrr_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29165 "isa_arm32.tcc"
>
{
public:
	OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29255 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29259 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29262 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29266 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29269 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29307 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29311 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29314 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29325 "isa_arm32.tcc"
>
class OpMcrr_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29330 "isa_arm32.tcc"
>
{
public:
	OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29420 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29424 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29427 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29431 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29434 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29472 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29476 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29479 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29490 "isa_arm32.tcc"
>
class OpMcrr_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29495 "isa_arm32.tcc"
>
{
public:
	OpMcrr_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29585 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29589 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29592 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29596 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29599 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29637 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29641 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29644 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29652 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29655 "isa_arm32.tcc"
>
class OpMcrr_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29660 "isa_arm32.tcc"
>
{
public:
	OpMcrr_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29749 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29756 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29760 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29763 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29801 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29805 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29808 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29816 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29819 "isa_arm32.tcc"
>
class OpMrrc_0xxx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29824 "isa_arm32.tcc"
>
{
public:
	OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29914 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29918 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29921 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 29925 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 29928 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 29966 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 29970 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 29973 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 29981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29984 "isa_arm32.tcc"
>
class OpMrrc_10xx : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 29989 "isa_arm32.tcc"
>
{
public:
	OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30079 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30083 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30086 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30093 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30131 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30135 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30138 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30149 "isa_arm32.tcc"
>
class OpMrrc_110x : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30154 "isa_arm32.tcc"
>
{
public:
	OpMrrc_110x(CodeType code, typename CONFIG::address_t addr);
	uint32_t sub_cond;
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30244 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30248 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30251 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30258 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30296 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30300 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30303 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30314 "isa_arm32.tcc"
>
class OpMrrc_1110 : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30319 "isa_arm32.tcc"
>
{
public:
	OpMrrc_1110(CodeType code, typename CONFIG::address_t addr);
	uint32_t rn;
	uint32_t rd;
	uint32_t cp_num;
	uint32_t op1;
	uint32_t crm;
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	/**********************************************

	ARM EMULATOR ISA

	**********************************************/
	// end of decl
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	// var cond_res : {bool} // keeps the result of the condition check if necessary
	virtual
	void
	initialize_condition();
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30408 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30412 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30415 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30419 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30422 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30460 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30464 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30467 "isa_arm32.tcc"
	);
private:
};

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30475 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30478 "isa_arm32.tcc"
>
class OpClz : public Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30483 "isa_arm32.tcc"
>
{
public:
	OpClz(CodeType code, typename CONFIG::address_t addr);
	uint32_t cond;
	uint32_t sbo1;
	uint32_t rd;
	uint32_t sbo2;
	uint32_t rm;
	virtual
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30496 "isa_arm32.tcc"
	disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30500 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30503 "isa_arm32.tcc"
	,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	stringstream &
#line 30507 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	buffer
#line 30510 "isa_arm32.tcc"
	);
	/*
	*  Copyright (c) 2007,
	*  Commissariat a l'Energie Atomique (CEA)
	*  All rights reserved.
	*
	*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
	*
	*   - Redistributions of source code must retain the above copyright notice, this
	*     list of conditions and the following disclaimer.
	*
	*   - Redistributions in binary form must reproduce the above copyright notice,
	*     this list of conditions and the following disclaimer in the documentation
	*     and/or other materials provided with the distribution.
	*
	*   - Neither the name of CEA nor the names of its contributors may be used to
	*     endorse or promote products derived from this software without specific prior
	*     written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	*  DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
	*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
	*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
	*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*
	* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
	*/
	virtual
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	void
#line 30548 "isa_arm32.tcc"
	execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	CPU<CONFIG> &
#line 30552 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
	cpu
#line 30555 "isa_arm32.tcc"
	);
	virtual
	void
	initialize_rm_init();
private:
};

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

BRANCH INSTRUCTIONS

**********************************************/
/*******************************************************************
* b (branch) instruction
* op b(cond[4]:0b1010[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30611 "isa_arm32.tcc"
>

void
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30618 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 30627 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30632 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30635 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30639 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30643 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30647 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30650 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30654 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30657 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30668 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30676 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30680 "isa_arm32.tcc"
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30684 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30688 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30691 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30708 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30717 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30722 "isa_arm32.tcc"
> *DecodeOpB_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30728 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30738 "isa_arm32.tcc"
>

void
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30745 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 30754 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30762 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30766 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30770 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30774 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30777 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30781 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30784 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30795 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30803 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30807 "isa_arm32.tcc"
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30811 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30815 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30818 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30835 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30841 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30844 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30849 "isa_arm32.tcc"
> *DecodeOpB_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30855 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30862 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30865 "isa_arm32.tcc"
>

void
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30872 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 30881 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30889 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30893 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30897 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30901 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30904 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 30908 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 30911 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 30922 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30930 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 30934 "isa_arm32.tcc"
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30938 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 30942 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 30945 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 30962 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30971 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30976 "isa_arm32.tcc"
> *DecodeOpB_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 30982 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 30989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30992 "isa_arm32.tcc"
>

void
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 30999 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31016 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31020 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31024 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31028 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31031 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31035 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31038 "isa_arm32.tcc"
)
{
#line 77 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "b";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << (imm << 2) + cpu.GetGPR(cpu.PC_reg) + 8<< dec;
	}
#line 31049 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31057 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31061 "isa_arm32.tcc"
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31065 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31069 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31072 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		new_PC = cpu.GetGPR(cpu.PC_reg) + 8 + (imm << 2);
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31089 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31098 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31103 "isa_arm32.tcc"
> *DecodeOpB_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31109 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of b (branch) instruction
*******************************************************************/
/*******************************************************************
* bl (branch & link) instruction
* op bl(cond[4]:0b1011[4]:sext<32> imm[24])
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31123 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31126 "isa_arm32.tcc"
>

void
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31133 "isa_arm32.tcc"
>::initialize_condition()
{
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 31142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31150 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31154 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31158 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31162 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31165 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31169 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31172 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31183 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31191 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31195 "isa_arm32.tcc"
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31199 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31203 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31206 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31225 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31231 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31234 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31239 "isa_arm32.tcc"
> *DecodeOpBl_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31245 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31252 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31255 "isa_arm32.tcc"
>

void
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31262 "isa_arm32.tcc"
>::initialize_condition()
{
#line 119 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 31271 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31276 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31279 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31283 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31287 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31291 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31294 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31298 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31301 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31312 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31320 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31324 "isa_arm32.tcc"
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31328 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31332 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31335 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31354 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31360 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31363 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31368 "isa_arm32.tcc"
> *DecodeOpBl_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31374 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31381 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31384 "isa_arm32.tcc"
>

void
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31391 "isa_arm32.tcc"
>::initialize_condition()
{
#line 125 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 31400 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31408 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31412 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31416 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31420 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31423 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31427 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31430 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31441 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31449 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31453 "isa_arm32.tcc"
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31457 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31461 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31464 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31483 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31492 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31497 "isa_arm32.tcc"
> *DecodeOpBl_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31503 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31513 "isa_arm32.tcc"
>

void
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31520 "isa_arm32.tcc"
>::initialize_condition()
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 31529 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31537 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31541 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31545 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31549 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31552 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31556 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31559 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "bl";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8 << dec;
	}
#line 31570 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31575 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31578 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31582 "isa_arm32.tcc"
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31586 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31590 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31593 "isa_arm32.tcc"
)
{
#line 147 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;

		if(!cpu.CheckCondition(inherited::cond_init)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());

		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31612 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31621 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31626 "isa_arm32.tcc"
> *DecodeOpBl_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31632 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bl (branch & link) instruction
*******************************************************************/
/*******************************************************************
* bx (branch and exchange) instruction
* this instruction is only availabe for the following architectures
* 	CONFIG::ARMV4T,
*  CONFIG::ARMV4TXM,
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31654 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31657 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31661 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31665 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31669 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31672 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31676 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31679 "isa_arm32.tcc"
)
{
#line 183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "bx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31688 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31693 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31696 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31700 "isa_arm32.tcc"
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31704 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31708 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31711 "isa_arm32.tcc"
)
{
#line 189 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31730 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31735 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31738 "isa_arm32.tcc"
>

void
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31745 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 31755 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31761 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31764 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31769 "isa_arm32.tcc"
> *DecodeOpBx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31775 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bx (branch and exchange) instruction
*******************************************************************/
/*******************************************************************
* blx (1) (branch with link and exchange version 1) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31798 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31802 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31806 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31810 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31813 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31817 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31820 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx 0x" << hex << cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8 << dec;
	}
#line 31827 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31832 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31835 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31839 "isa_arm32.tcc"
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31843 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31847 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31850 "isa_arm32.tcc"
)
{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typename CONFIG::reg_t new_PC;

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T(true);
		new_PC = cpu.GetGPR(cpu.PC_reg) + (imm << 2) + (h << 1) + 8;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31862 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31871 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31876 "isa_arm32.tcc"
> *DecodeOpBlx_1(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 31882 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (1) (branch with link and exchange version 1) instruction
*******************************************************************/
/*******************************************************************
* blx (2) (branch with link and exchange version 2) instruction
* this instruction is only availabe for the following architectures
*  CONFIG::ARMV5,
*	CONFIG::ARMV5XM,
*	CONFIG::ARMV5T,
*	CONFIG::ARMV5TXM,
*	CONFIG::ARMV5TE,
*	CONFIG::ARMV5TEXP
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31902 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31905 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31909 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31913 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31917 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31920 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 31924 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 31927 "isa_arm32.tcc"
)
{
#line 262 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		buffer << "blx";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rm;
	}
#line 31936 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31944 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 31948 "isa_arm32.tcc"
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31952 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 31956 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 31959 "isa_arm32.tcc"
)
{
#line 268 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t new_PC;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		if(!cpu.CheckCondition(cond)) {
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
			return;
		}

		cpu.SetGPR(cpu.LR_reg, cpu.GetGPR(cpu.PC_reg) + cpu.InstructionByteSize());
		cpu.SetCPSR_T((rm_value & 0x01) == 1);
		new_PC = rm_value & 0xFFFFFFFE;
		cpu.SetGPR(cpu.PC_reg, new_PC);
	}
#line 31979 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 31984 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31987 "isa_arm32.tcc"
>

void
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 31994 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32004 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32010 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32013 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32018 "isa_arm32.tcc"
> *DecodeOpBlx_2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32024 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of blx (2) (branch with link and exchange version 2) instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* and instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32078 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32082 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32086 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32093 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32097 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32100 "isa_arm32.tcc"
)
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32114 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32122 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32126 "isa_arm32.tcc"
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32130 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32134 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32137 "isa_arm32.tcc"
)
{
#line 118 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32157 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32168 "isa_arm32.tcc"
>

void
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32175 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32185 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32194 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32199 "isa_arm32.tcc"
> *DecodeOpAnd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32205 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32215 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32219 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32223 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32227 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32230 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32234 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32237 "isa_arm32.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32251 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32259 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32263 "isa_arm32.tcc"
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32267 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32271 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32274 "isa_arm32.tcc"
)
{
#line 135 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32295 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32303 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32306 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32313 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32323 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32331 "isa_arm32.tcc"
>

void
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32338 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32348 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32354 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32357 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32362 "isa_arm32.tcc"
> *DecodeOpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32368 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32375 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32378 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32382 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32386 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32390 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32393 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32397 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32400 "isa_arm32.tcc"
)
{
#line 74 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32414 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32422 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32426 "isa_arm32.tcc"
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32430 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32434 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32437 "isa_arm32.tcc"
)
{
#line 153 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & s2;
		cpu.SetGPR(rd, res);
	}
#line 32459 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32470 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32477 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32487 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32495 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32502 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32512 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32520 "isa_arm32.tcc"
>

void
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32527 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 32537 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32546 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32551 "isa_arm32.tcc"
> *DecodeOpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32557 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32567 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32571 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32575 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32579 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32582 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32586 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32589 "isa_arm32.tcc"
)
{
#line 85 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 32603 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32611 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32615 "isa_arm32.tcc"
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32619 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32623 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32626 "isa_arm32.tcc"
)
{
#line 172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32656 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32667 "isa_arm32.tcc"
>

void
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32674 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32684 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32690 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32693 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32698 "isa_arm32.tcc"
> *DecodeOpAnds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32704 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32711 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32714 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32718 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32722 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32726 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32729 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32733 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32736 "isa_arm32.tcc"
)
{
#line 96 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 32750 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32758 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32762 "isa_arm32.tcc"
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32766 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32770 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32773 "isa_arm32.tcc"
)
{
#line 199 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32804 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32815 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32822 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 32832 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32840 "isa_arm32.tcc"
>

void
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32847 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 32857 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32866 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32871 "isa_arm32.tcc"
> *DecodeOpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 32877 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32884 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32887 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32891 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32895 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32899 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32902 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 32906 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 32909 "isa_arm32.tcc"
)
{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "and";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 32923 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32931 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 32935 "isa_arm32.tcc"
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32939 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 32943 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 32946 "isa_arm32.tcc"
)
{
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 32978 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 32986 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32989 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 32996 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33006 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33014 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33021 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33031 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33039 "isa_arm32.tcc"
>

void
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33046 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33056 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33065 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33070 "isa_arm32.tcc"
> *DecodeOpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33076 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of and instruction
*******************************************************************/
/*******************************************************************
* eor instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33092 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33096 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33100 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33104 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33107 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33111 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33114 "isa_arm32.tcc"
)
{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33128 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33136 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33140 "isa_arm32.tcc"
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33144 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33148 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33151 "isa_arm32.tcc"
)
{
#line 337 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33171 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33182 "isa_arm32.tcc"
>

void
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33189 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33199 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33205 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33208 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33213 "isa_arm32.tcc"
> *DecodeOpEor_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33219 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33229 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33233 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33237 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33241 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33244 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33248 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33251 "isa_arm32.tcc"
)
{
#line 282 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33265 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33270 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33273 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33277 "isa_arm32.tcc"
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33281 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33285 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33288 "isa_arm32.tcc"
)
{
#line 354 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33309 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33317 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33320 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33327 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33337 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33345 "isa_arm32.tcc"
>

void
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33352 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33362 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33371 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33376 "isa_arm32.tcc"
> *DecodeOpEor_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33382 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33392 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33396 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33400 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33404 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33407 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33411 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33414 "isa_arm32.tcc"
)
{
#line 293 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33428 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33433 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33436 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33440 "isa_arm32.tcc"
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33444 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33448 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33451 "isa_arm32.tcc"
)
{
#line 372 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);
	}
#line 33473 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33484 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33491 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33501 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33509 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33516 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33534 "isa_arm32.tcc"
>

void
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33541 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 33551 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33557 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33560 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33565 "isa_arm32.tcc"
> *DecodeOpEor_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33571 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33581 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33585 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33589 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33593 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33596 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33600 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33603 "isa_arm32.tcc"
)
{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 33617 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33625 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33629 "isa_arm32.tcc"
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33633 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33637 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33640 "isa_arm32.tcc"
)
{
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33670 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33678 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33681 "isa_arm32.tcc"
>

void
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33688 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33698 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33707 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33712 "isa_arm32.tcc"
> *DecodeOpEors_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33718 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33725 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33728 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33732 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33736 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33740 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33743 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33747 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33750 "isa_arm32.tcc"
)
{
#line 315 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 33764 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33769 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33772 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33776 "isa_arm32.tcc"
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33780 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33784 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33787 "isa_arm32.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33818 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33829 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33836 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 33846 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33854 "isa_arm32.tcc"
>

void
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33861 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 33871 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33880 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33885 "isa_arm32.tcc"
> *DecodeOpEors_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 33891 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33898 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33901 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33905 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33909 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33913 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33916 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 33920 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 33923 "isa_arm32.tcc"
)
{
#line 326 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "eor";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 33937 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 33942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33945 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 33949 "isa_arm32.tcc"
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 33953 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 33957 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 33960 "isa_arm32.tcc"
)
{
#line 446 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 33992 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34003 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34010 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34020 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34025 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34028 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34035 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34045 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34053 "isa_arm32.tcc"
>

void
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34060 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34070 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34076 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34079 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34084 "isa_arm32.tcc"
> *DecodeOpEors_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34090 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of eor instruction
*******************************************************************/
/*******************************************************************
* sub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34106 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34110 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34114 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34118 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34121 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34125 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34128 "isa_arm32.tcc"
)
{
#line 490 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34142 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34147 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34150 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34154 "isa_arm32.tcc"
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34158 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34162 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34165 "isa_arm32.tcc"
)
{
#line 556 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34185 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34196 "isa_arm32.tcc"
>

void
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34203 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34213 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34222 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34227 "isa_arm32.tcc"
> *DecodeOpSub_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34233 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34243 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34247 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34251 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34258 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34262 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34265 "isa_arm32.tcc"
)
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34279 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34287 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34291 "isa_arm32.tcc"
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34295 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34299 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34302 "isa_arm32.tcc"
)
{
#line 573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34323 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34334 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34341 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34351 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34359 "isa_arm32.tcc"
>

void
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34366 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34376 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34385 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34390 "isa_arm32.tcc"
> *DecodeOpSub_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34396 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34403 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34406 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34410 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34414 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34418 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34421 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34425 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34428 "isa_arm32.tcc"
)
{
#line 512 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34442 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34450 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34454 "isa_arm32.tcc"
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34458 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34462 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34465 "isa_arm32.tcc"
)
{
#line 591 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);
	}
#line 34487 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34498 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34505 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34515 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34520 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34523 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34530 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34540 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34548 "isa_arm32.tcc"
>

void
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34555 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 34565 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34574 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34579 "isa_arm32.tcc"
> *DecodeOpSub_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34585 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34595 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34599 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34603 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34607 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34610 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34614 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34617 "isa_arm32.tcc"
)
{
#line 523 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 34631 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34636 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34639 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34643 "isa_arm32.tcc"
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34647 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34651 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34654 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34683 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34691 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34694 "isa_arm32.tcc"
>

void
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34701 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34711 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34720 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34725 "isa_arm32.tcc"
> *DecodeOpSubs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34731 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34738 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34741 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34745 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34749 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34753 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34756 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34760 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34763 "isa_arm32.tcc"
)
{
#line 534 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 34777 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34785 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34789 "isa_arm32.tcc"
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34793 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34797 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34800 "isa_arm32.tcc"
)
{
#line 636 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 34830 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34841 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34848 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 34858 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34866 "isa_arm32.tcc"
>

void
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34873 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 34883 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34892 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34897 "isa_arm32.tcc"
> *DecodeOpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 34903 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34910 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34913 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34917 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34921 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34925 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34928 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 34932 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 34935 "isa_arm32.tcc"
)
{
#line 545 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sub";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 34949 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 34954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34957 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 34961 "isa_arm32.tcc"
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 34965 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 34969 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 34972 "isa_arm32.tcc"
)
{
#line 663 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 - s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
		}
	}
#line 35003 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35011 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35014 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35021 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35031 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35039 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35046 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35056 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35061 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35064 "isa_arm32.tcc"
>

void
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35071 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35081 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35090 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35095 "isa_arm32.tcc"
> *DecodeOpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35101 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sub instruction
*******************************************************************/
/*******************************************************************
* rsb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35117 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35121 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35125 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35129 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35132 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35136 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35139 "isa_arm32.tcc"
)
{
#line 706 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35153 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35161 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35165 "isa_arm32.tcc"
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35169 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35173 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35176 "isa_arm32.tcc"
)
{
#line 772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35196 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35207 "isa_arm32.tcc"
>

void
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35214 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35224 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35230 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35233 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35238 "isa_arm32.tcc"
> *DecodeOpRsb_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35244 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35254 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35258 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35262 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35266 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35269 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35273 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35276 "isa_arm32.tcc"
)
{
#line 717 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35290 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35295 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35298 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35302 "isa_arm32.tcc"
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35306 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35310 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35313 "isa_arm32.tcc"
)
{
#line 789 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35334 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35342 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35345 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35352 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35362 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35370 "isa_arm32.tcc"
>

void
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35377 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35387 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35396 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35401 "isa_arm32.tcc"
> *DecodeOpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35407 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35417 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35421 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35425 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35429 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35432 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35436 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35439 "isa_arm32.tcc"
)
{
#line 728 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35461 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35465 "isa_arm32.tcc"
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35469 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35473 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35476 "isa_arm32.tcc"
)
{
#line 807 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);
	}
#line 35498 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35506 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35509 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35516 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35534 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35541 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35551 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35556 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35559 "isa_arm32.tcc"
>

void
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35566 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 35576 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35582 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35585 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35590 "isa_arm32.tcc"
> *DecodeOpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35596 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35606 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35610 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35614 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35618 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35621 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35625 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35628 "isa_arm32.tcc"
)
{
#line 739 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 35642 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35647 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35650 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35654 "isa_arm32.tcc"
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35658 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35662 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35665 "isa_arm32.tcc"
)
{
#line 826 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35694 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35705 "isa_arm32.tcc"
>

void
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35712 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35722 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35731 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35736 "isa_arm32.tcc"
> *DecodeOpRsbs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35742 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35749 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35752 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35756 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35760 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35764 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35767 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35771 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35774 "isa_arm32.tcc"
)
{
#line 750 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 35788 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35796 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35800 "isa_arm32.tcc"
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35804 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35808 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35811 "isa_arm32.tcc"
)
{
#line 852 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 35841 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35852 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35859 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 35869 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35874 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35877 "isa_arm32.tcc"
>

void
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35884 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 35894 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35903 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35908 "isa_arm32.tcc"
> *DecodeOpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 35914 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35921 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35924 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35928 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35932 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35936 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35939 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 35943 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 35946 "isa_arm32.tcc"
)
{
#line 761 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsb";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 35960 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 35965 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35968 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 35972 "isa_arm32.tcc"
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 35976 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 35980 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 35983 "isa_arm32.tcc"
)
{
#line 879 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s2 - s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1)); // to check
		}
	}
#line 36014 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36022 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36025 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36032 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36042 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36050 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36057 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36067 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36075 "isa_arm32.tcc"
>

void
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36082 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36092 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36101 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36106 "isa_arm32.tcc"
> *DecodeOpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36112 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsb instruction
*******************************************************************/
/*******************************************************************
* add instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36125 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36128 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36132 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36136 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36140 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36143 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36147 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36150 "isa_arm32.tcc"
)
{
#line 922 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36164 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36172 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36176 "isa_arm32.tcc"
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36180 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36184 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36187 "isa_arm32.tcc"
)
{
#line 988 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36207 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36215 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36218 "isa_arm32.tcc"
>

void
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36225 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36235 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36241 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36244 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36249 "isa_arm32.tcc"
> *DecodeOpAdd_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36255 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36265 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36269 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36273 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36277 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36280 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36284 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36287 "isa_arm32.tcc"
)
{
#line 933 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36301 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36306 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36309 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36313 "isa_arm32.tcc"
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36317 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36321 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36324 "isa_arm32.tcc"
)
{
#line 1005 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36345 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36356 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36363 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36373 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36381 "isa_arm32.tcc"
>

void
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36388 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36398 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36407 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36412 "isa_arm32.tcc"
> *DecodeOpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36418 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36425 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36428 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36432 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36436 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36440 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36443 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36447 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36450 "isa_arm32.tcc"
)
{
#line 944 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36464 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36472 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36476 "isa_arm32.tcc"
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36480 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36484 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36487 "isa_arm32.tcc"
)
{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 + s2;
		cpu.SetGPR(rd, res);
	}
#line 36509 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36520 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36527 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36537 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36545 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36552 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36562 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36570 "isa_arm32.tcc"
>

void
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36577 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 36587 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36596 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36601 "isa_arm32.tcc"
> *DecodeOpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36607 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36617 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36621 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36625 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36629 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36632 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36636 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36639 "isa_arm32.tcc"
)
{
#line 955 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 36653 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36658 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36661 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36665 "isa_arm32.tcc"
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36669 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36673 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36676 "isa_arm32.tcc"
)
{
#line 1042 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36709 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36717 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36720 "isa_arm32.tcc"
>

void
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36727 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36737 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36746 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36751 "isa_arm32.tcc"
> *DecodeOpAdds_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36757 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36764 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36767 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36771 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36775 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36779 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36782 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36786 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36789 "isa_arm32.tcc"
)
{
#line 966 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 36803 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36811 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36815 "isa_arm32.tcc"
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36819 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36823 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36826 "isa_arm32.tcc"
)
{
#line 1072 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 36860 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36868 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36871 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36878 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 36888 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36896 "isa_arm32.tcc"
>

void
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36903 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 36913 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36922 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36927 "isa_arm32.tcc"
> *DecodeOpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 36933 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36940 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36943 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36947 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36951 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36955 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 36958 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 36962 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 36965 "isa_arm32.tcc"
)
{
#line 977 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "add";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 36979 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 36984 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36987 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 36991 "isa_arm32.tcc"
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 36995 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 36999 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37002 "isa_arm32.tcc"
)
{
#line 1103 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, 0);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37037 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37048 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37055 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37065 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37073 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37080 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37090 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37098 "isa_arm32.tcc"
>

void
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37105 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37115 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37124 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37129 "isa_arm32.tcc"
> *DecodeOpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37135 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of add instruction
*******************************************************************/
/*******************************************************************
* adc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37148 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37151 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37155 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37159 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37163 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37166 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37170 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37173 "isa_arm32.tcc"
)
{
#line 1150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37187 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37195 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37199 "isa_arm32.tcc"
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37203 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37207 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37210 "isa_arm32.tcc"
)
{
#line 1216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37232 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37243 "isa_arm32.tcc"
>

void
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37250 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37260 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37266 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37269 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37274 "isa_arm32.tcc"
> *DecodeOpAdc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37280 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37290 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37294 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37298 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37302 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37305 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37309 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37312 "isa_arm32.tcc"
)
{
#line 1161 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37326 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37334 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37338 "isa_arm32.tcc"
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37342 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37346 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37349 "isa_arm32.tcc"
)
{
#line 1235 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37372 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37380 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37383 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37390 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37400 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37405 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37408 "isa_arm32.tcc"
>

void
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37415 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37425 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37431 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37434 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37439 "isa_arm32.tcc"
> *DecodeOpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37445 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37452 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37455 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37459 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37463 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37467 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37470 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37474 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37477 "isa_arm32.tcc"
)
{
#line 1172 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 37491 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37499 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37503 "isa_arm32.tcc"
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37507 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37511 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37514 "isa_arm32.tcc"
)
{
#line 1255 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		res = s1 + s2 + carry_in;
		cpu.SetGPR(rd, res);
	}
#line 37538 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37546 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37549 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37556 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37566 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37574 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37581 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37591 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37599 "isa_arm32.tcc"
>

void
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37606 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 37616 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37625 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37630 "isa_arm32.tcc"
> *DecodeOpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37636 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37643 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37646 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37650 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37654 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37658 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37661 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37665 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37668 "isa_arm32.tcc"
)
{
#line 1183 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 37682 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37687 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37690 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37694 "isa_arm32.tcc"
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37698 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37702 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37705 "isa_arm32.tcc"
)
{
#line 1276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37740 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37751 "isa_arm32.tcc"
>

void
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37758 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37768 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37777 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37782 "isa_arm32.tcc"
> *DecodeOpAdcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37788 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37798 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37802 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37806 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37810 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37813 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37817 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37820 "isa_arm32.tcc"
)
{
#line 1194 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 37834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37842 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37846 "isa_arm32.tcc"
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37850 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37854 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37857 "isa_arm32.tcc"
)
{
#line 1308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 37893 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37904 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37911 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 37921 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37929 "isa_arm32.tcc"
>

void
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37936 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 37946 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37955 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37960 "isa_arm32.tcc"
> *DecodeOpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 37966 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 37973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37976 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 37980 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 37984 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 37988 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 37991 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 37995 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 37998 "isa_arm32.tcc"
)
{
#line 1205 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "adc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38012 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38017 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38020 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38024 "isa_arm32.tcc"
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38028 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38032 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38035 "isa_arm32.tcc"
)
{
#line 1341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		uint8_t carry_in;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);
		uint8_t carry_out;
		uint8_t overflow_out;
		uint8_t sign;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		carry_in = (cpu.GetCPSR_C() ? 1 : 0);
		Add32(res, carry_out, overflow_out, sign,
		s1, s2, carry_in);
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(carry_out); // to check
			cpu.SetCPSR_V(overflow_out); // to check
		}
	}
#line 38072 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38083 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38090 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38100 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38105 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38108 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38115 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38125 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38130 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38133 "isa_arm32.tcc"
>

void
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38140 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38150 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38159 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38164 "isa_arm32.tcc"
> *DecodeOpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38170 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of adc instruction
*******************************************************************/
/*******************************************************************
* sbc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38186 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38190 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38194 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38198 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38201 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38205 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38208 "isa_arm32.tcc"
)
{
#line 1390 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38222 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38230 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38234 "isa_arm32.tcc"
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38238 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38242 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38245 "isa_arm32.tcc"
)
{
#line 1456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38267 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38278 "isa_arm32.tcc"
>

void
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38285 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38295 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38304 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38309 "isa_arm32.tcc"
> *DecodeOpSbc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38315 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38325 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38329 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38333 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38337 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38340 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38344 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38347 "isa_arm32.tcc"
)
{
#line 1401 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38361 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38366 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38369 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38373 "isa_arm32.tcc"
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38377 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38381 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38384 "isa_arm32.tcc"
)
{
#line 1475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38407 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38418 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38425 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38435 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38443 "isa_arm32.tcc"
>

void
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38450 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38460 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38469 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38474 "isa_arm32.tcc"
> *DecodeOpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38480 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38487 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38490 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38494 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38498 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38502 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38505 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38509 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38512 "isa_arm32.tcc"
)
{
#line 1412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 38526 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38531 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38534 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38538 "isa_arm32.tcc"
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38542 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38546 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38549 "isa_arm32.tcc"
)
{
#line 1495 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 38573 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38584 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38591 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38601 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38609 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38616 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38626 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38631 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38634 "isa_arm32.tcc"
>

void
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38641 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 38651 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38657 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38660 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38665 "isa_arm32.tcc"
> *DecodeOpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38671 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38678 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38681 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38685 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38689 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38693 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38696 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38700 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38703 "isa_arm32.tcc"
)
{
#line 1423 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 38717 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38725 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38729 "isa_arm32.tcc"
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38733 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38737 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38740 "isa_arm32.tcc"
)
{
#line 1516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38771 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38782 "isa_arm32.tcc"
>

void
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38789 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38799 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38808 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38813 "isa_arm32.tcc"
> *DecodeOpSbcs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38819 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38829 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38833 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38837 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38841 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38844 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 38848 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 38851 "isa_arm32.tcc"
)
{
#line 1434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 38865 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38870 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38873 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 38877 "isa_arm32.tcc"
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38881 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 38885 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 38888 "isa_arm32.tcc"
)
{
#line 1544 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 38920 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38931 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38938 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 38948 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38956 "isa_arm32.tcc"
>

void
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38963 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 38973 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 38979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38982 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 38987 "isa_arm32.tcc"
> *DecodeOpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 38993 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39003 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39007 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39011 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39015 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39018 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39022 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39025 "isa_arm32.tcc"
)
{
#line 1445 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "sbc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39047 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39051 "isa_arm32.tcc"
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39055 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39059 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39062 "isa_arm32.tcc"
)
{
#line 1573 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s1 - s2 - in_neg_carry;;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2, in_neg_carry)); // to check
		}
	}
#line 39095 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39103 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39106 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39113 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39123 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39131 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39138 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39148 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39153 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39156 "isa_arm32.tcc"
>

void
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39163 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39173 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39182 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39187 "isa_arm32.tcc"
> *DecodeOpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39193 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of sbc instruction
*******************************************************************/
/*******************************************************************
* rsc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39209 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39213 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39217 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39221 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39224 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39228 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39231 "isa_arm32.tcc"
)
{
#line 1618 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39245 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39253 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39257 "isa_arm32.tcc"
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39261 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39265 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39268 "isa_arm32.tcc"
)
{
#line 1684 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39290 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39301 "isa_arm32.tcc"
>

void
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39308 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39318 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39324 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39327 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39332 "isa_arm32.tcc"
> *DecodeOpRsc_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39338 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39345 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39348 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39352 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39356 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39360 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39363 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39367 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39370 "isa_arm32.tcc"
)
{
#line 1629 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39384 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39392 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39396 "isa_arm32.tcc"
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39400 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39404 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39407 "isa_arm32.tcc"
)
{
#line 1703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39430 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39441 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39448 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39458 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39466 "isa_arm32.tcc"
>

void
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39473 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39483 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39492 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39497 "isa_arm32.tcc"
> *DecodeOpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39503 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39513 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39517 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39521 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39525 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39528 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39532 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39535 "isa_arm32.tcc"
)
{
#line 1640 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 39549 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39554 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39557 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39561 "isa_arm32.tcc"
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39565 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39569 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39572 "isa_arm32.tcc"
)
{
#line 1723 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);
	}
#line 39596 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39607 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39614 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39624 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39632 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39639 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39649 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39654 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39657 "isa_arm32.tcc"
>

void
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39664 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 39674 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39683 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39688 "isa_arm32.tcc"
> *DecodeOpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39694 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39704 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39708 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39712 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39716 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39719 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39723 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39726 "isa_arm32.tcc"
)
{
#line 1651 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 39740 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39748 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39752 "isa_arm32.tcc"
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39756 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39760 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39763 "isa_arm32.tcc"
)
{
#line 1744 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39794 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39805 "isa_arm32.tcc"
>

void
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39812 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39822 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39831 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39836 "isa_arm32.tcc"
> *DecodeOpRscs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 39842 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39852 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39856 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39860 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39864 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39867 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 39871 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 39874 "isa_arm32.tcc"
)
{
#line 1662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 39888 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39896 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 39900 "isa_arm32.tcc"
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39904 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 39908 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 39911 "isa_arm32.tcc"
)
{
#line 1772 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 39943 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39954 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39961 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 39971 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 39976 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39979 "isa_arm32.tcc"
>

void
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 39986 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 39996 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40005 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40010 "isa_arm32.tcc"
> *DecodeOpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40016 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40026 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40030 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40034 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40038 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40041 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40045 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40048 "isa_arm32.tcc"
)
{
#line 1673 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "rsc";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40062 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40067 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40070 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40074 "isa_arm32.tcc"
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40078 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40082 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40085 "isa_arm32.tcc"
)
{
#line 1801 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t in_neg_carry;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		in_neg_carry = (cpu.GetCPSR_C() ? 0 : 1);
		res = s2 - s1 - in_neg_carry;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(!cpu.BorrowFrom(res, s2, s1, in_neg_carry)); // to check
			cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s2, s1, in_neg_carry)); // to check
		}
	}
#line 40118 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40129 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40136 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40154 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40161 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40171 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40176 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40179 "isa_arm32.tcc"
>

void
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40186 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40196 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40205 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40210 "isa_arm32.tcc"
> *DecodeOpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40216 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of rsc instruction
*******************************************************************/
/*******************************************************************
* tst instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40232 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40236 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40240 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40244 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40247 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40251 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40254 "isa_arm32.tcc"
)
{
#line 1843 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40266 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40274 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40278 "isa_arm32.tcc"
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40282 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40286 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40289 "isa_arm32.tcc"
)
{
#line 1870 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40314 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40322 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40325 "isa_arm32.tcc"
>

void
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40332 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40342 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40351 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40356 "isa_arm32.tcc"
> *DecodeOpTst_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40362 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40372 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40376 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40380 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40387 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40391 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40394 "isa_arm32.tcc"
)
{
#line 1852 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40406 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40414 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40418 "isa_arm32.tcc"
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40422 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40426 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40429 "isa_arm32.tcc"
)
{
#line 1892 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40455 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40466 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40473 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40483 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40491 "isa_arm32.tcc"
>

void
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40498 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40508 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40517 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40522 "isa_arm32.tcc"
> *DecodeOpTst_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40528 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40538 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40542 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40546 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40550 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40553 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40560 "isa_arm32.tcc"
)
{
#line 1861 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "tst";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 40572 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40577 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40580 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40584 "isa_arm32.tcc"
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40588 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40592 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40595 "isa_arm32.tcc"
)
{
#line 1915 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40622 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40633 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40640 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40650 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40658 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40665 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 40675 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40680 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40683 "isa_arm32.tcc"
>

void
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40690 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 40700 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40706 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40709 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40714 "isa_arm32.tcc"
> *DecodeOpTst_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40720 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of tst instruction
*******************************************************************/
/*******************************************************************
* teq instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40736 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40740 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40744 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40748 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40751 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40755 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40758 "isa_arm32.tcc"
)
{
#line 1951 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 40770 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40778 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40782 "isa_arm32.tcc"
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40786 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40790 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40793 "isa_arm32.tcc"
)
{
#line 1978 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40818 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40826 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40829 "isa_arm32.tcc"
>

void
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40836 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40846 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40855 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40860 "isa_arm32.tcc"
> *DecodeOpTeq_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 40866 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40876 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40880 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40884 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40891 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 40895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 40898 "isa_arm32.tcc"
)
{
#line 1960 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 40910 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40915 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40918 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 40922 "isa_arm32.tcc"
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40926 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 40930 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 40933 "isa_arm32.tcc"
)
{
#line 2000 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 40959 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40970 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40977 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 40987 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 40992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 40995 "isa_arm32.tcc"
>

void
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41002 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41012 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41018 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41021 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41026 "isa_arm32.tcc"
> *DecodeOpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41032 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41042 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41046 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41050 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41054 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41057 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41061 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41064 "isa_arm32.tcc"
)
{
#line 1969 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "teq";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41076 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41084 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41088 "isa_arm32.tcc"
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41092 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41096 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41099 "isa_arm32.tcc"
)
{
#line 2023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 ^ s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(shift_carry_out);
		// nothing to do with overflow (V) flag
	}
#line 41126 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41137 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41144 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41154 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41162 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41169 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41179 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41187 "isa_arm32.tcc"
>

void
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41194 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41204 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41210 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41213 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41218 "isa_arm32.tcc"
> *DecodeOpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41224 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of teq instruction
*******************************************************************/
/*******************************************************************
* cmp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41237 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41240 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41244 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41248 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41252 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41255 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41259 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41262 "isa_arm32.tcc"
)
{
#line 2059 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41282 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41286 "isa_arm32.tcc"
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41290 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41294 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41297 "isa_arm32.tcc"
)
{
#line 2087 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41322 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41333 "isa_arm32.tcc"
>

void
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41340 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41350 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41359 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41364 "isa_arm32.tcc"
> *DecodeOpCmp_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41370 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41380 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41384 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41388 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41392 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41395 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41399 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41402 "isa_arm32.tcc"
)
{
#line 2068 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41414 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41422 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41426 "isa_arm32.tcc"
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41430 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41434 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41437 "isa_arm32.tcc"
)
{
#line 2109 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N((res & 0x80000000) != 0);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41463 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41474 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41481 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41491 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41496 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41499 "isa_arm32.tcc"
>

void
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41506 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41516 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41522 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41525 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41530 "isa_arm32.tcc"
> *DecodeOpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41536 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41546 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41550 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41554 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41558 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41561 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41565 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41568 "isa_arm32.tcc"
)
{
#line 2078 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 41580 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41588 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41592 "isa_arm32.tcc"
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41596 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41600 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41603 "isa_arm32.tcc"
)
{
#line 2132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 - s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(!cpu.BorrowFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.SubtractionOverflowFrom(res, s1, s2)); // to check
	}
#line 41630 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41641 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41648 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41666 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41673 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 41683 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41688 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41691 "isa_arm32.tcc"
>

void
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41698 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 41708 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41714 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41717 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41722 "isa_arm32.tcc"
> *DecodeOpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41728 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmp instruction
*******************************************************************/
/*******************************************************************
* cmn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41744 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41748 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41752 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41756 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41759 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41763 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41766 "isa_arm32.tcc"
)
{
#line 2168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 41778 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41786 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41790 "isa_arm32.tcc"
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41794 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41798 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41801 "isa_arm32.tcc"
)
{
#line 2195 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41826 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41837 "isa_arm32.tcc"
>

void
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41844 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41854 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41863 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41868 "isa_arm32.tcc"
> *DecodeOpCmn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 41874 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41881 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41884 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41888 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41892 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41896 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41899 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 41903 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 41906 "isa_arm32.tcc"
)
{
#line 2177 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 41918 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41923 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41926 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 41930 "isa_arm32.tcc"
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41934 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 41938 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 41941 "isa_arm32.tcc"
)
{
#line 2217 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 41967 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 41975 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41978 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 41985 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 41995 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42000 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42003 "isa_arm32.tcc"
>

void
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42010 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42020 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42029 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42034 "isa_arm32.tcc"
> *DecodeOpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42040 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42050 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42054 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42058 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42062 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42065 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42069 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42072 "isa_arm32.tcc"
)
{
#line 2186 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "cmn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42084 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42089 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42092 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42096 "isa_arm32.tcc"
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42100 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42104 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42107 "isa_arm32.tcc"
)
{
#line 2240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 + s2;

		cpu.SetCPSR_N(res & 0x80000000);
		cpu.SetCPSR_Z(res == 0);
		cpu.SetCPSR_C(cpu.CarryFrom(res, s1, s2)); // to check
		cpu.SetCPSR_V(cpu.AdditionOverflowFrom(res, s1, s2)); // to check
	}
#line 42134 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42142 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42145 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42152 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42162 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42170 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42177 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42187 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42192 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42195 "isa_arm32.tcc"
>

void
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42202 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42212 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42221 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42226 "isa_arm32.tcc"
> *DecodeOpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42232 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cmn instruction
*******************************************************************/
/*******************************************************************
* orr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42248 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42252 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42256 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42260 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42263 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42267 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42270 "isa_arm32.tcc"
)
{
#line 2279 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42284 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42289 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42292 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42296 "isa_arm32.tcc"
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42300 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42304 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42307 "isa_arm32.tcc"
)
{
#line 2345 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42327 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42335 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42338 "isa_arm32.tcc"
>

void
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42345 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42355 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42364 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42369 "isa_arm32.tcc"
> *DecodeOpOrr_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42375 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42382 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42385 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42389 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42393 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42397 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42400 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42404 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42407 "isa_arm32.tcc"
)
{
#line 2290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42421 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42426 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42429 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42433 "isa_arm32.tcc"
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42437 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42441 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42444 "isa_arm32.tcc"
)
{
#line 2362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42465 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42473 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42476 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42483 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42493 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42501 "isa_arm32.tcc"
>

void
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42508 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42518 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42527 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42532 "isa_arm32.tcc"
> *DecodeOpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42538 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42548 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42552 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42556 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42560 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42563 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42567 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42570 "isa_arm32.tcc"
)
{
#line 2301 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 42584 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42589 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42592 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42596 "isa_arm32.tcc"
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42600 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42604 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42607 "isa_arm32.tcc"
)
{
#line 2380 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 | s2;
		cpu.SetGPR(rd, res);
	}
#line 42629 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42640 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42647 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42657 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42662 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42665 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42672 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 42682 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42687 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42690 "isa_arm32.tcc"
>

void
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42697 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 42707 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42716 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42721 "isa_arm32.tcc"
> *DecodeOpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42727 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42737 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42741 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42745 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42749 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42752 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42756 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42759 "isa_arm32.tcc"
)
{
#line 2312 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 42773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42781 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42785 "isa_arm32.tcc"
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42789 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42793 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42796 "isa_arm32.tcc"
)
{
#line 2399 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42826 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42834 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42837 "isa_arm32.tcc"
>

void
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42844 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 42854 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42860 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42863 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42868 "isa_arm32.tcc"
> *DecodeOpOrrs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 42874 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42881 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42884 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42888 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42892 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42896 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42899 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 42903 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 42906 "isa_arm32.tcc"
)
{
#line 2323 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 42920 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42925 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42928 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 42932 "isa_arm32.tcc"
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42936 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 42940 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 42943 "isa_arm32.tcc"
)
{
#line 2426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 42974 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 42982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42985 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 42992 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43002 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43010 "isa_arm32.tcc"
>

void
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43017 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43027 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43036 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43041 "isa_arm32.tcc"
> *DecodeOpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43047 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43057 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43061 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43065 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43069 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43072 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43076 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43079 "isa_arm32.tcc"
)
{
#line 2334 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "orr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43093 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43101 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43105 "isa_arm32.tcc"
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43109 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43113 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43116 "isa_arm32.tcc"
)
{
#line 2454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 | s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43148 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43159 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43166 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 43176 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43184 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43191 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43201 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43209 "isa_arm32.tcc"
>

void
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43216 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43226 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43232 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43235 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43240 "isa_arm32.tcc"
> *DecodeOpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43246 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of orr instruction
*******************************************************************/
/*******************************************************************
* mov instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43259 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43262 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43266 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43270 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43274 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43277 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43281 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43284 "isa_arm32.tcc"
)
{
#line 2501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43296 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43301 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43304 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43308 "isa_arm32.tcc"
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43312 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43316 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43319 "isa_arm32.tcc"
)
{
#line 2555 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43335 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43344 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43349 "isa_arm32.tcc"
> *DecodeOpMov_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43355 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43365 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43369 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43373 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43377 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43380 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43387 "isa_arm32.tcc"
)
{
#line 2510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43399 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43404 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43407 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43411 "isa_arm32.tcc"
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43415 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43419 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43422 "isa_arm32.tcc"
)
{
#line 2568 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43441 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43449 "isa_arm32.tcc"
>

void
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43456 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43466 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43472 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43475 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43480 "isa_arm32.tcc"
> *DecodeOpMov_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43486 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43493 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43496 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43500 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43504 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43508 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43511 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43515 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43518 "isa_arm32.tcc"
)
{
#line 2519 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43538 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43542 "isa_arm32.tcc"
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43546 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43550 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43553 "isa_arm32.tcc"
)
{
#line 2584 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1;
		cpu.SetGPR(rd, res);
	}
#line 43573 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43581 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43588 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43598 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43606 "isa_arm32.tcc"
>

void
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43613 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 43623 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43629 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43632 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43637 "isa_arm32.tcc"
> *DecodeOpMov_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43643 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43653 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43657 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43661 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43665 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43668 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43672 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43675 "isa_arm32.tcc"
)
{
#line 2528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 43687 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43695 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43699 "isa_arm32.tcc"
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43703 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43707 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43710 "isa_arm32.tcc"
)
{
#line 2601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43736 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43742 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43745 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43750 "isa_arm32.tcc"
> *DecodeOpMovs_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43756 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43766 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43770 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43774 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43778 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43781 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43785 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43788 "isa_arm32.tcc"
)
{
#line 2537 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 43800 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43808 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43812 "isa_arm32.tcc"
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43816 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43820 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43823 "isa_arm32.tcc"
)
{
#line 2624 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43852 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43860 "isa_arm32.tcc"
>

void
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43867 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 43877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43891 "isa_arm32.tcc"
> *DecodeOpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 43897 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43907 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43911 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43915 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43919 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43922 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 43926 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 43929 "isa_arm32.tcc"
)
{
#line 2546 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mov";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 43941 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43949 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 43953 "isa_arm32.tcc"
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 43957 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 43961 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 43964 "isa_arm32.tcc"
)
{
#line 2650 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 43994 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 43999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44002 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44009 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44019 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44024 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44027 "isa_arm32.tcc"
>

void
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44034 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44044 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44050 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44053 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44058 "isa_arm32.tcc"
> *DecodeOpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44064 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mov instruction
*******************************************************************/
/*******************************************************************
* bic instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44077 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44080 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44084 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44088 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44092 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44095 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44099 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44102 "isa_arm32.tcc"
)
{
#line 2692 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44116 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44124 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44128 "isa_arm32.tcc"
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44132 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44136 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44139 "isa_arm32.tcc"
)
{
#line 2758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44159 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44170 "isa_arm32.tcc"
>

void
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44177 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44187 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44193 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44196 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44201 "isa_arm32.tcc"
> *DecodeOpBic_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44207 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44217 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44221 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44225 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44229 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44232 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44236 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44239 "isa_arm32.tcc"
)
{
#line 2703 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44253 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44261 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44265 "isa_arm32.tcc"
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44269 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44273 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44276 "isa_arm32.tcc"
)
{
#line 2775 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44297 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44305 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44308 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44315 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44325 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44333 "isa_arm32.tcc"
>

void
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44340 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44350 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44359 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44364 "isa_arm32.tcc"
> *DecodeOpBic_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44370 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44380 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44384 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44388 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44392 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44395 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44399 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44402 "isa_arm32.tcc"
)
{
#line 2714 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44416 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44424 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44428 "isa_arm32.tcc"
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44432 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44436 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44439 "isa_arm32.tcc"
)
{
#line 2793 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);
	}
#line 44461 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44472 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44479 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44489 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44497 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44504 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44514 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44522 "isa_arm32.tcc"
>

void
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44529 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 44539 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44545 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44548 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44553 "isa_arm32.tcc"
> *DecodeOpBic_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44559 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44569 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44573 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44577 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44581 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44584 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44588 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44591 "isa_arm32.tcc"
)
{
#line 2725 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 44605 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44613 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44617 "isa_arm32.tcc"
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44621 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44625 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44628 "isa_arm32.tcc"
)
{
#line 2812 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44658 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44666 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44669 "isa_arm32.tcc"
>

void
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44676 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44686 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44695 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44700 "isa_arm32.tcc"
> *DecodeOpBics_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44706 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44713 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44716 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44720 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44724 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44728 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44731 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44735 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44738 "isa_arm32.tcc"
)
{
#line 2736 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 44752 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44760 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44764 "isa_arm32.tcc"
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44768 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44772 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44775 "isa_arm32.tcc"
)
{
#line 2839 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44806 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44814 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44817 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44824 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 44834 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44839 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44842 "isa_arm32.tcc"
>

void
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44849 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 44859 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44865 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44868 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44873 "isa_arm32.tcc"
> *DecodeOpBics_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 44879 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44889 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44893 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44897 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44901 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44904 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 44908 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 44911 "isa_arm32.tcc"
)
{
#line 2747 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "bic";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", r";
		buffer << rn;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 44925 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44933 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 44937 "isa_arm32.tcc"
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44941 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 44945 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 44948 "isa_arm32.tcc"
)
{
#line 2867 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1, s2;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = rn_value;
		s2 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = s1 & ~s2;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 44980 "isa_arm32.tcc"
}
/*
* end of mvn instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 44988 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44991 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 44998 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 3115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 45008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45016 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45023 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45041 "isa_arm32.tcc"
>

void
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45048 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45058 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45064 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45067 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45072 "isa_arm32.tcc"
> *DecodeOpBics_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45078 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bic instruction
*******************************************************************/
/*******************************************************************
* mvn instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45094 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45098 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45102 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45106 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45109 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45113 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45116 "isa_arm32.tcc"
)
{
#line 2911 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45128 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45136 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45140 "isa_arm32.tcc"
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45144 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45148 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45151 "isa_arm32.tcc"
)
{
#line 2965 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45167 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45176 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45181 "isa_arm32.tcc"
> *DecodeOpMvn_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45187 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45194 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45197 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45201 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45205 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45209 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45212 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45216 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45219 "isa_arm32.tcc"
)
{
#line 2920 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45231 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45236 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45239 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45243 "isa_arm32.tcc"
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45247 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45251 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45254 "isa_arm32.tcc"
)
{
#line 2978 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45273 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45281 "isa_arm32.tcc"
>

void
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45288 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45298 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45307 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45312 "isa_arm32.tcc"
> *DecodeOpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45318 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45328 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45332 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45336 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45340 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45343 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45350 "isa_arm32.tcc"
)
{
#line 2929 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45362 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45370 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45374 "isa_arm32.tcc"
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45378 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45382 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45385 "isa_arm32.tcc"
)
{
#line 2994 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value);
		res = ~s1;
		cpu.SetGPR(rd, res);
	}
#line 45405 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45413 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45420 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45430 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45438 "isa_arm32.tcc"
>

void
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45445 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45455 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45464 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45469 "isa_arm32.tcc"
> *DecodeOpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45475 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45485 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45489 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45493 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45497 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45500 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45504 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45507 "isa_arm32.tcc"
)
{
#line 2938 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 45519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45527 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45531 "isa_arm32.tcc"
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45535 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45539 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45542 "isa_arm32.tcc"
)
{
#line 3011 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperand32imm(rotate_imm, imm, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45568 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45577 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45582 "isa_arm32.tcc"
> *DecodeOpMvns_32imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45588 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45598 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45602 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45606 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45613 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45620 "isa_arm32.tcc"
)
{
#line 2947 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandImmShift(shift_imm, shift, rm, buffer);
	}
#line 45632 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45640 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45644 "isa_arm32.tcc"
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45648 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45652 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45655 "isa_arm32.tcc"
)
{
#line 3034 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandImmShift(shift_imm, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45684 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45692 "isa_arm32.tcc"
>

void
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45699 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45723 "isa_arm32.tcc"
> *DecodeOpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45729 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45739 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45743 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45747 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45751 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45754 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45758 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45761 "isa_arm32.tcc"
)
{
#line 2956 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		buffer << "mvn";
		cpu.DisasmCondition(cond, buffer);
		buffer << "s r";
		buffer << rd;
		buffer << ", ";
		cpu.DisasmShiftOperandRegShift(rs, shift, rm, buffer);
	}
#line 45773 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45778 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45781 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45785 "isa_arm32.tcc"
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45789 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45793 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45796 "isa_arm32.tcc"
)
{
#line 3060 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t s1;
		typename CONFIG::reg_t res;
		bool shift_carry_out = false;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		s1 = cpu.ShiftOperandRegShift(rs_value, shift, rm_value, &shift_carry_out);
		res = ~s1;
		cpu.SetGPR(rd, res);

		if(rd == cpu.PC_reg) {
			cpu.MoveSPSRtoCPSR();
			} else {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
			cpu.SetCPSR_C(shift_carry_out);
			// nothing to do with overflow (V) flag
		}
	}
#line 45826 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45834 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45841 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 3150 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 45851 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45859 "isa_arm32.tcc"
>

void
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45866 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 3185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 45876 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45882 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45885 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45890 "isa_arm32.tcc"
> *DecodeOpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 45896 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E DATA PROCESSING INSTRUCTIONS

**********************************************/
/*******************************************************************
* qadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45947 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45951 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45955 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 45959 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 45962 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 45966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 45969 "isa_arm32.tcc"
)
{
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 45980 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 45985 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45988 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 45992 "isa_arm32.tcc"
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 45996 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46000 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46003 "isa_arm32.tcc"
)
{
#line 64 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat, cpu.GetGPR(rn) , cpu.GetGPR(rm));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46024 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46033 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46038 "isa_arm32.tcc"
> *DecodeOpQadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46044 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qadd instruction
*******************************************************************/
/*******************************************************************
* qsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46057 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46060 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46064 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46068 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46072 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46075 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46079 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46082 "isa_arm32.tcc"
)
{
#line 93 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46093 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46101 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46105 "isa_arm32.tcc"
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46109 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46113 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46116 "isa_arm32.tcc"
)
{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , cpu.GetGPR(rn));
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46137 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46146 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46151 "isa_arm32.tcc"
> *DecodeOpQsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46157 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qsub instruction
*******************************************************************/
/*******************************************************************
* qdadd instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46170 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46173 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46177 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46181 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46185 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46188 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46195 "isa_arm32.tcc"
)
{
#line 130 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdadd";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46206 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46214 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46218 "isa_arm32.tcc"
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46222 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46226 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46229 "isa_arm32.tcc"
)
{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatAdd32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 || does_sat_tmp == 1? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46251 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46257 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46260 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46265 "isa_arm32.tcc"
> *DecodeOpQdadd(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46271 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdadd instruction
*******************************************************************/
/*******************************************************************
* qdsub instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46287 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46291 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46295 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46299 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46302 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46306 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46309 "isa_arm32.tcc"
)
{
#line 168 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		buffer << "qdsub";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rn;
	}
#line 46320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46328 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46332 "isa_arm32.tcc"
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46336 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46340 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46343 "isa_arm32.tcc"
)
{
#line 176 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	{
		uint8_t does_sat, does_sat_tmp;
		uint32_t result;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		SignedSatAdd32(result, does_sat_tmp, cpu.GetGPR(rn) , cpu.GetGPR(rn));
		SignedSatSub32(result, does_sat, cpu.GetGPR(rm) , result);
		cpu.SetCPSR_Q(does_sat == 1 ? true : false);
		cpu.SetGPR(rd, result);
	}
#line 46365 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46371 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46374 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46379 "isa_arm32.tcc"
> *DecodeOpQdsub(CodeType code, typename CONFIG::address_t addr)
{
	return new OpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46385 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of qdsub instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MULTIPLY INSTRUCTIONS

**********************************************/
/* TODO: implement missing instructions:for E variants of version 5 and above
*  - smulxy
*  - smulwy
*  - smlaxy
*  - smlawy
*  - smlalxy
*/
/*******************************************************************
* mla instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46443 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46446 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46450 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46454 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46458 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46461 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46465 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46468 "isa_arm32.tcc"
)
{
#line 55 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mla";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << ", "
		<< "r" << rn << "";
	}
#line 46481 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46489 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46493 "isa_arm32.tcc"
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46497 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46501 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46504 "isa_arm32.tcc"
)
{
#line 65 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		res += rn_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46529 "isa_arm32.tcc"
}
/*
* end of umull instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46537 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46540 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46547 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 333 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 46557 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46562 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46565 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46572 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46582 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46587 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46590 "isa_arm32.tcc"
>

void
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46597 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46607 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46613 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46616 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46621 "isa_arm32.tcc"
> *DecodeOpMla(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46627 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mla instruction
*******************************************************************/
/*******************************************************************
* mul instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46640 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46643 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46647 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46651 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46655 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46658 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46662 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46665 "isa_arm32.tcc"
)
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "mul";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46677 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46685 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46689 "isa_arm32.tcc"
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46693 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46697 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46700 "isa_arm32.tcc"
)
{
#line 106 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rm_value * rs_value;
		cpu.SetGPR(rd, res);

		if(s) {
			cpu.SetCPSR_N(res & 0x80000000);
			cpu.SetCPSR_Z(res == 0);
		}
	}
#line 46723 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46728 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46731 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46738 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46748 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46756 "isa_arm32.tcc"
>

void
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46763 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46773 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46782 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46787 "isa_arm32.tcc"
> *DecodeOpMul(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 46793 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mul instruction
*******************************************************************/
/*******************************************************************
* smlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46813 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46817 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46821 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46825 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46828 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 46832 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 46835 "isa_arm32.tcc"
)
{
#line 141 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 46848 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46853 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46856 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 46860 "isa_arm32.tcc"
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46864 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 46868 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 46871 "isa_arm32.tcc"
)
{
#line 151 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res = (int64_t)res + ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 46901 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46909 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46916 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 46926 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46931 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46934 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46941 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 46951 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46956 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46959 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46966 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 46976 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 46981 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46984 "isa_arm32.tcc"
>

void
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 46991 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47001 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47010 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47015 "isa_arm32.tcc"
> *DecodeOpSmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47021 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlal instruction
*******************************************************************/
/*******************************************************************
* smull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47041 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47045 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47049 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47053 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47056 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47060 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47063 "isa_arm32.tcc"
)
{
#line 193 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "smull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47076 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47084 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47088 "isa_arm32.tcc"
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47092 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47096 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47099 "isa_arm32.tcc"
)
{
#line 203 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)(int32_t)rm_value) * ((int64_t)(int32_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47126 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47134 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47141 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47151 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47159 "isa_arm32.tcc"
>

void
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47166 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47176 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47185 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47190 "isa_arm32.tcc"
> *DecodeOpSmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47196 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smull instruction
*******************************************************************/
/*******************************************************************
* umlal instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47216 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47220 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47224 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47228 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47231 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47235 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47238 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umlal";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47251 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47256 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47259 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47263 "isa_arm32.tcc"
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47267 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47271 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47274 "isa_arm32.tcc"
)
{
#line 252 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rdhi_value = inherited::rdhi_init + cpu.GetGPR(rdhi);
		typename CONFIG::reg_t rdlo_value = inherited::rdlo_init + cpu.GetGPR(rdlo);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = rdlo_value + (((uint64_t)rdhi_value) << 32);
		res += ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47304 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47312 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47319 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47329 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47334 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47337 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47344 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47354 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47359 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47362 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47369 "isa_arm32.tcc"
>::initialize_rdhi_init()
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdhi == 15) inherited::rdhi_init = 8;
		else inherited::rdhi_init = 0;
	}
#line 47379 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47384 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47387 "isa_arm32.tcc"
>

void
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47394 "isa_arm32.tcc"
>::initialize_rdlo_init()
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rdlo == 15) inherited::rdlo_init = 8;
		else inherited::rdlo_init = 0;
	}
#line 47404 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47413 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47418 "isa_arm32.tcc"
> *DecodeOpUmlal(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47424 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of umlal instruction
*******************************************************************/
/*******************************************************************
* umull instruction
* Note: this instruction is only supported for the M variants, that is:
*    ARMV4TXM
*    ARMV5XM
*    ARMV5TXM
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47441 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47444 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47448 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47452 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47456 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47459 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47463 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47466 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		buffer << "umull";
		cpu.DisasmCondition(cond, buffer);
		if(s) buffer << "s";
		buffer << " r" << rdhi << ", "
		<< "r" << rdlo << ", "
		<< "r" << rm << ", "
		<< "r" << rs << "";
	}
#line 47479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47487 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47491 "isa_arm32.tcc"
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47495 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47499 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47502 "isa_arm32.tcc"
)
{
#line 304 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint64_t res;
		uint64_t res_lo, res_hi;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rs_value = inherited::rs_init + cpu.GetGPR(rs);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		res = ((int64_t)rm_value) * ((int64_t)rs_value);
		res_lo = res & (uint64_t)(~(uint32_t)0);
		res_hi = (res >> 32) & (uint64_t)(~(uint32_t)0);
		cpu.SetGPR(rdhi, (typename CONFIG::reg_t)res_hi);
		cpu.SetGPR(rdlo, (typename CONFIG::reg_t)res_lo);

		if(s) {
			cpu.SetCPSR_N(res_hi & 0x80000000);
			cpu.SetCPSR_Z(res_hi == 0 && res_lo == 0);
		}
	}
#line 47529 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47537 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47544 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 341 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 47554 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47559 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47562 "isa_arm32.tcc"
>

void
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47569 "isa_arm32.tcc"
>::initialize_rs_init()
{
#line 349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rs == 15) inherited::rs_init = 8;
		else inherited::rs_init = 0;
	}
#line 47579 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47588 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47593 "isa_arm32.tcc"
> *DecodeOpUmull(CodeType code, typename CONFIG::address_t addr)
{
	return new OpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47599 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

ARMV5E MULTIPLY INSTRUCTIONS

**********************************************/
/*****************************************************************************
* TODO:
* op smla()
* op smlal()
* op smlaw()
* op smul()
* op smulw()
*/
/*******************************************************************
* smlaxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47658 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47662 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47666 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47670 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47673 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47677 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47680 "isa_arm32.tcc"
)
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smla";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47696 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47701 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47704 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47708 "isa_arm32.tcc"
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47712 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47716 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47719 "isa_arm32.tcc"
)
{
#line 70 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = op1 + val_rn;
		if(op1 > 0 && (val_rd & (typename CONFIG::reg_t)0x80000000ULL) != 0) {
			cpu.SetCPSR_Q(true);
			} else {
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);
	}
#line 47773 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47782 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47787 "isa_arm32.tcc"
> *DecodeOpSmlaxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47793 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlaxy instruction
*******************************************************************/
/*******************************************************************
* smlalxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47806 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47809 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47813 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47817 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47821 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47824 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47828 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47831 "isa_arm32.tcc"
)
{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlal";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rdlo;
		buffer << ", r" << rdhi;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 47847 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47855 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47859 "isa_arm32.tcc"
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47863 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47867 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47870 "isa_arm32.tcc"
)
{
#line 145 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rdhi;
		typename CONFIG::reg_t val_rdlo, val_rdlo_init;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rdhi == cpu.PC_reg || rdlo == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rdhi = cpu.GetGPR(rdhi);
		val_rdlo_init = cpu.GetGPR(rdlo);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rdlo = val_rdlo_init + op1;
		if(op1 < 0) rdhi = rdhi + (typename CONFIG::reg_t)0xffffffffULL;
		else {
			if(cpu.CarryFrom(val_rdlo, val_rdlo_init, (typename CONFIG::reg_t)op1))
			rdhi++;
		}
		cpu.SetGPR(rdlo, val_rdlo);
		cpu.SetGPR(rdhi, val_rdhi);
	}
#line 47926 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47935 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47940 "isa_arm32.tcc"
> *DecodeOpSmlalxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 47946 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlalxy instruction
*******************************************************************/
/*******************************************************************
* smlawy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 47959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47962 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 47966 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 47970 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 47974 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 47977 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 47981 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 47984 "isa_arm32.tcc"
)
{
#line 209 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smlaw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
		buffer << ", r" << rn;
	}
#line 47998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48006 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48010 "isa_arm32.tcc"
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48014 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48018 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48021 "isa_arm32.tcc"
)
{
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rn;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rn == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);
		val_rn = cpu.GetGPR(rn);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op = (typename CONFIG::sreg_t)val_rs;
		}

		int64_t op64;
		op64 = (typename CONFIG::sreg_t)val_rm;
		op64 = op64 * op;
		op64 = op64 >> 16;
		op64 = op64 & (uint64_t)0xffffffffULL;
		typename CONFIG::sreg_t sval_rd;
		typename CONFIG::reg_t op_tmp = op64;
		sval_rd = (typename CONFIG::sreg_t)op_tmp;
		val_rd = (typename CONFIG::reg_t)(sval_rd + (typename CONFIG::sreg_t)val_rn);
		if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
		val_rn & (typename CONFIG::reg_t)0x80000000ULL) {
			cpu.SetCPSR_Q(false);
			} else {
			if(op_tmp & (typename CONFIG::reg_t)0x80000000ULL !=
			val_rd & (typename CONFIG::reg_t)0x80000000ULL) {
				cpu.SetCPSR_Q(true);
			} else
			cpu.SetCPSR_Q(false);
		}
		cpu.SetGPR(rd, val_rd);

	}
#line 48077 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48086 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48091 "isa_arm32.tcc"
> *DecodeOpSmlawy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48097 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smlawy instruction
*******************************************************************/
/*******************************************************************
* smulxy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48110 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48113 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48117 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48121 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48125 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48128 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48132 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48135 "isa_arm32.tcc"
)
{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smul";
		if(x) buffer << "t";
		else buffer << "b";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48150 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48158 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48162 "isa_arm32.tcc"
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48166 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48170 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48173 "isa_arm32.tcc"
)
{
#line 296 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(x)
		val_rm = val_rm >> 16;
		if(val_rm & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rm = val_rm | (typename CONFIG::reg_t)0xffff0000ULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
			} else {
			val_rm = val_rm & (typename CONFIG::reg_t)0x0000ffffULL;
			op1 = (typename CONFIG::sreg_t)val_rm;
		}

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = op1 * op2;
		val_rd = (typename CONFIG::reg_t)op1;
		cpu.SetGPR(rd, val_rd);
	}
#line 48220 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48226 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48229 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48234 "isa_arm32.tcc"
> *DecodeOpSmulxy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48240 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulxy instruction
*******************************************************************/
/*******************************************************************
* smulwy instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48256 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48260 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48264 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48268 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48271 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48275 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48278 "isa_arm32.tcc"
)
{
#line 351 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		buffer << "smulw";
		if(y) buffer << "t";
		else buffer << "b";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd;
		buffer << ", r" << rm;
		buffer << ", r" << rs;
	}
#line 48291 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48296 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48299 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48303 "isa_arm32.tcc"
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48307 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48311 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48314 "isa_arm32.tcc"
)
{
#line 361 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	{
		typename CONFIG::sreg_t op1;
		typename CONFIG::sreg_t op2;
		typename CONFIG::reg_t val_rm;
		typename CONFIG::reg_t val_rs;
		typename CONFIG::reg_t val_rd;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		if(rd == cpu.PC_reg || rm == cpu.PC_reg || rs == cpu.PC_reg) {
			// unpredictable behavior, we do nothing
			return;
		}

		val_rm = cpu.GetGPR(rm);
		val_rs = cpu.GetGPR(rs);

		if(y)
		val_rs = val_rs >> 16;
		if(val_rs & (typename CONFIG::reg_t)0x00008000ULL) {
			val_rs = val_rs | (typename CONFIG::reg_t)0xffff0000ULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
			} else {
			val_rs = val_rs & (typename CONFIG::reg_t)0x0000ffffULL;
			op2 = (typename CONFIG::sreg_t)val_rs;
		}

		op1 = (typename CONFIG::sreg_t)val_rm;
		int64_t op64 = (int64_t)op1 * (int64_t)op2;
		val_rd = (typename CONFIG::reg_t)((uint64_t)(op64 >> 16) & (uint64_t)0xffffffffULL);
		cpu.SetGPR(rd, val_rd);
	}
#line 48352 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48358 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48361 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48366 "isa_arm32.tcc"
> *DecodeOpSmulwy(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48372 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of smulwy instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/
/*******************************************************************
* mrs instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48423 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48426 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48430 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48434 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48438 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48441 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48445 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48448 "isa_arm32.tcc"
)
{
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "mrs";
		cpu.DisasmCondition(cond, buffer);
		buffer << "r" << rd << ", ";
		if(r) buffer << "spsr";
		else buffer << "cpsr";
	}
#line 48459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48467 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48471 "isa_arm32.tcc"
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48475 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48479 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48482 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		/* if rd is the pc register the behavior is unpredictable,
		*   we just return */
		if(rd == cpu.PC_reg) {
			return;
		}

		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning("
				<< __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str() << endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			cpu.SetGPR(rd, cpu.GetSPSR());
			} else {
			cpu.SetGPR(rd, cpu.GetCPSR());
		}
	}
#line 48537 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48543 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48546 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48551 "isa_arm32.tcc"
> *DecodeOpMrs(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48557 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrs instruction
*******************************************************************/
/*******************************************************************
* msr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48573 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48577 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48581 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48585 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48588 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48592 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48595 "isa_arm32.tcc"
)
{
#line 116 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", ";
		cpu.DisasmShiftOperand32Imm(rotate_imm, imm, buffer);
	}
#line 48609 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48617 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48621 "isa_arm32.tcc"
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48625 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48629 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48632 "isa_arm32.tcc"
)
{
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = cpu.ShiftOperand32imm(rotate_imm,
		imm);
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__ << EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			*   unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << Endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48740 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48749 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48754 "isa_arm32.tcc"
> *DecodeOpMsr_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48760 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48770 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48774 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48778 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48782 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48785 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 48789 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 48792 "isa_arm32.tcc"
)
{
#line 234 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		buffer << "msr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " ";
		if(r) buffer << "spsr_";
		else buffer << "cpsr_";
		cpu.DisasmConditionFieldsMask(mask, buffer);
		buffer << ", r" << rm;
	}
#line 48805 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48813 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 48817 "isa_arm32.tcc"
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48821 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 48825 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 48828 "isa_arm32.tcc"
)
{
#line 244 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		uint32_t operand;
		typename CONFIG::reg_t reg;
		typename CONFIG::reg_t reg_mask;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t run_mode;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		operand = rm_value;
		run_mode = cpu.GetCPSR() & cpu.RUNNING_MODE_MASK; /* get running mode */
		if(r) {
			/* check current running mode, if in user or system mode then the behaviour is
			*   unpredictable, so we will do a return */
			if((run_mode == cpu.USER_MODE) ||
			(run_mode == cpu.SYSTEM_MODE)) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to access SPSR while running in "
				<< ((run_mode == cpu.USER_MODE)?"user":"system")
				<< " mode with the following instruction: "
				<< endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetSPSR();
			} else {
			/* check current running mode, if in user mode then the behaviour is
			* 	 unpredictable, so we will do a return */
			if(mask != 0x08 && run_mode == cpu.USER_MODE) {
				stringstream str;
				this->disasm(cpu, str);

#ifdef SOCLIB

				cerr << "Warning(" << __FUNCTION__
				<< ":" << __FILE__ << ":" << __LINE__
				<< "):" << endl
				<< "Warning: trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cerr << str.str()
				<< endl;

#else // SOCLIB

				cpu.logger << DebugWarning
				<< "trying to execute msr instruction  while running in "
				<< "user"
				<< " mode: " << endl;
				cpu.logger << str.str() << endl
				<< "Location: " << __FUNCTION__ << ":" << __FILE__ << ":" << __LINE__
				<< EndDebugWarning;

#endif // SOCLIB

				return;
			}
			reg = cpu.GetCPSR();
		}

		/* creating the register mask */
		reg_mask = 0;
		if((mask & 0x01) == 0x01) reg_mask = reg_mask | 0xFF;
		if((mask & 0x02) == 0x02) reg_mask = reg_mask | 0xFF00;
		if((mask & 0x04) == 0x04) reg_mask = reg_mask | 0xFF0000;
		if((mask & 0x08) == 0x08) reg_mask = reg_mask | 0xFF000000;

		/* updating the register */
		reg = (reg & ~reg_mask) | (operand & reg_mask);

		if(r) cpu.SetSPSR(reg);
		else {
			cpu.SetCPSR(reg);
			/* check if there has been any change in the running mode,
			*   and switch registers if so */
			typename CONFIG::reg_t new_run_mode = reg & cpu.RUNNING_MODE_MASK;
			if(run_mode != new_run_mode) {
				cpu.SetGPRMapping(run_mode, new_run_mode);
			}
		}
	}
#line 48939 "isa_arm32.tcc"
}
/*
* end of msr instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48947 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48950 "isa_arm32.tcc"
>

void
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48957 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/status_register_access.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 48967 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 48973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48976 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 48981 "isa_arm32.tcc"
> *DecodeOpMsr_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 48987 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49076 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49080 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49084 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49088 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49091 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49095 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49098 "isa_arm32.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 49109 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49114 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49117 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49121 "isa_arm32.tcc"
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49125 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49129 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49132 "isa_arm32.tcc"
)
{
#line 104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t new_rn_value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		new_rn_value = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.SetGPR(rn, new_rn_value); // update rn

		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49157 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49165 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49168 "isa_arm32.tcc"
>

void
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49175 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49185 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49191 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49194 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49199 "isa_arm32.tcc"
> *DecodeOpLdr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49205 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49212 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49215 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49219 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49223 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49227 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49230 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49234 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49237 "isa_arm32.tcc"
)
{
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 49248 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49256 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49260 "isa_arm32.tcc"
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49264 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49268 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49271 "isa_arm32.tcc"
)
{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49292 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49300 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49303 "isa_arm32.tcc"
>

void
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49310 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49320 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49326 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49329 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49334 "isa_arm32.tcc"
> *DecodeOpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49340 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49350 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49354 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49358 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49362 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49365 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49369 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49372 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 49383 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49391 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49395 "isa_arm32.tcc"
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49399 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49403 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49406 "isa_arm32.tcc"
)
{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49428 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49436 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49439 "isa_arm32.tcc"
>

void
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49446 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49456 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49465 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49470 "isa_arm32.tcc"
> *DecodeOpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49476 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49486 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49490 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49494 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49498 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49501 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49505 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49508 "isa_arm32.tcc"
)
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49518 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49526 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49530 "isa_arm32.tcc"
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49534 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49538 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49541 "isa_arm32.tcc"
)
{
#line 163 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49565 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49573 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49576 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49583 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49593 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49598 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49601 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49608 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49618 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49626 "isa_arm32.tcc"
>

void
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49633 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49643 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49652 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49657 "isa_arm32.tcc"
> *DecodeOpLdr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49663 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49673 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49677 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49681 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49685 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49688 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49692 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49695 "isa_arm32.tcc"
)
{
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49705 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49713 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49717 "isa_arm32.tcc"
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49721 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49725 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49728 "isa_arm32.tcc"
)
{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49751 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49759 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49762 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49769 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49779 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49787 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49794 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49804 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49812 "isa_arm32.tcc"
>

void
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49819 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 49829 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49835 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49838 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49843 "isa_arm32.tcc"
> *DecodeOpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 49849 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49859 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49863 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49867 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49871 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49874 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 49878 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 49881 "isa_arm32.tcc"
)
{
#line 97 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 49891 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49896 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49899 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 49903 "isa_arm32.tcc"
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49907 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 49911 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 49914 "isa_arm32.tcc"
)
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		if(rd == cpu.PC_reg) {
			cpu.Read32toPCUpdateT(address);
			} else {
			cpu.Read32toGPR(address, rd);
		}
	}
#line 49938 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49949 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49956 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 49966 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49974 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49981 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 49991 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 49996 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 49999 "isa_arm32.tcc"
>

void
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50006 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50016 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50022 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50025 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50030 "isa_arm32.tcc"
> *DecodeOpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50036 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldr instruction
*******************************************************************/
/*******************************************************************
* ldrb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50049 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50052 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50056 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50060 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50064 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50067 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50071 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50074 "isa_arm32.tcc"
)
{
#line 240 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 50085 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50093 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50097 "isa_arm32.tcc"
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50101 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50105 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50108 "isa_arm32.tcc"
)
{
#line 285 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		cpu.Read8toGPR(address, rd);
	}
#line 50126 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50137 "isa_arm32.tcc"
>

void
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50144 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50154 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50160 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50163 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50168 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50174 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50184 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50188 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50192 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50196 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50199 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50203 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50206 "isa_arm32.tcc"
)
{
#line 248 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 50217 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50222 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50225 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50229 "isa_arm32.tcc"
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50233 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50237 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50240 "isa_arm32.tcc"
)
{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.Read8toGPR(address, rd);
	}
#line 50257 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50268 "isa_arm32.tcc"
>

void
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50275 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50285 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50291 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50294 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50299 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50305 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50315 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50319 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50323 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50327 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50330 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50334 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50337 "isa_arm32.tcc"
)
{
#line 256 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 50348 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50353 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50356 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50360 "isa_arm32.tcc"
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50364 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50368 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50371 "isa_arm32.tcc"
)
{
#line 314 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read8toGPR(address, rd);
	}
#line 50389 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50397 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50400 "isa_arm32.tcc"
>

void
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50407 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50417 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50423 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50426 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50431 "isa_arm32.tcc"
> *DecodeOpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50437 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50444 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50447 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50451 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50455 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50459 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50462 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50466 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50469 "isa_arm32.tcc"
)
{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50479 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50487 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50491 "isa_arm32.tcc"
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50495 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50499 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50502 "isa_arm32.tcc"
)
{
#line 329 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 50522 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50530 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50533 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50540 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50550 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50558 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50565 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50575 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50580 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50583 "isa_arm32.tcc"
>

void
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50590 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50600 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50609 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50614 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50620 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50630 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50634 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50638 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50642 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50645 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50652 "isa_arm32.tcc"
)
{
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50662 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50670 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50674 "isa_arm32.tcc"
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50678 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50682 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50685 "isa_arm32.tcc"
)
{
#line 346 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.Read8toGPR(address, rd);
	}
#line 50704 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50712 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50715 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50722 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50732 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50737 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50740 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50747 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50757 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50765 "isa_arm32.tcc"
>

void
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50772 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50782 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50788 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50791 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50796 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50802 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50809 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50812 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50816 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50820 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50824 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50827 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 50831 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 50834 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 50844 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50852 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 50856 "isa_arm32.tcc"
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50860 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 50864 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 50867 "isa_arm32.tcc"
)
{
#line 362 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		cpu.Read8toGPR(address, rd);
	}
#line 50887 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50898 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50905 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 50915 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50923 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50930 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 50940 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50945 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50948 "isa_arm32.tcc"
>

void
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50955 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 50965 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 50971 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50974 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 50979 "isa_arm32.tcc"
> *DecodeOpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 50985 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrb_rd15 instruction
* this is the specialization of the instruction ldrb when rd = 15
* for most of the arm architectures this is an undefined behavior instruction (do nothing is our action)
* however for the armv5e architectures some of the combinations correspond to a pld instruction if
* it is a imm_offset or reg_offset type and cond == 0b1111
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51002 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51005 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51009 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51013 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51017 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51020 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51024 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51027 "isa_arm32.tcc"
)
{
#line 398 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51034 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51042 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51046 "isa_arm32.tcc"
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51050 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51054 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51057 "isa_arm32.tcc"
)
{
#line 430 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51066 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51075 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51080 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51086 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51096 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51100 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51104 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51108 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51111 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51115 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51118 "isa_arm32.tcc"
)
{
#line 402 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld";
			cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51129 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51137 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51141 "isa_arm32.tcc"
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51145 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51149 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51152 "isa_arm32.tcc"
)
{
#line 436 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBImmOffset(u, rn_value, offset);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51173 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51181 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51184 "isa_arm32.tcc"
>

void
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51191 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51201 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51210 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51215 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51221 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51231 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51235 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51239 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51243 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51246 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51250 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51253 "isa_arm32.tcc"
)
{
#line 410 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51260 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51268 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51272 "isa_arm32.tcc"
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51276 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51280 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51283 "isa_arm32.tcc"
)
{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51292 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51298 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51301 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51306 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51312 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51322 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51326 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51330 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51334 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51337 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51341 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51344 "isa_arm32.tcc"
)
{
#line 414 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51351 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51356 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51359 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51363 "isa_arm32.tcc"
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51367 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51371 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51374 "isa_arm32.tcc"
)
{
#line 460 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51383 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51392 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51397 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51403 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51410 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51413 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51417 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51421 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51425 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51428 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51432 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51435 "isa_arm32.tcc"
)
{
#line 418 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E) {
			buffer << "pld ";
			cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
		} else
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51446 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51454 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51458 "isa_arm32.tcc"
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51462 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51466 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51469 "isa_arm32.tcc"
)
{
#line 466 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		if(CONFIG::HAS_LOAD_STORE_V5E && cond == 15) {
			typedef Operation<CONFIG> inherited;

			typename CONFIG::address_t address;
			typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
			typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

			address = cpu.LSWUBReg(u, rn_value, 15, shift_imm, shift, rm_value);
			cpu.ReadPrefetch(address);
			} else {
			/* unpredictable */
			cpu.Unpredictable();
			cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		}
	}
#line 51491 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51499 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51502 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51509 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51527 "isa_arm32.tcc"
>

void
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51534 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51544 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51550 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51553 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51558 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51564 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51574 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51578 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51582 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51586 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51589 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51593 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51596 "isa_arm32.tcc"
)
{
#line 426 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "unpredictable instruction (ldrb)";
	}
#line 51603 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51608 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51611 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51615 "isa_arm32.tcc"
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51619 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51623 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51626 "isa_arm32.tcc"
)
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		/* unpredictable */
		cpu.Unpredictable();
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
	}
#line 51635 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51641 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51644 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51649 "isa_arm32.tcc"
> *DecodeOpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51655 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrb instruction
*******************************************************************/
/*******************************************************************
* ldrt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51672 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51676 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51680 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51684 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51687 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51691 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51694 "isa_arm32.tcc"
)
{
#line 503 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 51704 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51709 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51712 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51716 "isa_arm32.tcc"
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51720 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51724 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51727 "isa_arm32.tcc"
)
{
#line 517 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read32toGPR(address, rd);
	}
#line 51745 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51753 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51756 "isa_arm32.tcc"
>

void
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51763 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51773 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51782 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51787 "isa_arm32.tcc"
> *DecodeOpLdrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51793 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51800 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51803 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51807 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51811 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51815 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51818 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 51822 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 51825 "isa_arm32.tcc"
)
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 51835 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51840 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51843 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51847 "isa_arm32.tcc"
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51851 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 51855 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 51858 "isa_arm32.tcc"
)
{
#line 532 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
	}
#line 51875 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51886 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51893 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 51903 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51908 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51911 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51918 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 51928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51936 "isa_arm32.tcc"
>

void
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51943 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 51953 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51959 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51962 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51967 "isa_arm32.tcc"
> *DecodeOpLdrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 51973 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrt instruction
*******************************************************************/
/*******************************************************************
* ldrbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 51987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51990 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 51994 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 51998 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52002 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52005 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52009 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52012 "isa_arm32.tcc"
)
{
#line 558 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52022 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52027 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52030 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52034 "isa_arm32.tcc"
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52038 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52042 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52045 "isa_arm32.tcc"
)
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset));
		cpu.Read8toGPR(address, rd);
	}
#line 52063 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52074 "isa_arm32.tcc"
>

void
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52081 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52091 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52097 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52100 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52105 "isa_arm32.tcc"
> *DecodeOpLdrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52111 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52121 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52125 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52129 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52133 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52136 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52140 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52143 "isa_arm32.tcc"
)
{
#line 565 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52153 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52161 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52165 "isa_arm32.tcc"
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52169 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52173 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52176 "isa_arm32.tcc"
)
{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		cpu.Read8toGPR(address, rd);
	}
#line 52196 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52207 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52214 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52224 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52232 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52239 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52249 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52257 "isa_arm32.tcc"
>

void
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52264 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52274 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52283 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52288 "isa_arm32.tcc"
> *DecodeOpLdrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52294 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrbt instruction
*******************************************************************/
/*******************************************************************
* str instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52307 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52310 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52314 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52318 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52322 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52325 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52329 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52332 "isa_arm32.tcc"
)
{
#line 619 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 52342 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52347 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52350 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52354 "isa_arm32.tcc"
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52358 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52362 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52365 "isa_arm32.tcc"
)
{
#line 661 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52387 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52398 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52405 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52415 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52423 "isa_arm32.tcc"
>

void
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52430 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52440 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52446 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52449 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52454 "isa_arm32.tcc"
> *DecodeOpStr_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52460 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52470 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52474 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52478 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52482 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52485 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52489 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52492 "isa_arm32.tcc"
)
{
#line 626 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 52502 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52510 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52514 "isa_arm32.tcc"
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52518 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52522 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52525 "isa_arm32.tcc"
)
{
#line 680 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;

		cpu.Write32(address, value);
	}
#line 52547 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52555 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52558 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52565 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52575 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52580 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52583 "isa_arm32.tcc"
>

void
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52590 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52600 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52606 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52609 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52614 "isa_arm32.tcc"
> *DecodeOpStr_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52620 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52630 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52634 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52638 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52642 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52645 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52652 "isa_arm32.tcc"
)
{
#line 633 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 52662 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52670 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52674 "isa_arm32.tcc"
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52678 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52682 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52685 "isa_arm32.tcc"
)
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52707 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52718 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52725 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52735 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52740 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52743 "isa_arm32.tcc"
>

void
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52750 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52760 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52766 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52769 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52774 "isa_arm32.tcc"
> *DecodeOpStr_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52780 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52787 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52790 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52794 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52798 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52802 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52805 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52809 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52812 "isa_arm32.tcc"
)
{
#line 640 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 52822 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52830 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52834 "isa_arm32.tcc"
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52838 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52842 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52845 "isa_arm32.tcc"
)
{
#line 718 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 52868 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52879 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52886 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 52896 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52904 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52911 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 52921 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52929 "isa_arm32.tcc"
>

void
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52936 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 52946 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52955 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52960 "isa_arm32.tcc"
> *DecodeOpStr_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 52966 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 52973 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52976 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 52980 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 52984 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 52988 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 52991 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 52995 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 52998 "isa_arm32.tcc"
)
{
#line 647 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53008 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53016 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53020 "isa_arm32.tcc"
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53024 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53028 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53031 "isa_arm32.tcc"
)
{
#line 738 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53053 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53061 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53064 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53071 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53081 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53086 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53089 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53096 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53106 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53111 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53114 "isa_arm32.tcc"
>

void
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53121 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53131 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53137 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53140 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53145 "isa_arm32.tcc"
> *DecodeOpStr_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53151 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53161 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53165 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53169 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53173 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53176 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53180 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53183 "isa_arm32.tcc"
)
{
#line 654 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53193 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53201 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53205 "isa_arm32.tcc"
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53209 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53213 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53216 "isa_arm32.tcc"
)
{
#line 757 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, address);
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 53239 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53250 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53257 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53267 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53272 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53275 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53282 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53292 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53297 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53300 "isa_arm32.tcc"
>

void
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53307 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53317 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53326 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53331 "isa_arm32.tcc"
> *DecodeOpStr_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53337 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of str instruction
*******************************************************************/
/*******************************************************************
* strb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53353 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53357 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53361 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53365 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53368 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53372 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53375 "isa_arm32.tcc"
)
{
#line 792 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 53386 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53394 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53398 "isa_arm32.tcc"
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53402 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53406 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53409 "isa_arm32.tcc"
)
{
#line 837 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53430 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53441 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53448 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53458 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53466 "isa_arm32.tcc"
>

void
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53473 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53483 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53492 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53497 "isa_arm32.tcc"
> *DecodeOpStrb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53503 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53510 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53513 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53517 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53521 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53525 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53528 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53532 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53535 "isa_arm32.tcc"
)
{
#line 800 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_offset(u, rn, offset, buffer);
	}
#line 53546 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53554 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53558 "isa_arm32.tcc"
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53562 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53566 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53569 "isa_arm32.tcc"
)
{
#line 855 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53589 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53597 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53600 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53607 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53617 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53622 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53625 "isa_arm32.tcc"
>

void
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53632 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53642 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53651 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53656 "isa_arm32.tcc"
> *DecodeOpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53662 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53672 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53676 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53680 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53684 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53687 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53691 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53694 "isa_arm32.tcc"
)
{
#line 808 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_pre(u, rn, offset, buffer);
	}
#line 53705 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53713 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53717 "isa_arm32.tcc"
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53721 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53725 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53728 "isa_arm32.tcc"
)
{
#line 872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBImmOffset(u, rn_value, offset); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53749 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53757 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53760 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53767 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53777 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53782 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53785 "isa_arm32.tcc"
>

void
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53792 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53802 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53808 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53811 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53816 "isa_arm32.tcc"
> *DecodeOpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 53822 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53829 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53832 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53836 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53840 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53844 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53847 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 53851 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 53854 "isa_arm32.tcc"
)
{
#line 816 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 53864 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53869 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53872 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 53876 "isa_arm32.tcc"
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53880 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 53884 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 53887 "isa_arm32.tcc"
)
{
#line 890 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 53909 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53917 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53920 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53927 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 53937 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53945 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53952 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 53962 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53970 "isa_arm32.tcc"
>

void
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53977 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 53987 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 53993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 53996 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54001 "isa_arm32.tcc"
> *DecodeOpStrb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54007 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54014 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54017 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54021 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54025 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54029 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54032 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54036 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54039 "isa_arm32.tcc"
)
{
#line 823 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_offset(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54049 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54057 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54061 "isa_arm32.tcc"
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54065 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54069 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54072 "isa_arm32.tcc"
)
{
#line 909 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54093 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54104 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54111 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54121 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54126 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54129 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54136 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54154 "isa_arm32.tcc"
>

void
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54161 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54171 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54180 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54185 "isa_arm32.tcc"
> *DecodeOpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54191 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54201 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54205 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54209 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54213 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54216 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54220 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54223 "isa_arm32.tcc"
)
{
#line 830 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", ";
		cpu.DisasmLSWUBReg_pre(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54233 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54238 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54241 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54245 "isa_arm32.tcc"
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54249 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54253 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54256 "isa_arm32.tcc"
)
{
#line 927 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value);
		cpu.SetGPR(rn, address);
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54278 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54289 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54296 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54306 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54314 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54321 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54331 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54339 "isa_arm32.tcc"
>

void
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54346 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54356 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54365 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54370 "isa_arm32.tcc"
> *DecodeOpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54376 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strb instruction
*******************************************************************/
/*******************************************************************
* strt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54393 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54397 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54401 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54405 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54408 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54412 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54415 "isa_arm32.tcc"
)
{
#line 958 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54425 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54430 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54433 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54437 "isa_arm32.tcc"
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54441 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54445 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54448 "isa_arm32.tcc"
)
{
#line 972 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, rn_value, offset)); // update rn
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54470 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54478 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54481 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54488 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54498 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54503 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54506 "isa_arm32.tcc"
>

void
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54513 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54523 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54532 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54537 "isa_arm32.tcc"
> *DecodeOpStrt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54543 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54550 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54553 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54557 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54561 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54565 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54568 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54572 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54575 "isa_arm32.tcc"
)
{
#line 965 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "t r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54585 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54593 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54597 "isa_arm32.tcc"
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54601 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54605 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54608 "isa_arm32.tcc"
)
{
#line 991 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value;
		cpu.Write32(address, value);
	}
#line 54631 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54639 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54642 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54649 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54667 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54674 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 54684 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54692 "isa_arm32.tcc"
>

void
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54699 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54723 "isa_arm32.tcc"
> *DecodeOpStrt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54729 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of strt instruction
*******************************************************************/
/*******************************************************************
* strbt instruction
* TODO: check running mode
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54746 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54750 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54754 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54758 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54761 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54765 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54768 "isa_arm32.tcc"
)
{
#line 1023 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		// LSWUB = Load Store Word or Unsigned Byte
		cpu.DisasmLSWUBImmOffset_post(u, rn, offset, buffer);
	}
#line 54779 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54787 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54791 "isa_arm32.tcc"
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54795 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54799 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54802 "isa_arm32.tcc"
)
{
#line 1038 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typename CONFIG::address_t address;
		uint8_t value;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.SetGPR(rn, cpu.LSWUBImmOffset(u, cpu.GetGPR(rn), offset)); // update rn
		value = cpu.GetGPR(rd) & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54819 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54827 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54830 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54837 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 54847 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54855 "isa_arm32.tcc"
>

void
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54862 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 54872 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54878 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54881 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54886 "isa_arm32.tcc"
> *DecodeOpStrbt_imm(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 54892 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54899 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54902 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54906 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54910 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54914 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54917 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 54921 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 54924 "isa_arm32.tcc"
)
{
#line 1031 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "bt r" << rd << ", ";
		cpu.DisasmLSWUBReg_post(u, rn, shift_imm, shift, rm, buffer);
	}
#line 54934 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54939 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54942 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 54946 "isa_arm32.tcc"
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54950 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 54954 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 54957 "isa_arm32.tcc"
)
{
#line 1052 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		uint8_t value;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.LSWUBReg(u, rn_value, rd_value, shift_imm, shift, rm_value));
		value = rd_value & 0x0FF;
		cpu.Write8(address, value);
	}
#line 54979 "isa_arm32.tcc"
}
/*
* end of strbt instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 54987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54990 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 54997 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1088 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55007 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55012 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55015 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55022 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 1104 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55032 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55037 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55040 "isa_arm32.tcc"
>

void
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55047 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 1121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_base.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55057 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55063 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55066 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55071 "isa_arm32.tcc"
> *DecodeOpStrbt_reg(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55077 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldrh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55128 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55131 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55135 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55139 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55143 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55146 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55150 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55153 "isa_arm32.tcc"
)
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 55164 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55172 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55176 "isa_arm32.tcc"
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55180 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55184 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55187 "isa_arm32.tcc"
)
{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55206 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55214 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55217 "isa_arm32.tcc"
>

void
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55224 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55234 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55243 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55248 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55254 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55264 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55268 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55272 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55276 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55279 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55283 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55286 "isa_arm32.tcc"
)
{
#line 71 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 55297 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55305 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55309 "isa_arm32.tcc"
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55313 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55317 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55320 "isa_arm32.tcc"
)
{
#line 124 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55338 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55346 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55349 "isa_arm32.tcc"
>

void
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55356 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55366 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55372 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55375 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55380 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55386 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55396 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55400 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55404 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55408 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55411 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55415 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55418 "isa_arm32.tcc"
)
{
#line 79 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 55429 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55434 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55437 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55441 "isa_arm32.tcc"
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55445 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55449 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55452 "isa_arm32.tcc"
)
{
#line 139 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55471 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55479 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55482 "isa_arm32.tcc"
>

void
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55489 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55499 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55505 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55508 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55513 "isa_arm32.tcc"
> *DecodeOpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55519 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55529 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55533 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55537 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55541 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55544 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55548 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55551 "isa_arm32.tcc"
)
{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 55561 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55569 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55573 "isa_arm32.tcc"
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55577 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55581 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55584 "isa_arm32.tcc"
)
{
#line 155 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55605 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55613 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55616 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55623 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55633 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55638 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55641 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55648 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55666 "isa_arm32.tcc"
>

void
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55673 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55683 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55692 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55697 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55703 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55710 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55713 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55717 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55721 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55725 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55728 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55732 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55735 "isa_arm32.tcc"
)
{
#line 94 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 55745 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55753 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55757 "isa_arm32.tcc"
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55761 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55765 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55768 "isa_arm32.tcc"
)
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55788 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55796 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55799 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55806 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 55816 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55821 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55824 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55831 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 55841 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55846 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55849 "isa_arm32.tcc"
>

void
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55856 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 55866 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55875 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55880 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 55886 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55893 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55896 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55900 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55904 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55908 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55911 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 55915 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 55918 "isa_arm32.tcc"
)
{
#line 101 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 55928 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55933 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55936 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 55940 "isa_arm32.tcc"
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55944 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 55948 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 55951 "isa_arm32.tcc"
)
{
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.Read16toGPRAligned(address, rd);
	}
#line 55972 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 55980 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55983 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 55990 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56000 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56005 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56008 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56015 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56025 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56033 "isa_arm32.tcc"
>

void
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56040 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56050 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56059 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56064 "isa_arm32.tcc"
> *DecodeOpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56070 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrh instruction
*******************************************************************/
/*******************************************************************
* ldrsh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56086 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56089 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56093 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56097 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56101 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56104 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56108 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56111 "isa_arm32.tcc"
)
{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 56122 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56130 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56134 "isa_arm32.tcc"
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56138 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56142 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56145 "isa_arm32.tcc"
)
{
#line 274 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56164 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56172 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56175 "isa_arm32.tcc"
>

void
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56182 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56192 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56198 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56201 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56206 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56212 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56219 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56222 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56226 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56230 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56234 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56237 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56241 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56244 "isa_arm32.tcc"
)
{
#line 237 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 56255 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56260 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56263 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56267 "isa_arm32.tcc"
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56271 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56275 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56278 "isa_arm32.tcc"
)
{
#line 290 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56296 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56307 "isa_arm32.tcc"
>

void
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56314 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56324 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56333 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56338 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56344 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56354 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56358 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56362 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56366 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56369 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56373 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56376 "isa_arm32.tcc"
)
{
#line 245 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 56387 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56395 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56399 "isa_arm32.tcc"
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56403 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56407 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56410 "isa_arm32.tcc"
)
{
#line 305 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56429 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56440 "isa_arm32.tcc"
>

void
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56447 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56457 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56463 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56466 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56471 "isa_arm32.tcc"
> *DecodeOpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56477 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56484 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56487 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56491 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56495 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56499 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56502 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56506 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56509 "isa_arm32.tcc"
)
{
#line 253 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 56519 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56524 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56527 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56531 "isa_arm32.tcc"
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56535 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56539 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56542 "isa_arm32.tcc"
)
{
#line 321 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56563 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56574 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56581 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56591 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56599 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56606 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56616 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56621 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56624 "isa_arm32.tcc"
>

void
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56631 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56641 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56647 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56650 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56655 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56661 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56668 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56671 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56675 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56679 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56683 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56686 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56690 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56693 "isa_arm32.tcc"
)
{
#line 260 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 56703 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56711 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56715 "isa_arm32.tcc"
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56719 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56723 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56726 "isa_arm32.tcc"
)
{
#line 339 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		//	address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56747 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56755 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56758 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56765 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56775 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56780 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56783 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56790 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56800 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56808 "isa_arm32.tcc"
>

void
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56815 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 56825 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56834 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56839 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 56845 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56852 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56855 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56859 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56863 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56867 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56870 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 56874 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 56877 "isa_arm32.tcc"
)
{
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sh r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 56887 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56892 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56895 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 56899 "isa_arm32.tcc"
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56903 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 56907 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 56910 "isa_arm32.tcc"
)
{
#line 357 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		cpu.ReadS16toGPRAligned(address, rd);
	}
#line 56931 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56939 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56942 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56949 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 56959 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56964 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56967 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56974 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 56984 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 56989 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56992 "isa_arm32.tcc"
>

void
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 56999 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57009 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57015 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57018 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57023 "isa_arm32.tcc"
> *DecodeOpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57029 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsh instruction
*******************************************************************/
/*******************************************************************
* ldrsb instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57048 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57052 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57056 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57060 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57063 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57067 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57070 "isa_arm32.tcc"
)
{
#line 396 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 57081 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57086 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57089 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57093 "isa_arm32.tcc"
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57097 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57101 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57104 "isa_arm32.tcc"
)
{
#line 441 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.ReadS8toGPR(address, rd);
	}
#line 57122 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57130 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57133 "isa_arm32.tcc"
>

void
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57140 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57150 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57159 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57164 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57170 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57180 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57184 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57188 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57192 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57195 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57199 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57202 "isa_arm32.tcc"
)
{
#line 404 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 57213 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57218 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57221 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57225 "isa_arm32.tcc"
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57229 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57233 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57236 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57253 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57264 "isa_arm32.tcc"
>

void
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57271 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57281 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57290 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57295 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57301 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57311 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57315 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57319 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57323 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57326 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57330 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57333 "isa_arm32.tcc"
)
{
#line 412 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 57344 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57352 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57356 "isa_arm32.tcc"
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57360 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57364 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57367 "isa_arm32.tcc"
)
{
#line 470 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.SetGPR(rn, address); // update rn with the address
		cpu.ReadS8toGPR(address, rd);
	}
#line 57385 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57393 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57396 "isa_arm32.tcc"
>

void
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57403 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57413 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57422 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57427 "isa_arm32.tcc"
> *DecodeOpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57433 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57443 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57447 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57451 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57455 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57458 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57462 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57465 "isa_arm32.tcc"
)
{
#line 420 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 57475 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57480 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57483 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57487 "isa_arm32.tcc"
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57491 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57495 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57498 "isa_arm32.tcc"
)
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.ReadS8toGPR(address, rd);
	}
#line 57518 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57526 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57529 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57536 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57546 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57551 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57554 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57561 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57571 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57579 "isa_arm32.tcc"
>

void
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57586 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57596 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57602 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57605 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57610 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57616 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57626 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57630 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57634 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57638 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57641 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57645 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57648 "isa_arm32.tcc"
)
{
#line 427 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 57658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57666 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57670 "isa_arm32.tcc"
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57674 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57678 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57681 "isa_arm32.tcc"
)
{
#line 502 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57700 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57711 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57718 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57728 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57733 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57736 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57743 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57753 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57761 "isa_arm32.tcc"
>

void
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57768 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57778 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57784 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57787 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57792 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57798 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57805 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57808 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57812 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57816 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57820 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57823 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 57827 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 57830 "isa_arm32.tcc"
)
{
#line 434 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "sb r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 57840 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57848 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 57852 "isa_arm32.tcc"
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57856 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 57860 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 57863 "isa_arm32.tcc"
)
{
#line 518 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.SetGPR(rn, address);
		cpu.ReadS8toGPR(address, rd);
	}
#line 57883 "isa_arm32.tcc"
}
/*
* end of strh instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57891 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57894 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57901 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 699 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 57911 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57919 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57926 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 709 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 57936 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57944 "isa_arm32.tcc"
>

void
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57951 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 719 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 57961 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57970 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 57975 "isa_arm32.tcc"
> *DecodeOpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 57981 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrsb instruction
*******************************************************************/
/*******************************************************************
* strh instruction
*/
/*p*/
/*w*/
/*i*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 57997 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58000 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58004 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58008 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58012 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58015 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58019 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58022 "isa_arm32.tcc"
)
{
#line 556 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58033 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58038 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58041 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58045 "isa_arm32.tcc"
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58049 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58053 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58056 "isa_arm32.tcc"
)
{
#line 601 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn); // address used is the contents of rn
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL)); // update rn
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58074 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58083 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58088 "isa_arm32.tcc"
> *DecodeOpStrh_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58094 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58101 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58104 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58108 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58112 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58116 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58119 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58123 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58126 "isa_arm32.tcc"
)
{
#line 564 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58137 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58142 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58145 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58149 "isa_arm32.tcc"
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58153 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58157 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58160 "isa_arm32.tcc"
)
{
#line 616 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58177 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58186 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58191 "isa_arm32.tcc"
> *DecodeOpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58197 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58204 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58207 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58211 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58215 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58219 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58222 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58226 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58229 "isa_arm32.tcc"
)
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 58240 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58245 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58248 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58252 "isa_arm32.tcc"
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58256 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58260 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58263 "isa_arm32.tcc"
)
{
#line 630 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, cpu.GetGPR(rn), immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address); // update rn with the address
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58281 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58290 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58295 "isa_arm32.tcc"
> *DecodeOpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58301 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58308 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58311 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58315 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58319 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58323 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58326 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58330 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58333 "isa_arm32.tcc"
)
{
#line 580 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 58343 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58348 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58351 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58355 "isa_arm32.tcc"
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58359 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58363 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58366 "isa_arm32.tcc"
)
{
#line 645 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.GetGPR(rn);
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm)));
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58384 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58390 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58393 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58398 "isa_arm32.tcc"
> *DecodeOpStrh_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58404 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58411 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58414 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58418 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58422 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58426 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58429 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58433 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58436 "isa_arm32.tcc"
)
{
#line 587 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 58446 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58454 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58458 "isa_arm32.tcc"
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58462 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58466 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58469 "isa_arm32.tcc"
)
{
#line 660 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58486 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58495 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58500 "isa_arm32.tcc"
> *DecodeOpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58506 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58513 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58516 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58520 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58524 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58528 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58531 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58535 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58538 "isa_arm32.tcc"
)
{
#line 594 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "h r" << rd << ", ";
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 58548 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58556 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58560 "isa_arm32.tcc"
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58564 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58568 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58571 "isa_arm32.tcc"
)
{
#line 674 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	{
		typename CONFIG::address_t address;
		uint16_t value16;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, cpu.GetGPR(rn), cpu.GetGPR(rd), cpu.GetGPR(rm));
		cpu.CheckAlignmentExcep(address & ~(typename CONFIG::address_t)(0x02)); // TODO
		cpu.SetGPR(rn, address);
		value16 = cpu.GetGPR(rd) & 0x0FFFF;
		cpu.Write16(address, value16);
	}
#line 58589 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58598 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58603 "isa_arm32.tcc"
> *DecodeOpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58609 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE INSTRUCTIONS
(specific for arm version 5e)

**********************************************/
/*******************************************************************
* ldrd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58661 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58664 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58668 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58672 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58676 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58679 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58683 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58686 "isa_arm32.tcc"
)
{
#line 59 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 58697 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58702 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58705 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58709 "isa_arm32.tcc"
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58713 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58717 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58720 "isa_arm32.tcc"
)
{
#line 107 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58747 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58765 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58768 "isa_arm32.tcc"
>

void
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58775 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58785 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58791 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58794 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58799 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58805 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58818 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58822 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58826 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58830 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58833 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58837 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58840 "isa_arm32.tcc"
)
{
#line 67 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 58851 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58859 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58863 "isa_arm32.tcc"
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58867 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58871 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58874 "isa_arm32.tcc"
)
{
#line 131 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 58900 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58918 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58921 "isa_arm32.tcc"
>

void
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58928 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 58938 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58944 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58947 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58952 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 58958 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 58968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58971 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 58975 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 58979 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 58983 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 58986 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 58990 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 58993 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 59004 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59012 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59016 "isa_arm32.tcc"
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59020 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59024 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59027 "isa_arm32.tcc"
)
{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59054 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59072 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59075 "isa_arm32.tcc"
>

void
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59082 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59092 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59098 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59101 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59106 "isa_arm32.tcc"
> *DecodeOpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59112 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59122 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59125 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59129 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59133 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59137 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59140 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59144 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59147 "isa_arm32.tcc"
)
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 59158 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59163 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59166 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59170 "isa_arm32.tcc"
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59174 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59178 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59181 "isa_arm32.tcc"
)
{
#line 178 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59210 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59228 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59231 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59238 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59248 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59253 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59256 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59263 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59273 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59281 "isa_arm32.tcc"
>

void
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59288 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59298 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59307 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59312 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59318 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59328 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59331 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59335 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59339 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59343 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59346 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59350 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59353 "isa_arm32.tcc"
)
{
#line 91 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 59364 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59369 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59372 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59376 "isa_arm32.tcc"
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59380 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59384 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59387 "isa_arm32.tcc"
)
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59415 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59433 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59436 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59443 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59453 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59458 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59461 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59468 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59478 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59486 "isa_arm32.tcc"
>

void
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59493 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59503 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59509 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59512 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59517 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59523 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59533 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59536 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59540 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59544 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59548 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59551 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59555 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59558 "isa_arm32.tcc"
)
{
#line 99 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "ldr";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 59569 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59574 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59577 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59581 "isa_arm32.tcc"
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59585 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59589 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59592 "isa_arm32.tcc"
)
{
#line 229 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Read32toGPRAligned(address, rd);
		cpu.Read32toGPRAligned(address + 4, rd + 1);
	}
#line 59621 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59639 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59642 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59649 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59659 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59664 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59667 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59674 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 59684 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59692 "isa_arm32.tcc"
>

void
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59699 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59709 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59718 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59723 "isa_arm32.tcc"
> *DecodeOpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59729 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldrd instruction
*******************************************************************/
/*******************************************************************
* strd instruction
*/
/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59748 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59752 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59756 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59760 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59763 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59767 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59770 "isa_arm32.tcc"
)
{
#line 276 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_post(u, rn, immedH, immedL, buffer);
	}
#line 59781 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59786 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59789 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59793 "isa_arm32.tcc"
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59797 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59801 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59804 "isa_arm32.tcc"
)
{
#line 324 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value; // address used is the contents of rn
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSImmOffset(u, rn_value, immedH, immedL)); // update rn
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 59833 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59854 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59861 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 59871 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59879 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59886 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 59896 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59904 "isa_arm32.tcc"
>

void
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59911 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 59921 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59930 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59935 "isa_arm32.tcc"
> *DecodeOpStrd_imm_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 59941 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59954 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59958 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59962 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 59966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 59969 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 59973 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 59976 "isa_arm32.tcc"
)
{
#line 284 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_offset(u, rn, immedH, immedL, buffer);
	}
#line 59987 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 59992 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 59995 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 59999 "isa_arm32.tcc"
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60003 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60007 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60010 "isa_arm32.tcc"
)
{
#line 350 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60038 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60056 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60059 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60066 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60076 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60084 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60091 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60101 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60109 "isa_arm32.tcc"
>

void
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60116 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60126 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60135 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60140 "isa_arm32.tcc"
> *DecodeOpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60146 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60159 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60163 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60167 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60171 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60174 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60178 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60181 "isa_arm32.tcc"
)
{
#line 292 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSImmOffset_pre(u, rn, immedH, immedL, buffer);
	}
#line 60192 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60197 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60200 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60204 "isa_arm32.tcc"
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60208 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60212 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60215 "isa_arm32.tcc"
)
{
#line 375 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSImmOffset(u, rn_value, immedH, immedL); // compute address
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address); // update rn with the address
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60244 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60262 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60265 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60272 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60282 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60290 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60297 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60307 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60315 "isa_arm32.tcc"
>

void
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60322 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60332 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60341 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60346 "isa_arm32.tcc"
> *DecodeOpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60352 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60365 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60369 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60373 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60377 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60380 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60384 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60387 "isa_arm32.tcc"
)
{
#line 300 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_post(u, rn, rm, buffer);
	}
#line 60398 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60403 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60406 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60410 "isa_arm32.tcc"
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60414 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60418 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60421 "isa_arm32.tcc"
)
{
#line 401 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, cpu.MLSReg(u, rn_value, rd_value, rm_value));
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60451 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60472 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60479 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60489 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60494 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60497 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60504 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60514 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60522 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60529 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60539 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60547 "isa_arm32.tcc"
>

void
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60554 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60564 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60573 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60578 "isa_arm32.tcc"
> *DecodeOpStrd_reg_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60584 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60597 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60601 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60605 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60609 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60612 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60616 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60619 "isa_arm32.tcc"
)
{
#line 308 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_offset(u, rn, rm, buffer);
	}
#line 60630 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60635 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60638 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60642 "isa_arm32.tcc"
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60646 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60650 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60653 "isa_arm32.tcc"
)
{
#line 428 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60682 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60703 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60710 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60720 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60725 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60728 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60735 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60745 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60753 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60760 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 60770 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60778 "isa_arm32.tcc"
>

void
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60785 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 60795 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60801 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60804 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60809 "isa_arm32.tcc"
> *DecodeOpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 60815 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*i*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60825 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60828 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60832 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60836 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60840 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60843 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 60847 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 60850 "isa_arm32.tcc"
)
{
#line 316 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		buffer << "str";
		cpu.DisasmCondition(cond, buffer);
		buffer << "d r" << rd << ", ";
		// MLS = Miscellaneous Load Store
		cpu.DisasmMLSReg_pre(u, rn, rm, buffer);
	}
#line 60861 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60866 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60869 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 60873 "isa_arm32.tcc"
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60877 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 60881 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 60884 "isa_arm32.tcc"
)
{
#line 454 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);
		typename CONFIG::reg_t rd_value = inherited::rd_init + cpu.GetGPR(rd);
		typename CONFIG::reg_t rdp1_value = inherited::rdp1_init + cpu.GetGPR(rd + 1);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = cpu.MLSReg(u, rn_value, rd_value, rm_value);
		cpu.CheckAlignmentExcep(address); // TODO

		if(rd % 2 != 0) // rd must be even numbered, unpredictable behavior
		return;
		if((address & (typename CONFIG::address_t)0x07 != 0) ||
		(rd == 14)) // undefined behavior
		return;

		cpu.SetGPR(rn, address);
		cpu.Write32(address, rd_value);
		cpu.Write32(address + 4, rdp1_value);
	}
#line 60914 "isa_arm32.tcc"
}
/*
* end of strd instruction
*******************************************************************/
/*******************************************************************
* pld instruction
*
* this instruction conflicts with a case of ldrb (with rd = 15) which is an invalid
*   instruciton.
* you will find the implementation of pld in load_store.isa under the implementation of ldrb_rd15
*/
/*
* end of pld instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60935 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60942 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 501 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 60952 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60957 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60960 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60967 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == 15) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 60977 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 60982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60985 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 60992 "isa_arm32.tcc"
>::initialize_rd_init()
{
#line 520 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd == 15) inherited::rd_init = 8;
		else inherited::rd_init = 0;
	}
#line 61002 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61007 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61010 "isa_arm32.tcc"
>

void
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61017 "isa_arm32.tcc"
>::initialize_rdp1_init()
{
#line 529 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rd  == 14) inherited::rdp1_init = 8;
		else inherited::rdp1_init = 0;
	}
#line 61027 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61033 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61036 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61041 "isa_arm32.tcc"
> *DecodeOpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61047 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

LOAD AND STORE MULTIPLE INSTRUCTIONS

**********************************************/
/*******************************************************************
* ldm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61095 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61098 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61102 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61106 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61110 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61113 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61117 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61120 "isa_arm32.tcc"
)
{
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61154 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61158 "isa_arm32.tcc"
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61162 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61166 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61169 "isa_arm32.tcc"
)
{
#line 144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61212 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61220 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61223 "isa_arm32.tcc"
>

void
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61230 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61240 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61246 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61249 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61254 "isa_arm32.tcc"
> *DecodeOpLdm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61260 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61267 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61270 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61274 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61278 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61282 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61285 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61289 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61292 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61318 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61326 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61330 "isa_arm32.tcc"
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61334 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61338 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61341 "isa_arm32.tcc"
)
{
#line 184 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61384 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61395 "isa_arm32.tcc"
>

void
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61402 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61412 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61418 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61421 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61426 "isa_arm32.tcc"
> *DecodeOpLdm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61432 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61442 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61446 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61450 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61454 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61457 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61461 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61464 "isa_arm32.tcc"
)
{
#line 98 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61490 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61495 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61498 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61502 "isa_arm32.tcc"
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61506 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61510 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61513 "isa_arm32.tcc"
)
{
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61556 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61564 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61567 "isa_arm32.tcc"
>

void
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61574 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61584 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61590 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61593 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61598 "isa_arm32.tcc"
> *DecodeOpLdm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61604 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61614 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61618 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61622 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61626 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61629 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61633 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61636 "isa_arm32.tcc"
)
{
#line 121 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (1)";
	}
#line 61662 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61667 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61670 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61674 "isa_arm32.tcc"
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61678 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61682 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61685 "isa_arm32.tcc"
)
{
#line 264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		/*  check PC register */
		if((reg_list & 0x08000) == 0x08000) {
			cpu.Read32toPC(cur_address);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 61728 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61736 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61739 "isa_arm32.tcc"
>

void
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61746 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61756 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61762 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61765 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61770 "isa_arm32.tcc"
> *DecodeOpLdm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61776 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_1 instruction
*******************************************************************/
/*******************************************************************
* ldm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61792 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61796 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61800 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61804 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61807 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61811 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61814 "isa_arm32.tcc"
)
{
#line 319 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 61840 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61848 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61852 "isa_arm32.tcc"
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61856 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61860 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61863 "isa_arm32.tcc"
)
{
#line 411 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPR(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 61898 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61906 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61909 "isa_arm32.tcc"
>

void
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61916 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 61926 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61935 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61940 "isa_arm32.tcc"
> *DecodeOpLdm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 61946 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 61953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61956 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 61960 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 61964 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 61968 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 61971 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 61975 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 61978 "isa_arm32.tcc"
)
{
#line 342 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62004 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62009 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62012 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62016 "isa_arm32.tcc"
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62020 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62024 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62027 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62062 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62070 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62073 "isa_arm32.tcc"
>

void
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62080 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62090 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62099 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62104 "isa_arm32.tcc"
> *DecodeOpLdm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62110 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62117 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62120 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62124 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62128 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62132 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62135 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62139 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62142 "isa_arm32.tcc"
)
{
#line 365 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62168 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62173 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62176 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62180 "isa_arm32.tcc"
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62184 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62188 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62191 "isa_arm32.tcc"
)
{
#line 475 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62226 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62237 "isa_arm32.tcc"
>

void
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62244 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62254 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62260 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62263 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62268 "isa_arm32.tcc"
> *DecodeOpLdm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62274 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62281 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62284 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62288 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62292 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62296 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62299 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62303 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62306 "isa_arm32.tcc"
)
{
#line 388 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
		buffer << " (2)";
	}
#line 62332 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62340 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62344 "isa_arm32.tcc"
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62348 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62352 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62355 "isa_arm32.tcc"
)
{
#line 507 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62390 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62401 "isa_arm32.tcc"
>

void
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62408 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62418 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62424 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62427 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62432 "isa_arm32.tcc"
> *DecodeOpLdm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62438 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldm_2 instruction
*******************************************************************/
/*******************************************************************
* ldm_3 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62454 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62458 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62462 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62466 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62469 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62473 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62476 "isa_arm32.tcc"
)
{
#line 554 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62502 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62510 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62514 "isa_arm32.tcc"
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62518 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62522 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62525 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4); // we need to add 4 bytes for the pc saving

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62568 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62576 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62579 "isa_arm32.tcc"
>

void
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62586 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62596 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62602 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62605 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62610 "isa_arm32.tcc"
> *DecodeOpLdm_3_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62616 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62626 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62630 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62634 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62638 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62641 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62645 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62648 "isa_arm32.tcc"
)
{
#line 577 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62674 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62682 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62686 "isa_arm32.tcc"
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62690 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62694 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62697 "isa_arm32.tcc"
)
{
#line 686 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val + 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62740 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62751 "isa_arm32.tcc"
>

void
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62758 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62768 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62774 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62777 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62782 "isa_arm32.tcc"
> *DecodeOpLdm_3_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62788 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62795 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62798 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62802 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62806 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62810 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62813 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62817 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62820 "isa_arm32.tcc"
)
{
#line 600 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 62846 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62851 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62854 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62858 "isa_arm32.tcc"
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62862 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62866 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62869 "isa_arm32.tcc"
)
{
#line 726 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 62912 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62920 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62923 "isa_arm32.tcc"
>

void
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62930 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 62940 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62949 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62954 "isa_arm32.tcc"
> *DecodeOpLdm_3_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 62960 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 62967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62970 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 62974 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 62978 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 62982 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 62985 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 62989 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 62992 "isa_arm32.tcc"
)
{
#line 623 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "ldm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 15; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << ", r15}^";
		buffer << " (3)";
	}
#line 63018 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63026 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63030 "isa_arm32.tcc"
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63034 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63038 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63041 "isa_arm32.tcc"
)
{
#line 766 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				cpu.Read32toGPRAligned(cur_address, i);
				cur_address += 4;
			}
			mask = mask << 1;
		}

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val - 4);

		cpu.MoveSPSRtoCPSR();

		cpu.Read32toPC(cur_address);

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63084 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63092 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63095 "isa_arm32.tcc"
>

void
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63102 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63112 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63118 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63121 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63126 "isa_arm32.tcc"
> *DecodeOpLdm_3_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63132 "isa_arm32.tcc"
	>(code, addr);
}

// ldm_3.nextpc = {
	//   if(cond_res) {
		//     /* nothing to do */
		//   } else {
		//     cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);
		//   }
	// }
/*
* end of ldm_3 instruction
*******************************************************************/
/*******************************************************************
* stm_1 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63152 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63155 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63159 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63163 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63167 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63170 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63174 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63177 "isa_arm32.tcc"
)
{
#line 829 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63202 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63210 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63214 "isa_arm32.tcc"
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63218 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63222 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63225 "isa_arm32.tcc"
)
{
#line 917 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63270 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63281 "isa_arm32.tcc"
>

void
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63288 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63298 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63307 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63312 "isa_arm32.tcc"
> *DecodeOpStm_1_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63318 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63328 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63332 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63336 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63340 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63343 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63347 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63350 "isa_arm32.tcc"
)
{
#line 851 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63375 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63380 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63383 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63387 "isa_arm32.tcc"
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63391 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63395 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63398 "isa_arm32.tcc"
)
{
#line 959 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63443 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63451 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63454 "isa_arm32.tcc"
>

void
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63461 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63471 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63477 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63480 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63485 "isa_arm32.tcc"
> *DecodeOpStm_1_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63491 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63498 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63501 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63505 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63509 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63513 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63516 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63520 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63523 "isa_arm32.tcc"
)
{
#line 873 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63548 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63556 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63560 "isa_arm32.tcc"
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63564 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63568 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63571 "isa_arm32.tcc"
)
{
#line 1001 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63616 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63624 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63627 "isa_arm32.tcc"
>

void
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63634 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63644 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63650 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63653 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63658 "isa_arm32.tcc"
> *DecodeOpStm_1_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63664 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63671 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63674 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63678 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63682 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63686 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63689 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63693 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63696 "isa_arm32.tcc"
)
{
#line 895 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn << ((w == 1) ? "!" : "");
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}";
	}
#line 63721 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63726 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63729 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63733 "isa_arm32.tcc"
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63737 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63741 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63744 "isa_arm32.tcc"
)
{
#line 1043 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */

		/* update rn */
		if(w)
		cpu.SetGPR(rn, rn_new_val);
	}
#line 63789 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63797 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63800 "isa_arm32.tcc"
>

void
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63807 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63817 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63826 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63831 "isa_arm32.tcc"
> *DecodeOpStm_1_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 63837 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of stm_1 instruction
*******************************************************************/
/*******************************************************************
* stm_2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63853 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63857 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63861 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63865 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63868 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 63872 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 63875 "isa_arm32.tcc"
)
{
#line 1100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ia";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 63900 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63905 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63908 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 63912 "isa_arm32.tcc"
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63916 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 63920 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 63923 "isa_arm32.tcc"
)
{
#line 1188 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMia(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 63964 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63972 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63975 "isa_arm32.tcc"
>

void
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 63982 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 63992 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 63998 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64001 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64006 "isa_arm32.tcc"
> *DecodeOpStm_2_ia(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64012 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64022 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64026 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64030 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64034 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64037 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64041 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64044 "isa_arm32.tcc"
)
{
#line 1122 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "ib";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64069 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64077 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64081 "isa_arm32.tcc"
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64085 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64089 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64092 "isa_arm32.tcc"
)
{
#line 1226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMib(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64133 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64141 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64144 "isa_arm32.tcc"
>

void
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64151 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64161 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64167 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64170 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64175 "isa_arm32.tcc"
> *DecodeOpStm_2_ib(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64181 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64188 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64191 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64195 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64199 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64203 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64206 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64210 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64213 "isa_arm32.tcc"
)
{
#line 1144 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "da";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64238 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64246 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64250 "isa_arm32.tcc"
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64254 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64258 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64261 "isa_arm32.tcc"
)
{
#line 1264 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMda(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64302 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64310 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64313 "isa_arm32.tcc"
>

void
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64320 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64330 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64339 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64344 "isa_arm32.tcc"
> *DecodeOpStm_2_da(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64350 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64357 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64360 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64364 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64368 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64372 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64375 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64379 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64382 "isa_arm32.tcc"
)
{
#line 1166 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		unsigned int mask = 1;
		bool prev = false;

		buffer << "stm";
		cpu.DisasmCondition(cond, buffer);
		buffer << "db";
		buffer << " r" << rn;
		buffer << ", {";
			for(unsigned int i = 0; i < 16; i++) {
				if(i > 0) {
					mask = mask << 1;
				}
				if((reg_list & mask) == mask) {
					if(prev) buffer << ", ";
					else prev = true;
					buffer << "r" << i;
				}
			}
			buffer << "}^";
	}
#line 64407 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64412 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64415 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64419 "isa_arm32.tcc"
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64423 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64427 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64430 "isa_arm32.tcc"
)
{
#line 1302 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t cur_address;
		typename CONFIG::address_t start_address;
		typename CONFIG::address_t end_address;
		uint32_t num_regs = 0;
		typename CONFIG::reg_t rn_new_val = 0;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		unsigned int mask = 1;
		typename CONFIG::reg_t value = 0;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		num_regs = cpu.LSMdb(rn_value, reg_list,
		&start_address, &end_address,
		&rn_new_val);

		cur_address = start_address;
		for(unsigned int i = 0; i < 15; i++) {
			if((reg_list & mask) == mask) {
				value = cpu.GetGPR_usr(i);
				cpu.Write32(cur_address, value);
				cur_address += 4;
			}
			mask = mask << 1;
		}
		if((reg_list & mask) == mask) {
			value = cpu.GetGPR_usr(cpu.PC_reg) + 8;
			cpu.Write32(cur_address, value);
		}

	/* TODO:
		* cur_address should be checked to be the same as end_address + 4 */
	}
#line 64471 "isa_arm32.tcc"
}
/*
* end of stm_2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64479 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64482 "isa_arm32.tcc"
>

void
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64489 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1349 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_multiple.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 64499 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64505 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64508 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64513 "isa_arm32.tcc"
> *DecodeOpStm_2_db(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64519 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

SEMAPHORE INSTRUCTIONS

**********************************************/
/* TODO: missing implementation */
/* NOTE: r15 should never be used for rn, rd and/or rm, so no need to
*   initialize them.
*/
/*******************************************************************
* swp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64571 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64574 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64578 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64582 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64586 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64589 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64593 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64596 "isa_arm32.tcc"
)
{
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64607 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64612 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64615 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64619 "isa_arm32.tcc"
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64623 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64627 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64630 "isa_arm32.tcc"
)
{
#line 61 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		address = rn_value;
		cpu.Read32toGPR(address, rd);
		cpu.Write32(address, rm_value);
	}
#line 64649 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64655 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64658 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64663 "isa_arm32.tcc"
> *DecodeOpSwp(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64669 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swp instruction
*******************************************************************/
/*******************************************************************
* swpb instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64685 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64689 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64693 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64697 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64700 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64704 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64707 "isa_arm32.tcc"
)
{
#line 87 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		buffer << "swp";
		cpu.DisasmCondition(cond, buffer);
		buffer << "b r" << rd << ", "
		<< "r" << rm << ", "
		<< "[r" << rn << "]";
	}
#line 64718 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64726 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64730 "isa_arm32.tcc"
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64734 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64738 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64741 "isa_arm32.tcc"
)
{
#line 95 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/semaphore.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

		uint8_t value = rm_value & (uint32_t)0x0ff;
		address = rn_value;
		cpu.Read8toGPR(address, rd);
		cpu.Write8(address, value);
	}
#line 64761 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64770 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64775 "isa_arm32.tcc"
> *DecodeOpSwpb(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64781 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swpb instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

EXCEPTION-GENERATING INSTRUCTIONS

**********************************************/
/*******************************************************************
* swi instruction
* NOTE: this instruction is used to make the system calls
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64833 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64836 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64840 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64844 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64848 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64851 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64855 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64858 "isa_arm32.tcc"
)
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		buffer << "swi";
		cpu.DisasmCondition(cond, buffer);
		buffer << " #" << dec << immed;
	}
#line 64867 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64872 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64875 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64879 "isa_arm32.tcc"
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64883 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64887 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64890 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(cond)) return;

#ifdef SOCLIB

		throw SoftwareInterruptException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// use linux_os_import
			try {
				cpu.linux_os_import->ExecuteSystemCall(immed);
				} catch(exception &e) {
				cerr << e.what() << endl;
			}
			} else {
			// we are executing on full system mode
			throw SoftwareInterruptException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 64929 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64935 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64938 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64943 "isa_arm32.tcc"
> *DecodeOpSwi(CodeType code, typename CONFIG::address_t addr)
{
	return new OpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 64949 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of swi instruction
*******************************************************************/
/*******************************************************************
* bkpt instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 64962 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64965 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 64969 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 64973 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 64977 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 64980 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 64984 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 64987 "isa_arm32.tcc"
)
{
#line 100 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);
		buffer << "bkpt";
		buffer << " #" << dec << immed;
	}
#line 64998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65006 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65010 "isa_arm32.tcc"
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65014 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65018 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65021 "isa_arm32.tcc"
)
{
#line 108 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/exception.isa"
	{
		//	if(cpu.logger_import)
		//		(*cpu.logger_import) << DebugInfo
		//			<< Function << __FUNCTION__
		//			<< File << __FILE__
		//			<< Line << __LINE__
		//			<< "executing swi (#" << immed << ")"
		//			<< Endl << EndDebugInfo;
		uint32_t immed;

		immed = limmed + ((uint32_t)himmed << 4);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

#ifdef SOCLIB

		throw PrefetchAbortException<CONFIG>();

#else // SOCLIB

		if(cpu.linux_os_import) {
			// we are executing on linux emulation mode
			// what should we do with this kind of call? ignore it
			} else {
			// we are executing on full system mode
			throw PrefetchAbortException<CONFIG>();
		}

#endif // SOCLIB

	}
#line 65056 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65062 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65065 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65070 "isa_arm32.tcc"
> *DecodeOpBkpt(CodeType code, typename CONFIG::address_t addr)
{
	return new OpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65076 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of bkpt instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* cdp instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65130 "isa_arm32.tcc"
>

void
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65137 "isa_arm32.tcc"
>::initialize_condition()
{
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65146 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65151 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65154 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65158 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65162 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65166 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65169 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65173 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65176 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65192 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65197 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65200 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65204 "isa_arm32.tcc"
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65208 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65212 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65215 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65228 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65237 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65242 "isa_arm32.tcc"
> *DecodeOpCdp_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65248 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65258 "isa_arm32.tcc"
>

void
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65265 "isa_arm32.tcc"
>::initialize_condition()
{
#line 57 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65274 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65279 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65282 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65286 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65290 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65294 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65297 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65301 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65304 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65320 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65328 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65332 "isa_arm32.tcc"
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65336 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65340 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65343 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65356 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65365 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65370 "isa_arm32.tcc"
> *DecodeOpCdp_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65376 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65383 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65386 "isa_arm32.tcc"
>

void
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65393 "isa_arm32.tcc"
>::initialize_condition()
{
#line 63 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65402 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65407 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65410 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65414 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65418 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65422 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65425 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65429 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65432 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65448 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65453 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65456 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65460 "isa_arm32.tcc"
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65464 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65468 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65471 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65484 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65493 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65498 "isa_arm32.tcc"
> *DecodeOpCdp_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65504 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65511 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65514 "isa_arm32.tcc"
>

void
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65521 "isa_arm32.tcc"
>::initialize_condition()
{
#line 69 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 65530 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65535 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65538 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65542 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65546 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65550 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65553 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65557 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65560 "isa_arm32.tcc"
)
{
#line 75 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "cdp";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 65576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65584 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65588 "isa_arm32.tcc"
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65592 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65596 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65599 "isa_arm32.tcc"
)
{
#line 88 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 65612 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65621 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65626 "isa_arm32.tcc"
> *DecodeOpCdp_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65632 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp instruction
*******************************************************************/
/*******************************************************************
* ldc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65652 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65659 "isa_arm32.tcc"
>::initialize_condition()
{
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 65668 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65673 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65676 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65680 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65684 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65688 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65691 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65695 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65698 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65713 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65721 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65725 "isa_arm32.tcc"
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65729 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65733 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65736 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65755 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65763 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65766 "isa_arm32.tcc"
>

void
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65773 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65783 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65792 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65797 "isa_arm32.tcc"
> *DecodeOpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65803 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65814 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65817 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65824 "isa_arm32.tcc"
>::initialize_condition()
{
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 65833 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65841 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65845 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65849 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65853 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65856 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 65860 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 65863 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 65878 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65886 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 65890 "isa_arm32.tcc"
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65894 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 65898 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 65901 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 65920 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65928 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65931 "isa_arm32.tcc"
>

void
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65938 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 65948 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65954 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65957 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65962 "isa_arm32.tcc"
> *DecodeOpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 65968 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 65979 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65982 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 65989 "isa_arm32.tcc"
>::initialize_condition()
{
#line 123 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 65998 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66006 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66010 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66014 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66018 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66021 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66025 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66028 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66043 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66051 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66055 "isa_arm32.tcc"
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66059 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66063 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66066 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66085 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66093 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66096 "isa_arm32.tcc"
>

void
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66103 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66113 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66119 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66122 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66127 "isa_arm32.tcc"
> *DecodeOpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66133 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66144 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66147 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66154 "isa_arm32.tcc"
>::initialize_condition()
{
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66163 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66168 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66171 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66175 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66179 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66183 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66186 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66190 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66193 "isa_arm32.tcc"
)
{
#line 230 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 66208 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66216 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66220 "isa_arm32.tcc"
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66224 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66228 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66231 "isa_arm32.tcc"
)
{
#line 278 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66250 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66261 "isa_arm32.tcc"
>

void
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66268 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 66278 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66284 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66287 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66292 "isa_arm32.tcc"
> *DecodeOpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66298 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66309 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66312 "isa_arm32.tcc"
>

void
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66319 "isa_arm32.tcc"
>::initialize_condition()
{
#line 142 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66328 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66333 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66336 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66340 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66344 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66348 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66351 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66355 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66358 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66373 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66378 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66381 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66385 "isa_arm32.tcc"
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66389 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66393 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66396 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66416 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66422 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66425 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66430 "isa_arm32.tcc"
> *DecodeOpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66436 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66447 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66450 "isa_arm32.tcc"
>

void
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66457 "isa_arm32.tcc"
>::initialize_condition()
{
#line 148 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 66466 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66471 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66474 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66478 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66482 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66486 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66489 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66493 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66496 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66511 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66519 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66523 "isa_arm32.tcc"
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66527 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66531 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66534 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66554 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66560 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66563 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66568 "isa_arm32.tcc"
> *DecodeOpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66574 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66588 "isa_arm32.tcc"
>

void
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66595 "isa_arm32.tcc"
>::initialize_condition()
{
#line 154 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 66604 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66609 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66612 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66616 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66620 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66624 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66627 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66631 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66634 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66649 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66654 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66657 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66661 "isa_arm32.tcc"
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66665 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66669 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66672 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66692 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66698 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66701 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66706 "isa_arm32.tcc"
> *DecodeOpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66712 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66723 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66726 "isa_arm32.tcc"
>

void
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66733 "isa_arm32.tcc"
>::initialize_condition()
{
#line 160 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 66742 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66750 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66754 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66758 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66762 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66765 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66769 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66772 "isa_arm32.tcc"
)
{
#line 242 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 66787 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66792 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66795 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66799 "isa_arm32.tcc"
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66803 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66807 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66810 "isa_arm32.tcc"
)
{
#line 294 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66830 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66836 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66839 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66844 "isa_arm32.tcc"
> *DecodeOpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66850 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66861 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66864 "isa_arm32.tcc"
>

void
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66871 "isa_arm32.tcc"
>::initialize_condition()
{
#line 173 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 66880 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66885 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66888 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66892 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66896 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66900 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66903 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 66907 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 66910 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 66925 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66930 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66933 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 66937 "isa_arm32.tcc"
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66941 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 66945 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 66948 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 66968 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66977 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 66982 "isa_arm32.tcc"
> *DecodeOpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 66988 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 66999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67002 "isa_arm32.tcc"
>

void
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67009 "isa_arm32.tcc"
>::initialize_condition()
{
#line 179 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67018 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67023 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67026 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67030 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67034 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67038 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67041 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67045 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67048 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67063 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67071 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67075 "isa_arm32.tcc"
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67079 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67083 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67086 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67106 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67115 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67120 "isa_arm32.tcc"
> *DecodeOpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67126 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67137 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67140 "isa_arm32.tcc"
>

void
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67147 "isa_arm32.tcc"
>::initialize_condition()
{
#line 185 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67156 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67161 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67164 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67168 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67172 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67176 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67179 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67183 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67186 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67201 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67206 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67209 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67213 "isa_arm32.tcc"
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67217 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67221 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67224 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67244 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67250 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67253 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67258 "isa_arm32.tcc"
> *DecodeOpLdc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67264 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67275 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67278 "isa_arm32.tcc"
>

void
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67285 "isa_arm32.tcc"
>::initialize_condition()
{
#line 191 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67294 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67302 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67306 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67310 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67314 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67317 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67321 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67324 "isa_arm32.tcc"
)
{
#line 254 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 67339 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67344 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67347 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67351 "isa_arm32.tcc"
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67355 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67359 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67362 "isa_arm32.tcc"
)
{
#line 311 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 67382 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67391 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67396 "isa_arm32.tcc"
> *DecodeOpLdc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67402 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67416 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67423 "isa_arm32.tcc"
>::initialize_condition()
{
#line 204 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 67432 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67437 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67440 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67444 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67448 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67452 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67455 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67459 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67462 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67477 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67482 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67485 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67489 "isa_arm32.tcc"
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67493 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67497 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67500 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67519 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67527 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67530 "isa_arm32.tcc"
>

void
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67537 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67547 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67556 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67561 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67567 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67581 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67588 "isa_arm32.tcc"
>::initialize_condition()
{
#line 210 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 67597 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67602 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67605 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67609 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67613 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67620 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67624 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67627 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67642 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67647 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67650 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67654 "isa_arm32.tcc"
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67658 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67662 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67665 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67684 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67692 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67695 "isa_arm32.tcc"
>

void
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67702 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67712 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67718 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67721 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67726 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67732 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67743 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67746 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67753 "isa_arm32.tcc"
>::initialize_condition()
{
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 67762 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67770 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67774 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67778 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67782 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67785 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67789 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67792 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67807 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67815 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67819 "isa_arm32.tcc"
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67823 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67827 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67830 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 67849 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67857 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67860 "isa_arm32.tcc"
>

void
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67867 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 67877 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67886 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67891 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 67897 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67908 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67911 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67918 "isa_arm32.tcc"
>::initialize_condition()
{
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 67927 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67935 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67939 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67943 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67947 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67950 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 67954 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 67957 "isa_arm32.tcc"
)
{
#line 266 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 67972 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 67977 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67980 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 67984 "isa_arm32.tcc"
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 67988 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 67992 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 67995 "isa_arm32.tcc"
)
{
#line 328 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 68014 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68022 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68025 "isa_arm32.tcc"
>

void
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68032 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 68042 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68048 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68051 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68056 "isa_arm32.tcc"
> *DecodeOpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68062 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc instruction
*******************************************************************/
/*******************************************************************
* mcr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68078 "isa_arm32.tcc"
>

void
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68085 "isa_arm32.tcc"
>::initialize_condition()
{
#line 358 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68094 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68099 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68102 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68106 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68110 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68114 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68117 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68121 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68124 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68140 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68145 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68148 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68152 "isa_arm32.tcc"
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68156 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68160 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68163 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68176 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68185 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68190 "isa_arm32.tcc"
> *DecodeOpMcr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68196 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68206 "isa_arm32.tcc"
>

void
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68213 "isa_arm32.tcc"
>::initialize_condition()
{
#line 364 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68222 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68230 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68234 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68238 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68242 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68245 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68249 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68252 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68268 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68276 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68280 "isa_arm32.tcc"
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68284 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68288 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68291 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68304 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68310 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68313 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68318 "isa_arm32.tcc"
> *DecodeOpMcr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68324 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68331 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68334 "isa_arm32.tcc"
>

void
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68341 "isa_arm32.tcc"
>::initialize_condition()
{
#line 370 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68350 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68355 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68358 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68362 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68366 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68370 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68373 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68377 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68380 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68396 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68401 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68404 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68408 "isa_arm32.tcc"
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68412 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68416 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68419 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68432 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68441 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68446 "isa_arm32.tcc"
> *DecodeOpMcr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68452 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68459 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68462 "isa_arm32.tcc"
>

void
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68469 "isa_arm32.tcc"
>::initialize_condition()
{
#line 376 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68478 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68483 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68486 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68490 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68494 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68498 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68501 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68505 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68508 "isa_arm32.tcc"
)
{
#line 382 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68524 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68529 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68532 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68536 "isa_arm32.tcc"
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68540 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68544 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68547 "isa_arm32.tcc"
)
{
#line 395 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68560 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68566 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68569 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68574 "isa_arm32.tcc"
> *DecodeOpMcr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68580 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr instruction
*******************************************************************/
/*******************************************************************
* mrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68596 "isa_arm32.tcc"
>

void
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68603 "isa_arm32.tcc"
>::initialize_condition()
{
#line 419 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 68612 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68617 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68620 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68624 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68628 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68632 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68635 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68639 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68642 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68658 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68666 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68670 "isa_arm32.tcc"
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68674 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68678 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68681 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68694 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68703 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68708 "isa_arm32.tcc"
> *DecodeOpMrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68714 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68721 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68724 "isa_arm32.tcc"
>

void
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68731 "isa_arm32.tcc"
>::initialize_condition()
{
#line 425 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 68740 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68745 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68748 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68752 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68756 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68760 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68763 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68767 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68770 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68786 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68791 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68794 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68798 "isa_arm32.tcc"
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68802 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68806 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68809 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68822 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68831 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68836 "isa_arm32.tcc"
> *DecodeOpMrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68842 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68852 "isa_arm32.tcc"
>

void
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68859 "isa_arm32.tcc"
>::initialize_condition()
{
#line 431 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 68868 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68873 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68876 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68880 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68884 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68888 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68891 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 68895 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 68898 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 68914 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68922 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 68926 "isa_arm32.tcc"
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68930 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 68934 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 68937 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 68950 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68956 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68959 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68964 "isa_arm32.tcc"
> *DecodeOpMrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 68970 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 68977 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68980 "isa_arm32.tcc"
>

void
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 68987 "isa_arm32.tcc"
>::initialize_condition()
{
#line 437 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 68996 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69001 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69004 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69008 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69012 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69016 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69019 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69023 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69026 "isa_arm32.tcc"
)
{
#line 443 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 69042 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69050 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69054 "isa_arm32.tcc"
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69058 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69062 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69065 "isa_arm32.tcc"
)
{
#line 456 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 69078 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69084 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69087 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69092 "isa_arm32.tcc"
> *DecodeOpMrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69098 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc instruction
*******************************************************************/
/*******************************************************************
* stc instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69115 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69118 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69125 "isa_arm32.tcc"
>::initialize_condition()
{
#line 479 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69134 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69139 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69142 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69146 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69150 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69154 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69157 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69161 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69164 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69179 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69187 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69191 "isa_arm32.tcc"
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69195 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69199 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69202 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69221 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69229 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69232 "isa_arm32.tcc"
>

void
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69239 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69249 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69255 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69258 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69263 "isa_arm32.tcc"
> *DecodeOpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69269 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69280 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69283 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69290 "isa_arm32.tcc"
>::initialize_condition()
{
#line 485 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69299 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69304 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69307 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69311 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69315 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69319 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69322 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69326 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69329 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69344 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69352 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69356 "isa_arm32.tcc"
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69360 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69364 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69367 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69386 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69397 "isa_arm32.tcc"
>

void
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69404 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69414 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69420 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69423 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69428 "isa_arm32.tcc"
> *DecodeOpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69434 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69445 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69448 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69455 "isa_arm32.tcc"
>::initialize_condition()
{
#line 491 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 69464 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69469 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69472 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69476 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69480 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69484 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69487 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69491 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69494 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69509 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69517 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69521 "isa_arm32.tcc"
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69525 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69529 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69532 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69551 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69559 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69562 "isa_arm32.tcc"
>

void
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69569 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69579 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69588 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69593 "isa_arm32.tcc"
> *DecodeOpStc_offset_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69599 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69610 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69613 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69620 "isa_arm32.tcc"
>::initialize_condition()
{
#line 497 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 69629 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69634 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69637 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69641 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69645 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69652 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69656 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69659 "isa_arm32.tcc"
)
{
#line 598 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 69674 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69682 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69686 "isa_arm32.tcc"
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69690 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69694 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69697 "isa_arm32.tcc"
)
{
#line 646 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69716 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69724 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69727 "isa_arm32.tcc"
>

void
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69734 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 69744 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69753 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69758 "isa_arm32.tcc"
> *DecodeOpStc_offset_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69764 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69778 "isa_arm32.tcc"
>

void
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69785 "isa_arm32.tcc"
>::initialize_condition()
{
#line 510 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 69794 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69802 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69806 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69810 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69814 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69817 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69821 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69824 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69839 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69844 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69847 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69851 "isa_arm32.tcc"
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69855 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69859 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69862 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 69882 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69888 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69891 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69896 "isa_arm32.tcc"
> *DecodeOpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 69902 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69913 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69916 "isa_arm32.tcc"
>

void
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69923 "isa_arm32.tcc"
>::initialize_condition()
{
#line 516 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 69932 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69937 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69940 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69944 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69948 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69952 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 69955 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 69959 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 69962 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 69977 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 69982 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69985 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 69989 "isa_arm32.tcc"
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 69993 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 69997 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70000 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70020 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70026 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70029 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70034 "isa_arm32.tcc"
> *DecodeOpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70040 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70051 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70054 "isa_arm32.tcc"
>

void
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70061 "isa_arm32.tcc"
>::initialize_condition()
{
#line 522 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70070 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70075 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70078 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70082 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70086 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70093 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70097 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70100 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70115 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70120 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70123 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70127 "isa_arm32.tcc"
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70131 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70135 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70138 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70158 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70164 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70167 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70172 "isa_arm32.tcc"
> *DecodeOpStc_pre_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70178 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70189 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70192 "isa_arm32.tcc"
>

void
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70199 "isa_arm32.tcc"
>::initialize_condition()
{
#line 528 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70208 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70213 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70216 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70220 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70224 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70228 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70231 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70235 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70238 "isa_arm32.tcc"
)
{
#line 610 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 70253 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70258 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70261 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70265 "isa_arm32.tcc"
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70269 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70273 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70276 "isa_arm32.tcc"
)
{
#line 662 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70296 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70302 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70305 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70310 "isa_arm32.tcc"
> *DecodeOpStc_pre_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70316 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70327 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70330 "isa_arm32.tcc"
>

void
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70337 "isa_arm32.tcc"
>::initialize_condition()
{
#line 541 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70346 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70354 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70358 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70362 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70366 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70369 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70373 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70376 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70391 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70396 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70399 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70403 "isa_arm32.tcc"
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70407 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70411 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70414 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70434 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70443 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70448 "isa_arm32.tcc"
> *DecodeOpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70454 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70468 "isa_arm32.tcc"
>

void
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70475 "isa_arm32.tcc"
>::initialize_condition()
{
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 70484 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70492 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70496 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70500 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70504 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70507 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70511 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70514 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70529 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70534 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70537 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70541 "isa_arm32.tcc"
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70545 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70549 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70552 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70572 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70578 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70581 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70586 "isa_arm32.tcc"
> *DecodeOpStc_post_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70592 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70603 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70606 "isa_arm32.tcc"
>

void
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70613 "isa_arm32.tcc"
>::initialize_condition()
{
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 70622 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70627 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70630 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70634 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70638 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70642 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70645 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70649 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70652 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70667 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70672 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70675 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70679 "isa_arm32.tcc"
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70683 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70687 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70690 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70710 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70716 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70719 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70724 "isa_arm32.tcc"
> *DecodeOpStc_post_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70730 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70744 "isa_arm32.tcc"
>

void
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70751 "isa_arm32.tcc"
>::initialize_condition()
{
#line 559 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 70760 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70765 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70768 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70772 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70776 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70780 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70783 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70787 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70790 "isa_arm32.tcc"
)
{
#line 622 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 70805 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70813 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70817 "isa_arm32.tcc"
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70821 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70825 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70828 "isa_arm32.tcc"
)
{
#line 679 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 70848 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70854 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70857 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70862 "isa_arm32.tcc"
> *DecodeOpStc_post_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 70868 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70879 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70882 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70889 "isa_arm32.tcc"
>::initialize_condition()
{
#line 572 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 70898 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70903 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70906 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70910 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70914 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70918 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70921 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 70925 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 70928 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 70943 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70948 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70951 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 70955 "isa_arm32.tcc"
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70959 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 70963 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 70966 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 70985 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 70993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 70996 "isa_arm32.tcc"
>

void
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71003 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71013 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71022 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71027 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71033 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71047 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71054 "isa_arm32.tcc"
>::initialize_condition()
{
#line 578 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 71063 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71068 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71071 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71075 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71079 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71083 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71086 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71090 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71093 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71108 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71116 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71120 "isa_arm32.tcc"
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71124 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71128 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71131 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71150 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71161 "isa_arm32.tcc"
>

void
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71168 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71178 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71187 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71192 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71198 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71209 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71212 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71219 "isa_arm32.tcc"
>::initialize_condition()
{
#line 584 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 71228 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71233 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71236 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71240 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71244 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71248 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71251 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71255 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71258 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71273 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71278 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71281 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71285 "isa_arm32.tcc"
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71289 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71293 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71296 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71315 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71323 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71326 "isa_arm32.tcc"
>

void
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71333 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71343 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71349 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71352 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71357 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71363 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71374 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71377 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71384 "isa_arm32.tcc"
>::initialize_condition()
{
#line 590 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 71393 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71398 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71401 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71405 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71409 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71413 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71416 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71420 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71423 "isa_arm32.tcc"
)
{
#line 634 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "stc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 71438 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71443 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71446 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71450 "isa_arm32.tcc"
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71454 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71458 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71461 "isa_arm32.tcc"
)
{
#line 696 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 71480 "isa_arm32.tcc"
}
/*
* end of stc instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71488 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71491 "isa_arm32.tcc"
>

void
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71498 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 720 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == 15) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71508 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71514 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71517 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71522 "isa_arm32.tcc"
> *DecodeOpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71528 "isa_arm32.tcc"
	>(code, addr);
}

/*******************************************************************
* cdp2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71538 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71541 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71545 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71549 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71553 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71556 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71560 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71563 "isa_arm32.tcc"
)
{
#line 734 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "cdp2";
		buffer << " " << dec << cp_num;
		buffer << ", " << dec << op1;
		buffer << ", cr" << dec << crd;
		buffer << ", cr" << dec << crn;
		buffer << ", cr" << dec << crm;
		buffer << ", " << dec << op2;
	}
#line 71576 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71581 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71584 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71588 "isa_arm32.tcc"
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71592 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71596 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71599 "isa_arm32.tcc"
)
{
#line 744 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.CoprocessorDataProcess(cp_num, op1, op2, crd, crn, crm);
	}
#line 71608 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71614 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71617 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71622 "isa_arm32.tcc"
> *DecodeOpCdp2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71628 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of cdp2 instruction
*******************************************************************/
/*******************************************************************
* ldc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71648 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71652 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71656 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71660 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71663 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71667 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71670 "isa_arm32.tcc"
)
{
#line 767 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 71682 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71687 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71690 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71694 "isa_arm32.tcc"
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71698 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71702 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71705 "isa_arm32.tcc"
)
{
#line 806 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71722 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71733 "isa_arm32.tcc"
>

void
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71740 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 71750 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71759 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71764 "isa_arm32.tcc"
> *DecodeOpLdc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71770 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71781 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71784 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71788 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71792 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71796 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71799 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71803 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71806 "isa_arm32.tcc"
)
{
#line 776 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 71818 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71826 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71830 "isa_arm32.tcc"
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71834 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71838 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71841 "isa_arm32.tcc"
)
{
#line 820 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71859 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71865 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71868 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71873 "isa_arm32.tcc"
> *DecodeOpLdc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71879 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71893 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71897 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71901 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71905 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71908 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 71912 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 71915 "isa_arm32.tcc"
)
{
#line 785 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "ldc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 71927 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71932 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71935 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 71939 "isa_arm32.tcc"
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71943 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 71947 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 71950 "isa_arm32.tcc"
)
{
#line 835 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorLoad(cp_num, address)) {
			address += 4;
		}
	}
#line 71968 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71974 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71977 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 71982 "isa_arm32.tcc"
> *DecodeOpLdc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 71988 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 71999 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72002 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72006 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72010 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72014 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72017 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72021 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72024 "isa_arm32.tcc"
)
{
#line 794 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "ldc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72039 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72044 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72047 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72051 "isa_arm32.tcc"
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72055 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72059 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72062 "isa_arm32.tcc"
)
{
#line 850 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorLoad(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72079 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72087 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72090 "isa_arm32.tcc"
>

void
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72097 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72107 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72113 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72116 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72121 "isa_arm32.tcc"
> *DecodeOpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72127 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of ldc2 instruction
*******************************************************************/
/*******************************************************************
* mcr2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72140 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72143 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72147 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72151 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72155 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72158 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72162 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72165 "isa_arm32.tcc"
)
{
#line 875 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mcr2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72178 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72186 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72190 "isa_arm32.tcc"
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72194 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72198 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72201 "isa_arm32.tcc"
)
{
#line 885 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveToCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72210 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72216 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72219 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72224 "isa_arm32.tcc"
> *DecodeOpMcr2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72230 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcr2 instruction
*******************************************************************/
/*******************************************************************
* mrc2 instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72246 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72250 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72254 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72258 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72261 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72265 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72268 "isa_arm32.tcc"
)
{
#line 902 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "mrc2";
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", cr" << crn;
		buffer << ", cr" << crm;
		if(op2 != 0) buffer << ", " << op2;
	}
#line 72281 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72289 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72293 "isa_arm32.tcc"
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72297 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72301 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72304 "isa_arm32.tcc"
)
{
#line 912 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		cpu.MoveFromCoprocessor(cp_num, op1, op2, rd, crn, crm);
	}
#line 72313 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72319 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72322 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72327 "isa_arm32.tcc"
> *DecodeOpMrc2(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72333 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrc2 instruction
*******************************************************************/
/*******************************************************************
* stc2 instruction
*/
/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72350 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72353 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72357 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72361 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72365 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72368 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72372 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72375 "isa_arm32.tcc"
)
{
#line 935 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_offset(u, rn, offset, buffer);
	}
#line 72387 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72392 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72395 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72399 "isa_arm32.tcc"
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72403 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72407 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72410 "isa_arm32.tcc"
)
{
#line 971 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72427 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72438 "isa_arm32.tcc"
>

void
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72445 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72455 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72461 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72464 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72469 "isa_arm32.tcc"
> *DecodeOpStc2_offset(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72475 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72486 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72489 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72493 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72497 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72501 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72504 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72508 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72511 "isa_arm32.tcc"
)
{
#line 944 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_pre(u, rn, offset, buffer);
	}
#line 72523 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72528 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72531 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72535 "isa_arm32.tcc"
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72539 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72543 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72546 "isa_arm32.tcc"
)
{
#line 985 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = cpu.CLSOpDec(u, rn_value, offset);
		cpu.SetGPR(rn, address);
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72564 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72570 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72573 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72578 "isa_arm32.tcc"
> *DecodeOpStc2_pre(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72584 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72595 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72598 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72602 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72606 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72610 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72613 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72617 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72620 "isa_arm32.tcc"
)
{
#line 953 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSImm_post(u, rn, offset, buffer);
	}
#line 72632 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72640 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72644 "isa_arm32.tcc"
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72648 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72652 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72655 "isa_arm32.tcc"
)
{
#line 1000 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		cpu.SetGPR(rn, cpu.CLSOpDec(u, rn_value, offset));
		while(cpu.CoprocessorStore(cp_num, address)) {
			address += 4;
		}
	}
#line 72673 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72679 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72682 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72687 "isa_arm32.tcc"
> *DecodeOpStc2_post(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72693 "isa_arm32.tcc"
	>(code, addr);
}

/*p*/
/*u*/
/*n*/
/*w*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72704 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72707 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72711 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72715 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72719 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72722 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72726 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72729 "isa_arm32.tcc"
)
{
#line 962 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		buffer << "stc";
		if(n == 1) buffer << "l";
		buffer << " " << cp_num;
		buffer << ", cr" << crd;
		buffer << ", ";
		cpu.DisasmCLSUnindexed(rn, option, buffer);
	}
#line 72741 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72749 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72753 "isa_arm32.tcc"
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72757 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72761 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72764 "isa_arm32.tcc"
)
{
#line 1015 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::address_t address;
		typename CONFIG::reg_t rn_value = inherited::rn_init + cpu.GetGPR(rn);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		address = rn_value;
		while(cpu.CoprocessorStore(cp_num, address, option)) {
			address += 4;
		}
	}
#line 72781 "isa_arm32.tcc"
}
/*
* end of stc2 instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72789 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72792 "isa_arm32.tcc"
>

void
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72799 "isa_arm32.tcc"
>::initialize_rn_init()
{
#line 1033 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rn == CPU<CONFIG>::PC_reg) inherited::rn_init = 8;
		else inherited::rn_init = 0;
	}
#line 72809 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72815 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72818 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72823 "isa_arm32.tcc"
> *DecodeOpStc2_unindexed(CodeType code, typename CONFIG::address_t addr)
{
	return new OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72829 "isa_arm32.tcc"
	>(code, addr);
}

/*
*  Copyright (c) 2008,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

COPROCESSOR INSTRUCTIONS

**********************************************/
/*******************************************************************
* mcrr instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72877 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72880 "isa_arm32.tcc"
>

void
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72887 "isa_arm32.tcc"
>::initialize_condition()
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 72896 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72904 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72908 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72912 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72916 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72919 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 72923 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 72926 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 72941 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72946 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72949 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 72953 "isa_arm32.tcc"
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72957 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 72961 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 72964 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 72978 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 72984 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72987 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 72992 "isa_arm32.tcc"
> *DecodeOpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 72998 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73005 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73008 "isa_arm32.tcc"
>

void
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73015 "isa_arm32.tcc"
>::initialize_condition()
{
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73024 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73032 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73036 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73040 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73044 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73047 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73051 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73054 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73069 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73074 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73077 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73081 "isa_arm32.tcc"
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73085 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73089 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73092 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73106 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73115 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73120 "isa_arm32.tcc"
> *DecodeOpMcrr_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73126 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73133 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73136 "isa_arm32.tcc"
>

void
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73143 "isa_arm32.tcc"
>::initialize_condition()
{
#line 66 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73152 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73160 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73164 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73168 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73172 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73175 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73179 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73182 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73197 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73202 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73205 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73209 "isa_arm32.tcc"
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73213 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73217 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73220 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73234 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73240 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73243 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73248 "isa_arm32.tcc"
> *DecodeOpMcrr_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73254 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73264 "isa_arm32.tcc"
>

void
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73271 "isa_arm32.tcc"
>::initialize_condition()
{
#line 72 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73280 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73288 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73292 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73296 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73300 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73303 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73307 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73310 "isa_arm32.tcc"
)
{
#line 80 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mcrr";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73325 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73330 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73333 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73337 "isa_arm32.tcc"
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73341 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73345 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73348 "isa_arm32.tcc"
)
{
#line 92 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveToCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveToCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73362 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73371 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73376 "isa_arm32.tcc"
> *DecodeOpMcrr_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73382 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mcrr instruction
*******************************************************************/
/*******************************************************************
* mrrc instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73395 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73398 "isa_arm32.tcc"
>

void
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73405 "isa_arm32.tcc"
>::initialize_condition()
{
#line 120 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = sub_cond;
	}
#line 73414 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73419 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73422 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73426 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73430 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73434 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73437 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73441 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73444 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73459 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73467 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73471 "isa_arm32.tcc"
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73475 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73479 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73482 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73496 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73502 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73505 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73510 "isa_arm32.tcc"
> *DecodeOpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73516 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73523 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73526 "isa_arm32.tcc"
>

void
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73533 "isa_arm32.tcc"
>::initialize_condition()
{
#line 126 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 8 + sub_cond;
	}
#line 73542 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73547 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73550 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73554 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73558 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73562 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73565 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73569 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73572 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73587 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73595 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73599 "isa_arm32.tcc"
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73603 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73607 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73610 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73624 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73633 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73638 "isa_arm32.tcc"
> *DecodeOpMrrc_10xx(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73644 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73651 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73654 "isa_arm32.tcc"
>

void
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73661 "isa_arm32.tcc"
>::initialize_condition()
{
#line 132 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 12 + sub_cond;
	}
#line 73670 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73675 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73678 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73682 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73686 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73690 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73693 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73697 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73700 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73715 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73720 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73723 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73727 "isa_arm32.tcc"
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73731 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73735 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73738 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73752 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73758 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73761 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73766 "isa_arm32.tcc"
> *DecodeOpMrrc_110x(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73772 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73779 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73782 "isa_arm32.tcc"
>

void
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73789 "isa_arm32.tcc"
>::initialize_condition()
{
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		inherited::cond_init = 14;
	}
#line 73798 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73803 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73806 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73810 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73814 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73818 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73821 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73825 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73828 "isa_arm32.tcc"
)
{
#line 146 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		buffer << "mrrc";
		cpu.DisasmCondition(inherited::cond_init, buffer);
		buffer << " " << cp_num;
		buffer << ", " << op1;
		buffer << ", r" << rd;
		buffer << ", r" << rn;
		buffer << ", cr" << crm;
	}
#line 73843 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73848 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73851 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73855 "isa_arm32.tcc"
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73859 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73863 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73866 "isa_arm32.tcc"
)
{
#line 158 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	{
		typedef Operation<CONFIG> inherited;

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		if(!cpu.CheckCondition(inherited::cond_init)) return;

		cpu.MoveFromCoprocessor(cp_num, op1, 0, rd, 0, crm);
		cpu.MoveFromCoprocessor(cp_num, op1, 0, rn, 0, crm);
	}
#line 73880 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73886 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73889 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73894 "isa_arm32.tcc"
> *DecodeOpMrrc_1110(CodeType code, typename CONFIG::address_t addr)
{
	return new OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 73900 "isa_arm32.tcc"
	>(code, addr);
}

/*
* end of mrrc instruction
*******************************************************************/
/*
*  Copyright (c) 2007,
*  Commissariat a l'Energie Atomique (CEA)
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without modification,
*  are permitted provided that the following conditions are met:
*
*   - Redistributions of source code must retain the above copyright notice, this
*     list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
*
*   - Neither the name of CEA nor the names of its contributors may be used to
*     endorse or promote products derived from this software without specific prior
*     written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
*  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
*  DISCLAIMED.
*  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
*  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
*  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
*  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
*/
/**********************************************

MISCELLANEOUS ARITHMETIC INSTRUCTIONS

**********************************************/
/*******************************************************************
* clz instruction
*/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73951 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73954 "isa_arm32.tcc"
>
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73958 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73962 "isa_arm32.tcc"
>::disasm(
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 73966 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 73969 "isa_arm32.tcc"
,
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
stringstream &
#line 73973 "isa_arm32.tcc"
#line 39 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
buffer
#line 73976 "isa_arm32.tcc"
)
{
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		buffer << "clz";
		cpu.DisasmCondition(cond, buffer);
		buffer << " r" << rd << ", r" << rm;
	}
#line 73985 "isa_arm32.tcc"
}
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 73990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 73993 "isa_arm32.tcc"
>
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
void
#line 73997 "isa_arm32.tcc"
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74001 "isa_arm32.tcc"
>::execute(
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
CPU<CONFIG> &
#line 74005 "isa_arm32.tcc"
#line 35 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/actions_dec.isa"
cpu
#line 74008 "isa_arm32.tcc"
)
{
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		typename CONFIG::reg_t src;
		typename CONFIG::reg_t res;
		typename CONFIG::reg_t rm_value = inherited::rm_init + cpu.GetGPR(rm);

		cpu.SetGPR(cpu.PC_reg, cpu.GetGPR(cpu.PC_reg) + 4);

		src = rm_value;
		if(src == 0) {
			res = 32;
			} else {
			res = 0;
			while((src & 0x80000000) == 0) {
				res++;
				src = src << 1;
			}
			//    res = 31 - res;
		}

		cpu.SetGPR(rd, res);
	}
#line 74035 "isa_arm32.tcc"
}
/*
* end of clz instruction
*******************************************************************/
template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74043 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74046 "isa_arm32.tcc"
>

void
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74053 "isa_arm32.tcc"
>::initialize_rm_init()
{
#line 83 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	{
		typedef Operation<CONFIG> inherited;

		if(rm == CPU<CONFIG>::PC_reg) inherited::rm_init = 8;
		else inherited::rm_init = 0;
	}
#line 74063 "isa_arm32.tcc"
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74069 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74072 "isa_arm32.tcc"
>
static Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74077 "isa_arm32.tcc"
> *DecodeOpClz(CodeType code, typename CONFIG::address_t addr)
{
	return new OpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 74083 "isa_arm32.tcc"
	>(code, addr);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74090 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74093 "isa_arm32.tcc"
>
OpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74098 "isa_arm32.tcc"
>::OpB_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74102 "isa_arm32.tcc"
>(code, addr, "b_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74112 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74115 "isa_arm32.tcc"
>
OpB_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74120 "isa_arm32.tcc"
>::OpB_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74124 "isa_arm32.tcc"
>(code, addr, "b_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74137 "isa_arm32.tcc"
>
OpB_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74142 "isa_arm32.tcc"
>::OpB_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74146 "isa_arm32.tcc"
>(code, addr, "b_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74156 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74159 "isa_arm32.tcc"
>
OpB_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74164 "isa_arm32.tcc"
>::OpB_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74168 "isa_arm32.tcc"
>(code, addr, "b_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74177 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74180 "isa_arm32.tcc"
>
OpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74185 "isa_arm32.tcc"
>::OpBl_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74189 "isa_arm32.tcc"
>(code, addr, "bl_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74199 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74202 "isa_arm32.tcc"
>
OpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74207 "isa_arm32.tcc"
>::OpBl_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74211 "isa_arm32.tcc"
>(code, addr, "bl_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74224 "isa_arm32.tcc"
>
OpBl_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74229 "isa_arm32.tcc"
>::OpBl_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74233 "isa_arm32.tcc"
>(code, addr, "bl_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74243 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74246 "isa_arm32.tcc"
>
OpBl_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74251 "isa_arm32.tcc"
>::OpBl_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74255 "isa_arm32.tcc"
>(code, addr, "bl_1110")
{
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74264 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74267 "isa_arm32.tcc"
>
OpBx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74272 "isa_arm32.tcc"
>::OpBx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74276 "isa_arm32.tcc"
>(code, addr, "bx")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74289 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74292 "isa_arm32.tcc"
>
OpBlx_1<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74297 "isa_arm32.tcc"
>::OpBlx_1(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74301 "isa_arm32.tcc"
>(code, addr, "blx_1")
{
	h = ((code >> 24) & 0x1);
	imm = (((((int32_t)(code >> 0)) & 0xffffff) << 8) >> 8);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74314 "isa_arm32.tcc"
>
OpBlx_2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74319 "isa_arm32.tcc"
>::OpBlx_2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74323 "isa_arm32.tcc"
>(code, addr, "blx_2")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	sbo2 = ((code >> 12) & 0xf);
	sbo3 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74336 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74339 "isa_arm32.tcc"
>
OpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74344 "isa_arm32.tcc"
>::OpAnd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74348 "isa_arm32.tcc"
>(code, addr, "and_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74361 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74364 "isa_arm32.tcc"
>
OpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74369 "isa_arm32.tcc"
>::OpAnd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74373 "isa_arm32.tcc"
>(code, addr, "and_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74387 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74390 "isa_arm32.tcc"
>
OpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74395 "isa_arm32.tcc"
>::OpAnd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74399 "isa_arm32.tcc"
>(code, addr, "and_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74416 "isa_arm32.tcc"
>
OpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74421 "isa_arm32.tcc"
>::OpAnds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74425 "isa_arm32.tcc"
>(code, addr, "ands_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74438 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74441 "isa_arm32.tcc"
>
OpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74446 "isa_arm32.tcc"
>::OpAnds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74450 "isa_arm32.tcc"
>(code, addr, "ands_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74464 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74467 "isa_arm32.tcc"
>
OpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74472 "isa_arm32.tcc"
>::OpAnds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74476 "isa_arm32.tcc"
>(code, addr, "ands_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74490 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74493 "isa_arm32.tcc"
>
OpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74498 "isa_arm32.tcc"
>::OpEor_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74502 "isa_arm32.tcc"
>(code, addr, "eor_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74515 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74518 "isa_arm32.tcc"
>
OpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74523 "isa_arm32.tcc"
>::OpEor_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74527 "isa_arm32.tcc"
>(code, addr, "eor_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74541 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74544 "isa_arm32.tcc"
>
OpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74549 "isa_arm32.tcc"
>::OpEor_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74553 "isa_arm32.tcc"
>(code, addr, "eor_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74570 "isa_arm32.tcc"
>
OpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74575 "isa_arm32.tcc"
>::OpEors_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74579 "isa_arm32.tcc"
>(code, addr, "eors_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74595 "isa_arm32.tcc"
>
OpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74600 "isa_arm32.tcc"
>::OpEors_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74604 "isa_arm32.tcc"
>(code, addr, "eors_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74621 "isa_arm32.tcc"
>
OpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74626 "isa_arm32.tcc"
>::OpEors_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74630 "isa_arm32.tcc"
>(code, addr, "eors_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74647 "isa_arm32.tcc"
>
OpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74652 "isa_arm32.tcc"
>::OpSub_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74656 "isa_arm32.tcc"
>(code, addr, "sub_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74669 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74672 "isa_arm32.tcc"
>
OpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74677 "isa_arm32.tcc"
>::OpSub_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74681 "isa_arm32.tcc"
>(code, addr, "sub_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74695 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74698 "isa_arm32.tcc"
>
OpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74703 "isa_arm32.tcc"
>::OpSub_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74707 "isa_arm32.tcc"
>(code, addr, "sub_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74721 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74724 "isa_arm32.tcc"
>
OpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74729 "isa_arm32.tcc"
>::OpSubs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74733 "isa_arm32.tcc"
>(code, addr, "subs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74746 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74749 "isa_arm32.tcc"
>
OpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74754 "isa_arm32.tcc"
>::OpSubs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74758 "isa_arm32.tcc"
>(code, addr, "subs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74772 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74775 "isa_arm32.tcc"
>
OpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74780 "isa_arm32.tcc"
>::OpSubs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74784 "isa_arm32.tcc"
>(code, addr, "subs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74798 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74801 "isa_arm32.tcc"
>
OpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74806 "isa_arm32.tcc"
>::OpRsb_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74810 "isa_arm32.tcc"
>(code, addr, "rsb_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74823 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74826 "isa_arm32.tcc"
>
OpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74831 "isa_arm32.tcc"
>::OpRsb_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74835 "isa_arm32.tcc"
>(code, addr, "rsb_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74849 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74852 "isa_arm32.tcc"
>
OpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74857 "isa_arm32.tcc"
>::OpRsb_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74861 "isa_arm32.tcc"
>(code, addr, "rsb_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74875 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74878 "isa_arm32.tcc"
>
OpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74883 "isa_arm32.tcc"
>::OpRsbs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74887 "isa_arm32.tcc"
>(code, addr, "rsbs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74900 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74903 "isa_arm32.tcc"
>
OpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74908 "isa_arm32.tcc"
>::OpRsbs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74912 "isa_arm32.tcc"
>(code, addr, "rsbs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74926 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74929 "isa_arm32.tcc"
>
OpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74934 "isa_arm32.tcc"
>::OpRsbs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74938 "isa_arm32.tcc"
>(code, addr, "rsbs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74952 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74955 "isa_arm32.tcc"
>
OpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74960 "isa_arm32.tcc"
>::OpAdd_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74964 "isa_arm32.tcc"
>(code, addr, "add_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 74977 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74980 "isa_arm32.tcc"
>
OpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74985 "isa_arm32.tcc"
>::OpAdd_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 74989 "isa_arm32.tcc"
>(code, addr, "add_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75006 "isa_arm32.tcc"
>
OpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75011 "isa_arm32.tcc"
>::OpAdd_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75015 "isa_arm32.tcc"
>(code, addr, "add_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75029 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75032 "isa_arm32.tcc"
>
OpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75037 "isa_arm32.tcc"
>::OpAdds_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75041 "isa_arm32.tcc"
>(code, addr, "adds_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75054 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75057 "isa_arm32.tcc"
>
OpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75062 "isa_arm32.tcc"
>::OpAdds_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75066 "isa_arm32.tcc"
>(code, addr, "adds_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75080 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75083 "isa_arm32.tcc"
>
OpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75088 "isa_arm32.tcc"
>::OpAdds_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75092 "isa_arm32.tcc"
>(code, addr, "adds_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75106 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75109 "isa_arm32.tcc"
>
OpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75114 "isa_arm32.tcc"
>::OpAdc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75118 "isa_arm32.tcc"
>(code, addr, "adc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75134 "isa_arm32.tcc"
>
OpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75139 "isa_arm32.tcc"
>::OpAdc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75143 "isa_arm32.tcc"
>(code, addr, "adc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75157 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75160 "isa_arm32.tcc"
>
OpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75165 "isa_arm32.tcc"
>::OpAdc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75169 "isa_arm32.tcc"
>(code, addr, "adc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75183 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75186 "isa_arm32.tcc"
>
OpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75191 "isa_arm32.tcc"
>::OpAdcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75195 "isa_arm32.tcc"
>(code, addr, "adcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75208 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75211 "isa_arm32.tcc"
>
OpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75216 "isa_arm32.tcc"
>::OpAdcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75220 "isa_arm32.tcc"
>(code, addr, "adcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75237 "isa_arm32.tcc"
>
OpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75242 "isa_arm32.tcc"
>::OpAdcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75246 "isa_arm32.tcc"
>(code, addr, "adcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75260 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75263 "isa_arm32.tcc"
>
OpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75268 "isa_arm32.tcc"
>::OpSbc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75272 "isa_arm32.tcc"
>(code, addr, "sbc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75285 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75288 "isa_arm32.tcc"
>
OpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75293 "isa_arm32.tcc"
>::OpSbc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75297 "isa_arm32.tcc"
>(code, addr, "sbc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75311 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75314 "isa_arm32.tcc"
>
OpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75319 "isa_arm32.tcc"
>::OpSbc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75323 "isa_arm32.tcc"
>(code, addr, "sbc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75340 "isa_arm32.tcc"
>
OpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75345 "isa_arm32.tcc"
>::OpSbcs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75349 "isa_arm32.tcc"
>(code, addr, "sbcs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75362 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75365 "isa_arm32.tcc"
>
OpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75370 "isa_arm32.tcc"
>::OpSbcs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75374 "isa_arm32.tcc"
>(code, addr, "sbcs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75388 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75391 "isa_arm32.tcc"
>
OpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75396 "isa_arm32.tcc"
>::OpSbcs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75400 "isa_arm32.tcc"
>(code, addr, "sbcs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75414 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75417 "isa_arm32.tcc"
>
OpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75422 "isa_arm32.tcc"
>::OpRsc_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75426 "isa_arm32.tcc"
>(code, addr, "rsc_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75439 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75442 "isa_arm32.tcc"
>
OpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75447 "isa_arm32.tcc"
>::OpRsc_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75451 "isa_arm32.tcc"
>(code, addr, "rsc_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75465 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75468 "isa_arm32.tcc"
>
OpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75473 "isa_arm32.tcc"
>::OpRsc_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75477 "isa_arm32.tcc"
>(code, addr, "rsc_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75491 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75494 "isa_arm32.tcc"
>
OpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75499 "isa_arm32.tcc"
>::OpRscs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75503 "isa_arm32.tcc"
>(code, addr, "rscs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75519 "isa_arm32.tcc"
>
OpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75524 "isa_arm32.tcc"
>::OpRscs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75528 "isa_arm32.tcc"
>(code, addr, "rscs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75545 "isa_arm32.tcc"
>
OpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75550 "isa_arm32.tcc"
>::OpRscs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75554 "isa_arm32.tcc"
>(code, addr, "rscs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75568 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75571 "isa_arm32.tcc"
>
OpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75576 "isa_arm32.tcc"
>::OpTst_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75580 "isa_arm32.tcc"
>(code, addr, "tst_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75593 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75596 "isa_arm32.tcc"
>
OpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75601 "isa_arm32.tcc"
>::OpTst_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75605 "isa_arm32.tcc"
>(code, addr, "tst_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75619 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75622 "isa_arm32.tcc"
>
OpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75627 "isa_arm32.tcc"
>::OpTst_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75631 "isa_arm32.tcc"
>(code, addr, "tst_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75645 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75648 "isa_arm32.tcc"
>
OpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75653 "isa_arm32.tcc"
>::OpTeq_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75657 "isa_arm32.tcc"
>(code, addr, "teq_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75673 "isa_arm32.tcc"
>
OpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75678 "isa_arm32.tcc"
>::OpTeq_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75682 "isa_arm32.tcc"
>(code, addr, "teq_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75696 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75699 "isa_arm32.tcc"
>
OpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75704 "isa_arm32.tcc"
>::OpTeq_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75708 "isa_arm32.tcc"
>(code, addr, "teq_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75725 "isa_arm32.tcc"
>
OpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75730 "isa_arm32.tcc"
>::OpCmp_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75734 "isa_arm32.tcc"
>(code, addr, "cmp_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75747 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75750 "isa_arm32.tcc"
>
OpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75755 "isa_arm32.tcc"
>::OpCmp_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75759 "isa_arm32.tcc"
>(code, addr, "cmp_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75773 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75776 "isa_arm32.tcc"
>
OpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75781 "isa_arm32.tcc"
>::OpCmp_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75785 "isa_arm32.tcc"
>(code, addr, "cmp_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75799 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75802 "isa_arm32.tcc"
>
OpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75807 "isa_arm32.tcc"
>::OpCmn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75811 "isa_arm32.tcc"
>(code, addr, "cmn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75824 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75827 "isa_arm32.tcc"
>
OpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75832 "isa_arm32.tcc"
>::OpCmn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75836 "isa_arm32.tcc"
>(code, addr, "cmn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75850 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75853 "isa_arm32.tcc"
>
OpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75858 "isa_arm32.tcc"
>::OpCmn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75862 "isa_arm32.tcc"
>(code, addr, "cmn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75876 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75879 "isa_arm32.tcc"
>
OpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75884 "isa_arm32.tcc"
>::OpOrr_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75888 "isa_arm32.tcc"
>(code, addr, "orr_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75901 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75904 "isa_arm32.tcc"
>
OpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75909 "isa_arm32.tcc"
>::OpOrr_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75913 "isa_arm32.tcc"
>(code, addr, "orr_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75927 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75930 "isa_arm32.tcc"
>
OpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75935 "isa_arm32.tcc"
>::OpOrr_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75939 "isa_arm32.tcc"
>(code, addr, "orr_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75956 "isa_arm32.tcc"
>
OpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75961 "isa_arm32.tcc"
>::OpOrrs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75965 "isa_arm32.tcc"
>(code, addr, "orrs_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 75978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75981 "isa_arm32.tcc"
>
OpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75986 "isa_arm32.tcc"
>::OpOrrs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 75990 "isa_arm32.tcc"
>(code, addr, "orrs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76004 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76007 "isa_arm32.tcc"
>
OpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76012 "isa_arm32.tcc"
>::OpOrrs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76016 "isa_arm32.tcc"
>(code, addr, "orrs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76030 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76033 "isa_arm32.tcc"
>
OpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76038 "isa_arm32.tcc"
>::OpMov_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76042 "isa_arm32.tcc"
>(code, addr, "mov_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76058 "isa_arm32.tcc"
>
OpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76063 "isa_arm32.tcc"
>::OpMov_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76067 "isa_arm32.tcc"
>(code, addr, "mov_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76081 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76084 "isa_arm32.tcc"
>
OpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76089 "isa_arm32.tcc"
>::OpMov_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76093 "isa_arm32.tcc"
>(code, addr, "mov_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76110 "isa_arm32.tcc"
>
OpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76115 "isa_arm32.tcc"
>::OpMovs_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76119 "isa_arm32.tcc"
>(code, addr, "movs_32imm")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76132 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76135 "isa_arm32.tcc"
>
OpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76140 "isa_arm32.tcc"
>::OpMovs_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76144 "isa_arm32.tcc"
>(code, addr, "movs_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76158 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76161 "isa_arm32.tcc"
>
OpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76166 "isa_arm32.tcc"
>::OpMovs_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76170 "isa_arm32.tcc"
>(code, addr, "movs_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	sbz = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76187 "isa_arm32.tcc"
>
OpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76192 "isa_arm32.tcc"
>::OpBic_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76196 "isa_arm32.tcc"
>(code, addr, "bic_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76209 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76212 "isa_arm32.tcc"
>
OpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76217 "isa_arm32.tcc"
>::OpBic_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76221 "isa_arm32.tcc"
>(code, addr, "bic_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76235 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76238 "isa_arm32.tcc"
>
OpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76243 "isa_arm32.tcc"
>::OpBic_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76247 "isa_arm32.tcc"
>(code, addr, "bic_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76264 "isa_arm32.tcc"
>
OpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76269 "isa_arm32.tcc"
>::OpBics_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76273 "isa_arm32.tcc"
>(code, addr, "bics_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76286 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76289 "isa_arm32.tcc"
>
OpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76294 "isa_arm32.tcc"
>::OpBics_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76298 "isa_arm32.tcc"
>(code, addr, "bics_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76312 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76315 "isa_arm32.tcc"
>
OpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76320 "isa_arm32.tcc"
>::OpBics_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76324 "isa_arm32.tcc"
>(code, addr, "bics_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76338 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76341 "isa_arm32.tcc"
>
OpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76346 "isa_arm32.tcc"
>::OpMvn_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76350 "isa_arm32.tcc"
>(code, addr, "mvn_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76366 "isa_arm32.tcc"
>
OpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76371 "isa_arm32.tcc"
>::OpMvn_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76375 "isa_arm32.tcc"
>(code, addr, "mvn_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76392 "isa_arm32.tcc"
>
OpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76397 "isa_arm32.tcc"
>::OpMvn_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76401 "isa_arm32.tcc"
>(code, addr, "mvn_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76418 "isa_arm32.tcc"
>
OpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76423 "isa_arm32.tcc"
>::OpMvns_32imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76427 "isa_arm32.tcc"
>(code, addr, "mvns_32imm")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76443 "isa_arm32.tcc"
>
OpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76448 "isa_arm32.tcc"
>::OpMvns_imm_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76452 "isa_arm32.tcc"
>(code, addr, "mvns_imm_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76466 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76469 "isa_arm32.tcc"
>
OpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76474 "isa_arm32.tcc"
>::OpMvns_reg_shift(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76478 "isa_arm32.tcc"
>(code, addr, "mvns_reg_shift")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76495 "isa_arm32.tcc"
>
OpQadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76500 "isa_arm32.tcc"
>::OpQadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76504 "isa_arm32.tcc"
>(code, addr, "qadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76517 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76520 "isa_arm32.tcc"
>
OpQsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76525 "isa_arm32.tcc"
>::OpQsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76529 "isa_arm32.tcc"
>(code, addr, "qsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76545 "isa_arm32.tcc"
>
OpQdadd<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76550 "isa_arm32.tcc"
>::OpQdadd(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76554 "isa_arm32.tcc"
>(code, addr, "qdadd")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76567 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76570 "isa_arm32.tcc"
>
OpQdsub<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76575 "isa_arm32.tcc"
>::OpQdsub(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76579 "isa_arm32.tcc"
>(code, addr, "qdsub")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76592 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76595 "isa_arm32.tcc"
>
OpMla<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76600 "isa_arm32.tcc"
>::OpMla(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76604 "isa_arm32.tcc"
>(code, addr, "mla")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76618 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76621 "isa_arm32.tcc"
>
OpMul<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76626 "isa_arm32.tcc"
>::OpMul(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76630 "isa_arm32.tcc"
>(code, addr, "mul")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76644 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76647 "isa_arm32.tcc"
>
OpSmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76652 "isa_arm32.tcc"
>::OpSmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76656 "isa_arm32.tcc"
>(code, addr, "smlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76670 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76673 "isa_arm32.tcc"
>
OpSmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76678 "isa_arm32.tcc"
>::OpSmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76682 "isa_arm32.tcc"
>(code, addr, "smull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76696 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76699 "isa_arm32.tcc"
>
OpUmlal<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76704 "isa_arm32.tcc"
>::OpUmlal(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76708 "isa_arm32.tcc"
>(code, addr, "umlal")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76722 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76725 "isa_arm32.tcc"
>
OpUmull<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76730 "isa_arm32.tcc"
>::OpUmull(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76734 "isa_arm32.tcc"
>(code, addr, "umull")
{
	cond = ((code >> 28) & 0xf);
	s = ((code >> 20) & 0x1);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76748 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76751 "isa_arm32.tcc"
>
OpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76756 "isa_arm32.tcc"
>::OpSmlaxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76760 "isa_arm32.tcc"
>(code, addr, "smlaxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76775 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76778 "isa_arm32.tcc"
>
OpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76783 "isa_arm32.tcc"
>::OpSmlalxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76787 "isa_arm32.tcc"
>(code, addr, "smlalxy")
{
	cond = ((code >> 28) & 0xf);
	rdhi = ((code >> 16) & 0xf);
	rdlo = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76802 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76805 "isa_arm32.tcc"
>
OpSmlawy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76810 "isa_arm32.tcc"
>::OpSmlawy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76814 "isa_arm32.tcc"
>(code, addr, "smlawy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	rn = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76828 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76831 "isa_arm32.tcc"
>
OpSmulxy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76836 "isa_arm32.tcc"
>::OpSmulxy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76840 "isa_arm32.tcc"
>(code, addr, "smulxy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	x = ((code >> 5) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76855 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76858 "isa_arm32.tcc"
>
OpSmulwy<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76863 "isa_arm32.tcc"
>::OpSmulwy(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76867 "isa_arm32.tcc"
>(code, addr, "smulwy")
{
	cond = ((code >> 28) & 0xf);
	rd = ((code >> 16) & 0xf);
	sbz = ((code >> 12) & 0xf);
	rs = ((code >> 8) & 0xf);
	y = ((code >> 6) & 0x1);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76881 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76884 "isa_arm32.tcc"
>
OpMrs<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76889 "isa_arm32.tcc"
>::OpMrs(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76893 "isa_arm32.tcc"
>(code, addr, "mrs")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	rd = ((code >> 12) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76904 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76907 "isa_arm32.tcc"
>
OpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76912 "isa_arm32.tcc"
>::OpMsr_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76916 "isa_arm32.tcc"
>(code, addr, "msr_imm")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rotate_imm = ((code >> 8) & 0xf);
	imm = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76929 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76932 "isa_arm32.tcc"
>
OpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76937 "isa_arm32.tcc"
>::OpMsr_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76941 "isa_arm32.tcc"
>(code, addr, "msr_reg")
{
	cond = ((code >> 28) & 0xf);
	r = ((code >> 22) & 0x1);
	mask = ((code >> 16) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76953 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76956 "isa_arm32.tcc"
>
OpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76961 "isa_arm32.tcc"
>::OpLdr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76965 "isa_arm32.tcc"
>(code, addr, "ldr_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 76978 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76981 "isa_arm32.tcc"
>
OpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76986 "isa_arm32.tcc"
>::OpLdr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 76990 "isa_arm32.tcc"
>(code, addr, "ldr_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77003 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77006 "isa_arm32.tcc"
>
OpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77011 "isa_arm32.tcc"
>::OpLdr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77015 "isa_arm32.tcc"
>(code, addr, "ldr_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77028 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77031 "isa_arm32.tcc"
>
OpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77036 "isa_arm32.tcc"
>::OpLdr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77040 "isa_arm32.tcc"
>(code, addr, "ldr_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77055 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77058 "isa_arm32.tcc"
>
OpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77063 "isa_arm32.tcc"
>::OpLdr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77067 "isa_arm32.tcc"
>(code, addr, "ldr_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77082 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77085 "isa_arm32.tcc"
>
OpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77090 "isa_arm32.tcc"
>::OpLdr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77094 "isa_arm32.tcc"
>(code, addr, "ldr_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77109 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77112 "isa_arm32.tcc"
>
OpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77117 "isa_arm32.tcc"
>::OpLdrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77121 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77134 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77137 "isa_arm32.tcc"
>
OpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77142 "isa_arm32.tcc"
>::OpLdrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77146 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77162 "isa_arm32.tcc"
>
OpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77167 "isa_arm32.tcc"
>::OpLdrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77171 "isa_arm32.tcc"
>(code, addr, "ldrb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77184 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77187 "isa_arm32.tcc"
>
OpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77192 "isa_arm32.tcc"
>::OpLdrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77196 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77211 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77214 "isa_arm32.tcc"
>
OpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77219 "isa_arm32.tcc"
>::OpLdrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77223 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77238 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77241 "isa_arm32.tcc"
>
OpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77246 "isa_arm32.tcc"
>::OpLdrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77250 "isa_arm32.tcc"
>(code, addr, "ldrb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77265 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77268 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77273 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77277 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77289 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77292 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77297 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77301 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77313 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77316 "isa_arm32.tcc"
>
OpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77321 "isa_arm32.tcc"
>::OpLdrb_rd15_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77325 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77337 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77340 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77345 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77349 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77363 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77366 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77371 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77375 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77389 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77392 "isa_arm32.tcc"
>
OpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77397 "isa_arm32.tcc"
>::OpLdrb_rd15_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77401 "isa_arm32.tcc"
>(code, addr, "ldrb_rd15_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77415 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77418 "isa_arm32.tcc"
>
OpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77423 "isa_arm32.tcc"
>::OpLdrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77427 "isa_arm32.tcc"
>(code, addr, "ldrt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77440 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77443 "isa_arm32.tcc"
>
OpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77448 "isa_arm32.tcc"
>::OpLdrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77452 "isa_arm32.tcc"
>(code, addr, "ldrt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77467 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77470 "isa_arm32.tcc"
>
OpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77475 "isa_arm32.tcc"
>::OpLdrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77479 "isa_arm32.tcc"
>(code, addr, "ldrbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77492 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77495 "isa_arm32.tcc"
>
OpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77500 "isa_arm32.tcc"
>::OpLdrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77504 "isa_arm32.tcc"
>(code, addr, "ldrbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77519 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77522 "isa_arm32.tcc"
>
OpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77527 "isa_arm32.tcc"
>::OpStr_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77531 "isa_arm32.tcc"
>(code, addr, "str_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77544 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77547 "isa_arm32.tcc"
>
OpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77552 "isa_arm32.tcc"
>::OpStr_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77556 "isa_arm32.tcc"
>(code, addr, "str_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77569 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77572 "isa_arm32.tcc"
>
OpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77577 "isa_arm32.tcc"
>::OpStr_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77581 "isa_arm32.tcc"
>(code, addr, "str_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77594 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77597 "isa_arm32.tcc"
>
OpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77602 "isa_arm32.tcc"
>::OpStr_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77606 "isa_arm32.tcc"
>(code, addr, "str_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77621 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77624 "isa_arm32.tcc"
>
OpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77629 "isa_arm32.tcc"
>::OpStr_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77633 "isa_arm32.tcc"
>(code, addr, "str_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77648 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77651 "isa_arm32.tcc"
>
OpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77656 "isa_arm32.tcc"
>::OpStr_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77660 "isa_arm32.tcc"
>(code, addr, "str_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77675 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77678 "isa_arm32.tcc"
>
OpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77683 "isa_arm32.tcc"
>::OpStrb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77687 "isa_arm32.tcc"
>(code, addr, "strb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77700 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77703 "isa_arm32.tcc"
>
OpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77708 "isa_arm32.tcc"
>::OpStrb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77712 "isa_arm32.tcc"
>(code, addr, "strb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77725 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77728 "isa_arm32.tcc"
>
OpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77733 "isa_arm32.tcc"
>::OpStrb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77737 "isa_arm32.tcc"
>(code, addr, "strb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77750 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77753 "isa_arm32.tcc"
>
OpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77758 "isa_arm32.tcc"
>::OpStrb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77762 "isa_arm32.tcc"
>(code, addr, "strb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77777 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77780 "isa_arm32.tcc"
>
OpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77785 "isa_arm32.tcc"
>::OpStrb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77789 "isa_arm32.tcc"
>(code, addr, "strb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77804 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77807 "isa_arm32.tcc"
>
OpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77812 "isa_arm32.tcc"
>::OpStrb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77816 "isa_arm32.tcc"
>(code, addr, "strb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77831 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77834 "isa_arm32.tcc"
>
OpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77839 "isa_arm32.tcc"
>::OpStrt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77843 "isa_arm32.tcc"
>(code, addr, "strt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77856 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77859 "isa_arm32.tcc"
>
OpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77864 "isa_arm32.tcc"
>::OpStrt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77868 "isa_arm32.tcc"
>(code, addr, "strt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77883 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77886 "isa_arm32.tcc"
>
OpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77891 "isa_arm32.tcc"
>::OpStrbt_imm(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77895 "isa_arm32.tcc"
>(code, addr, "strbt_imm")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	offset = ((code >> 0) & 0xfff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77908 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77911 "isa_arm32.tcc"
>
OpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77916 "isa_arm32.tcc"
>::OpStrbt_reg(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77920 "isa_arm32.tcc"
>(code, addr, "strbt_reg")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	shift_imm = ((code >> 7) & 0x1f);
	shift = ((code >> 5) & 0x3);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77935 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77938 "isa_arm32.tcc"
>
OpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77943 "isa_arm32.tcc"
>::OpLdrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77947 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77961 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77964 "isa_arm32.tcc"
>
OpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77969 "isa_arm32.tcc"
>::OpLdrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77973 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 77987 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77990 "isa_arm32.tcc"
>
OpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77995 "isa_arm32.tcc"
>::OpLdrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 77999 "isa_arm32.tcc"
>(code, addr, "ldrh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78016 "isa_arm32.tcc"
>
OpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78021 "isa_arm32.tcc"
>::OpLdrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78025 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78039 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78042 "isa_arm32.tcc"
>
OpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78047 "isa_arm32.tcc"
>::OpLdrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78051 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78065 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78068 "isa_arm32.tcc"
>
OpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78073 "isa_arm32.tcc"
>::OpLdrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78077 "isa_arm32.tcc"
>(code, addr, "ldrh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78091 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78094 "isa_arm32.tcc"
>
OpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78099 "isa_arm32.tcc"
>::OpLdrsh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78103 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78117 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78120 "isa_arm32.tcc"
>
OpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78125 "isa_arm32.tcc"
>::OpLdrsh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78129 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78143 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78146 "isa_arm32.tcc"
>
OpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78151 "isa_arm32.tcc"
>::OpLdrsh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78155 "isa_arm32.tcc"
>(code, addr, "ldrsh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78169 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78172 "isa_arm32.tcc"
>
OpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78177 "isa_arm32.tcc"
>::OpLdrsh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78181 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78195 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78198 "isa_arm32.tcc"
>
OpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78203 "isa_arm32.tcc"
>::OpLdrsh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78207 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78221 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78224 "isa_arm32.tcc"
>
OpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78229 "isa_arm32.tcc"
>::OpLdrsh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78233 "isa_arm32.tcc"
>(code, addr, "ldrsh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78247 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78250 "isa_arm32.tcc"
>
OpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78255 "isa_arm32.tcc"
>::OpLdrsb_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78259 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78273 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78276 "isa_arm32.tcc"
>
OpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78281 "isa_arm32.tcc"
>::OpLdrsb_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78285 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78299 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78302 "isa_arm32.tcc"
>
OpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78307 "isa_arm32.tcc"
>::OpLdrsb_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78311 "isa_arm32.tcc"
>(code, addr, "ldrsb_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78325 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78328 "isa_arm32.tcc"
>
OpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78333 "isa_arm32.tcc"
>::OpLdrsb_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78337 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78351 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78354 "isa_arm32.tcc"
>
OpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78359 "isa_arm32.tcc"
>::OpLdrsb_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78363 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78377 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78380 "isa_arm32.tcc"
>
OpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78385 "isa_arm32.tcc"
>::OpLdrsb_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78389 "isa_arm32.tcc"
>(code, addr, "ldrsb_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78403 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78406 "isa_arm32.tcc"
>
OpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78411 "isa_arm32.tcc"
>::OpStrh_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78415 "isa_arm32.tcc"
>(code, addr, "strh_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78429 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78432 "isa_arm32.tcc"
>
OpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78437 "isa_arm32.tcc"
>::OpStrh_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78441 "isa_arm32.tcc"
>(code, addr, "strh_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78455 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78458 "isa_arm32.tcc"
>
OpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78463 "isa_arm32.tcc"
>::OpStrh_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78467 "isa_arm32.tcc"
>(code, addr, "strh_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78481 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78484 "isa_arm32.tcc"
>
OpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78489 "isa_arm32.tcc"
>::OpStrh_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78493 "isa_arm32.tcc"
>(code, addr, "strh_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78507 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78510 "isa_arm32.tcc"
>
OpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78515 "isa_arm32.tcc"
>::OpStrh_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78519 "isa_arm32.tcc"
>(code, addr, "strh_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78533 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78536 "isa_arm32.tcc"
>
OpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78541 "isa_arm32.tcc"
>::OpStrh_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78545 "isa_arm32.tcc"
>(code, addr, "strh_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78559 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78562 "isa_arm32.tcc"
>
OpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78567 "isa_arm32.tcc"
>::OpLdrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78571 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78585 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78588 "isa_arm32.tcc"
>
OpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78593 "isa_arm32.tcc"
>::OpLdrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78597 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78611 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78614 "isa_arm32.tcc"
>
OpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78619 "isa_arm32.tcc"
>::OpLdrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78623 "isa_arm32.tcc"
>(code, addr, "ldrd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78637 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78640 "isa_arm32.tcc"
>
OpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78645 "isa_arm32.tcc"
>::OpLdrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78649 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78663 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78666 "isa_arm32.tcc"
>
OpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78671 "isa_arm32.tcc"
>::OpLdrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78675 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78689 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78692 "isa_arm32.tcc"
>
OpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78697 "isa_arm32.tcc"
>::OpLdrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78701 "isa_arm32.tcc"
>(code, addr, "ldrd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78715 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78718 "isa_arm32.tcc"
>
OpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78723 "isa_arm32.tcc"
>::OpStrd_imm_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78727 "isa_arm32.tcc"
>(code, addr, "strd_imm_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78741 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78744 "isa_arm32.tcc"
>
OpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78749 "isa_arm32.tcc"
>::OpStrd_imm_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78753 "isa_arm32.tcc"
>(code, addr, "strd_imm_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78767 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78770 "isa_arm32.tcc"
>
OpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78775 "isa_arm32.tcc"
>::OpStrd_imm_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78779 "isa_arm32.tcc"
>(code, addr, "strd_imm_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	immedH = ((code >> 8) & 0xf);
	immedL = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78793 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78796 "isa_arm32.tcc"
>
OpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78801 "isa_arm32.tcc"
>::OpStrd_reg_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78805 "isa_arm32.tcc"
>(code, addr, "strd_reg_post")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78819 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78822 "isa_arm32.tcc"
>
OpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78827 "isa_arm32.tcc"
>::OpStrd_reg_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78831 "isa_arm32.tcc"
>(code, addr, "strd_reg_offset")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78845 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78848 "isa_arm32.tcc"
>
OpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78853 "isa_arm32.tcc"
>::OpStrd_reg_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78857 "isa_arm32.tcc"
>(code, addr, "strd_reg_pre")
{
	cond = ((code >> 28) & 0xf);
	u = ((code >> 23) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbz = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78871 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78874 "isa_arm32.tcc"
>
OpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78879 "isa_arm32.tcc"
>::OpLdm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78883 "isa_arm32.tcc"
>(code, addr, "ldm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78895 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78898 "isa_arm32.tcc"
>
OpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78903 "isa_arm32.tcc"
>::OpLdm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78907 "isa_arm32.tcc"
>(code, addr, "ldm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78919 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78922 "isa_arm32.tcc"
>
OpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78927 "isa_arm32.tcc"
>::OpLdm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78931 "isa_arm32.tcc"
>(code, addr, "ldm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78943 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78946 "isa_arm32.tcc"
>
OpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78951 "isa_arm32.tcc"
>::OpLdm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78955 "isa_arm32.tcc"
>(code, addr, "ldm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78967 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78970 "isa_arm32.tcc"
>
OpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78975 "isa_arm32.tcc"
>::OpLdm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78979 "isa_arm32.tcc"
>(code, addr, "ldm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 78990 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78993 "isa_arm32.tcc"
>
OpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 78998 "isa_arm32.tcc"
>::OpLdm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79002 "isa_arm32.tcc"
>(code, addr, "ldm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79013 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79016 "isa_arm32.tcc"
>
OpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79021 "isa_arm32.tcc"
>::OpLdm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79025 "isa_arm32.tcc"
>(code, addr, "ldm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79036 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79039 "isa_arm32.tcc"
>
OpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79044 "isa_arm32.tcc"
>::OpLdm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79048 "isa_arm32.tcc"
>(code, addr, "ldm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79059 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79062 "isa_arm32.tcc"
>
OpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79067 "isa_arm32.tcc"
>::OpLdm_3_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79071 "isa_arm32.tcc"
>(code, addr, "ldm_3_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79083 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79086 "isa_arm32.tcc"
>
OpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79091 "isa_arm32.tcc"
>::OpLdm_3_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79095 "isa_arm32.tcc"
>(code, addr, "ldm_3_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79107 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79110 "isa_arm32.tcc"
>
OpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79115 "isa_arm32.tcc"
>::OpLdm_3_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79119 "isa_arm32.tcc"
>(code, addr, "ldm_3_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79131 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79134 "isa_arm32.tcc"
>
OpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79139 "isa_arm32.tcc"
>::OpLdm_3_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79143 "isa_arm32.tcc"
>(code, addr, "ldm_3_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0x7fff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79155 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79158 "isa_arm32.tcc"
>
OpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79163 "isa_arm32.tcc"
>::OpStm_1_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79167 "isa_arm32.tcc"
>(code, addr, "stm_1_ia")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79179 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79182 "isa_arm32.tcc"
>
OpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79187 "isa_arm32.tcc"
>::OpStm_1_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79191 "isa_arm32.tcc"
>(code, addr, "stm_1_ib")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79203 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79206 "isa_arm32.tcc"
>
OpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79211 "isa_arm32.tcc"
>::OpStm_1_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79215 "isa_arm32.tcc"
>(code, addr, "stm_1_da")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79227 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79230 "isa_arm32.tcc"
>
OpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79235 "isa_arm32.tcc"
>::OpStm_1_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79239 "isa_arm32.tcc"
>(code, addr, "stm_1_db")
{
	cond = ((code >> 28) & 0xf);
	w = ((code >> 21) & 0x1);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79251 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79254 "isa_arm32.tcc"
>
OpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79259 "isa_arm32.tcc"
>::OpStm_2_ia(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79263 "isa_arm32.tcc"
>(code, addr, "stm_2_ia")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79274 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79277 "isa_arm32.tcc"
>
OpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79282 "isa_arm32.tcc"
>::OpStm_2_ib(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79286 "isa_arm32.tcc"
>(code, addr, "stm_2_ib")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79297 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79300 "isa_arm32.tcc"
>
OpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79305 "isa_arm32.tcc"
>::OpStm_2_da(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79309 "isa_arm32.tcc"
>(code, addr, "stm_2_da")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79320 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79323 "isa_arm32.tcc"
>
OpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79328 "isa_arm32.tcc"
>::OpStm_2_db(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79332 "isa_arm32.tcc"
>(code, addr, "stm_2_db")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	reg_list = ((code >> 0) & 0xffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79343 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79346 "isa_arm32.tcc"
>
OpSwp<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79351 "isa_arm32.tcc"
>::OpSwp(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79355 "isa_arm32.tcc"
>(code, addr, "swp")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79367 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79370 "isa_arm32.tcc"
>
OpSwpb<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79375 "isa_arm32.tcc"
>::OpSwpb(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79379 "isa_arm32.tcc"
>(code, addr, "swpb")
{
	cond = ((code >> 28) & 0xf);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79391 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79394 "isa_arm32.tcc"
>
OpSwi<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79399 "isa_arm32.tcc"
>::OpSwi(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79403 "isa_arm32.tcc"
>(code, addr, "swi")
{
	cond = ((code >> 28) & 0xf);
	immed = ((code >> 0) & 0xffffff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79413 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79416 "isa_arm32.tcc"
>
OpBkpt<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79421 "isa_arm32.tcc"
>::OpBkpt(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79425 "isa_arm32.tcc"
>(code, addr, "bkpt")
{
	himmed = ((code >> 8) & 0xfff);
	limmed = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79435 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79438 "isa_arm32.tcc"
>
OpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79443 "isa_arm32.tcc"
>::OpCdp_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79447 "isa_arm32.tcc"
>(code, addr, "cdp_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79462 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79465 "isa_arm32.tcc"
>
OpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79470 "isa_arm32.tcc"
>::OpCdp_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79474 "isa_arm32.tcc"
>(code, addr, "cdp_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79489 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79492 "isa_arm32.tcc"
>
OpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79497 "isa_arm32.tcc"
>::OpCdp_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79501 "isa_arm32.tcc"
>(code, addr, "cdp_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79516 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79519 "isa_arm32.tcc"
>
OpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79524 "isa_arm32.tcc"
>::OpCdp_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79528 "isa_arm32.tcc"
>(code, addr, "cdp_1110")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79542 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79545 "isa_arm32.tcc"
>
OpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79550 "isa_arm32.tcc"
>::OpLdc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79554 "isa_arm32.tcc"
>(code, addr, "ldc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79569 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79572 "isa_arm32.tcc"
>
OpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79577 "isa_arm32.tcc"
>::OpLdc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79581 "isa_arm32.tcc"
>(code, addr, "ldc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79596 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79599 "isa_arm32.tcc"
>
OpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79604 "isa_arm32.tcc"
>::OpLdc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79608 "isa_arm32.tcc"
>(code, addr, "ldc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79623 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79626 "isa_arm32.tcc"
>
OpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79631 "isa_arm32.tcc"
>::OpLdc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79635 "isa_arm32.tcc"
>(code, addr, "ldc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79649 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79652 "isa_arm32.tcc"
>
OpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79657 "isa_arm32.tcc"
>::OpLdc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79661 "isa_arm32.tcc"
>(code, addr, "ldc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79676 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79679 "isa_arm32.tcc"
>
OpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79684 "isa_arm32.tcc"
>::OpLdc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79688 "isa_arm32.tcc"
>(code, addr, "ldc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79703 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79706 "isa_arm32.tcc"
>
OpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79711 "isa_arm32.tcc"
>::OpLdc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79715 "isa_arm32.tcc"
>(code, addr, "ldc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79730 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79733 "isa_arm32.tcc"
>
OpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79738 "isa_arm32.tcc"
>::OpLdc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79742 "isa_arm32.tcc"
>(code, addr, "ldc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79756 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79759 "isa_arm32.tcc"
>
OpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79764 "isa_arm32.tcc"
>::OpLdc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79768 "isa_arm32.tcc"
>(code, addr, "ldc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79783 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79786 "isa_arm32.tcc"
>
OpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79791 "isa_arm32.tcc"
>::OpLdc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79795 "isa_arm32.tcc"
>(code, addr, "ldc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79810 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79813 "isa_arm32.tcc"
>
OpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79818 "isa_arm32.tcc"
>::OpLdc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79822 "isa_arm32.tcc"
>(code, addr, "ldc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79837 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79840 "isa_arm32.tcc"
>
OpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79845 "isa_arm32.tcc"
>::OpLdc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79849 "isa_arm32.tcc"
>(code, addr, "ldc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79863 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79866 "isa_arm32.tcc"
>
OpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79871 "isa_arm32.tcc"
>::OpLdc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79875 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79889 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79892 "isa_arm32.tcc"
>
OpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79897 "isa_arm32.tcc"
>::OpLdc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79901 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79915 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79918 "isa_arm32.tcc"
>
OpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79923 "isa_arm32.tcc"
>::OpLdc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79927 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79941 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79944 "isa_arm32.tcc"
>
OpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79949 "isa_arm32.tcc"
>::OpLdc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79953 "isa_arm32.tcc"
>(code, addr, "ldc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79966 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79969 "isa_arm32.tcc"
>
OpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79974 "isa_arm32.tcc"
>::OpMcr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79978 "isa_arm32.tcc"
>(code, addr, "mcr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 79993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 79996 "isa_arm32.tcc"
>
OpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80001 "isa_arm32.tcc"
>::OpMcr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80005 "isa_arm32.tcc"
>(code, addr, "mcr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80020 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80023 "isa_arm32.tcc"
>
OpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80028 "isa_arm32.tcc"
>::OpMcr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80032 "isa_arm32.tcc"
>(code, addr, "mcr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80047 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80050 "isa_arm32.tcc"
>
OpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80055 "isa_arm32.tcc"
>::OpMcr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80059 "isa_arm32.tcc"
>(code, addr, "mcr_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80073 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80076 "isa_arm32.tcc"
>
OpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80081 "isa_arm32.tcc"
>::OpMrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80085 "isa_arm32.tcc"
>(code, addr, "mrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80100 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80103 "isa_arm32.tcc"
>
OpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80108 "isa_arm32.tcc"
>::OpMrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80112 "isa_arm32.tcc"
>(code, addr, "mrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80127 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80130 "isa_arm32.tcc"
>
OpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80135 "isa_arm32.tcc"
>::OpMrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80139 "isa_arm32.tcc"
>(code, addr, "mrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80154 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80157 "isa_arm32.tcc"
>
OpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80162 "isa_arm32.tcc"
>::OpMrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80166 "isa_arm32.tcc"
>(code, addr, "mrc_1110")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80180 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80183 "isa_arm32.tcc"
>
OpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80188 "isa_arm32.tcc"
>::OpStc_offset_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80192 "isa_arm32.tcc"
>(code, addr, "stc_offset_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80207 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80210 "isa_arm32.tcc"
>
OpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80215 "isa_arm32.tcc"
>::OpStc_offset_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80219 "isa_arm32.tcc"
>(code, addr, "stc_offset_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80234 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80237 "isa_arm32.tcc"
>
OpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80242 "isa_arm32.tcc"
>::OpStc_offset_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80246 "isa_arm32.tcc"
>(code, addr, "stc_offset_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80261 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80264 "isa_arm32.tcc"
>
OpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80269 "isa_arm32.tcc"
>::OpStc_offset_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80273 "isa_arm32.tcc"
>(code, addr, "stc_offset_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80287 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80290 "isa_arm32.tcc"
>
OpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80295 "isa_arm32.tcc"
>::OpStc_pre_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80299 "isa_arm32.tcc"
>(code, addr, "stc_pre_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80314 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80317 "isa_arm32.tcc"
>
OpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80322 "isa_arm32.tcc"
>::OpStc_pre_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80326 "isa_arm32.tcc"
>(code, addr, "stc_pre_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80341 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80344 "isa_arm32.tcc"
>
OpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80349 "isa_arm32.tcc"
>::OpStc_pre_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80353 "isa_arm32.tcc"
>(code, addr, "stc_pre_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80368 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80371 "isa_arm32.tcc"
>
OpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80376 "isa_arm32.tcc"
>::OpStc_pre_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80380 "isa_arm32.tcc"
>(code, addr, "stc_pre_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80394 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80397 "isa_arm32.tcc"
>
OpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80402 "isa_arm32.tcc"
>::OpStc_post_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80406 "isa_arm32.tcc"
>(code, addr, "stc_post_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80421 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80424 "isa_arm32.tcc"
>
OpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80429 "isa_arm32.tcc"
>::OpStc_post_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80433 "isa_arm32.tcc"
>(code, addr, "stc_post_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80448 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80451 "isa_arm32.tcc"
>
OpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80456 "isa_arm32.tcc"
>::OpStc_post_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80460 "isa_arm32.tcc"
>(code, addr, "stc_post_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80475 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80478 "isa_arm32.tcc"
>
OpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80483 "isa_arm32.tcc"
>::OpStc_post_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80487 "isa_arm32.tcc"
>(code, addr, "stc_post_1110")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80501 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80504 "isa_arm32.tcc"
>
OpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80509 "isa_arm32.tcc"
>::OpStc_unindexed_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80513 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80527 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80530 "isa_arm32.tcc"
>
OpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80535 "isa_arm32.tcc"
>::OpStc_unindexed_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80539 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80553 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80556 "isa_arm32.tcc"
>
OpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80561 "isa_arm32.tcc"
>::OpStc_unindexed_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80565 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80579 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80582 "isa_arm32.tcc"
>
OpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80587 "isa_arm32.tcc"
>::OpStc_unindexed_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80591 "isa_arm32.tcc"
>(code, addr, "stc_unindexed_1110")
{
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80604 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80607 "isa_arm32.tcc"
>
OpCdp2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80612 "isa_arm32.tcc"
>::OpCdp2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80616 "isa_arm32.tcc"
>(code, addr, "cdp2")
{
	op1 = ((code >> 20) & 0xf);
	crn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80630 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80633 "isa_arm32.tcc"
>
OpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80638 "isa_arm32.tcc"
>::OpLdc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80642 "isa_arm32.tcc"
>(code, addr, "ldc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80656 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80659 "isa_arm32.tcc"
>
OpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80664 "isa_arm32.tcc"
>::OpLdc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80668 "isa_arm32.tcc"
>(code, addr, "ldc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80682 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80685 "isa_arm32.tcc"
>
OpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80690 "isa_arm32.tcc"
>::OpLdc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80694 "isa_arm32.tcc"
>(code, addr, "ldc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80708 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80711 "isa_arm32.tcc"
>
OpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80716 "isa_arm32.tcc"
>::OpLdc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80720 "isa_arm32.tcc"
>(code, addr, "ldc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80734 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80737 "isa_arm32.tcc"
>
OpMcr2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80742 "isa_arm32.tcc"
>::OpMcr2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80746 "isa_arm32.tcc"
>(code, addr, "mcr2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80760 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80763 "isa_arm32.tcc"
>
OpMrc2<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80768 "isa_arm32.tcc"
>::OpMrc2(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80772 "isa_arm32.tcc"
>(code, addr, "mrc2")
{
	op1 = ((code >> 21) & 0x7);
	crn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op2 = ((code >> 5) & 0x7);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80786 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80789 "isa_arm32.tcc"
>
OpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80794 "isa_arm32.tcc"
>::OpStc2_offset(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80798 "isa_arm32.tcc"
>(code, addr, "stc2_offset")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80812 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80815 "isa_arm32.tcc"
>
OpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80820 "isa_arm32.tcc"
>::OpStc2_pre(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80824 "isa_arm32.tcc"
>(code, addr, "stc2_pre")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80838 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80841 "isa_arm32.tcc"
>
OpStc2_post<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80846 "isa_arm32.tcc"
>::OpStc2_post(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80850 "isa_arm32.tcc"
>(code, addr, "stc2_post")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	offset = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80864 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80867 "isa_arm32.tcc"
>
OpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80872 "isa_arm32.tcc"
>::OpStc2_unindexed(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80876 "isa_arm32.tcc"
>(code, addr, "stc2_unindexed")
{
	u = ((code >> 23) & 0x1);
	n = ((code >> 22) & 0x1);
	rn = ((code >> 16) & 0xf);
	crd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	option = ((code >> 0) & 0xff);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80890 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80893 "isa_arm32.tcc"
>
OpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80898 "isa_arm32.tcc"
>::OpMcrr_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80902 "isa_arm32.tcc"
>(code, addr, "mcrr_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80916 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80919 "isa_arm32.tcc"
>
OpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80924 "isa_arm32.tcc"
>::OpMcrr_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80928 "isa_arm32.tcc"
>(code, addr, "mcrr_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80942 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80945 "isa_arm32.tcc"
>
OpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80950 "isa_arm32.tcc"
>::OpMcrr_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80954 "isa_arm32.tcc"
>(code, addr, "mcrr_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80968 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80971 "isa_arm32.tcc"
>
OpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80976 "isa_arm32.tcc"
>::OpMcrr_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80980 "isa_arm32.tcc"
>(code, addr, "mcrr_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 80993 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 80996 "isa_arm32.tcc"
>
OpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81001 "isa_arm32.tcc"
>::OpMrrc_0xxx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81005 "isa_arm32.tcc"
>(code, addr, "mrrc_0xxx")
{
	sub_cond = ((code >> 28) & 0x7);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81019 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81022 "isa_arm32.tcc"
>
OpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81027 "isa_arm32.tcc"
>::OpMrrc_10xx(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81031 "isa_arm32.tcc"
>(code, addr, "mrrc_10xx")
{
	sub_cond = ((code >> 28) & 0x3);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81045 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81048 "isa_arm32.tcc"
>
OpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81053 "isa_arm32.tcc"
>::OpMrrc_110x(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81057 "isa_arm32.tcc"
>(code, addr, "mrrc_110x")
{
	sub_cond = ((code >> 28) & 0x1);
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81071 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81074 "isa_arm32.tcc"
>
OpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81079 "isa_arm32.tcc"
>::OpMrrc_1110(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81083 "isa_arm32.tcc"
>(code, addr, "mrrc_1110")
{
	rn = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	cp_num = ((code >> 8) & 0xf);
	op1 = ((code >> 4) & 0xf);
	crm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81099 "isa_arm32.tcc"
>
OpClz<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81104 "isa_arm32.tcc"
>::OpClz(CodeType code, typename CONFIG::address_t addr) : Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81108 "isa_arm32.tcc"
>(code, addr, "clz")
{
	cond = ((code >> 28) & 0xf);
	sbo1 = ((code >> 16) & 0xf);
	rd = ((code >> 12) & 0xf);
	sbo2 = ((code >> 8) & 0xf);
	rm = ((code >> 0) & 0xf);
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81121 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81124 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81129 "isa_arm32.tcc"
>::DecodeMapPage(typename CONFIG::address_t key)
{
	this->key = key;
	memset(operation, 0, sizeof(operation));
	next = 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81140 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81143 "isa_arm32.tcc"
>
DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81148 "isa_arm32.tcc"
>::~DecodeMapPage()
{
	unsigned int idx;
	for(idx = 0; idx < NUM_OPERATIONS_PER_PAGE; idx++)
	delete operation[idx];
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81159 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81162 "isa_arm32.tcc"
>
DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81167 "isa_arm32.tcc"
>::DecodeTableEntry(CodeType opcode, CodeType opcode_mask, Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81171 "isa_arm32.tcc"
> *(*decode)(CodeType, typename CONFIG::address_t))
{
	this->opcode = opcode;
	this->opcode_mask = opcode_mask;
	this->decode = decode;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 81182 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81185 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 81190 "isa_arm32.tcc"
>::Decoder()
: is_little_endian( false ), mru_page( 0 )
{
	memset(decode_hash_table, 0, sizeof(decode_hash_table));
	if(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/misc_arithmetic.isa"
	CONFIG::HAS_INSN_ARITH_CLZ
#line 81198 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81202 "isa_arm32.tcc"
	>(0x1600010UL, 0xff000f0UL, DecodeOpClz<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81206 "isa_arm32.tcc"
	>));
	if(
#line 117 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81211 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81215 "isa_arm32.tcc"
	>(0xec500000UL, 0xfff00000UL, DecodeOpMrrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81219 "isa_arm32.tcc"
	>));
	if(
#line 115 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81224 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81228 "isa_arm32.tcc"
	>(0xcc500000UL, 0xeff00000UL, DecodeOpMrrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81232 "isa_arm32.tcc"
	>));
	if(
#line 113 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81237 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81241 "isa_arm32.tcc"
	>(0x8c500000UL, 0xcff00000UL, DecodeOpMrrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81245 "isa_arm32.tcc"
	>));
	if(
#line 111 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81250 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81254 "isa_arm32.tcc"
	>(0xc500000UL, 0x8ff00000UL, DecodeOpMrrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81258 "isa_arm32.tcc"
	>));
	if(
#line 51 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81263 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81267 "isa_arm32.tcc"
	>(0xec400000UL, 0xfff00000UL, DecodeOpMcrr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81271 "isa_arm32.tcc"
	>));
	if(
#line 49 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81276 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81280 "isa_arm32.tcc"
	>(0xcc400000UL, 0xeff00000UL, DecodeOpMcrr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81284 "isa_arm32.tcc"
	>));
	if(
#line 47 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81289 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81293 "isa_arm32.tcc"
	>(0x8c400000UL, 0xcff00000UL, DecodeOpMcrr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81297 "isa_arm32.tcc"
	>));
	if(
#line 45 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor_v5e.isa"
	CONFIG::HAS_COPROCESSOR_V5E
#line 81302 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81306 "isa_arm32.tcc"
	>(0xc400000UL, 0x8ff00000UL, DecodeOpMcrr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81310 "isa_arm32.tcc"
	>));
	if(
#line 932 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81315 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81319 "isa_arm32.tcc"
	>(0xfc000000UL, 0xff300000UL, DecodeOpStc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81323 "isa_arm32.tcc"
	>));
	if(
#line 930 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81328 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81332 "isa_arm32.tcc"
	>(0xfc200000UL, 0xff300000UL, DecodeOpStc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81336 "isa_arm32.tcc"
	>));
	if(
#line 928 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81341 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81345 "isa_arm32.tcc"
	>(0xfd200000UL, 0xff300000UL, DecodeOpStc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81349 "isa_arm32.tcc"
	>));
	if(
#line 926 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_STORES
#line 81354 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81358 "isa_arm32.tcc"
	>(0xfd000000UL, 0xff300000UL, DecodeOpStc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81362 "isa_arm32.tcc"
	>));
	if(
#line 899 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81367 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81371 "isa_arm32.tcc"
	>(0xfe100010UL, 0xff100010UL, DecodeOpMrc2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81375 "isa_arm32.tcc"
	>));
	if(
#line 872 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_MOVES
#line 81380 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81384 "isa_arm32.tcc"
	>(0xfe000010UL, 0xff100010UL, DecodeOpMcr2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81388 "isa_arm32.tcc"
	>));
	if(
#line 764 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81393 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81397 "isa_arm32.tcc"
	>(0xfc100000UL, 0xff300000UL, DecodeOpLdc2_unindexed<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81401 "isa_arm32.tcc"
	>));
	if(
#line 762 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81406 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81410 "isa_arm32.tcc"
	>(0xfc300000UL, 0xff300000UL, DecodeOpLdc2_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81414 "isa_arm32.tcc"
	>));
	if(
#line 760 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81419 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81423 "isa_arm32.tcc"
	>(0xfd300000UL, 0xff300000UL, DecodeOpLdc2_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81427 "isa_arm32.tcc"
	>));
	if(
#line 758 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_LOADS
#line 81432 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81436 "isa_arm32.tcc"
	>(0xfd100000UL, 0xff300000UL, DecodeOpLdc2_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81440 "isa_arm32.tcc"
	>));
	if(
#line 731 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/coprocessor.isa"
	CONFIG::HAS_INSN_COPROCESSOR_ALTER_OPS
#line 81445 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81449 "isa_arm32.tcc"
	>(0xfe000000UL, 0xff000010UL, DecodeOpCdp2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81453 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81458 "isa_arm32.tcc"
	>(0xec800000UL, 0xffb00000UL, DecodeOpStc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81462 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81467 "isa_arm32.tcc"
	>(0xcc800000UL, 0xefb00000UL, DecodeOpStc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81471 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81476 "isa_arm32.tcc"
	>(0x8c800000UL, 0xcfb00000UL, DecodeOpStc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81480 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81485 "isa_arm32.tcc"
	>(0xc800000UL, 0x8fb00000UL, DecodeOpStc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81489 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81494 "isa_arm32.tcc"
	>(0xec200000UL, 0xff300000UL, DecodeOpStc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81498 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81503 "isa_arm32.tcc"
	>(0xcc200000UL, 0xef300000UL, DecodeOpStc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81507 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81512 "isa_arm32.tcc"
	>(0x8c200000UL, 0xcf300000UL, DecodeOpStc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81516 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81521 "isa_arm32.tcc"
	>(0xc200000UL, 0x8f300000UL, DecodeOpStc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81525 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81530 "isa_arm32.tcc"
	>(0xed200000UL, 0xff300000UL, DecodeOpStc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81534 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81539 "isa_arm32.tcc"
	>(0xcd200000UL, 0xef300000UL, DecodeOpStc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81543 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81548 "isa_arm32.tcc"
	>(0x8d200000UL, 0xcf300000UL, DecodeOpStc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81552 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81557 "isa_arm32.tcc"
	>(0xd200000UL, 0x8f300000UL, DecodeOpStc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81561 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81566 "isa_arm32.tcc"
	>(0xed000000UL, 0xff300000UL, DecodeOpStc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81570 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81575 "isa_arm32.tcc"
	>(0xcd000000UL, 0xef300000UL, DecodeOpStc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81579 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81584 "isa_arm32.tcc"
	>(0x8d000000UL, 0xcf300000UL, DecodeOpStc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81588 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81593 "isa_arm32.tcc"
	>(0xd000000UL, 0x8f300000UL, DecodeOpStc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81597 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81602 "isa_arm32.tcc"
	>(0xee100010UL, 0xff100010UL, DecodeOpMrc_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81606 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81611 "isa_arm32.tcc"
	>(0xce100010UL, 0xef100010UL, DecodeOpMrc_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81615 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81620 "isa_arm32.tcc"
	>(0x8e100010UL, 0xcf100010UL, DecodeOpMrc_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81624 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81629 "isa_arm32.tcc"
	>(0xe100010UL, 0x8f100010UL, DecodeOpMrc_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81633 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81638 "isa_arm32.tcc"
	>(0xee000010UL, 0xff100010UL, DecodeOpMcr_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81642 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81647 "isa_arm32.tcc"
	>(0xce000010UL, 0xef100010UL, DecodeOpMcr_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81651 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81656 "isa_arm32.tcc"
	>(0x8e000010UL, 0xcf100010UL, DecodeOpMcr_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81660 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81665 "isa_arm32.tcc"
	>(0xe000010UL, 0x8f100010UL, DecodeOpMcr_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81669 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81674 "isa_arm32.tcc"
	>(0xec900000UL, 0xffb00000UL, DecodeOpLdc_unindexed_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81678 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81683 "isa_arm32.tcc"
	>(0xcc900000UL, 0xefb00000UL, DecodeOpLdc_unindexed_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81687 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81692 "isa_arm32.tcc"
	>(0x8c900000UL, 0xcfb00000UL, DecodeOpLdc_unindexed_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81696 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81701 "isa_arm32.tcc"
	>(0xc900000UL, 0x8fb00000UL, DecodeOpLdc_unindexed_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81705 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81710 "isa_arm32.tcc"
	>(0xec300000UL, 0xff300000UL, DecodeOpLdc_post_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81714 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81719 "isa_arm32.tcc"
	>(0xcc300000UL, 0xef300000UL, DecodeOpLdc_post_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81723 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81728 "isa_arm32.tcc"
	>(0x8c300000UL, 0xcf300000UL, DecodeOpLdc_post_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81732 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81737 "isa_arm32.tcc"
	>(0xc300000UL, 0x8f300000UL, DecodeOpLdc_post_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81741 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81746 "isa_arm32.tcc"
	>(0xed300000UL, 0xff300000UL, DecodeOpLdc_pre_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81750 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81755 "isa_arm32.tcc"
	>(0xcd300000UL, 0xef300000UL, DecodeOpLdc_pre_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81759 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81764 "isa_arm32.tcc"
	>(0x8d300000UL, 0xcf300000UL, DecodeOpLdc_pre_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81768 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81773 "isa_arm32.tcc"
	>(0xd300000UL, 0x8f300000UL, DecodeOpLdc_pre_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81777 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81782 "isa_arm32.tcc"
	>(0xed100000UL, 0xff300000UL, DecodeOpLdc_offset_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81786 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81791 "isa_arm32.tcc"
	>(0xcd100000UL, 0xef300000UL, DecodeOpLdc_offset_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81795 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81800 "isa_arm32.tcc"
	>(0x8d100000UL, 0xcf300000UL, DecodeOpLdc_offset_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81804 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81809 "isa_arm32.tcc"
	>(0xd100000UL, 0x8f300000UL, DecodeOpLdc_offset_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81813 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81818 "isa_arm32.tcc"
	>(0xee000000UL, 0xff000010UL, DecodeOpCdp_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81822 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81827 "isa_arm32.tcc"
	>(0xce000000UL, 0xef000010UL, DecodeOpCdp_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81831 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81836 "isa_arm32.tcc"
	>(0x8e000000UL, 0xcf000010UL, DecodeOpCdp_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81840 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81845 "isa_arm32.tcc"
	>(0xe000000UL, 0x8f000010UL, DecodeOpCdp_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81849 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81854 "isa_arm32.tcc"
	>(0xe1200070UL, 0xfff000f0UL, DecodeOpBkpt<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81858 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81863 "isa_arm32.tcc"
	>(0xf000000UL, 0xf000000UL, DecodeOpSwi<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81867 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81872 "isa_arm32.tcc"
	>(0x1400090UL, 0xff00ff0UL, DecodeOpSwpb<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81876 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81881 "isa_arm32.tcc"
	>(0x1000090UL, 0xff00ff0UL, DecodeOpSwp<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81885 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81890 "isa_arm32.tcc"
	>(0x9400000UL, 0xff00000UL, DecodeOpStm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81894 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81899 "isa_arm32.tcc"
	>(0x8400000UL, 0xff00000UL, DecodeOpStm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81903 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81908 "isa_arm32.tcc"
	>(0x9c00000UL, 0xff00000UL, DecodeOpStm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81912 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81917 "isa_arm32.tcc"
	>(0x8c00000UL, 0xff00000UL, DecodeOpStm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81921 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81926 "isa_arm32.tcc"
	>(0x9000000UL, 0xfd00000UL, DecodeOpStm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81930 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81935 "isa_arm32.tcc"
	>(0x8000000UL, 0xfd00000UL, DecodeOpStm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81939 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81944 "isa_arm32.tcc"
	>(0x9800000UL, 0xfd00000UL, DecodeOpStm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81948 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81953 "isa_arm32.tcc"
	>(0x8800000UL, 0xfd00000UL, DecodeOpStm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81957 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81962 "isa_arm32.tcc"
	>(0x9508000UL, 0xfd08000UL, DecodeOpLdm_3_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81966 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81971 "isa_arm32.tcc"
	>(0x8508000UL, 0xfd08000UL, DecodeOpLdm_3_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81975 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81980 "isa_arm32.tcc"
	>(0x9d08000UL, 0xfd08000UL, DecodeOpLdm_3_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81984 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81989 "isa_arm32.tcc"
	>(0x8d08000UL, 0xfd08000UL, DecodeOpLdm_3_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81993 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 81998 "isa_arm32.tcc"
	>(0x9500000UL, 0xff08000UL, DecodeOpLdm_2_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82002 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82007 "isa_arm32.tcc"
	>(0x8500000UL, 0xff08000UL, DecodeOpLdm_2_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82011 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82016 "isa_arm32.tcc"
	>(0x9d00000UL, 0xff08000UL, DecodeOpLdm_2_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82020 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82025 "isa_arm32.tcc"
	>(0x8d00000UL, 0xff08000UL, DecodeOpLdm_2_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82029 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82034 "isa_arm32.tcc"
	>(0x9100000UL, 0xfd00000UL, DecodeOpLdm_1_db<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82038 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82043 "isa_arm32.tcc"
	>(0x8100000UL, 0xfd00000UL, DecodeOpLdm_1_da<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82047 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82052 "isa_arm32.tcc"
	>(0x9900000UL, 0xfd00000UL, DecodeOpLdm_1_ib<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82056 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82061 "isa_arm32.tcc"
	>(0x8900000UL, 0xfd00000UL, DecodeOpLdm_1_ia<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82065 "isa_arm32.tcc"
	>));
	if(
#line 273 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82070 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82074 "isa_arm32.tcc"
	>(0x12000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82078 "isa_arm32.tcc"
	>));
	if(
#line 271 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82083 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82087 "isa_arm32.tcc"
	>(0x10000f0UL, 0xf7000f0UL, DecodeOpStrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82091 "isa_arm32.tcc"
	>));
	if(
#line 269 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82096 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82100 "isa_arm32.tcc"
	>(0xf0UL, 0xf7000f0UL, DecodeOpStrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82104 "isa_arm32.tcc"
	>));
	if(
#line 267 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82109 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82113 "isa_arm32.tcc"
	>(0x16000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82117 "isa_arm32.tcc"
	>));
	if(
#line 265 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82122 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82126 "isa_arm32.tcc"
	>(0x14000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82130 "isa_arm32.tcc"
	>));
	if(
#line 263 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82135 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82139 "isa_arm32.tcc"
	>(0x4000f0UL, 0xf7000f0UL, DecodeOpStrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82143 "isa_arm32.tcc"
	>));
	if(
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82148 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82152 "isa_arm32.tcc"
	>(0x12000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82156 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82161 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82165 "isa_arm32.tcc"
	>(0x10000d0UL, 0xf7000f0UL, DecodeOpLdrd_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82169 "isa_arm32.tcc"
	>));
	if(
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82174 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82178 "isa_arm32.tcc"
	>(0xd0UL, 0xf7000f0UL, DecodeOpLdrd_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82182 "isa_arm32.tcc"
	>));
	if(
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82187 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82191 "isa_arm32.tcc"
	>(0x16000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82195 "isa_arm32.tcc"
	>));
	if(
#line 48 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82200 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82204 "isa_arm32.tcc"
	>(0x14000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82208 "isa_arm32.tcc"
	>));
	if(
#line 46 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v5e.isa"
	CONFIG::HAS_LOAD_STORE_V5E
#line 82213 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82217 "isa_arm32.tcc"
	>(0x4000d0UL, 0xf7000f0UL, DecodeOpLdrd_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82221 "isa_arm32.tcc"
	>));
	if(
#line 553 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82226 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82230 "isa_arm32.tcc"
	>(0x12000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82234 "isa_arm32.tcc"
	>));
	if(
#line 551 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82239 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82243 "isa_arm32.tcc"
	>(0x10000b0UL, 0xf7000f0UL, DecodeOpStrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82247 "isa_arm32.tcc"
	>));
	if(
#line 549 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82252 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82256 "isa_arm32.tcc"
	>(0xb0UL, 0xf7000f0UL, DecodeOpStrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82260 "isa_arm32.tcc"
	>));
	if(
#line 547 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82265 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82269 "isa_arm32.tcc"
	>(0x16000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82273 "isa_arm32.tcc"
	>));
	if(
#line 545 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82278 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82282 "isa_arm32.tcc"
	>(0x14000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82286 "isa_arm32.tcc"
	>));
	if(
#line 543 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82291 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82295 "isa_arm32.tcc"
	>(0x4000b0UL, 0xf7000f0UL, DecodeOpStrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82299 "isa_arm32.tcc"
	>));
	if(
#line 393 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82304 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82308 "isa_arm32.tcc"
	>(0x13000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82312 "isa_arm32.tcc"
	>));
	if(
#line 391 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82317 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82321 "isa_arm32.tcc"
	>(0x11000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82325 "isa_arm32.tcc"
	>));
	if(
#line 389 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82330 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82334 "isa_arm32.tcc"
	>(0x1000d0UL, 0xf7000f0UL, DecodeOpLdrsb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82338 "isa_arm32.tcc"
	>));
	if(
#line 387 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82343 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82347 "isa_arm32.tcc"
	>(0x17000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82351 "isa_arm32.tcc"
	>));
	if(
#line 385 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82356 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82360 "isa_arm32.tcc"
	>(0x15000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82364 "isa_arm32.tcc"
	>));
	if(
#line 383 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82369 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82373 "isa_arm32.tcc"
	>(0x5000d0UL, 0xf7000f0UL, DecodeOpLdrsb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82377 "isa_arm32.tcc"
	>));
	if(
#line 226 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82382 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82386 "isa_arm32.tcc"
	>(0x13000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82390 "isa_arm32.tcc"
	>));
	if(
#line 224 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82395 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82399 "isa_arm32.tcc"
	>(0x11000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82403 "isa_arm32.tcc"
	>));
	if(
#line 222 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82408 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82412 "isa_arm32.tcc"
	>(0x1000f0UL, 0xf7000f0UL, DecodeOpLdrsh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82416 "isa_arm32.tcc"
	>));
	if(
#line 220 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82421 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82425 "isa_arm32.tcc"
	>(0x17000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82429 "isa_arm32.tcc"
	>));
	if(
#line 218 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82434 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82438 "isa_arm32.tcc"
	>(0x15000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82442 "isa_arm32.tcc"
	>));
	if(
#line 216 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82447 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82451 "isa_arm32.tcc"
	>(0x5000f0UL, 0xf7000f0UL, DecodeOpLdrsh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82455 "isa_arm32.tcc"
	>));
	if(
#line 60 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82460 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82464 "isa_arm32.tcc"
	>(0x13000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82468 "isa_arm32.tcc"
	>));
	if(
#line 58 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82473 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82477 "isa_arm32.tcc"
	>(0x11000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82481 "isa_arm32.tcc"
	>));
	if(
#line 56 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82486 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82490 "isa_arm32.tcc"
	>(0x1000b0UL, 0xf7000f0UL, DecodeOpLdrh_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82494 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82499 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82503 "isa_arm32.tcc"
	>(0x17000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82507 "isa_arm32.tcc"
	>));
	if(
#line 52 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82512 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82516 "isa_arm32.tcc"
	>(0x15000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82520 "isa_arm32.tcc"
	>));
	if(
#line 50 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/load_store_v4.isa"
	CONFIG::HAS_LOAD_STORE_V4
#line 82525 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82529 "isa_arm32.tcc"
	>(0x5000b0UL, 0xf7000f0UL, DecodeOpLdrh_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82533 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82538 "isa_arm32.tcc"
	>(0x6600000UL, 0xf700010UL, DecodeOpStrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82542 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82547 "isa_arm32.tcc"
	>(0x4600000UL, 0xf700000UL, DecodeOpStrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82551 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82556 "isa_arm32.tcc"
	>(0x6200000UL, 0xf700010UL, DecodeOpStrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82560 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82565 "isa_arm32.tcc"
	>(0x4200000UL, 0xf700000UL, DecodeOpStrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82569 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82574 "isa_arm32.tcc"
	>(0x7600000UL, 0xf700010UL, DecodeOpStrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82578 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82583 "isa_arm32.tcc"
	>(0x7400000UL, 0xf700010UL, DecodeOpStrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82587 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82592 "isa_arm32.tcc"
	>(0x6400000UL, 0xf700010UL, DecodeOpStrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82596 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82601 "isa_arm32.tcc"
	>(0x5600000UL, 0xf700000UL, DecodeOpStrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82605 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82610 "isa_arm32.tcc"
	>(0x5400000UL, 0xf700000UL, DecodeOpStrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82614 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82619 "isa_arm32.tcc"
	>(0x4400000UL, 0xf700000UL, DecodeOpStrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82623 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82628 "isa_arm32.tcc"
	>(0x7200000UL, 0xf700010UL, DecodeOpStr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82632 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82637 "isa_arm32.tcc"
	>(0x7000000UL, 0xf700010UL, DecodeOpStr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82641 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82646 "isa_arm32.tcc"
	>(0x6000000UL, 0xf700010UL, DecodeOpStr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82650 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82655 "isa_arm32.tcc"
	>(0x5200000UL, 0xf700000UL, DecodeOpStr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82659 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82664 "isa_arm32.tcc"
	>(0x5000000UL, 0xf700000UL, DecodeOpStr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82668 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82673 "isa_arm32.tcc"
	>(0x4000000UL, 0xf700000UL, DecodeOpStr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82677 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82682 "isa_arm32.tcc"
	>(0x6700000UL, 0xf700010UL, DecodeOpLdrbt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82686 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82691 "isa_arm32.tcc"
	>(0x4700000UL, 0xf700000UL, DecodeOpLdrbt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82695 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82700 "isa_arm32.tcc"
	>(0x6300000UL, 0xf700010UL, DecodeOpLdrt_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82704 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82709 "isa_arm32.tcc"
	>(0x4300000UL, 0xf700000UL, DecodeOpLdrt_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82713 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82718 "isa_arm32.tcc"
	>(0x770f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82722 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82727 "isa_arm32.tcc"
	>(0x750f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82731 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82736 "isa_arm32.tcc"
	>(0x650f000UL, 0xf70f010UL, DecodeOpLdrb_rd15_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82740 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82745 "isa_arm32.tcc"
	>(0x570f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82749 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82754 "isa_arm32.tcc"
	>(0x550f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82758 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82763 "isa_arm32.tcc"
	>(0x450f000UL, 0xf70f000UL, DecodeOpLdrb_rd15_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82767 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82772 "isa_arm32.tcc"
	>(0x7700000UL, 0xf700010UL, DecodeOpLdrb_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82776 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82781 "isa_arm32.tcc"
	>(0x7500000UL, 0xf700010UL, DecodeOpLdrb_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82785 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82790 "isa_arm32.tcc"
	>(0x6500000UL, 0xf700010UL, DecodeOpLdrb_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82794 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82799 "isa_arm32.tcc"
	>(0x5700000UL, 0xf700000UL, DecodeOpLdrb_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82803 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82808 "isa_arm32.tcc"
	>(0x5500000UL, 0xf700000UL, DecodeOpLdrb_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82812 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82817 "isa_arm32.tcc"
	>(0x4500000UL, 0xf700000UL, DecodeOpLdrb_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82821 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82826 "isa_arm32.tcc"
	>(0x7300000UL, 0xf700010UL, DecodeOpLdr_reg_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82830 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82835 "isa_arm32.tcc"
	>(0x7100000UL, 0xf700010UL, DecodeOpLdr_reg_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82839 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82844 "isa_arm32.tcc"
	>(0x6100000UL, 0xf700010UL, DecodeOpLdr_reg_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82848 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82853 "isa_arm32.tcc"
	>(0x5300000UL, 0xf700000UL, DecodeOpLdr_imm_pre<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82857 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82862 "isa_arm32.tcc"
	>(0x5100000UL, 0xf700000UL, DecodeOpLdr_imm_offset<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82866 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82871 "isa_arm32.tcc"
	>(0x4100000UL, 0xf700000UL, DecodeOpLdr_imm_post<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82875 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82880 "isa_arm32.tcc"
	>(0x120f000UL, 0xfb0fff0UL, DecodeOpMsr_reg<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82884 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82889 "isa_arm32.tcc"
	>(0x320f000UL, 0xfb0f000UL, DecodeOpMsr_imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82893 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82898 "isa_arm32.tcc"
	>(0x10f0000UL, 0xfbf0fffUL, DecodeOpMrs<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82902 "isa_arm32.tcc"
	>));
	if(
#line 348 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULWY
#line 82907 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82911 "isa_arm32.tcc"
	>(0x12000a0UL, 0xff000b0UL, DecodeOpSmulwy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82915 "isa_arm32.tcc"
	>));
	if(
#line 281 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULXY
#line 82920 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82924 "isa_arm32.tcc"
	>(0x1600080UL, 0xff00090UL, DecodeOpSmulxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82928 "isa_arm32.tcc"
	>));
	if(
#line 206 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAWY
#line 82933 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82937 "isa_arm32.tcc"
	>(0x1200080UL, 0xff000b0UL, DecodeOpSmlawy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82941 "isa_arm32.tcc"
	>));
	if(
#line 129 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLALXY
#line 82946 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82950 "isa_arm32.tcc"
	>(0x1400080UL, 0xff00090UL, DecodeOpSmlalxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82954 "isa_arm32.tcc"
	>));
	if(
#line 54 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply_v5e.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAXY
#line 82959 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82963 "isa_arm32.tcc"
	>(0x1000080UL, 0xff00090UL, DecodeOpSmlaxy<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82967 "isa_arm32.tcc"
	>));
	if(
#line 291 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMULL
#line 82972 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82976 "isa_arm32.tcc"
	>(0x800090UL, 0xfe000f0UL, DecodeOpUmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82980 "isa_arm32.tcc"
	>));
	if(
#line 239 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_UMLAL
#line 82985 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82989 "isa_arm32.tcc"
	>(0xa00090UL, 0xfe000f0UL, DecodeOpUmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 82993 "isa_arm32.tcc"
	>));
	if(
#line 190 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMULL
#line 82998 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83002 "isa_arm32.tcc"
	>(0xc00090UL, 0xfe000f0UL, DecodeOpSmull<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83006 "isa_arm32.tcc"
	>));
	if(
#line 138 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/multiply.isa"
	CONFIG::HAS_INSN_ARITH_MULT_SMLAL
#line 83011 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83015 "isa_arm32.tcc"
	>(0xe00090UL, 0xfe000f0UL, DecodeOpSmlal<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83019 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83024 "isa_arm32.tcc"
	>(0x90UL, 0xfe000f0UL, DecodeOpMul<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83028 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83033 "isa_arm32.tcc"
	>(0x200090UL, 0xfe000f0UL, DecodeOpMla<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83037 "isa_arm32.tcc"
	>));
	if(
#line 165 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDSUB
#line 83042 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83046 "isa_arm32.tcc"
	>(0x1600050UL, 0xff000f0UL, DecodeOpQdsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83050 "isa_arm32.tcc"
	>));
	if(
#line 127 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QDADD
#line 83055 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83059 "isa_arm32.tcc"
	>(0x1400050UL, 0xff000f0UL, DecodeOpQdadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83063 "isa_arm32.tcc"
	>));
	if(
#line 90 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QSUB
#line 83068 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83072 "isa_arm32.tcc"
	>(0x1200050UL, 0xff000f0UL, DecodeOpQsub<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83076 "isa_arm32.tcc"
	>));
	if(
#line 53 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/data_processing_v5e.isa"
	CONFIG::HAS_INSN_ARITH_QADD
#line 83081 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83085 "isa_arm32.tcc"
	>(0x1000050UL, 0xff000f0UL, DecodeOpQadd<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83089 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83094 "isa_arm32.tcc"
	>(0x1f00010UL, 0xff00090UL, DecodeOpMvns_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83098 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83103 "isa_arm32.tcc"
	>(0x1f00000UL, 0xff00010UL, DecodeOpMvns_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83107 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83112 "isa_arm32.tcc"
	>(0x3f00000UL, 0xff00000UL, DecodeOpMvns_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83116 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83121 "isa_arm32.tcc"
	>(0x1e00010UL, 0xff00090UL, DecodeOpMvn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83125 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83130 "isa_arm32.tcc"
	>(0x1e00000UL, 0xff00010UL, DecodeOpMvn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83134 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83139 "isa_arm32.tcc"
	>(0x3e00000UL, 0xff00000UL, DecodeOpMvn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83143 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83148 "isa_arm32.tcc"
	>(0x1d00010UL, 0xff00090UL, DecodeOpBics_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83152 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83157 "isa_arm32.tcc"
	>(0x1d00000UL, 0xff00010UL, DecodeOpBics_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83161 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83166 "isa_arm32.tcc"
	>(0x3d00000UL, 0xff00000UL, DecodeOpBics_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83170 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83175 "isa_arm32.tcc"
	>(0x1c00010UL, 0xff00090UL, DecodeOpBic_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83179 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83184 "isa_arm32.tcc"
	>(0x1c00000UL, 0xff00010UL, DecodeOpBic_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83188 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83193 "isa_arm32.tcc"
	>(0x3c00000UL, 0xff00000UL, DecodeOpBic_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83197 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83202 "isa_arm32.tcc"
	>(0x1b00010UL, 0xff00090UL, DecodeOpMovs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83206 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83211 "isa_arm32.tcc"
	>(0x1b00000UL, 0xff00010UL, DecodeOpMovs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83215 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83220 "isa_arm32.tcc"
	>(0x3b00000UL, 0xff00000UL, DecodeOpMovs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83224 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83229 "isa_arm32.tcc"
	>(0x1a00010UL, 0xff00090UL, DecodeOpMov_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83233 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83238 "isa_arm32.tcc"
	>(0x1a00000UL, 0xff00010UL, DecodeOpMov_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83242 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83247 "isa_arm32.tcc"
	>(0x3a00000UL, 0xff00000UL, DecodeOpMov_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83251 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83256 "isa_arm32.tcc"
	>(0x1900010UL, 0xff00090UL, DecodeOpOrrs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83260 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83265 "isa_arm32.tcc"
	>(0x1900000UL, 0xff00010UL, DecodeOpOrrs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83269 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83274 "isa_arm32.tcc"
	>(0x3900000UL, 0xff00000UL, DecodeOpOrrs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83278 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83283 "isa_arm32.tcc"
	>(0x1800010UL, 0xff00090UL, DecodeOpOrr_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83287 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83292 "isa_arm32.tcc"
	>(0x1800000UL, 0xff00010UL, DecodeOpOrr_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83296 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83301 "isa_arm32.tcc"
	>(0x3800000UL, 0xff00000UL, DecodeOpOrr_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83305 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83310 "isa_arm32.tcc"
	>(0x1700010UL, 0xff00090UL, DecodeOpCmn_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83314 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83319 "isa_arm32.tcc"
	>(0x1700000UL, 0xff00010UL, DecodeOpCmn_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83323 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83328 "isa_arm32.tcc"
	>(0x3700000UL, 0xff00000UL, DecodeOpCmn_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83332 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83337 "isa_arm32.tcc"
	>(0x1500010UL, 0xff00090UL, DecodeOpCmp_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83341 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83346 "isa_arm32.tcc"
	>(0x1500000UL, 0xff00010UL, DecodeOpCmp_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83350 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83355 "isa_arm32.tcc"
	>(0x3500000UL, 0xff00000UL, DecodeOpCmp_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83359 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83364 "isa_arm32.tcc"
	>(0x1300010UL, 0xff00090UL, DecodeOpTeq_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83368 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83373 "isa_arm32.tcc"
	>(0x1300000UL, 0xff00010UL, DecodeOpTeq_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83377 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83382 "isa_arm32.tcc"
	>(0x3300000UL, 0xff00000UL, DecodeOpTeq_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83386 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83391 "isa_arm32.tcc"
	>(0x1100010UL, 0xff00090UL, DecodeOpTst_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83395 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83400 "isa_arm32.tcc"
	>(0x1100000UL, 0xff00010UL, DecodeOpTst_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83404 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83409 "isa_arm32.tcc"
	>(0x3100000UL, 0xff00000UL, DecodeOpTst_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83413 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83418 "isa_arm32.tcc"
	>(0xf00010UL, 0xff00090UL, DecodeOpRscs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83422 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83427 "isa_arm32.tcc"
	>(0xf00000UL, 0xff00010UL, DecodeOpRscs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83431 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83436 "isa_arm32.tcc"
	>(0x2f00000UL, 0xff00000UL, DecodeOpRscs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83440 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83445 "isa_arm32.tcc"
	>(0xe00010UL, 0xff00090UL, DecodeOpRsc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83449 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83454 "isa_arm32.tcc"
	>(0xe00000UL, 0xff00010UL, DecodeOpRsc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83458 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83463 "isa_arm32.tcc"
	>(0x2e00000UL, 0xff00000UL, DecodeOpRsc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83467 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83472 "isa_arm32.tcc"
	>(0xd00010UL, 0xff00090UL, DecodeOpSbcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83476 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83481 "isa_arm32.tcc"
	>(0xd00000UL, 0xff00010UL, DecodeOpSbcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83485 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83490 "isa_arm32.tcc"
	>(0x2d00000UL, 0xff00000UL, DecodeOpSbcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83494 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83499 "isa_arm32.tcc"
	>(0xc00010UL, 0xff00090UL, DecodeOpSbc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83503 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83508 "isa_arm32.tcc"
	>(0xc00000UL, 0xff00010UL, DecodeOpSbc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83512 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83517 "isa_arm32.tcc"
	>(0x2c00000UL, 0xff00000UL, DecodeOpSbc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83521 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83526 "isa_arm32.tcc"
	>(0xb00010UL, 0xff00090UL, DecodeOpAdcs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83530 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83535 "isa_arm32.tcc"
	>(0xb00000UL, 0xff00010UL, DecodeOpAdcs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83539 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83544 "isa_arm32.tcc"
	>(0x2b00000UL, 0xff00000UL, DecodeOpAdcs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83548 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83553 "isa_arm32.tcc"
	>(0xa00010UL, 0xff00090UL, DecodeOpAdc_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83557 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83562 "isa_arm32.tcc"
	>(0xa00000UL, 0xff00010UL, DecodeOpAdc_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83566 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83571 "isa_arm32.tcc"
	>(0x2a00000UL, 0xff00000UL, DecodeOpAdc_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83575 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83580 "isa_arm32.tcc"
	>(0x900010UL, 0xff00090UL, DecodeOpAdds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83584 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83589 "isa_arm32.tcc"
	>(0x900000UL, 0xff00010UL, DecodeOpAdds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83593 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83598 "isa_arm32.tcc"
	>(0x2900000UL, 0xff00000UL, DecodeOpAdds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83602 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83607 "isa_arm32.tcc"
	>(0x800010UL, 0xff00090UL, DecodeOpAdd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83611 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83616 "isa_arm32.tcc"
	>(0x800000UL, 0xff00010UL, DecodeOpAdd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83620 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83625 "isa_arm32.tcc"
	>(0x2800000UL, 0xff00000UL, DecodeOpAdd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83629 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83634 "isa_arm32.tcc"
	>(0x700010UL, 0xff00090UL, DecodeOpRsbs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83638 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83643 "isa_arm32.tcc"
	>(0x700000UL, 0xff00010UL, DecodeOpRsbs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83647 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83652 "isa_arm32.tcc"
	>(0x2700000UL, 0xff00000UL, DecodeOpRsbs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83656 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83661 "isa_arm32.tcc"
	>(0x600010UL, 0xff00090UL, DecodeOpRsb_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83665 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83670 "isa_arm32.tcc"
	>(0x600000UL, 0xff00010UL, DecodeOpRsb_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83674 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83679 "isa_arm32.tcc"
	>(0x2600000UL, 0xff00000UL, DecodeOpRsb_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83683 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83688 "isa_arm32.tcc"
	>(0x500010UL, 0xff00090UL, DecodeOpSubs_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83692 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83697 "isa_arm32.tcc"
	>(0x500000UL, 0xff00010UL, DecodeOpSubs_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83701 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83706 "isa_arm32.tcc"
	>(0x2500000UL, 0xff00000UL, DecodeOpSubs_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83710 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83715 "isa_arm32.tcc"
	>(0x400010UL, 0xff00090UL, DecodeOpSub_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83719 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83724 "isa_arm32.tcc"
	>(0x400000UL, 0xff00010UL, DecodeOpSub_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83728 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83733 "isa_arm32.tcc"
	>(0x2400000UL, 0xff00000UL, DecodeOpSub_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83737 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83742 "isa_arm32.tcc"
	>(0x300010UL, 0xff00090UL, DecodeOpEors_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83746 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83751 "isa_arm32.tcc"
	>(0x300000UL, 0xff00010UL, DecodeOpEors_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83755 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83760 "isa_arm32.tcc"
	>(0x2300000UL, 0xff00000UL, DecodeOpEors_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83764 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83769 "isa_arm32.tcc"
	>(0x200010UL, 0xff00090UL, DecodeOpEor_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83773 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83778 "isa_arm32.tcc"
	>(0x200000UL, 0xff00010UL, DecodeOpEor_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83782 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83787 "isa_arm32.tcc"
	>(0x2200000UL, 0xff00000UL, DecodeOpEor_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83791 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83796 "isa_arm32.tcc"
	>(0x100010UL, 0xff00090UL, DecodeOpAnds_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83800 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83805 "isa_arm32.tcc"
	>(0x100000UL, 0xff00010UL, DecodeOpAnds_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83809 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83814 "isa_arm32.tcc"
	>(0x2100000UL, 0xff00000UL, DecodeOpAnds_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83818 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83823 "isa_arm32.tcc"
	>(0x10UL, 0xff00090UL, DecodeOpAnd_reg_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83827 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83832 "isa_arm32.tcc"
	>(0x0UL, 0xff00010UL, DecodeOpAnd_imm_shift<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83836 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83841 "isa_arm32.tcc"
	>(0x2000000UL, 0xff00000UL, DecodeOpAnd_32imm<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83845 "isa_arm32.tcc"
	>));
	if(
#line 259 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83850 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83854 "isa_arm32.tcc"
	>(0x1200030UL, 0xff000f0UL, DecodeOpBlx_2<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83858 "isa_arm32.tcc"
	>));
	if(
#line 227 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BLX
#line 83863 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83867 "isa_arm32.tcc"
	>(0xfa000000UL, 0xfe000000UL, DecodeOpBlx_1<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83871 "isa_arm32.tcc"
	>));
	if(
#line 180 "/local/home/gmouchard/unisim/svn/devel/unisim_lib/unisim/component/cxx/processor/arm/isa/arm32/branch.isa"
	CONFIG::HAS_INSN_BX
#line 83876 "isa_arm32.tcc"
	) decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83880 "isa_arm32.tcc"
	>(0x1200010UL, 0xff000f0UL, DecodeOpBx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83884 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83889 "isa_arm32.tcc"
	>(0xeb000000UL, 0xff000000UL, DecodeOpBl_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83893 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83898 "isa_arm32.tcc"
	>(0xcb000000UL, 0xef000000UL, DecodeOpBl_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83902 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83907 "isa_arm32.tcc"
	>(0x8b000000UL, 0xcf000000UL, DecodeOpBl_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83911 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83916 "isa_arm32.tcc"
	>(0xb000000UL, 0x8f000000UL, DecodeOpBl_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83920 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83925 "isa_arm32.tcc"
	>(0xea000000UL, 0xff000000UL, DecodeOpB_1110<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83929 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83934 "isa_arm32.tcc"
	>(0xca000000UL, 0xef000000UL, DecodeOpB_110x<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83938 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83943 "isa_arm32.tcc"
	>(0x8a000000UL, 0xcf000000UL, DecodeOpB_10xx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83947 "isa_arm32.tcc"
	>));
	decode_table.push_back(DecodeTableEntry<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83952 "isa_arm32.tcc"
	>(0xa000000UL, 0x8f000000UL, DecodeOpB_0xxx<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83956 "isa_arm32.tcc"
	>));
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83963 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83966 "isa_arm32.tcc"
>
Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83971 "isa_arm32.tcc"
>::~Decoder()
{
	InvalidateDecodingCache();
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 83980 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83983 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83988 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 83992 "isa_arm32.tcc"
>::NCDecode(typename CONFIG::address_t addr, CodeType code)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 83998 "isa_arm32.tcc"
	> *operation;
	unsigned int count = decode_table.size();
	unsigned int idx;
	for(idx = 0; idx < count; idx++)
	{
		if((code & decode_table[idx].opcode_mask) == decode_table[idx].opcode)
		{
			operation = decode_table[idx].decode(code, addr);
			operation->initialize_dependency_write_reglist();
			operation->initialize_dependency_write_rdlo();
			operation->initialize_dependency_write_rdhi();
			operation->initialize_dependency_write_rd();
			operation->initialize_dependency_write_rn();
			operation->initialize_dependency_read_crn();
			operation->initialize_dependency_read_crm();
			operation->initialize_dependency_read_reglist();
			operation->initialize_dependency_read_rs();
			operation->initialize_dependency_read_rn();
			operation->initialize_dependency_read_rm();
			operation->initialize_rdp1_init();
			operation->initialize_rdlo_init();
			operation->initialize_rdhi_init();
			operation->initialize_rs_init();
			operation->initialize_rd_init();
			operation->initialize_rm_init();
			operation->initialize_rn_init();
			operation->initialize_condition();
			return operation;
		}
	}
	operation = new Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84032 "isa_arm32.tcc"
	>(code, addr, "???");
	operation->initialize_dependency_write_reglist();
	operation->initialize_dependency_write_rdlo();
	operation->initialize_dependency_write_rdhi();
	operation->initialize_dependency_write_rd();
	operation->initialize_dependency_write_rn();
	operation->initialize_dependency_read_crn();
	operation->initialize_dependency_read_crm();
	operation->initialize_dependency_read_reglist();
	operation->initialize_dependency_read_rs();
	operation->initialize_dependency_read_rn();
	operation->initialize_dependency_read_rm();
	operation->initialize_rdp1_init();
	operation->initialize_rdlo_init();
	operation->initialize_rdhi_init();
	operation->initialize_rs_init();
	operation->initialize_rd_init();
	operation->initialize_rm_init();
	operation->initialize_rn_init();
	operation->initialize_condition();
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84059 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84062 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84067 "isa_arm32.tcc"
>::InvalidateDecodingCache()
{
	uint32_t index;
	mru_page = 0;
	for(index = 0; index < NUM_DECODE_HASH_TABLE_ENTRIES; index++)
	{
		DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84077 "isa_arm32.tcc"
		> *page, *next_page;
		page = decode_hash_table[index];
		if(page)
		{
			do
			{
				next_page = page->next;
				delete page;
				page = next_page;
			} while(page);
			decode_hash_table[index] = 0;
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84096 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84099 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84104 "isa_arm32.tcc"
>::InvalidateDecodingCacheEntry(typename CONFIG::address_t addr)
{
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	if(mru_page && mru_page->key == page_key) mru_page = 0;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84113 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			decode_hash_table[index] = cur->next;
			delete cur;
			return;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next = 0;
					delete cur;
					return;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84146 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84149 "isa_arm32.tcc"
>
inline DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84154 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84158 "isa_arm32.tcc"
>::FindPage(typename CONFIG::address_t page_key)
{
	if(mru_page && mru_page->key == page_key) return mru_page;
	uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84166 "isa_arm32.tcc"
	> *prev, *cur;
	cur = decode_hash_table[index];
	if(cur)
	{
		if(cur->key == page_key)
		{
			mru_page = cur;
			return cur;
		}
		prev = cur;
		cur = cur->next;
		if(cur)
		{
			do
			{
				if(cur->key == page_key)
				{
					prev->next = cur->next;
					cur->next= decode_hash_table[index];
					decode_hash_table[index] = cur;
					mru_page = cur;
					return cur;
				}
				prev = cur;
			} while((cur = cur->next) != 0);
		}
	}
	return 0;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84200 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84203 "isa_arm32.tcc"
>
Operation<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84208 "isa_arm32.tcc"
> *Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84212 "isa_arm32.tcc"
>::Decode(typename CONFIG::address_t addr, CodeType insn)
{
	Operation<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84218 "isa_arm32.tcc"
	> *operation;
	typename CONFIG::address_t page_key = addr / 4 / NUM_OPERATIONS_PER_PAGE;
	DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
	CONFIG
#line 84224 "isa_arm32.tcc"
	> *page;
	page = FindPage(page_key);
	if(!page)
	{
		page = new DecodeMapPage<
#line 44 "isa/arm32/arm32.isa"
		CONFIG
#line 84232 "isa_arm32.tcc"
		> (page_key);
		uint32_t index = page_key % NUM_DECODE_HASH_TABLE_ENTRIES; // hash the key
		page->next = decode_hash_table[index];
		decode_hash_table[index] = page;
		mru_page = page;
	}
	operation = page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)];
	if(operation)
	{
		if(operation->GetEncoding() == insn && operation->GetAddr() == addr)
		return operation;
		delete operation;
	}
	operation = NCDecode(addr, insn);
	page->operation[(addr / 4) & (NUM_OPERATIONS_PER_PAGE - 1)] = operation;
	return operation;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84254 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84257 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84262 "isa_arm32.tcc"
>::SetLittleEndian()
{
	is_little_endian = true;
}

template <
#line 44 "isa/arm32/arm32.isa"
class
#line 84271 "isa_arm32.tcc"
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84274 "isa_arm32.tcc"
>
void Decoder<
#line 44 "isa/arm32/arm32.isa"
CONFIG
#line 84279 "isa_arm32.tcc"
>::SetBigEndian()
{
	is_little_endian = false;
}

} } } } } } }
